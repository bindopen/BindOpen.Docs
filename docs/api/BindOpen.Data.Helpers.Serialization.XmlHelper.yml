### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  id: XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  children:
  - BindOpen.Data.Helpers.Serialization.XmlHelper.Load``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet,System.Boolean,System.Boolean)
  - BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet)
  - BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet(System.Xml.Schema.XmlSchemaSet,System.Reflection.Assembly,System.Collections.Generic.List{System.String})
  - BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  langs:
  - csharp
  - vb
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: XmlHelper
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
    startLine: 20
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nThis class represents a Xml helper.\n"
  example: []
  syntax:
    content: public static class XmlHelper
    content.vb: Public Module XmlHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  id: ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  langs:
  - csharp
  - vb
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ToXml
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
    startLine: 36
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nSaves the xml string of this instance.\n"
  example: []
  syntax:
    content: public static string ToXml(this object object1, IBdoLog log = null)
    parameters:
    - id: object1
      type: System.Object
      description: The object1 to save.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The saving log to consider.
    return:
      type: System.String
      description: The Xml string of this instance.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToXml(object1 As Object, log As IBdoLog = Nothing) As String
  overload: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  id: SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  langs:
  - csharp
  - vb
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SaveXml
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
    startLine: 74
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nSaves this instance to the specified file path.\n"
  example: []
  syntax:
    content: public static bool SaveXml(this object object1, string filePath, IBdoLog log = null)
    parameters:
    - id: object1
      type: System.Object
      description: The object1 to save.
    - id: filePath
      type: System.String
      description: Path of the file to save.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.Boolean
      description: True if the saving operation has been done. False otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveXml(object1 As Object, filePath As String, log As IBdoLog = Nothing) As Boolean
  overload: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.Load``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet,System.Boolean,System.Boolean)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.Load``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet,System.Boolean,System.Boolean)
  id: Load``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet,System.Boolean,System.Boolean)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  langs:
  - csharp
  - vb
  name: Load<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet, Boolean, Boolean)
  nameWithType: XmlHelper.Load<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet, Boolean, Boolean)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.Load<T>(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog, System.Xml.Schema.XmlSchemaSet, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Load
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
    startLine: 135
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nLoads a data item from the specified file path.\n"
  remarks: If the XML schema set is null then the schema is not checked.
  example: []
  syntax:
    content: >-
      public static T Load<T>(string filePath, IBdoScope scope = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null, XmlSchemaSet xmlSchemaSet = null, bool mustFileExist = true, bool isRuntimeUpdated = true)
          where T : class, IDataItem
    parameters:
    - id: filePath
      type: System.String
      description: The path of the Xml file to load.
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The set of script variables to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The output log of the method.
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set to consider for checking.
    - id: mustFileExist
      type: System.Boolean
      description: Indicates whether the file must exist.
    - id: isRuntimeUpdated
      type: System.Boolean
      description: Indicates whether it is updated in runtime.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The loaded log.
    content.vb: Public Shared Function Load(Of T As {Class, IDataItem})(filePath As String, scope As IBdoScope = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing, xmlSchemaSet As XmlSchemaSet = Nothing, mustFileExist As Boolean = True, isRuntimeUpdated As Boolean = True) As T
  overload: BindOpen.Data.Helpers.Serialization.XmlHelper.Load*
  nameWithType.vb: XmlHelper.Load(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet, Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Helpers.Serialization.XmlHelper.Load(Of T)(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog, System.Xml.Schema.XmlSchemaSet, System.Boolean, System.Boolean)
  name.vb: Load(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet, Boolean, Boolean)
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet)
  id: LoadFromString``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  langs:
  - csharp
  - vb
  name: LoadFromString<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet)
  nameWithType: XmlHelper.LoadFromString<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString<T>(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog, System.Xml.Schema.XmlSchemaSet)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: LoadFromString
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
    startLine: 202
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nLoads the data item from the specified file path.\n"
  remarks: If the XML schema set is null then the schema is not checked.
  example: []
  syntax:
    content: >-
      public static T LoadFromString<T>(string xmlString, IBdoScope scope = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null, XmlSchemaSet xmlSchemaSet = null)
          where T : DataItem
    parameters:
    - id: xmlString
      type: System.String
      description: The Xml string to load.
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The set of script variables to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The output log of the load method.
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set to consider for checking.
    typeParameters:
    - id: T
      description: The data item class to consider.
    return:
      type: '{T}'
      description: The loaded log.
    content.vb: Public Shared Function LoadFromString(Of T As DataItem)(xmlString As String, scope As IBdoScope = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing, xmlSchemaSet As XmlSchemaSet = Nothing) As T
  overload: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString*
  nameWithType.vb: XmlHelper.LoadFromString(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString(Of T)(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog, System.Xml.Schema.XmlSchemaSet)
  name.vb: LoadFromString(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet)
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet(System.Xml.Schema.XmlSchemaSet,System.Reflection.Assembly,System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet(System.Xml.Schema.XmlSchemaSet,System.Reflection.Assembly,System.Collections.Generic.List{System.String})
  id: LoadXmlSchemaSet(System.Xml.Schema.XmlSchemaSet,System.Reflection.Assembly,System.Collections.Generic.List{System.String})
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  langs:
  - csharp
  - vb
  name: LoadXmlSchemaSet(XmlSchemaSet, Assembly, List<String>)
  nameWithType: XmlHelper.LoadXmlSchemaSet(XmlSchemaSet, Assembly, List<String>)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet(System.Xml.Schema.XmlSchemaSet, System.Reflection.Assembly, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: LoadXmlSchemaSet
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/XmlHelper.cs
    startLine: 260
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nLoads the specified XML schema set.\n"
  example: []
  syntax:
    content: public static XmlSchemaSet LoadXmlSchemaSet(XmlSchemaSet xmlSchemaSet, Assembly assembly, List<string> xsdResources)
    parameters:
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set to consider.
    - id: assembly
      type: System.Reflection.Assembly
      description: The assembly to consider.
    - id: xsdResources
      type: System.Collections.Generic.List{System.String}
      description: The XSD resources to consider.
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set.
    content.vb: Public Shared Function LoadXmlSchemaSet(xmlSchemaSet As XmlSchemaSet, assembly As Assembly, xsdResources As List(Of String)) As XmlSchemaSet
  overload: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet*
  nameWithType.vb: XmlHelper.LoadXmlSchemaSet(XmlSchemaSet, Assembly, List(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet(System.Xml.Schema.XmlSchemaSet, System.Reflection.Assembly, System.Collections.Generic.List(Of System.String))
  name.vb: LoadXmlSchemaSet(XmlSchemaSet, Assembly, List(Of String))
references:
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml*
  commentId: Overload:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  name: ToXml
  nameWithType: XmlHelper.ToXml
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml*
  commentId: Overload:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  name: SaveXml
  nameWithType: XmlHelper.SaveXml
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.Load*
  commentId: Overload:BindOpen.Data.Helpers.Serialization.XmlHelper.Load
  name: Load
  nameWithType: XmlHelper.Load
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.Load
- uid: BindOpen.Application.Scopes.IBdoScope
  commentId: T:BindOpen.Application.Scopes.IBdoScope
  parent: BindOpen.Application.Scopes
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  commentId: T:BindOpen.System.Scripting.IBdoScriptVariableSet
  parent: BindOpen.System.Scripting
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: BindOpen.System.Scripting
  commentId: N:BindOpen.System.Scripting
  name: BindOpen.System.Scripting
  nameWithType: BindOpen.System.Scripting
  fullName: BindOpen.System.Scripting
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString*
  commentId: Overload:BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString
  name: LoadFromString
  nameWithType: XmlHelper.LoadFromString
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadFromString
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet*
  commentId: Overload:BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet
  name: LoadXmlSchemaSet
  nameWithType: XmlHelper.LoadXmlSchemaSet
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.LoadXmlSchemaSet
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
shouldSkipMarkup: true
