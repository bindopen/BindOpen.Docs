### YamlMime:ManagedReference
items:
- uid: BindOpen.Extensions.References.BdoExtensionReferenceExtension
  commentId: T:BindOpen.Extensions.References.BdoExtensionReferenceExtension
  id: BdoExtensionReferenceExtension
  parent: BindOpen.Extensions.References
  children:
  - BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAllAssemblies(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  - BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly(BindOpen.Extensions.References.IBdoExtensionReferenceCollection,System.String,System.String)
  - BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly``1(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  langs:
  - csharp
  - vb
  name: BdoExtensionReferenceExtension
  nameWithType: BdoExtensionReferenceExtension
  fullName: BindOpen.Extensions.References.BdoExtensionReferenceExtension
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Extensions/References/BdoExtensionReferenceCollectionExtension.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: BdoExtensionReferenceExtension
    path: ../src/BindOpen.Core/Extensions/References/BdoExtensionReferenceCollectionExtension.cs
    startLine: 5
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Extensions.References
  summary: "\nThis class represents an extension reference extension.\n"
  example: []
  syntax:
    content: public static class BdoExtensionReferenceExtension
    content.vb: Public Module BdoExtensionReferenceExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly(BindOpen.Extensions.References.IBdoExtensionReferenceCollection,System.String,System.String)
  commentId: M:BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly(BindOpen.Extensions.References.IBdoExtensionReferenceCollection,System.String,System.String)
  id: AddAssembly(BindOpen.Extensions.References.IBdoExtensionReferenceCollection,System.String,System.String)
  isExtensionMethod: true
  parent: BindOpen.Extensions.References.BdoExtensionReferenceExtension
  langs:
  - csharp
  - vb
  name: AddAssembly(IBdoExtensionReferenceCollection, String, String)
  nameWithType: BdoExtensionReferenceExtension.AddAssembly(IBdoExtensionReferenceCollection, String, String)
  fullName: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly(BindOpen.Extensions.References.IBdoExtensionReferenceCollection, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Extensions/References/BdoExtensionReferenceCollectionExtension.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddAssembly
    path: ../src/BindOpen.Core/Extensions/References/BdoExtensionReferenceCollectionExtension.cs
    startLine: 14
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Extensions.References
  summary: "\nCreates a assembly reference from the specified extension one.\n"
  example: []
  syntax:
    content: public static IBdoExtensionReference AddAssembly(this IBdoExtensionReferenceCollection references, string name, string version = null)
    parameters:
    - id: references
      type: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
      description: The reference collection to consider.
    - id: name
      type: System.String
      description: The name to consider.
    - id: version
      type: System.String
      description: The version to consider.
    return:
      type: BindOpen.Extensions.References.IBdoExtensionReference
      description: Returns the itemized list of the specified library list.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddAssembly(references As IBdoExtensionReferenceCollection, name As String, version As String = Nothing) As IBdoExtensionReference
  overload: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly``1(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  commentId: M:BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly``1(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  id: AddAssembly``1(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  isExtensionMethod: true
  parent: BindOpen.Extensions.References.BdoExtensionReferenceExtension
  langs:
  - csharp
  - vb
  name: AddAssembly<T>(IBdoExtensionReferenceCollection)
  nameWithType: BdoExtensionReferenceExtension.AddAssembly<T>(IBdoExtensionReferenceCollection)
  fullName: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly<T>(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Extensions/References/BdoExtensionReferenceCollectionExtension.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddAssembly
    path: ../src/BindOpen.Core/Extensions/References/BdoExtensionReferenceCollectionExtension.cs
    startLine: 26
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Extensions.References
  summary: "\nCreates a assembly reference of the spcefied type.\n"
  example: []
  syntax:
    content: public static IBdoExtensionReference AddAssembly<T>(this IBdoExtensionReferenceCollection references)
    parameters:
    - id: references
      type: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
      description: The reference collection to consider.
    typeParameters:
    - id: T
    return:
      type: BindOpen.Extensions.References.IBdoExtensionReference
      description: Returns the itemized list of the spcefied type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddAssembly(Of T)(references As IBdoExtensionReferenceCollection) As IBdoExtensionReference
  overload: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly*
  nameWithType.vb: BdoExtensionReferenceExtension.AddAssembly(Of T)(IBdoExtensionReferenceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly(Of T)(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  name.vb: AddAssembly(Of T)(IBdoExtensionReferenceCollection)
- uid: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAllAssemblies(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  commentId: M:BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAllAssemblies(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  id: AddAllAssemblies(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  isExtensionMethod: true
  parent: BindOpen.Extensions.References.BdoExtensionReferenceExtension
  langs:
  - csharp
  - vb
  name: AddAllAssemblies(IBdoExtensionReferenceCollection)
  nameWithType: BdoExtensionReferenceExtension.AddAllAssemblies(IBdoExtensionReferenceCollection)
  fullName: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAllAssemblies(BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Extensions/References/BdoExtensionReferenceCollectionExtension.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddAllAssemblies
    path: ../src/BindOpen.Core/Extensions/References/BdoExtensionReferenceCollectionExtension.cs
    startLine: 39
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Extensions.References
  summary: "\nCreates a assembly reference that represents all the references.\n"
  example: []
  syntax:
    content: public static IBdoExtensionReference AddAllAssemblies(this IBdoExtensionReferenceCollection references)
    parameters:
    - id: references
      type: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
      description: The reference collection to consider.
    return:
      type: BindOpen.Extensions.References.IBdoExtensionReference
      description: Returns a assembly reference that represents all the references.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddAllAssemblies(references As IBdoExtensionReferenceCollection) As IBdoExtensionReference
  overload: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAllAssemblies*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BindOpen.Extensions.References
  commentId: N:BindOpen.Extensions.References
  name: BindOpen.Extensions.References
  nameWithType: BindOpen.Extensions.References
  fullName: BindOpen.Extensions.References
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly*
  commentId: Overload:BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly
  name: AddAssembly
  nameWithType: BdoExtensionReferenceExtension.AddAssembly
  fullName: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAssembly
- uid: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  commentId: T:BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  parent: BindOpen.Extensions.References
  name: IBdoExtensionReferenceCollection
  nameWithType: IBdoExtensionReferenceCollection
  fullName: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Extensions.References.IBdoExtensionReference
  commentId: T:BindOpen.Extensions.References.IBdoExtensionReference
  parent: BindOpen.Extensions.References
  name: IBdoExtensionReference
  nameWithType: IBdoExtensionReference
  fullName: BindOpen.Extensions.References.IBdoExtensionReference
- uid: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAllAssemblies*
  commentId: Overload:BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAllAssemblies
  name: AddAllAssemblies
  nameWithType: BdoExtensionReferenceExtension.AddAllAssemblies
  fullName: BindOpen.Extensions.References.BdoExtensionReferenceExtension.AddAllAssemblies
shouldSkipMarkup: true
