### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.IDbStoredQuery
  commentId: T:BindOpen.Data.Queries.IDbStoredQuery
  id: IDbStoredQuery
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.IDbStoredQuery.Query
  - BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
  langs:
  - csharp
  - vb
  name: IDbStoredQuery
  nameWithType: IDbStoredQuery
  fullName: BindOpen.Data.Queries.IDbStoredQuery
  type: Interface
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: 'public interface IDbStoredQuery : IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem'
    content.vb: >-
      Public Interface IDbStoredQuery
          Inherits IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem
  inheritedMembers:
  - BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  - BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  - BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  - BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  - BindOpen.Data.Queries.IDbQuery.GetName
  - BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  - BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  - BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  - BindOpen.Data.Queries.IDbQuery.DataModule
  - BindOpen.Data.Queries.IDbQuery.DataTable
  - BindOpen.Data.Queries.IDbQuery.DataTableAlias
  - BindOpen.Data.Queries.IDbQuery.Kind
  - BindOpen.Data.Queries.IDbQuery.Schema
  - BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  - BindOpen.Data.Queries.IDbQuery.ParameterSet
  - BindOpen.Data.Queries.IDbQuery.CTETables
  - BindOpen.Data.Queries.IDbQueryItem.Expression
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.Data.Queries.IDbStoredQuery.Query
  commentId: P:BindOpen.Data.Queries.IDbStoredQuery.Query
  id: Query
  parent: BindOpen.Data.Queries.IDbStoredQuery
  langs:
  - csharp
  - vb
  name: Query
  nameWithType: IDbStoredQuery.Query
  fullName: BindOpen.Data.Queries.IDbStoredQuery.Query
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe query of this instance.\n"
  syntax:
    content: IDbQuery Query { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.IDbQuery
    content.vb: Property Query As IDbQuery
  overload: BindOpen.Data.Queries.IDbStoredQuery.Query*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
  commentId: P:BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
  id: QueryTexts
  parent: BindOpen.Data.Queries.IDbStoredQuery
  langs:
  - csharp
  - vb
  name: QueryTexts
  nameWithType: IDbStoredQuery.QueryTexts
  fullName: BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe SQL query texts of this instance depending on connector unique.\n"
  syntax:
    content: Dictionary<string, string> QueryTexts { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Property QueryTexts As Dictionary(Of String, String)
  overload: BindOpen.Data.Queries.IDbStoredQuery.QueryTexts*
  modifiers.csharp:
  - get
  - set
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  isExternal: true
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  commentId: M:BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: CheckExistence(Boolean)
  nameWithType: IDbQuery.CheckExistence(Boolean)
  fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: IDbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: IDbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: WithParameters(IDataElement[])
  nameWithType: IDbQuery.WithParameters(IDataElement[])
  fullName: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  nameWithType.vb: IDbQuery.WithParameters(IDataElement())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement())
  name.vb: WithParameters(IDataElement())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: IDbQuery.WithParameters
    fullName: BindOpen.Data.Queries.IDbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: IDbQuery.WithParameters
    fullName: BindOpen.Data.Queries.IDbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  commentId: M:BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: AddParameter(ScalarElement)
  nameWithType: IDbQuery.AddParameter(ScalarElement)
  fullName: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: IDbQuery.AddParameter
    fullName: BindOpen.Data.Queries.IDbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: IDbQuery.AddParameter
    fullName: BindOpen.Data.Queries.IDbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UsingParameters(IDataElementSpec[])
  nameWithType: IDbQuery.UsingParameters(IDataElementSpec[])
  fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  nameWithType.vb: IDbQuery.UsingParameters(IDataElementSpec())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec())
  name.vb: UsingParameters(IDataElementSpec())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: IDbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: IDbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.GetName
  commentId: M:BindOpen.Data.Queries.IDbQuery.GetName
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: GetName()
  nameWithType: IDbQuery.GetName()
  fullName: BindOpen.Data.Queries.IDbQuery.GetName()
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.GetName
    name: GetName
    nameWithType: IDbQuery.GetName
    fullName: BindOpen.Data.Queries.IDbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.GetName
    name: GetName
    nameWithType: IDbQuery.GetName
    fullName: BindOpen.Data.Queries.IDbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  commentId: M:BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UseParameter(String, Object)
  nameWithType: IDbQuery.UseParameter(String, Object)
  fullName: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  commentId: M:BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UseParameter(String, DataValueType, Object)
  nameWithType: IDbQuery.UseParameter(String, DataValueType, Object)
  fullName: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String, BindOpen.Data.Common.DataValueType, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: WithCTE(DbTable[])
  nameWithType: IDbQuery.WithCTE(DbTable[])
  fullName: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  nameWithType.vb: IDbQuery.WithCTE(DbTable())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable())
  name.vb: WithCTE(DbTable())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: IDbQuery.WithCTE
    fullName: BindOpen.Data.Queries.IDbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: IDbQuery.WithCTE
    fullName: BindOpen.Data.Queries.IDbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.DataModule
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataModule
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataModule
  nameWithType: IDbQuery.DataModule
  fullName: BindOpen.Data.Queries.IDbQuery.DataModule
- uid: BindOpen.Data.Queries.IDbQuery.DataTable
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataTable
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataTable
  nameWithType: IDbQuery.DataTable
  fullName: BindOpen.Data.Queries.IDbQuery.DataTable
- uid: BindOpen.Data.Queries.IDbQuery.DataTableAlias
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataTableAlias
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataTableAlias
  nameWithType: IDbQuery.DataTableAlias
  fullName: BindOpen.Data.Queries.IDbQuery.DataTableAlias
- uid: BindOpen.Data.Queries.IDbQuery.Kind
  commentId: P:BindOpen.Data.Queries.IDbQuery.Kind
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: Kind
  nameWithType: IDbQuery.Kind
  fullName: BindOpen.Data.Queries.IDbQuery.Kind
- uid: BindOpen.Data.Queries.IDbQuery.Schema
  commentId: P:BindOpen.Data.Queries.IDbQuery.Schema
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: Schema
  nameWithType: IDbQuery.Schema
  fullName: BindOpen.Data.Queries.IDbQuery.Schema
- uid: BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  commentId: P:BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: ParameterSpecSet
  nameWithType: IDbQuery.ParameterSpecSet
  fullName: BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
- uid: BindOpen.Data.Queries.IDbQuery.ParameterSet
  commentId: P:BindOpen.Data.Queries.IDbQuery.ParameterSet
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: ParameterSet
  nameWithType: IDbQuery.ParameterSet
  fullName: BindOpen.Data.Queries.IDbQuery.ParameterSet
- uid: BindOpen.Data.Queries.IDbQuery.CTETables
  commentId: P:BindOpen.Data.Queries.IDbQuery.CTETables
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: CTETables
  nameWithType: IDbQuery.CTETables
  fullName: BindOpen.Data.Queries.IDbQuery.CTETables
- uid: BindOpen.Data.Queries.IDbQueryItem.Expression
  commentId: P:BindOpen.Data.Queries.IDbQueryItem.Expression
  parent: BindOpen.Data.Queries.IDbQueryItem
  isExternal: true
  name: Expression
  nameWithType: IDbQueryItem.Expression
  fullName: BindOpen.Data.Queries.IDbQueryItem.Expression
- uid: BindOpen.Data.Queries.IDbQuery
  commentId: T:BindOpen.Data.Queries.IDbQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQuery
  nameWithType: IDbQuery
  fullName: BindOpen.Data.Queries.IDbQuery
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: BindOpen.Data.Queries.IDbStoredQuery.Query*
  commentId: Overload:BindOpen.Data.Queries.IDbStoredQuery.Query
  isExternal: true
  name: Query
  nameWithType: IDbStoredQuery.Query
  fullName: BindOpen.Data.Queries.IDbStoredQuery.Query
- uid: BindOpen.Data.Queries.IDbStoredQuery.QueryTexts*
  commentId: Overload:BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
  isExternal: true
  name: QueryTexts
  nameWithType: IDbStoredQuery.QueryTexts
  fullName: BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.String}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
