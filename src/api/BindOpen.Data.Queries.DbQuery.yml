### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.DbQuery
  commentId: T:BindOpen.Data.Queries.DbQuery
  id: DbQuery
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.DbQuery.#ctor
  - BindOpen.Data.Queries.DbQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  - BindOpen.Data.Queries.DbQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  - BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  - BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  - BindOpen.Data.Queries.DbQuery.CTETables
  - BindOpen.Data.Queries.DbQuery.DataModule
  - BindOpen.Data.Queries.DbQuery.DataTable
  - BindOpen.Data.Queries.DbQuery.DataTableAlias
  - BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  - BindOpen.Data.Queries.DbQuery.Expression
  - BindOpen.Data.Queries.DbQuery.GetName
  - BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  - BindOpen.Data.Queries.DbQuery.Kind
  - BindOpen.Data.Queries.DbQuery.Name
  - BindOpen.Data.Queries.DbQuery.ParameterSet
  - BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  - BindOpen.Data.Queries.DbQuery.Schema
  - BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  - BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  - BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  - BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  - BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  langs:
  - csharp
  - vb
  name: DbQuery
  nameWithType: DbQuery
  fullName: BindOpen.Data.Queries.DbQuery
  type: Class
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThis class represents a database data query.\n"
  syntax:
    content: 'public abstract class DbQuery : DescribedDataItem, IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem'
    content.vb: >-
      Public MustInherit Class DbQuery
          Inherits DescribedDataItem
          Implements IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem
  inheritance:
  - System.Object
  derivedClasses:
  - BindOpen.Data.Queries.DbCompositeQuery
  - BindOpen.Data.Queries.DbSingleQuery
  - BindOpen.Data.Queries.DbStoredQuery
  - BindOpen.Data.Queries.StoredProcedureDbQuery
  implements:
  - BindOpen.Data.Queries.IDbQuery
  - BindOpen.Data.Items.IDescribedDataItem
  - BindOpen.Data.Items.ITitledDataItem
  - BindOpen.Data.Items.INamedDataItem
  - BindOpen.Data.Items.IStoredDataItem
  - BindOpen.Data.Items.IIdentifiedDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  - BindOpen.Data.Items.IIdentified
  - BindOpen.Data.Items.IReferenced
  - BindOpen.Data.Items.IStorable
  - BindOpen.Data.Items.INamed
  - BindOpen.Data.Items.IGloballyTitled
  - BindOpen.Data.Items.IGloballyDescribed
  - BindOpen.Data.Queries.IDbQueryItem
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: BindOpen.Data.Queries.DbQuery.#ctor
  commentId: M:BindOpen.Data.Queries.DbQuery.#ctor
  id: '#ctor'
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: DbQuery()
  nameWithType: DbQuery.DbQuery()
  fullName: BindOpen.Data.Queries.DbQuery.DbQuery()
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the DbQuery class.\n"
  syntax:
    content: protected DbQuery()
    content.vb: Protected Sub New
  overload: BindOpen.Data.Queries.DbQuery.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: BindOpen.Data.Queries.DbQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  commentId: M:BindOpen.Data.Queries.DbQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  id: '#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)'
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: DbQuery(DbQueryKind, DbTable)
  nameWithType: DbQuery.DbQuery(DbQueryKind, DbTable)
  fullName: BindOpen.Data.Queries.DbQuery.DbQuery(BindOpen.Data.Queries.DbQueryKind, BindOpen.Extensions.Carriers.DbTable)
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the DbQuery class.\n"
  syntax:
    content: protected DbQuery(DbQueryKind kind, DbTable table = null)
    parameters:
    - id: kind
      type: BindOpen.Data.Queries.DbQueryKind
      description: Type of database data query.
    - id: table
      type: BindOpen.Extensions.Carriers.DbTable
      description: The table to consider.
    content.vb: Protected Sub New(kind As DbQueryKind, table As DbTable = Nothing)
  overload: BindOpen.Data.Queries.DbQuery.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: BindOpen.Data.Queries.DbQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  commentId: M:BindOpen.Data.Queries.DbQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  id: '#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)'
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: DbQuery(String, DbQueryKind, DbTable)
  nameWithType: DbQuery.DbQuery(String, DbQueryKind, DbTable)
  fullName: BindOpen.Data.Queries.DbQuery.DbQuery(System.String, BindOpen.Data.Queries.DbQueryKind, BindOpen.Extensions.Carriers.DbTable)
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the DbQuery class.\n"
  syntax:
    content: protected DbQuery(string name, DbQueryKind kind, DbTable table = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the query.
    - id: kind
      type: BindOpen.Data.Queries.DbQueryKind
      description: Type of database data query.
    - id: table
      type: BindOpen.Extensions.Carriers.DbTable
      description: The table to consider.
    content.vb: Protected Sub New(name As String, kind As DbQueryKind, table As DbTable = Nothing)
  overload: BindOpen.Data.Queries.DbQuery.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: BindOpen.Data.Queries.DbQuery.GetName
  commentId: M:BindOpen.Data.Queries.DbQuery.GetName
  id: GetName
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: GetName()
  nameWithType: DbQuery.GetName()
  fullName: BindOpen.Data.Queries.DbQuery.GetName()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nGets the name of this instance.\n"
  remarks: If the name of this instance is empty or null then the returned name is determined from this instance&apos;s properties.
  syntax:
    content: public virtual string GetName()
    return:
      type: System.String
      description: Returns the name of this instance.
    content.vb: Public Overridable Function GetName As String
  overload: BindOpen.Data.Queries.DbQuery.GetName*
  implements:
  - BindOpen.Data.Queries.IDbQuery.GetName
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  commentId: M:BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  id: CheckExistence(System.Boolean)
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: CheckExistence(Boolean)
  nameWithType: DbQuery.CheckExistence(Boolean)
  fullName: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nIndicates that this instance checks the existence of table or data according to the kind of queries.\n"
  syntax:
    content: public IDbQuery CheckExistence(bool isExistenceChecked = true)
    parameters:
    - id: isExistenceChecked
      type: System.Boolean
      description: Indicates whether this instance checks the existence of table or data.
    return:
      type: BindOpen.Data.Queries.IDbQuery
      description: Return this instance.
    content.vb: Public Function CheckExistence(isExistenceChecked As Boolean = True) As IDbQuery
  overload: BindOpen.Data.Queries.DbQuery.CheckExistence*
  implements:
  - BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  commentId: M:BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  id: WithParameters(BindOpen.Data.Elements.IDataElement[])
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: WithParameters(IDataElement[])
  nameWithType: DbQuery.WithParameters(IDataElement[])
  fullName: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nDefines the parameter specifications of this instance.\n"
  syntax:
    content: public IDbQuery WithParameters(params IDataElement[] parameters)
    parameters:
    - id: parameters
      type: BindOpen.Data.Elements.IDataElement[]
      description: The set of parameters to consider.
    return:
      type: BindOpen.Data.Queries.IDbQuery
      description: Return this instance.
    content.vb: Public Function WithParameters(ParamArray parameters As IDataElement()) As IDbQuery
  overload: BindOpen.Data.Queries.DbQuery.WithParameters*
  implements:
  - BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  nameWithType.vb: DbQuery.WithParameters(IDataElement())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement())
  name.vb: WithParameters(IDataElement())
- uid: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  commentId: M:BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  id: UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: UsingParameters(IDataElementSpec[])
  nameWithType: DbQuery.UsingParameters(IDataElementSpec[])
  fullName: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nDefines the parameter specifications of this instance.\n"
  syntax:
    content: public IDbQuery UsingParameters(params IDataElementSpec[] parameterSpecs)
    parameters:
    - id: parameterSpecs
      type: BindOpen.Data.Elements.IDataElementSpec[]
      description: The set of parameter specifications to consider.
    return:
      type: BindOpen.Data.Queries.IDbQuery
      description: Return this instance.
    content.vb: Public Function UsingParameters(ParamArray parameterSpecs As IDataElementSpec()) As IDbQuery
  overload: BindOpen.Data.Queries.DbQuery.UsingParameters*
  implements:
  - BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  nameWithType.vb: DbQuery.UsingParameters(IDataElementSpec())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec())
  name.vb: UsingParameters(IDataElementSpec())
- uid: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  commentId: M:BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  id: AddParameter(BindOpen.Data.Elements.ScalarElement)
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: AddParameter(ScalarElement)
  nameWithType: DbQuery.AddParameter(ScalarElement)
  fullName: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdd the specified parameter to this instance.\n"
  syntax:
    content: public IDbQuery AddParameter(ScalarElement parameter)
    parameters:
    - id: parameter
      type: BindOpen.Data.Elements.ScalarElement
      description: The parameter to consider.
    return:
      type: BindOpen.Data.Queries.IDbQuery
      description: Return this instance.
    content.vb: Public Function AddParameter(parameter As ScalarElement) As IDbQuery
  overload: BindOpen.Data.Queries.DbQuery.AddParameter*
  implements:
  - BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  commentId: M:BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  id: UseParameter(System.String,System.Object)
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: UseParameter(String, Object)
  nameWithType: DbQuery.UseParameter(String, Object)
  fullName: BindOpen.Data.Queries.DbQuery.UseParameter(System.String, System.Object)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds the specified parameter to this instance.\n"
  syntax:
    content: public ScalarElement UseParameter(string name, object value = null)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: value
      type: System.Object
      description: The data table to consider.
    return:
      type: BindOpen.Data.Elements.ScalarElement
      description: Return this added parameter.
    content.vb: Public Function UseParameter(name As String, value As Object = Nothing) As ScalarElement
  overload: BindOpen.Data.Queries.DbQuery.UseParameter*
  implements:
  - BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  commentId: M:BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  id: UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: UseParameter(String, DataValueType, Object)
  nameWithType: DbQuery.UseParameter(String, DataValueType, Object)
  fullName: BindOpen.Data.Queries.DbQuery.UseParameter(System.String, BindOpen.Data.Common.DataValueType, System.Object)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds the specified parameter to this instance.\n"
  syntax:
    content: public ScalarElement UseParameter(string name, DataValueType valueType, object value = null)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The data value type to consider.
    - id: value
      type: System.Object
      description: The data table to consider.
    return:
      type: BindOpen.Data.Elements.ScalarElement
      description: Return this added parameter.
    content.vb: Public Function UseParameter(name As String, valueType As DataValueType, value As Object = Nothing) As ScalarElement
  overload: BindOpen.Data.Queries.DbQuery.UseParameter*
  implements:
  - BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  commentId: M:BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  id: WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: WithCTE(DbTable[])
  nameWithType: DbQuery.WithCTE(DbTable[])
  fullName: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the specified CTE tables.\n"
  syntax:
    content: public IDbQuery WithCTE(params DbTable[] tables)
    parameters:
    - id: tables
      type: BindOpen.Extensions.Carriers.DbTable[]
      description: The CTE tables to consider.
    return:
      type: BindOpen.Data.Queries.IDbQuery
      description: Returns this instance.
    content.vb: Public Function WithCTE(ParamArray tables As DbTable()) As IDbQuery
  overload: BindOpen.Data.Queries.DbQuery.WithCTE*
  implements:
  - BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  nameWithType.vb: DbQuery.WithCTE(DbTable())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable())
  name.vb: WithCTE(DbTable())
- uid: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: DbQuery.Dispose(Boolean)
  fullName: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nDisposes this instance. \n"
  syntax:
    content: protected override void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(isDisposing As Boolean)
  overload: BindOpen.Data.Queries.DbQuery.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: BindOpen.Data.Queries.DbQuery.Name
  commentId: P:BindOpen.Data.Queries.DbQuery.Name
  id: Name
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DbQuery.Name
  fullName: BindOpen.Data.Queries.DbQuery.Name
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nName of this instance.\n"
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: BindOpen.Data.Queries.DbQuery.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.DataModule
  commentId: P:BindOpen.Data.Queries.DbQuery.DataModule
  id: DataModule
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: DataModule
  nameWithType: DbQuery.DataModule
  fullName: BindOpen.Data.Queries.DbQuery.DataModule
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nName of the data module of this instance.\n"
  syntax:
    content: public string DataModule { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DataModule As String
  overload: BindOpen.Data.Queries.DbQuery.DataModule*
  implements:
  - BindOpen.Data.Queries.IDbQuery.DataModule
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.DataTable
  commentId: P:BindOpen.Data.Queries.DbQuery.DataTable
  id: DataTable
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: DataTable
  nameWithType: DbQuery.DataTable
  fullName: BindOpen.Data.Queries.DbQuery.DataTable
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nName of the data table of this instance.\n"
  syntax:
    content: public string DataTable { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DataTable As String
  overload: BindOpen.Data.Queries.DbQuery.DataTable*
  implements:
  - BindOpen.Data.Queries.IDbQuery.DataTable
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.DataTableAlias
  commentId: P:BindOpen.Data.Queries.DbQuery.DataTableAlias
  id: DataTableAlias
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: DataTableAlias
  nameWithType: DbQuery.DataTableAlias
  fullName: BindOpen.Data.Queries.DbQuery.DataTableAlias
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nName of the data table alias of this instance.\n"
  syntax:
    content: public string DataTableAlias { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DataTableAlias As String
  overload: BindOpen.Data.Queries.DbQuery.DataTableAlias*
  implements:
  - BindOpen.Data.Queries.IDbQuery.DataTableAlias
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.Schema
  commentId: P:BindOpen.Data.Queries.DbQuery.Schema
  id: Schema
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: Schema
  nameWithType: DbQuery.Schema
  fullName: BindOpen.Data.Queries.DbQuery.Schema
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSchema of this instance.\n"
  syntax:
    content: public string Schema { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Schema As String
  overload: BindOpen.Data.Queries.DbQuery.Schema*
  implements:
  - BindOpen.Data.Queries.IDbQuery.Schema
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.Kind
  commentId: P:BindOpen.Data.Queries.DbQuery.Kind
  id: Kind
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: Kind
  nameWithType: DbQuery.Kind
  fullName: BindOpen.Data.Queries.DbQuery.Kind
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe kind of this instance.\n"
  syntax:
    content: public DbQueryKind Kind { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.DbQueryKind
    content.vb: Public Property Kind As DbQueryKind
  overload: BindOpen.Data.Queries.DbQuery.Kind*
  implements:
  - BindOpen.Data.Queries.IDbQuery.Kind
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  commentId: P:BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  id: IsExistenceChecked
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: IsExistenceChecked
  nameWithType: DbQuery.IsExistenceChecked
  fullName: BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nIndicates whether existence is checked.\n"
  syntax:
    content: public bool IsExistenceChecked { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsExistenceChecked As Boolean
  overload: BindOpen.Data.Queries.DbQuery.IsExistenceChecked*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  commentId: P:BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  id: ParameterSpecSet
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: ParameterSpecSet
  nameWithType: DbQuery.ParameterSpecSet
  fullName: BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe parameter specification set of this instance.\n"
  syntax:
    content: public DataElementSpecSet ParameterSpecSet { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Elements.DataElementSpecSet
    content.vb: Public Property ParameterSpecSet As DataElementSpecSet
  overload: BindOpen.Data.Queries.DbQuery.ParameterSpecSet*
  implements:
  - BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.ParameterSet
  commentId: P:BindOpen.Data.Queries.DbQuery.ParameterSet
  id: ParameterSet
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: ParameterSet
  nameWithType: DbQuery.ParameterSet
  fullName: BindOpen.Data.Queries.DbQuery.ParameterSet
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe parameters of this instance.\n"
  syntax:
    content: public DataElementSet ParameterSet { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Elements.DataElementSet
    content.vb: Public Property ParameterSet As DataElementSet
  overload: BindOpen.Data.Queries.DbQuery.ParameterSet*
  implements:
  - BindOpen.Data.Queries.IDbQuery.ParameterSet
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.CTETables
  commentId: P:BindOpen.Data.Queries.DbQuery.CTETables
  id: CTETables
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: CTETables
  nameWithType: DbQuery.CTETables
  fullName: BindOpen.Data.Queries.DbQuery.CTETables
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe CTE tables of this instance.\n"
  syntax:
    content: public List<DbTable> CTETables { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbTable}
    content.vb: Public Property CTETables As List(Of DbTable)
  overload: BindOpen.Data.Queries.DbQuery.CTETables*
  implements:
  - BindOpen.Data.Queries.IDbQuery.CTETables
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQuery.Expression
  commentId: P:BindOpen.Data.Queries.DbQuery.Expression
  id: Expression
  parent: BindOpen.Data.Queries.DbQuery
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: DbQuery.Expression
  fullName: BindOpen.Data.Queries.DbQuery.Expression
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nValue of this instance.\n"
  syntax:
    content: public DataExpression Expression { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Expression.DataExpression
    content.vb: Public Property Expression As DataExpression
  overload: BindOpen.Data.Queries.DbQuery.Expression*
  implements:
  - BindOpen.Data.Queries.IDbQueryItem.Expression
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  isExternal: true
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.Data.Queries.IDbQuery
  commentId: T:BindOpen.Data.Queries.IDbQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQuery
  nameWithType: IDbQuery
  fullName: BindOpen.Data.Queries.IDbQuery
- uid: BindOpen.Data.Items.IDescribedDataItem
  isExternal: true
  name: IDescribedDataItem
  nameWithType: IDescribedDataItem
  fullName: BindOpen.Data.Items.IDescribedDataItem
- uid: BindOpen.Data.Items.ITitledDataItem
  isExternal: true
  name: ITitledDataItem
  nameWithType: ITitledDataItem
  fullName: BindOpen.Data.Items.ITitledDataItem
- uid: BindOpen.Data.Items.INamedDataItem
  isExternal: true
  name: INamedDataItem
  nameWithType: INamedDataItem
  fullName: BindOpen.Data.Items.INamedDataItem
- uid: BindOpen.Data.Items.IStoredDataItem
  isExternal: true
  name: IStoredDataItem
  nameWithType: IStoredDataItem
  fullName: BindOpen.Data.Items.IStoredDataItem
- uid: BindOpen.Data.Items.IIdentifiedDataItem
  isExternal: true
  name: IIdentifiedDataItem
  nameWithType: IIdentifiedDataItem
  fullName: BindOpen.Data.Items.IIdentifiedDataItem
- uid: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  isExternal: true
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  isExternal: true
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Items.IStorable
  isExternal: true
  name: IStorable
  nameWithType: IStorable
  fullName: BindOpen.Data.Items.IStorable
- uid: BindOpen.Data.Items.INamed
  isExternal: true
  name: INamed
  nameWithType: INamed
  fullName: BindOpen.Data.Items.INamed
- uid: BindOpen.Data.Items.IGloballyTitled
  isExternal: true
  name: IGloballyTitled
  nameWithType: IGloballyTitled
  fullName: BindOpen.Data.Items.IGloballyTitled
- uid: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: IGloballyDescribed
  nameWithType: IGloballyDescribed
  fullName: BindOpen.Data.Items.IGloballyDescribed
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Queries.DbQuery.#ctor*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.#ctor
  isExternal: true
  name: DbQuery
  nameWithType: DbQuery.DbQuery
  fullName: BindOpen.Data.Queries.DbQuery.DbQuery
- uid: BindOpen.Data.Queries.DbQueryKind
  commentId: T:BindOpen.Data.Queries.DbQueryKind
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryKind
  nameWithType: DbQueryKind
  fullName: BindOpen.Data.Queries.DbQueryKind
- uid: BindOpen.Extensions.Carriers.DbTable
  commentId: T:BindOpen.Extensions.Carriers.DbTable
  parent: BindOpen.Extensions.Carriers
  isExternal: true
  name: DbTable
  nameWithType: DbTable
  fullName: BindOpen.Extensions.Carriers.DbTable
- uid: BindOpen.Extensions.Carriers
  commentId: N:BindOpen.Extensions.Carriers
  isExternal: true
  name: BindOpen.Extensions.Carriers
  nameWithType: BindOpen.Extensions.Carriers
  fullName: BindOpen.Extensions.Carriers
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Queries.DbQuery.GetName*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.GetName
  isExternal: true
  name: GetName
  nameWithType: DbQuery.GetName
  fullName: BindOpen.Data.Queries.DbQuery.GetName
- uid: BindOpen.Data.Queries.IDbQuery.GetName
  commentId: M:BindOpen.Data.Queries.IDbQuery.GetName
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: GetName()
  nameWithType: IDbQuery.GetName()
  fullName: BindOpen.Data.Queries.IDbQuery.GetName()
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.GetName
    name: GetName
    nameWithType: IDbQuery.GetName
    fullName: BindOpen.Data.Queries.IDbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.GetName
    name: GetName
    nameWithType: IDbQuery.GetName
    fullName: BindOpen.Data.Queries.IDbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.CheckExistence*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.CheckExistence
  isExternal: true
  name: CheckExistence
  nameWithType: DbQuery.CheckExistence
  fullName: BindOpen.Data.Queries.DbQuery.CheckExistence
- uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  commentId: M:BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: CheckExistence(Boolean)
  nameWithType: IDbQuery.CheckExistence(Boolean)
  fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: IDbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: IDbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Queries.DbQuery.WithParameters*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.WithParameters
  isExternal: true
  name: WithParameters
  nameWithType: DbQuery.WithParameters
  fullName: BindOpen.Data.Queries.DbQuery.WithParameters
- uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: WithParameters(IDataElement[])
  nameWithType: IDbQuery.WithParameters(IDataElement[])
  fullName: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  nameWithType.vb: IDbQuery.WithParameters(IDataElement())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement())
  name.vb: WithParameters(IDataElement())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: IDbQuery.WithParameters
    fullName: BindOpen.Data.Queries.IDbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: IDbQuery.WithParameters
    fullName: BindOpen.Data.Queries.IDbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.IDataElement[]
  isExternal: true
  name: IDataElement[]
  nameWithType: IDataElement[]
  fullName: BindOpen.Data.Elements.IDataElement[]
  nameWithType.vb: IDataElement()
  fullName.vb: BindOpen.Data.Elements.IDataElement()
  name.vb: IDataElement()
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Queries.DbQuery.UsingParameters*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.UsingParameters
  isExternal: true
  name: UsingParameters
  nameWithType: DbQuery.UsingParameters
  fullName: BindOpen.Data.Queries.DbQuery.UsingParameters
- uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UsingParameters(IDataElementSpec[])
  nameWithType: IDbQuery.UsingParameters(IDataElementSpec[])
  fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  nameWithType.vb: IDbQuery.UsingParameters(IDataElementSpec())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec())
  name.vb: UsingParameters(IDataElementSpec())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: IDbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: IDbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.IDataElementSpec[]
  isExternal: true
  name: IDataElementSpec[]
  nameWithType: IDataElementSpec[]
  fullName: BindOpen.Data.Elements.IDataElementSpec[]
  nameWithType.vb: IDataElementSpec()
  fullName.vb: BindOpen.Data.Elements.IDataElementSpec()
  name.vb: IDataElementSpec()
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Queries.DbQuery.AddParameter*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.AddParameter
  isExternal: true
  name: AddParameter
  nameWithType: DbQuery.AddParameter
  fullName: BindOpen.Data.Queries.DbQuery.AddParameter
- uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  commentId: M:BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: AddParameter(ScalarElement)
  nameWithType: IDbQuery.AddParameter(ScalarElement)
  fullName: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: IDbQuery.AddParameter
    fullName: BindOpen.Data.Queries.IDbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: IDbQuery.AddParameter
    fullName: BindOpen.Data.Queries.IDbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.ScalarElement
  isExternal: true
  name: ScalarElement
  nameWithType: ScalarElement
  fullName: BindOpen.Data.Elements.ScalarElement
- uid: BindOpen.Data.Queries.DbQuery.UseParameter*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.UseParameter
  isExternal: true
  name: UseParameter
  nameWithType: DbQuery.UseParameter
  fullName: BindOpen.Data.Queries.DbQuery.UseParameter
- uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  commentId: M:BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UseParameter(String, Object)
  nameWithType: IDbQuery.UseParameter(String, Object)
  fullName: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  commentId: M:BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UseParameter(String, DataValueType, Object)
  nameWithType: IDbQuery.UseParameter(String, DataValueType, Object)
  fullName: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String, BindOpen.Data.Common.DataValueType, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueType
  isExternal: true
  name: DataValueType
  nameWithType: DataValueType
  fullName: BindOpen.Data.Common.DataValueType
- uid: BindOpen.Data.Queries.DbQuery.WithCTE*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.WithCTE
  isExternal: true
  name: WithCTE
  nameWithType: DbQuery.WithCTE
  fullName: BindOpen.Data.Queries.DbQuery.WithCTE
- uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: WithCTE(DbTable[])
  nameWithType: IDbQuery.WithCTE(DbTable[])
  fullName: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  nameWithType.vb: IDbQuery.WithCTE(DbTable())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable())
  name.vb: WithCTE(DbTable())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: IDbQuery.WithCTE
    fullName: BindOpen.Data.Queries.IDbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: IDbQuery.WithCTE
    fullName: BindOpen.Data.Queries.IDbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Carriers.DbTable[]
  isExternal: true
  name: DbTable[]
  nameWithType: DbTable[]
  fullName: BindOpen.Extensions.Carriers.DbTable[]
  nameWithType.vb: DbTable()
  fullName.vb: BindOpen.Extensions.Carriers.DbTable()
  name.vb: DbTable()
  spec.csharp:
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Queries.DbQuery.Dispose*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.Dispose
  isExternal: true
  name: Dispose
  nameWithType: DbQuery.Dispose
  fullName: BindOpen.Data.Queries.DbQuery.Dispose
- uid: BindOpen.Data.Queries.DbQuery.Name*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.Name
  isExternal: true
  name: Name
  nameWithType: DbQuery.Name
  fullName: BindOpen.Data.Queries.DbQuery.Name
- uid: BindOpen.Data.Queries.DbQuery.DataModule*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.DataModule
  isExternal: true
  name: DataModule
  nameWithType: DbQuery.DataModule
  fullName: BindOpen.Data.Queries.DbQuery.DataModule
- uid: BindOpen.Data.Queries.IDbQuery.DataModule
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataModule
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataModule
  nameWithType: IDbQuery.DataModule
  fullName: BindOpen.Data.Queries.IDbQuery.DataModule
- uid: BindOpen.Data.Queries.DbQuery.DataTable*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.DataTable
  isExternal: true
  name: DataTable
  nameWithType: DbQuery.DataTable
  fullName: BindOpen.Data.Queries.DbQuery.DataTable
- uid: BindOpen.Data.Queries.IDbQuery.DataTable
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataTable
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataTable
  nameWithType: IDbQuery.DataTable
  fullName: BindOpen.Data.Queries.IDbQuery.DataTable
- uid: BindOpen.Data.Queries.DbQuery.DataTableAlias*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.DataTableAlias
  isExternal: true
  name: DataTableAlias
  nameWithType: DbQuery.DataTableAlias
  fullName: BindOpen.Data.Queries.DbQuery.DataTableAlias
- uid: BindOpen.Data.Queries.IDbQuery.DataTableAlias
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataTableAlias
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataTableAlias
  nameWithType: IDbQuery.DataTableAlias
  fullName: BindOpen.Data.Queries.IDbQuery.DataTableAlias
- uid: BindOpen.Data.Queries.DbQuery.Schema*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.Schema
  isExternal: true
  name: Schema
  nameWithType: DbQuery.Schema
  fullName: BindOpen.Data.Queries.DbQuery.Schema
- uid: BindOpen.Data.Queries.IDbQuery.Schema
  commentId: P:BindOpen.Data.Queries.IDbQuery.Schema
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: Schema
  nameWithType: IDbQuery.Schema
  fullName: BindOpen.Data.Queries.IDbQuery.Schema
- uid: BindOpen.Data.Queries.DbQuery.Kind*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.Kind
  isExternal: true
  name: Kind
  nameWithType: DbQuery.Kind
  fullName: BindOpen.Data.Queries.DbQuery.Kind
- uid: BindOpen.Data.Queries.IDbQuery.Kind
  commentId: P:BindOpen.Data.Queries.IDbQuery.Kind
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: Kind
  nameWithType: IDbQuery.Kind
  fullName: BindOpen.Data.Queries.IDbQuery.Kind
- uid: BindOpen.Data.Queries.DbQuery.IsExistenceChecked*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  isExternal: true
  name: IsExistenceChecked
  nameWithType: DbQuery.IsExistenceChecked
  fullName: BindOpen.Data.Queries.DbQuery.IsExistenceChecked
- uid: BindOpen.Data.Queries.DbQuery.ParameterSpecSet*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  isExternal: true
  name: ParameterSpecSet
  nameWithType: DbQuery.ParameterSpecSet
  fullName: BindOpen.Data.Queries.DbQuery.ParameterSpecSet
- uid: BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  commentId: P:BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: ParameterSpecSet
  nameWithType: IDbQuery.ParameterSpecSet
  fullName: BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
- uid: BindOpen.Data.Elements.DataElementSpecSet
  isExternal: true
  name: DataElementSpecSet
  nameWithType: DataElementSpecSet
  fullName: BindOpen.Data.Elements.DataElementSpecSet
- uid: BindOpen.Data.Queries.DbQuery.ParameterSet*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.ParameterSet
  isExternal: true
  name: ParameterSet
  nameWithType: DbQuery.ParameterSet
  fullName: BindOpen.Data.Queries.DbQuery.ParameterSet
- uid: BindOpen.Data.Queries.IDbQuery.ParameterSet
  commentId: P:BindOpen.Data.Queries.IDbQuery.ParameterSet
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: ParameterSet
  nameWithType: IDbQuery.ParameterSet
  fullName: BindOpen.Data.Queries.IDbQuery.ParameterSet
- uid: BindOpen.Data.Elements.DataElementSet
  isExternal: true
  name: DataElementSet
  nameWithType: DataElementSet
  fullName: BindOpen.Data.Elements.DataElementSet
- uid: BindOpen.Data.Queries.DbQuery.CTETables*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.CTETables
  isExternal: true
  name: CTETables
  nameWithType: DbQuery.CTETables
  fullName: BindOpen.Data.Queries.DbQuery.CTETables
- uid: BindOpen.Data.Queries.IDbQuery.CTETables
  commentId: P:BindOpen.Data.Queries.IDbQuery.CTETables
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: CTETables
  nameWithType: IDbQuery.CTETables
  fullName: BindOpen.Data.Queries.IDbQuery.CTETables
- uid: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbTable}
  commentId: '!:System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbTable}'
  definition: System.Collections.Generic.List`1
  name: List<DbTable>
  nameWithType: List<DbTable>
  fullName: System.Collections.Generic.List<BindOpen.Extensions.Carriers.DbTable>
  nameWithType.vb: List(Of DbTable)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Extensions.Carriers.DbTable)
  name.vb: List(Of DbTable)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.Expression*
  commentId: Overload:BindOpen.Data.Queries.DbQuery.Expression
  isExternal: true
  name: Expression
  nameWithType: DbQuery.Expression
  fullName: BindOpen.Data.Queries.DbQuery.Expression
- uid: BindOpen.Data.Queries.IDbQueryItem.Expression
  commentId: P:BindOpen.Data.Queries.IDbQueryItem.Expression
  parent: BindOpen.Data.Queries.IDbQueryItem
  isExternal: true
  name: Expression
  nameWithType: IDbQueryItem.Expression
  fullName: BindOpen.Data.Queries.IDbQueryItem.Expression
- uid: BindOpen.Data.Expression.DataExpression
  isExternal: true
  name: DataExpression
  nameWithType: DataExpression
  fullName: BindOpen.Data.Expression.DataExpression
shouldSkipMarkup: true
