### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Configuration.ConfigurationFactory
  commentId: T:BindOpen.Application.Configuration.ConfigurationFactory
  id: ConfigurationFactory
  parent: BindOpen.Application.Configuration
  children:
  - BindOpen.Application.Configuration.ConfigurationFactory.AddGroup``1(``0,System.String,BindOpen.Data.Elements.IDataElement[])
  - BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle(BindOpen.Data.Items.IDataKeyValue[])
  - BindOpen.Application.Configuration.ConfigurationFactory.Load``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet,System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: ConfigurationFactory
  nameWithType: ConfigurationFactory
  fullName: BindOpen.Application.Configuration.ConfigurationFactory
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Application/Configuration/Factories/ConfigurationFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ConfigurationFactory
    path: ../src/BindOpen.Core/Application/Configuration/Factories/ConfigurationFactory.cs
    startLine: 15
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Application.Configuration
  summary: "\nThis static class provides methods to handle configurations.\n"
  example: []
  syntax:
    content: public static class ConfigurationFactory
    content.vb: Public Module ConfigurationFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Application.Configuration.ConfigurationFactory.Load``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet,System.Boolean,System.Boolean)
  commentId: M:BindOpen.Application.Configuration.ConfigurationFactory.Load``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet,System.Boolean,System.Boolean)
  id: Load``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog,System.Xml.Schema.XmlSchemaSet,System.Boolean,System.Boolean)
  parent: BindOpen.Application.Configuration.ConfigurationFactory
  langs:
  - csharp
  - vb
  name: Load<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet, Boolean, Boolean)
  nameWithType: ConfigurationFactory.Load<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet, Boolean, Boolean)
  fullName: BindOpen.Application.Configuration.ConfigurationFactory.Load<T>(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog, System.Xml.Schema.XmlSchemaSet, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Application/Configuration/Factories/ConfigurationFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Load
    path: ../src/BindOpen.Core/Application/Configuration/Factories/ConfigurationFactory.cs
    startLine: 28
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Application.Configuration
  summary: "\nInstantiates a new instance of Configuration class from a xml file.\n"
  example: []
  syntax:
    content: >-
      public static T Load<T>(string filePath, IBdoScope scope = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null, XmlSchemaSet xmlSchemaSet = null, bool mustFileExist = true, bool isRuntimeUpdated = true)
          where T : class, IBdoBaseConfiguration, new()
    parameters:
    - id: filePath
      type: System.String
      description: The file path to consider.
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The set of script variables to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set to consider for checking.
    - id: mustFileExist
      type: System.Boolean
      description: Indicates whether the file must exist.
    - id: isRuntimeUpdated
      type: System.Boolean
      description: Indicates whether the runtime is updated.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The Xml operation project defined in the Xml file.
    content.vb: Public Shared Function Load(Of T As {Class, IBdoBaseConfiguration, New})(filePath As String, scope As IBdoScope = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing, xmlSchemaSet As XmlSchemaSet = Nothing, mustFileExist As Boolean = True, isRuntimeUpdated As Boolean = True) As T
  overload: BindOpen.Application.Configuration.ConfigurationFactory.Load*
  nameWithType.vb: ConfigurationFactory.Load(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet, Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Application.Configuration.ConfigurationFactory.Load(Of T)(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog, System.Xml.Schema.XmlSchemaSet, System.Boolean, System.Boolean)
  name.vb: Load(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog, XmlSchemaSet, Boolean, Boolean)
- uid: BindOpen.Application.Configuration.ConfigurationFactory.AddGroup``1(``0,System.String,BindOpen.Data.Elements.IDataElement[])
  commentId: M:BindOpen.Application.Configuration.ConfigurationFactory.AddGroup``1(``0,System.String,BindOpen.Data.Elements.IDataElement[])
  id: AddGroup``1(``0,System.String,BindOpen.Data.Elements.IDataElement[])
  isExtensionMethod: true
  parent: BindOpen.Application.Configuration.ConfigurationFactory
  langs:
  - csharp
  - vb
  name: AddGroup<T>(T, String, IDataElement[])
  nameWithType: ConfigurationFactory.AddGroup<T>(T, String, IDataElement[])
  fullName: BindOpen.Application.Configuration.ConfigurationFactory.AddGroup<T>(T, System.String, BindOpen.Data.Elements.IDataElement[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Application/Configuration/Factories/ConfigurationFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddGroup
    path: ../src/BindOpen.Core/Application/Configuration/Factories/ConfigurationFactory.cs
    startLine: 70
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Application.Configuration
  summary: "\nAdds the specified elements into the specified group.\n"
  example: []
  syntax:
    content: >-
      public static T AddGroup<T>(this T configuration, string groupId, params IDataElement[] items)
          where T : class, IBdoBaseConfiguration
    parameters:
    - id: configuration
      type: '{T}'
      description: The configuration to consider.
    - id: groupId
      type: System.String
      description: The ID of the group.
    - id: items
      type: BindOpen.Data.Elements.IDataElement[]
      description: The items to add.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns this instance.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddGroup(Of T As {Class, IBdoBaseConfiguration})(configuration As T, groupId As String, ParamArray items As IDataElement()) As T
  overload: BindOpen.Application.Configuration.ConfigurationFactory.AddGroup*
  nameWithType.vb: ConfigurationFactory.AddGroup(Of T)(T, String, IDataElement())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Application.Configuration.ConfigurationFactory.AddGroup(Of T)(T, System.String, BindOpen.Data.Elements.IDataElement())
  name.vb: AddGroup(Of T)(T, String, IDataElement())
- uid: BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle(BindOpen.Data.Items.IDataKeyValue[])
  commentId: M:BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle(BindOpen.Data.Items.IDataKeyValue[])
  id: CreateBundle(BindOpen.Data.Items.IDataKeyValue[])
  parent: BindOpen.Application.Configuration.ConfigurationFactory
  langs:
  - csharp
  - vb
  name: CreateBundle(IDataKeyValue[])
  nameWithType: ConfigurationFactory.CreateBundle(IDataKeyValue[])
  fullName: BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle(BindOpen.Data.Items.IDataKeyValue[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Application/Configuration/Factories/ConfigurationFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateBundle
    path: ../src/BindOpen.Core/Application/Configuration/Factories/ConfigurationFactory.cs
    startLine: 80
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Application.Configuration
  summary: "\nInstantiates a new instance of the ConfigurationBundle class.\n"
  example: []
  syntax:
    content: public static BdoConfigurationBundle CreateBundle(params IDataKeyValue[] values)
    parameters:
    - id: values
      type: BindOpen.Data.Items.IDataKeyValue[]
      description: The values to consider.
    return:
      type: BindOpen.Application.Configuration.BdoConfigurationBundle
    content.vb: Public Shared Function CreateBundle(ParamArray values As IDataKeyValue()) As BdoConfigurationBundle
  overload: BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle*
  nameWithType.vb: ConfigurationFactory.CreateBundle(IDataKeyValue())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle(BindOpen.Data.Items.IDataKeyValue())
  name.vb: CreateBundle(IDataKeyValue())
references:
- uid: BindOpen.Application.Configuration
  commentId: N:BindOpen.Application.Configuration
  name: BindOpen.Application.Configuration
  nameWithType: BindOpen.Application.Configuration
  fullName: BindOpen.Application.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Application.Configuration.ConfigurationFactory.Load*
  commentId: Overload:BindOpen.Application.Configuration.ConfigurationFactory.Load
  name: Load
  nameWithType: ConfigurationFactory.Load
  fullName: BindOpen.Application.Configuration.ConfigurationFactory.Load
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Application.Scopes.IBdoScope
  commentId: T:BindOpen.Application.Scopes.IBdoScope
  parent: BindOpen.Application.Scopes
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  commentId: T:BindOpen.System.Scripting.IBdoScriptVariableSet
  parent: BindOpen.System.Scripting
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: BindOpen.System.Scripting
  commentId: N:BindOpen.System.Scripting
  name: BindOpen.System.Scripting
  nameWithType: BindOpen.System.Scripting
  fullName: BindOpen.System.Scripting
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Application.Configuration.ConfigurationFactory.AddGroup*
  commentId: Overload:BindOpen.Application.Configuration.ConfigurationFactory.AddGroup
  name: AddGroup
  nameWithType: ConfigurationFactory.AddGroup
  fullName: BindOpen.Application.Configuration.ConfigurationFactory.AddGroup
- uid: BindOpen.Data.Elements.IDataElement[]
  isExternal: true
  name: IDataElement[]
  nameWithType: IDataElement[]
  fullName: BindOpen.Data.Elements.IDataElement[]
  nameWithType.vb: IDataElement()
  fullName.vb: BindOpen.Data.Elements.IDataElement()
  name.vb: IDataElement()
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle*
  commentId: Overload:BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle
  name: CreateBundle
  nameWithType: ConfigurationFactory.CreateBundle
  fullName: BindOpen.Application.Configuration.ConfigurationFactory.CreateBundle
- uid: BindOpen.Data.Items.IDataKeyValue[]
  isExternal: true
  name: IDataKeyValue[]
  nameWithType: IDataKeyValue[]
  fullName: BindOpen.Data.Items.IDataKeyValue[]
  nameWithType.vb: IDataKeyValue()
  fullName.vb: BindOpen.Data.Items.IDataKeyValue()
  name.vb: IDataKeyValue()
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataKeyValue
    name: IDataKeyValue
    nameWithType: IDataKeyValue
    fullName: BindOpen.Data.Items.IDataKeyValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Items.IDataKeyValue
    name: IDataKeyValue
    nameWithType: IDataKeyValue
    fullName: BindOpen.Data.Items.IDataKeyValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Application.Configuration.BdoConfigurationBundle
  commentId: T:BindOpen.Application.Configuration.BdoConfigurationBundle
  parent: BindOpen.Application.Configuration
  name: BdoConfigurationBundle
  nameWithType: BdoConfigurationBundle
  fullName: BindOpen.Application.Configuration.BdoConfigurationBundle
shouldSkipMarkup: true
