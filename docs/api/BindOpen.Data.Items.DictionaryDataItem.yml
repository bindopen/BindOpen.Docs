### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Items.DictionaryDataItem
  commentId: T:BindOpen.Data.Items.DictionaryDataItem
  id: DictionaryDataItem
  parent: BindOpen.Data.Items
  children:
  - BindOpen.Data.Items.DictionaryDataItem.#ctor
  - BindOpen.Data.Items.DictionaryDataItem.#ctor(System.String)
  - BindOpen.Data.Items.DictionaryDataItem.#ctor(System.String,System.String)
  - BindOpen.Data.Items.DictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  - BindOpen.Data.Items.DictionaryDataItem.AddValue(System.String)
  - BindOpen.Data.Items.DictionaryDataItem.AddValue(System.String,System.String)
  - BindOpen.Data.Items.DictionaryDataItem.AvailableKeys
  - BindOpen.Data.Items.DictionaryDataItem.AvailableKeysSpecified
  - BindOpen.Data.Items.DictionaryDataItem.Clear
  - BindOpen.Data.Items.DictionaryDataItem.Clone
  - BindOpen.Data.Items.DictionaryDataItem.Create(System.String)
  - BindOpen.Data.Items.DictionaryDataItem.GetContent(System.String,System.String)
  - BindOpen.Data.Items.DictionaryDataItem.GetCultureInfoItems
  - BindOpen.Data.Items.DictionaryDataItem.GetDistinctKeys
  - BindOpen.Data.Items.DictionaryDataItem.GetTextNode(System.String,System.String)
  - BindOpen.Data.Items.DictionaryDataItem.HasKey(System.String)
  - BindOpen.Data.Items.DictionaryDataItem.Item(System.String)
  - BindOpen.Data.Items.DictionaryDataItem.Item(System.String,System.String)
  - BindOpen.Data.Items.DictionaryDataItem.op_Implicit(BindOpen.Data.Items.DictionaryDataItem)~System.String
  - BindOpen.Data.Items.DictionaryDataItem.op_Implicit(System.String)~BindOpen.Data.Items.DictionaryDataItem
  - BindOpen.Data.Items.DictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  - BindOpen.Data.Items.DictionaryDataItem.RemoveValue(System.String)
  - BindOpen.Data.Items.DictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  - BindOpen.Data.Items.DictionaryDataItem.SetValue(System.String)
  - BindOpen.Data.Items.DictionaryDataItem.SetValue(System.String,System.String)
  - BindOpen.Data.Items.DictionaryDataItem.SingleValue
  - BindOpen.Data.Items.DictionaryDataItem.SingleValueSpecified
  - BindOpen.Data.Items.DictionaryDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DictionaryDataItem.UpdateKey(System.String,System.String)
  - BindOpen.Data.Items.DictionaryDataItem.Values
  - BindOpen.Data.Items.DictionaryDataItem.ValuesSpecified
  langs:
  - csharp
  - vb
  name: DictionaryDataItem
  nameWithType: DictionaryDataItem
  fullName: BindOpen.Data.Items.DictionaryDataItem
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DictionaryDataItem
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 18
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nThis class represents a dictionary data item.\n"
  example:
  - Titles, Descriptions.
  syntax:
    content: 'public class DictionaryDataItem : DataItem, IDictionaryDataItem, IDataItem, ICloneable, IDisposable'
    content.vb: >-
      Public Class DictionaryDataItem
          Inherits DataItem
          Implements IDictionaryDataItem, IDataItem, ICloneable, IDisposable
  seealso:
  - linkId: BindOpen.Data.Items.DataKeyValue
    commentId: T:BindOpen.Data.Items.DataKeyValue
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - BindOpen.Data.Items.DataItem
  derivedClasses:
  - BindOpen.Application.Configuration.BdoConfigurationBundle
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - BindOpen.Data.Items.DataItem.Clone``1
  - BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Dispose
  - BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - BindOpen.Data.Items.DictionaryDataItem.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.Data.Items.DictionaryDataItem})
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Data.Items.DictionaryDataItem.SingleValue
  commentId: P:BindOpen.Data.Items.DictionaryDataItem.SingleValue
  id: SingleValue
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: SingleValue
  nameWithType: DictionaryDataItem.SingleValue
  fullName: BindOpen.Data.Items.DictionaryDataItem.SingleValue
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SingleValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 52
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nThe single &apos;*&apos; value to consider.\n"
  example: []
  syntax:
    content: public string SingleValue { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property SingleValue As String
  overload: BindOpen.Data.Items.DictionaryDataItem.SingleValue*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.SingleValue
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.SingleValueSpecified
  commentId: P:BindOpen.Data.Items.DictionaryDataItem.SingleValueSpecified
  id: SingleValueSpecified
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: SingleValueSpecified
  nameWithType: DictionaryDataItem.SingleValueSpecified
  fullName: BindOpen.Data.Items.DictionaryDataItem.SingleValueSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SingleValueSpecified
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 68
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nSpecification of the SingleValue property of this instance.\n"
  example: []
  syntax:
    content: public bool SingleValueSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property SingleValueSpecified As Boolean
  overload: BindOpen.Data.Items.DictionaryDataItem.SingleValueSpecified*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Data.Items.DictionaryDataItem.AvailableKeys
  commentId: P:BindOpen.Data.Items.DictionaryDataItem.AvailableKeys
  id: AvailableKeys
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: AvailableKeys
  nameWithType: DictionaryDataItem.AvailableKeys
  fullName: BindOpen.Data.Items.DictionaryDataItem.AvailableKeys
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AvailableKeys
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 80
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nAvailable keys of this instance.\n"
  example: []
  syntax:
    content: public virtual List<string> AvailableKeys { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Overridable Property AvailableKeys As List(Of String)
  overload: BindOpen.Data.Items.DictionaryDataItem.AvailableKeys*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Items.DictionaryDataItem.AvailableKeysSpecified
  commentId: P:BindOpen.Data.Items.DictionaryDataItem.AvailableKeysSpecified
  id: AvailableKeysSpecified
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: AvailableKeysSpecified
  nameWithType: DictionaryDataItem.AvailableKeysSpecified
  fullName: BindOpen.Data.Items.DictionaryDataItem.AvailableKeysSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AvailableKeysSpecified
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 94
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nSpecification of the AvailableKeys property of this instance.\n"
  example: []
  syntax:
    content: public bool AvailableKeysSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AvailableKeysSpecified As Boolean
  overload: BindOpen.Data.Items.DictionaryDataItem.AvailableKeysSpecified*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Data.Items.DictionaryDataItem.Values
  commentId: P:BindOpen.Data.Items.DictionaryDataItem.Values
  id: Values
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: DictionaryDataItem.Values
  fullName: BindOpen.Data.Items.DictionaryDataItem.Values
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Values
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 106
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nValues of this instance.\n"
  example: []
  syntax:
    content: >-
      [DataMember(Name = "values")]

      public virtual List<DataKeyValue> Values { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Items.DataKeyValue}
    content.vb: >-
      <DataMember(Name:="values")>

      Public Overridable Property Values As List(Of DataKeyValue)
  overload: BindOpen.Data.Items.DictionaryDataItem.Values*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.Values
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: values
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Items.DictionaryDataItem.ValuesSpecified
  commentId: P:BindOpen.Data.Items.DictionaryDataItem.ValuesSpecified
  id: ValuesSpecified
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: ValuesSpecified
  nameWithType: DictionaryDataItem.ValuesSpecified
  fullName: BindOpen.Data.Items.DictionaryDataItem.ValuesSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ValuesSpecified
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 122
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nSpecification of the Values property of this instance.\n"
  example: []
  syntax:
    content: public bool ValuesSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ValuesSpecified As Boolean
  overload: BindOpen.Data.Items.DictionaryDataItem.ValuesSpecified*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Data.Items.DictionaryDataItem.Item(System.String)
  commentId: P:BindOpen.Data.Items.DictionaryDataItem.Item(System.String)
  id: Item(System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: DictionaryDataItem.Item[String]
  fullName: BindOpen.Data.Items.DictionaryDataItem.Item[System.String]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 136
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nText of the specified key.\n"
  example: []
  syntax:
    content: public string this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: The key to consider.
    return:
      type: System.String
      description: Returns the specified text.
    content.vb: Public Property Item(key As String) As String
  overload: BindOpen.Data.Items.DictionaryDataItem.Item*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
  nameWithType.vb: DictionaryDataItem.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Items.DictionaryDataItem.Item(System.String)
  name.vb: Item(String)
- uid: BindOpen.Data.Items.DictionaryDataItem.Item(System.String,System.String)
  commentId: P:BindOpen.Data.Items.DictionaryDataItem.Item(System.String,System.String)
  id: Item(System.String,System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Item[String, String]
  nameWithType: DictionaryDataItem.Item[String, String]
  fullName: BindOpen.Data.Items.DictionaryDataItem.Item[System.String, System.String]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 149
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nText of the specified key.\n"
  example: []
  syntax:
    content: public string this[string key, string defaultKey] { get; }
    parameters:
    - id: key
      type: System.String
      description: The key to consider.
    - id: defaultKey
      type: System.String
      description: The default key to consider.
    return:
      type: System.String
      description: Returns the specified text.
    content.vb: Public ReadOnly Property Item(key As String, defaultKey As String) As String
  overload: BindOpen.Data.Items.DictionaryDataItem.Item*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.Item(System.String,System.String)
  nameWithType.vb: DictionaryDataItem.Item(String, String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Data.Items.DictionaryDataItem.Item(System.String, System.String)
  name.vb: Item(String, String)
- uid: BindOpen.Data.Items.DictionaryDataItem.#ctor
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.#ctor
  id: '#ctor'
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: DictionaryDataItem()
  nameWithType: DictionaryDataItem.DictionaryDataItem()
  fullName: BindOpen.Data.Items.DictionaryDataItem.DictionaryDataItem()
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 165
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nInstantiates a new instance of the DictionaryDataItem class. \n"
  example: []
  syntax:
    content: public DictionaryDataItem()
    content.vb: Public Sub New
  overload: BindOpen.Data.Items.DictionaryDataItem.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.#ctor(System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: DictionaryDataItem(String)
  nameWithType: DictionaryDataItem.DictionaryDataItem(String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.DictionaryDataItem(System.String)
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 174
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nInstantiates a new instance of the DictionaryDataItem class\nspecifying the text for the default key.\n"
  example: []
  syntax:
    content: public DictionaryDataItem(string text)
    parameters:
    - id: text
      type: System.String
      description: The text to consider
    content.vb: Public Sub New(text As String)
  overload: BindOpen.Data.Items.DictionaryDataItem.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.#ctor(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: DictionaryDataItem(String, String)
  nameWithType: DictionaryDataItem.DictionaryDataItem(String, String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.DictionaryDataItem(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 185
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nInstantiates a new instance of the DictionaryDataItem class\nspecifying the text for the default user interface language ID.\n"
  example: []
  syntax:
    content: public DictionaryDataItem(string key, string text)
    parameters:
    - id: key
      type: System.String
      description: The variant name to consider.
    - id: text
      type: System.String
      description: The text to consider.
    content.vb: Public Sub New(key As String, text As String)
  overload: BindOpen.Data.Items.DictionaryDataItem.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  id: AddValue(BindOpen.Data.Items.IDataKeyValue)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: AddValue(IDataKeyValue)
  nameWithType: DictionaryDataItem.AddValue(IDataKeyValue)
  fullName: BindOpen.Data.Items.DictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 204
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nAdds a new value to this instance.\n"
  example: []
  syntax:
    content: public void AddValue(IDataKeyValue dataKeyValue)
    parameters:
    - id: dataKeyValue
      type: BindOpen.Data.Items.IDataKeyValue
      description: The value to add.
    content.vb: Public Sub AddValue(dataKeyValue As IDataKeyValue)
  overload: BindOpen.Data.Items.DictionaryDataItem.AddValue*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.AddValue(System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.AddValue(System.String)
  id: AddValue(System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: AddValue(String)
  nameWithType: DictionaryDataItem.AddValue(String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.AddValue(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 215
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nAdds a new value to this instance with the specified key and text.\n"
  example: []
  syntax:
    content: public IDataKeyValue AddValue(string text)
    parameters:
    - id: text
      type: System.String
      description: The text to consider.
    return:
      type: BindOpen.Data.Items.IDataKeyValue
      description: Returns the added data key value.
    content.vb: Public Function AddValue(text As String) As IDataKeyValue
  overload: BindOpen.Data.Items.DictionaryDataItem.AddValue*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.AddValue(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.AddValue(System.String,System.String)
  id: AddValue(System.String,System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: AddValue(String, String)
  nameWithType: DictionaryDataItem.AddValue(String, String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.AddValue(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 226
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nAdds a new value to this instance with the specified key and text.\n"
  example: []
  syntax:
    content: public IDataKeyValue AddValue(string key, string text)
    parameters:
    - id: key
      type: System.String
      description: The key to consider.
    - id: text
      type: System.String
      description: The text to consider.
    return:
      type: BindOpen.Data.Items.IDataKeyValue
      description: Returns the added data key value.
    content.vb: Public Function AddValue(key As String, text As String) As IDataKeyValue
  overload: BindOpen.Data.Items.DictionaryDataItem.AddValue*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.SetValue(System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.SetValue(System.String)
  id: SetValue(System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: SetValue(String)
  nameWithType: DictionaryDataItem.SetValue(String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.SetValue(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 243
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nSets the text of the default value.\n"
  example: []
  syntax:
    content: public void SetValue(string text)
    parameters:
    - id: text
      type: System.String
      description: The text of the value to add.
    content.vb: Public Sub SetValue(text As String)
  overload: BindOpen.Data.Items.DictionaryDataItem.SetValue*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.SetValue(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.SetValue(System.String,System.String)
  id: SetValue(System.String,System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: SetValue(String, String)
  nameWithType: DictionaryDataItem.SetValue(String, String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.SetValue(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 253
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nSets the text of the default value.\n"
  example: []
  syntax:
    content: public void SetValue(string key, string text)
    parameters:
    - id: key
      type: System.String
      description: The key of the value to add.
    - id: text
      type: System.String
      description: The text of the value to add.
    content.vb: Public Sub SetValue(key As String, text As String)
  overload: BindOpen.Data.Items.DictionaryDataItem.SetValue*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.Clear
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.Clear
  id: Clear
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: DictionaryDataItem.Clear()
  fullName: BindOpen.Data.Items.DictionaryDataItem.Clear()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clear
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 262
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nClears this instance.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: BindOpen.Data.Items.DictionaryDataItem.Clear*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.RemoveValue(System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.RemoveValue(System.String)
  id: RemoveValue(System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: RemoveValue(String)
  nameWithType: DictionaryDataItem.RemoveValue(String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.RemoveValue(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 273
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nRemoves the value with the specified key.\n"
  example: []
  syntax:
    content: public void RemoveValue(string key)
    parameters:
    - id: key
      type: System.String
      description: The key to consider.
    content.vb: Public Sub RemoveValue(key As String)
  overload: BindOpen.Data.Items.DictionaryDataItem.RemoveValue*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  id: RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: RemoveValue(IDataKeyValue)
  nameWithType: DictionaryDataItem.RemoveValue(IDataKeyValue)
  fullName: BindOpen.Data.Items.DictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 284
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nRemoves the specified value.\n"
  example: []
  syntax:
    content: public void RemoveValue(IDataKeyValue dataKeyValue)
    parameters:
    - id: dataKeyValue
      type: BindOpen.Data.Items.IDataKeyValue
      description: The value to remove.
    content.vb: Public Sub RemoveValue(dataKeyValue As IDataKeyValue)
  overload: BindOpen.Data.Items.DictionaryDataItem.RemoveValue*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  id: RemoveValues(System.Collections.Generic.List{System.String})
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: RemoveValues(List<String>)
  nameWithType: DictionaryDataItem.RemoveValues(List<String>)
  fullName: BindOpen.Data.Items.DictionaryDataItem.RemoveValues(System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveValues
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 294
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nRemoves the values of this instance whose keys are not in the specified list.\n"
  example: []
  syntax:
    content: public void RemoveValues(List<string> keys)
    parameters:
    - id: keys
      type: System.Collections.Generic.List{System.String}
      description: The keys to consider.
    content.vb: Public Sub RemoveValues(keys As List(Of String))
  overload: BindOpen.Data.Items.DictionaryDataItem.RemoveValues*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  nameWithType.vb: DictionaryDataItem.RemoveValues(List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Items.DictionaryDataItem.RemoveValues(System.Collections.Generic.List(Of System.String))
  name.vb: RemoveValues(List(Of String))
- uid: BindOpen.Data.Items.DictionaryDataItem.UpdateKey(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.UpdateKey(System.String,System.String)
  id: UpdateKey(System.String,System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: UpdateKey(String, String)
  nameWithType: DictionaryDataItem.UpdateKey(String, String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.UpdateKey(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: UpdateKey
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 306
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nUpdates the key of a global value.\n"
  example: []
  syntax:
    content: public void UpdateKey(string oldKey, string newKey)
    parameters:
    - id: oldKey
      type: System.String
      description: The old name of the global value.
    - id: newKey
      type: System.String
      description: The new name of the global value.
    content.vb: Public Sub UpdateKey(oldKey As String, newKey As String)
  overload: BindOpen.Data.Items.DictionaryDataItem.UpdateKey*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.op_Implicit(System.String)~BindOpen.Data.Items.DictionaryDataItem
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.op_Implicit(System.String)~BindOpen.Data.Items.DictionaryDataItem
  id: op_Implicit(System.String)~BindOpen.Data.Items.DictionaryDataItem
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Implicit(String to DictionaryDataItem)
  nameWithType: DictionaryDataItem.Implicit(String to DictionaryDataItem)
  fullName: BindOpen.Data.Items.DictionaryDataItem.Implicit(System.String to BindOpen.Data.Items.DictionaryDataItem)
  type: Operator
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: op_Implicit
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 324
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nConverts from string.\n"
  example: []
  syntax:
    content: public static implicit operator DictionaryDataItem(string st)
    parameters:
    - id: st
      type: System.String
      description: The string to consider.
    return:
      type: BindOpen.Data.Items.DictionaryDataItem
    content.vb: Public Shared Widening Operator CType(st As String) As DictionaryDataItem
  overload: BindOpen.Data.Items.DictionaryDataItem.op_Implicit*
  nameWithType.vb: DictionaryDataItem.Widening(String to DictionaryDataItem)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Items.DictionaryDataItem.Widening(System.String to BindOpen.Data.Items.DictionaryDataItem)
  name.vb: Widening(String to DictionaryDataItem)
- uid: BindOpen.Data.Items.DictionaryDataItem.op_Implicit(BindOpen.Data.Items.DictionaryDataItem)~System.String
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.op_Implicit(BindOpen.Data.Items.DictionaryDataItem)~System.String
  id: op_Implicit(BindOpen.Data.Items.DictionaryDataItem)~System.String
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Implicit(DictionaryDataItem to String)
  nameWithType: DictionaryDataItem.Implicit(DictionaryDataItem to String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.Implicit(BindOpen.Data.Items.DictionaryDataItem to System.String)
  type: Operator
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: op_Implicit
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 333
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nConverts to string.\n"
  example: []
  syntax:
    content: public static implicit operator string (DictionaryDataItem item)
    parameters:
    - id: item
      type: BindOpen.Data.Items.DictionaryDataItem
      description: The dictionary data item to consider.
    return:
      type: System.String
    content.vb: Public Shared Widening Operator CType(item As DictionaryDataItem) As String
  overload: BindOpen.Data.Items.DictionaryDataItem.op_Implicit*
  nameWithType.vb: DictionaryDataItem.Widening(DictionaryDataItem to String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Items.DictionaryDataItem.Widening(BindOpen.Data.Items.DictionaryDataItem to System.String)
  name.vb: Widening(DictionaryDataItem to String)
- uid: BindOpen.Data.Items.DictionaryDataItem.Create(System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.Create(System.String)
  id: Create(System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Create(String)
  nameWithType: DictionaryDataItem.Create(String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.Create(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 343
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nCreates a new instance of the DictionaryDataItem class.\n"
  example: []
  syntax:
    content: public static DictionaryDataItem Create(string stringObject)
    parameters:
    - id: stringObject
      type: System.String
      description: The string to consider.
    return:
      type: BindOpen.Data.Items.DictionaryDataItem
      description: The collection.
    content.vb: Public Shared Function Create(stringObject As String) As DictionaryDataItem
  overload: BindOpen.Data.Items.DictionaryDataItem.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Items.DictionaryDataItem.GetCultureInfoItems
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.GetCultureInfoItems
  id: GetCultureInfoItems
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: GetCultureInfoItems()
  nameWithType: DictionaryDataItem.GetCultureInfoItems()
  fullName: BindOpen.Data.Items.DictionaryDataItem.GetCultureInfoItems()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetCultureInfoItems
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 367
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nReturns the culture information sets.\n"
  example: []
  syntax:
    content: public static List<CultureInfo> GetCultureInfoItems()
    return:
      type: System.Collections.Generic.List{System.Globalization.CultureInfo}
      description: Returns information about all the UI cultures.
    content.vb: Public Shared Function GetCultureInfoItems As List(Of CultureInfo)
  overload: BindOpen.Data.Items.DictionaryDataItem.GetCultureInfoItems*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Items.DictionaryDataItem.GetDistinctKeys
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.GetDistinctKeys
  id: GetDistinctKeys
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: GetDistinctKeys()
  nameWithType: DictionaryDataItem.GetDistinctKeys()
  fullName: BindOpen.Data.Items.DictionaryDataItem.GetDistinctKeys()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetDistinctKeys
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 376
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nGets the distinct keys of this instance.\n"
  example: []
  syntax:
    content: public List<string> GetDistinctKeys()
    return:
      type: System.Collections.Generic.List{System.String}
      description: Returns the distinct keys of this instance.
    content.vb: Public Function GetDistinctKeys As List(Of String)
  overload: BindOpen.Data.Items.DictionaryDataItem.GetDistinctKeys*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.HasKey(System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.HasKey(System.String)
  id: HasKey(System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: HasKey(String)
  nameWithType: DictionaryDataItem.HasKey(String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.HasKey(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasKey
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 386
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nIndicates whether this instance has a value for the specified key.\n"
  example: []
  syntax:
    content: public bool HasKey(string key)
    parameters:
    - id: key
      type: System.String
      description: The key to consider.
    return:
      type: System.Boolean
      description: Returns True if this instance has a value for the specified key.
    content.vb: Public Function HasKey(key As String) As Boolean
  overload: BindOpen.Data.Items.DictionaryDataItem.HasKey*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.GetContent(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.GetContent(System.String,System.String)
  id: GetContent(System.String,System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: GetContent(String, String)
  nameWithType: DictionaryDataItem.GetContent(String, String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.GetContent(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetContent
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 402
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nReturns the content corresponding to the specified key.\n"
  example: []
  syntax:
    content: public string GetContent(string key = "*", string alternateKey = null)
    parameters:
    - id: key
      type: System.String
      description: The key to consider.
    - id: alternateKey
      type: System.String
      description: The alternate key to used if the key is not found.
    return:
      type: System.String
      description: >-
        Returns the text corresponding to the specified user interface language ID.

        Returns empty if there is none.
    content.vb: Public Function GetContent(key As String = "*", alternateKey As String = Nothing) As String
  overload: BindOpen.Data.Items.DictionaryDataItem.GetContent*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  id: Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DictionaryDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DictionaryDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Update
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 428
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nUpdates this instance.\n"
  remarks: Put reference collections as null if you do not want to repair this instance.
  example: []
  syntax:
    content: >-
      public override IBdoLog Update<T>(T item = null, string[] specificationAreas = null, UpdateModes[] updateModes = null)
          where T : IDataItem
    parameters:
    - id: item
      type: '{T}'
      description: The item to consider.
    - id: specificationAreas
      type: System.String[]
      description: The specification areas to consider.
    - id: updateModes
      type: BindOpen.Data.Common.UpdateModes[]
      description: The update modes to consider.
    typeParameters:
    - id: T
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: Log of the operation.
    content.vb: Public Overrides Function Update(Of T As IDataItem)(item As T = Nothing, specificationAreas As String() = Nothing, updateModes As UpdateModes() = Nothing) As IBdoLog
  overridden: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  overload: BindOpen.Data.Items.DictionaryDataItem.Update*
  implements:
  - BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DictionaryDataItem.Update(Of T)(T, String(), UpdateModes())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.Data.Items.DictionaryDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
- uid: BindOpen.Data.Items.DictionaryDataItem.GetTextNode(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.GetTextNode(System.String,System.String)
  id: GetTextNode(System.String,System.String)
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: GetTextNode(String, String)
  nameWithType: DictionaryDataItem.GetTextNode(String, String)
  fullName: BindOpen.Data.Items.DictionaryDataItem.GetTextNode(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetTextNode
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 453
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nReturns a text node representing this instance.\n"
  example: []
  syntax:
    content: public string GetTextNode(string nodeName, string indent)
    parameters:
    - id: nodeName
      type: System.String
      description: Name of the text node.
    - id: indent
      type: System.String
      description: Tabulation indent to include in the text.
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetTextNode(nodeName As String, indent As String) As String
  overload: BindOpen.Data.Items.DictionaryDataItem.GetTextNode*
  implements:
  - BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Items.DictionaryDataItem.Clone
  commentId: M:BindOpen.Data.Items.DictionaryDataItem.Clone
  id: Clone
  parent: BindOpen.Data.Items.DictionaryDataItem
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: DictionaryDataItem.Clone()
  fullName: BindOpen.Data.Items.DictionaryDataItem.Clone()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clone
    path: ../src/BindOpen.Core/Data/Items/Dictionary/DictionaryDataItem.cs
    startLine: 476
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nClones this instance.\n"
  example: []
  syntax:
    content: public override object Clone()
    return:
      type: System.Object
      description: Returns a cloned instance.
    content.vb: Public Overrides Function Clone As Object
  overridden: BindOpen.Data.Items.DataItem.Clone
  overload: BindOpen.Data.Items.DictionaryDataItem.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: BindOpen.Data.Items.DataKeyValue
  commentId: T:BindOpen.Data.Items.DataKeyValue
  parent: BindOpen.Data.Items
  name: DataKeyValue
  nameWithType: DataKeyValue
  fullName: BindOpen.Data.Items.DataKeyValue
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: BindOpen.Data.Items.DataItem
  commentId: T:BindOpen.Data.Items.DataItem
  parent: BindOpen.Data.Items
  name: DataItem
  nameWithType: DataItem
  fullName: BindOpen.Data.Items.DataItem
- uid: BindOpen.Data.Items.IDictionaryDataItem
  commentId: T:BindOpen.Data.Items.IDictionaryDataItem
  parent: BindOpen.Data.Items
  name: IDictionaryDataItem
  nameWithType: IDictionaryDataItem
  fullName: BindOpen.Data.Items.IDictionaryDataItem
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  commentId: M:BindOpen.Data.Items.DataItem.InitializeLifetimeService
  parent: BindOpen.Data.Items.DataItem
  name: InitializeLifetimeService()
  nameWithType: DataItem.InitializeLifetimeService()
  fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone``1
  commentId: M:BindOpen.Data.Items.DataItem.Clone``1
  parent: BindOpen.Data.Items.DataItem
  name: Clone<T>()
  nameWithType: DataItem.Clone<T>()
  fullName: BindOpen.Data.Items.DataItem.Clone<T>()
  nameWithType.vb: DataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.DataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone<T>
    nameWithType: DataItem.Clone<T>
    fullName: BindOpen.Data.Items.DataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone(Of T)
    nameWithType: DataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.DataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: DataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: DataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: DataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: DataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: DataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose
  commentId: M:BindOpen.Data.Items.DataItem.Dispose
  parent: BindOpen.Data.Items.DataItem
  name: Dispose()
  nameWithType: DataItem.Dispose()
  fullName: BindOpen.Data.Items.DataItem.Dispose()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DataItem.Dispose(Boolean)
  fullName: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.Data.Items.DictionaryDataItem})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  name: Using<DictionaryDataItem>(Action<DictionaryDataItem>)
  nameWithType: ObjectHelper.Using<DictionaryDataItem>(Action<DictionaryDataItem>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.Data.Items.DictionaryDataItem>(System.Action<BindOpen.Data.Items.DictionaryDataItem>)
  nameWithType.vb: ObjectHelper.Using(Of DictionaryDataItem)(Action(Of DictionaryDataItem))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.Data.Items.DictionaryDataItem)(System.Action(Of BindOpen.Data.Items.DictionaryDataItem))
  name.vb: Using(Of DictionaryDataItem)(Action(Of DictionaryDataItem))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using<DictionaryDataItem>
    nameWithType: ObjectHelper.Using<DictionaryDataItem>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.Data.Items.DictionaryDataItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Items.DictionaryDataItem
    name: DictionaryDataItem
    nameWithType: DictionaryDataItem
    fullName: BindOpen.Data.Items.DictionaryDataItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using(Of DictionaryDataItem)
    nameWithType: ObjectHelper.Using(Of DictionaryDataItem)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.Data.Items.DictionaryDataItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Items.DictionaryDataItem
    name: DictionaryDataItem
    nameWithType: DictionaryDataItem
    fullName: BindOpen.Data.Items.DictionaryDataItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  isExternal: true
  name: Using<T>(T, Action<T>)
  nameWithType: ObjectHelper.Using<T>(T, Action<T>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>(T, System.Action<T>)
  nameWithType.vb: ObjectHelper.Using(Of T)(T, Action(Of T))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)(T, System.Action(Of T))
  name.vb: Using(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using<T>
    nameWithType: ObjectHelper.Using<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using(Of T)
    nameWithType: ObjectHelper.Using(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.Data.Items.DictionaryDataItem.SingleValue*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.SingleValue
  name: SingleValue
  nameWithType: DictionaryDataItem.SingleValue
  fullName: BindOpen.Data.Items.DictionaryDataItem.SingleValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.SingleValue
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.SingleValue
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: SingleValue
  nameWithType: IDictionaryDataItem.SingleValue
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SingleValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Items.DictionaryDataItem.SingleValueSpecified*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.SingleValueSpecified
  name: SingleValueSpecified
  nameWithType: DictionaryDataItem.SingleValueSpecified
  fullName: BindOpen.Data.Items.DictionaryDataItem.SingleValueSpecified
- uid: BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: SingleValueSpecified
  nameWithType: IDictionaryDataItem.SingleValueSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Items.DictionaryDataItem.AvailableKeys*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.AvailableKeys
  name: AvailableKeys
  nameWithType: DictionaryDataItem.AvailableKeys
  fullName: BindOpen.Data.Items.DictionaryDataItem.AvailableKeys
- uid: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: AvailableKeys
  nameWithType: IDictionaryDataItem.AvailableKeys
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.Data.Items.DictionaryDataItem.AvailableKeysSpecified*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.AvailableKeysSpecified
  name: AvailableKeysSpecified
  nameWithType: DictionaryDataItem.AvailableKeysSpecified
  fullName: BindOpen.Data.Items.DictionaryDataItem.AvailableKeysSpecified
- uid: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: AvailableKeysSpecified
  nameWithType: IDictionaryDataItem.AvailableKeysSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
- uid: BindOpen.Data.Items.DictionaryDataItem.Values*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.Values
  name: Values
  nameWithType: DictionaryDataItem.Values
  fullName: BindOpen.Data.Items.DictionaryDataItem.Values
- uid: BindOpen.Data.Items.IDictionaryDataItem.Values
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.Values
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: Values
  nameWithType: IDictionaryDataItem.Values
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Values
- uid: System.Collections.Generic.List{BindOpen.Data.Items.DataKeyValue}
  commentId: T:System.Collections.Generic.List{BindOpen.Data.Items.DataKeyValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DataKeyValue>
  nameWithType: List<DataKeyValue>
  fullName: System.Collections.Generic.List<BindOpen.Data.Items.DataKeyValue>
  nameWithType.vb: List(Of DataKeyValue)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Data.Items.DataKeyValue)
  name.vb: List(Of DataKeyValue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Items.DataKeyValue
    name: DataKeyValue
    nameWithType: DataKeyValue
    fullName: BindOpen.Data.Items.DataKeyValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Items.DataKeyValue
    name: DataKeyValue
    nameWithType: DataKeyValue
    fullName: BindOpen.Data.Items.DataKeyValue
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.ValuesSpecified*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.ValuesSpecified
  name: ValuesSpecified
  nameWithType: DictionaryDataItem.ValuesSpecified
  fullName: BindOpen.Data.Items.DictionaryDataItem.ValuesSpecified
- uid: BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: ValuesSpecified
  nameWithType: IDictionaryDataItem.ValuesSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
- uid: BindOpen.Data.Items.DictionaryDataItem.Item*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.Item
  name: Item
  nameWithType: DictionaryDataItem.Item
  fullName: BindOpen.Data.Items.DictionaryDataItem.Item
- uid: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: Item[String]
  nameWithType: IDictionaryDataItem.Item[String]
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Item[System.String]
  nameWithType.vb: IDictionaryDataItem.Item(String)
  fullName.vb: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
    name: Item
    nameWithType: IDictionaryDataItem.Item
    fullName: BindOpen.Data.Items.IDictionaryDataItem.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
    name: Item
    nameWithType: IDictionaryDataItem.Item
    fullName: BindOpen.Data.Items.IDictionaryDataItem.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String,System.String)
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.Item(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: Item[String, String]
  nameWithType: IDictionaryDataItem.Item[String, String]
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Item[System.String, System.String]
  nameWithType.vb: IDictionaryDataItem.Item(String, String)
  fullName.vb: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String, System.String)
  name.vb: Item(String, String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String,System.String)
    name: Item
    nameWithType: IDictionaryDataItem.Item
    fullName: BindOpen.Data.Items.IDictionaryDataItem.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String,System.String)
    name: Item
    nameWithType: IDictionaryDataItem.Item
    fullName: BindOpen.Data.Items.IDictionaryDataItem.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.#ctor*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.#ctor
  name: DictionaryDataItem
  nameWithType: DictionaryDataItem.DictionaryDataItem
  fullName: BindOpen.Data.Items.DictionaryDataItem.DictionaryDataItem
- uid: BindOpen.Data.Items.DictionaryDataItem.AddValue*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.AddValue
  name: AddValue
  nameWithType: DictionaryDataItem.AddValue
  fullName: BindOpen.Data.Items.DictionaryDataItem.AddValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: AddValue(IDataKeyValue)
  nameWithType: IDictionaryDataItem.AddValue(IDataKeyValue)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
    name: AddValue
    nameWithType: IDictionaryDataItem.AddValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDataKeyValue
    name: IDataKeyValue
    nameWithType: IDataKeyValue
    fullName: BindOpen.Data.Items.IDataKeyValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
    name: AddValue
    nameWithType: IDictionaryDataItem.AddValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDataKeyValue
    name: IDataKeyValue
    nameWithType: IDataKeyValue
    fullName: BindOpen.Data.Items.IDataKeyValue
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataKeyValue
  commentId: T:BindOpen.Data.Items.IDataKeyValue
  parent: BindOpen.Data.Items
  name: IDataKeyValue
  nameWithType: IDataKeyValue
  fullName: BindOpen.Data.Items.IDataKeyValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: AddValue(String)
  nameWithType: IDictionaryDataItem.AddValue(String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
    name: AddValue
    nameWithType: IDictionaryDataItem.AddValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
    name: AddValue
    nameWithType: IDictionaryDataItem.AddValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: AddValue(String, String)
  nameWithType: IDictionaryDataItem.AddValue(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String,System.String)
    name: AddValue
    nameWithType: IDictionaryDataItem.AddValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String,System.String)
    name: AddValue
    nameWithType: IDictionaryDataItem.AddValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.SetValue*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.SetValue
  name: SetValue
  nameWithType: DictionaryDataItem.SetValue
  fullName: BindOpen.Data.Items.DictionaryDataItem.SetValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: SetValue(String)
  nameWithType: IDictionaryDataItem.SetValue(String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
    name: SetValue
    nameWithType: IDictionaryDataItem.SetValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
    name: SetValue
    nameWithType: IDictionaryDataItem.SetValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: SetValue(String, String)
  nameWithType: IDictionaryDataItem.SetValue(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String,System.String)
    name: SetValue
    nameWithType: IDictionaryDataItem.SetValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String,System.String)
    name: SetValue
    nameWithType: IDictionaryDataItem.SetValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.Clear*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.Clear
  name: Clear
  nameWithType: DictionaryDataItem.Clear
  fullName: BindOpen.Data.Items.DictionaryDataItem.Clear
- uid: BindOpen.Data.Items.IDictionaryDataItem.Clear
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.Clear
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: Clear()
  nameWithType: IDictionaryDataItem.Clear()
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Clear()
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.Clear
    name: Clear
    nameWithType: IDictionaryDataItem.Clear
    fullName: BindOpen.Data.Items.IDictionaryDataItem.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.Clear
    name: Clear
    nameWithType: IDictionaryDataItem.Clear
    fullName: BindOpen.Data.Items.IDictionaryDataItem.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.RemoveValue*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.RemoveValue
  name: RemoveValue
  nameWithType: DictionaryDataItem.RemoveValue
  fullName: BindOpen.Data.Items.DictionaryDataItem.RemoveValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: RemoveValue(String)
  nameWithType: IDictionaryDataItem.RemoveValue(String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
    name: RemoveValue
    nameWithType: IDictionaryDataItem.RemoveValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
    name: RemoveValue
    nameWithType: IDictionaryDataItem.RemoveValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: RemoveValue(IDataKeyValue)
  nameWithType: IDictionaryDataItem.RemoveValue(IDataKeyValue)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
    name: RemoveValue
    nameWithType: IDictionaryDataItem.RemoveValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDataKeyValue
    name: IDataKeyValue
    nameWithType: IDataKeyValue
    fullName: BindOpen.Data.Items.IDataKeyValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
    name: RemoveValue
    nameWithType: IDictionaryDataItem.RemoveValue
    fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDataKeyValue
    name: IDataKeyValue
    nameWithType: IDataKeyValue
    fullName: BindOpen.Data.Items.IDataKeyValue
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.RemoveValues*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.RemoveValues
  name: RemoveValues
  nameWithType: DictionaryDataItem.RemoveValues
  fullName: BindOpen.Data.Items.DictionaryDataItem.RemoveValues
- uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: RemoveValues(List<String>)
  nameWithType: IDictionaryDataItem.RemoveValues(List<String>)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List<System.String>)
  nameWithType.vb: IDictionaryDataItem.RemoveValues(List(Of String))
  fullName.vb: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List(Of System.String))
  name.vb: RemoveValues(List(Of String))
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
    name: RemoveValues
    nameWithType: IDictionaryDataItem.RemoveValues
    fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
    name: RemoveValues
    nameWithType: IDictionaryDataItem.RemoveValues
    fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.UpdateKey*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.UpdateKey
  name: UpdateKey
  nameWithType: DictionaryDataItem.UpdateKey
  fullName: BindOpen.Data.Items.DictionaryDataItem.UpdateKey
- uid: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: UpdateKey(String, String)
  nameWithType: IDictionaryDataItem.UpdateKey(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String,System.String)
    name: UpdateKey
    nameWithType: IDictionaryDataItem.UpdateKey
    fullName: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String,System.String)
    name: UpdateKey
    nameWithType: IDictionaryDataItem.UpdateKey
    fullName: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.op_Implicit*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.op_Implicit
  name: Implicit
  nameWithType: DictionaryDataItem.Implicit
  fullName: BindOpen.Data.Items.DictionaryDataItem.Implicit
  nameWithType.vb: DictionaryDataItem.Widening
  fullName.vb: BindOpen.Data.Items.DictionaryDataItem.Widening
  name.vb: Widening
- uid: BindOpen.Data.Items.DictionaryDataItem
  commentId: T:BindOpen.Data.Items.DictionaryDataItem
  parent: BindOpen.Data.Items
  name: DictionaryDataItem
  nameWithType: DictionaryDataItem
  fullName: BindOpen.Data.Items.DictionaryDataItem
- uid: BindOpen.Data.Items.DictionaryDataItem.Create*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.Create
  name: Create
  nameWithType: DictionaryDataItem.Create
  fullName: BindOpen.Data.Items.DictionaryDataItem.Create
- uid: BindOpen.Data.Items.DictionaryDataItem.GetCultureInfoItems*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.GetCultureInfoItems
  name: GetCultureInfoItems
  nameWithType: DictionaryDataItem.GetCultureInfoItems
  fullName: BindOpen.Data.Items.DictionaryDataItem.GetCultureInfoItems
- uid: System.Collections.Generic.List{System.Globalization.CultureInfo}
  commentId: T:System.Collections.Generic.List{System.Globalization.CultureInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CultureInfo>
  nameWithType: List<CultureInfo>
  fullName: System.Collections.Generic.List<System.Globalization.CultureInfo>
  nameWithType.vb: List(Of CultureInfo)
  fullName.vb: System.Collections.Generic.List(Of System.Globalization.CultureInfo)
  name.vb: List(Of CultureInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.GetDistinctKeys*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.GetDistinctKeys
  name: GetDistinctKeys
  nameWithType: DictionaryDataItem.GetDistinctKeys
  fullName: BindOpen.Data.Items.DictionaryDataItem.GetDistinctKeys
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  parent: BindOpen.Data.Items.IDictionaryDataItem
  name: GetDistinctKeys()
  nameWithType: IDictionaryDataItem.GetDistinctKeys()
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys()
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
    name: GetDistinctKeys
    nameWithType: IDictionaryDataItem.GetDistinctKeys
    fullName: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
    name: GetDistinctKeys
    nameWithType: IDictionaryDataItem.GetDistinctKeys
    fullName: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.HasKey*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.HasKey
  name: HasKey
  nameWithType: DictionaryDataItem.HasKey
  fullName: BindOpen.Data.Items.DictionaryDataItem.HasKey
- uid: BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: HasKey(String)
  nameWithType: IDictionaryDataItem.HasKey(String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
    name: HasKey
    nameWithType: IDictionaryDataItem.HasKey
    fullName: BindOpen.Data.Items.IDictionaryDataItem.HasKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
    name: HasKey
    nameWithType: IDictionaryDataItem.HasKey
    fullName: BindOpen.Data.Items.IDictionaryDataItem.HasKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.GetContent*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.GetContent
  name: GetContent
  nameWithType: DictionaryDataItem.GetContent
  fullName: BindOpen.Data.Items.DictionaryDataItem.GetContent
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: GetContent(String, String)
  nameWithType: IDictionaryDataItem.GetContent(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String,System.String)
    name: GetContent
    nameWithType: IDictionaryDataItem.GetContent
    fullName: BindOpen.Data.Items.IDictionaryDataItem.GetContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String,System.String)
    name: GetContent
    nameWithType: IDictionaryDataItem.GetContent
    fullName: BindOpen.Data.Items.IDictionaryDataItem.GetContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.Update*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.Update
  name: Update
  nameWithType: DictionaryDataItem.Update
  fullName: BindOpen.Data.Items.DictionaryDataItem.Update
- uid: BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Common.UpdateModes[]
  isExternal: true
  name: UpdateModes[]
  nameWithType: UpdateModes[]
  fullName: BindOpen.Data.Common.UpdateModes[]
  nameWithType.vb: UpdateModes()
  fullName.vb: BindOpen.Data.Common.UpdateModes()
  name.vb: UpdateModes()
  spec.csharp:
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.Data.Items.DictionaryDataItem.GetTextNode*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.GetTextNode
  name: GetTextNode
  nameWithType: DictionaryDataItem.GetTextNode
  fullName: BindOpen.Data.Items.DictionaryDataItem.GetTextNode
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  isExternal: true
  name: GetTextNode(String, String)
  nameWithType: IDictionaryDataItem.GetTextNode(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String,System.String)
    name: GetTextNode
    nameWithType: IDictionaryDataItem.GetTextNode
    fullName: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String,System.String)
    name: GetTextNode
    nameWithType: IDictionaryDataItem.GetTextNode
    fullName: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone
  commentId: M:BindOpen.Data.Items.DataItem.Clone
  parent: BindOpen.Data.Items.DataItem
  name: Clone()
  nameWithType: DataItem.Clone()
  fullName: BindOpen.Data.Items.DataItem.Clone()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone
    name: Clone
    nameWithType: DataItem.Clone
    fullName: BindOpen.Data.Items.DataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone
    name: Clone
    nameWithType: DataItem.Clone
    fullName: BindOpen.Data.Items.DataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DictionaryDataItem.Clone*
  commentId: Overload:BindOpen.Data.Items.DictionaryDataItem.Clone
  name: Clone
  nameWithType: DictionaryDataItem.Clone
  fullName: BindOpen.Data.Items.DictionaryDataItem.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
