### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Rights.UserPermission
  commentId: T:BindOpen.Application.Rights.UserPermission
  id: UserPermission
  parent: BindOpen.Application.Rights
  children:
  - BindOpen.Application.Rights.UserPermission.#ctor
  - BindOpen.Application.Rights.UserPermission.#ctor(BindOpen.Application.Navigation.ActionKinds,System.Nullable{System.Boolean})
  - BindOpen.Application.Rights.UserPermission.#ctor(BindOpen.Application.Navigation.ActionKinds,System.String)
  - BindOpen.Application.Rights.UserPermission.#ctor(System.String,System.Nullable{System.Boolean})
  - BindOpen.Application.Rights.UserPermission.#ctor(System.String,System.String)
  - BindOpen.Application.Rights.UserPermission.ActionName
  - BindOpen.Application.Rights.UserPermission.GetValue(BindOpen.System.Scripting.IBdoScriptInterpreter,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - BindOpen.Application.Rights.UserPermission.Value
  - BindOpen.Application.Rights.UserPermission.ValueScript
  langs:
  - csharp
  - vb
  name: UserPermission
  nameWithType: UserPermission
  fullName: BindOpen.Application.Rights.UserPermission
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nThis structure respresents an user permission.\n"
  syntax:
    content: 'public class UserPermission : DataKeyValue'
    content.vb: >-
      Public Class UserPermission
          Inherits DataKeyValue
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Application.Rights.UserPermission.#ctor
  commentId: M:BindOpen.Application.Rights.UserPermission.#ctor
  id: '#ctor'
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: UserPermission()
  nameWithType: UserPermission.UserPermission()
  fullName: BindOpen.Application.Rights.UserPermission.UserPermission()
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nCreates a new instance of the UserPermission class.\n"
  syntax:
    content: public UserPermission()
    content.vb: Public Sub New
  overload: BindOpen.Application.Rights.UserPermission.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.UserPermission.#ctor(System.String,System.String)
  commentId: M:BindOpen.Application.Rights.UserPermission.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: UserPermission(String, String)
  nameWithType: UserPermission.UserPermission(String, String)
  fullName: BindOpen.Application.Rights.UserPermission.UserPermission(System.String, System.String)
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nCreates a new instance of the UserPermission class.\n"
  syntax:
    content: public UserPermission(string actionName, string valueScript)
    parameters:
    - id: actionName
      type: System.String
      description: The action name to consider.
    - id: valueScript
      type: System.String
      description: The value script to consider.
    content.vb: Public Sub New(actionName As String, valueScript As String)
  overload: BindOpen.Application.Rights.UserPermission.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.UserPermission.#ctor(BindOpen.Application.Navigation.ActionKinds,System.String)
  commentId: M:BindOpen.Application.Rights.UserPermission.#ctor(BindOpen.Application.Navigation.ActionKinds,System.String)
  id: '#ctor(BindOpen.Application.Navigation.ActionKinds,System.String)'
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: UserPermission(ActionKinds, String)
  nameWithType: UserPermission.UserPermission(ActionKinds, String)
  fullName: BindOpen.Application.Rights.UserPermission.UserPermission(BindOpen.Application.Navigation.ActionKinds, System.String)
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nCreates a new instance of the UserPermission class.\n"
  syntax:
    content: public UserPermission(ActionKinds actionKind, string valueScript)
    parameters:
    - id: actionKind
      type: BindOpen.Application.Navigation.ActionKinds
      description: The action kind to consider.
    - id: valueScript
      type: System.String
      description: The value script to consider.
    content.vb: Public Sub New(actionKind As ActionKinds, valueScript As String)
  overload: BindOpen.Application.Rights.UserPermission.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.UserPermission.#ctor(System.String,System.Nullable{System.Boolean})
  commentId: M:BindOpen.Application.Rights.UserPermission.#ctor(System.String,System.Nullable{System.Boolean})
  id: '#ctor(System.String,System.Nullable{System.Boolean})'
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: UserPermission(String, Nullable<Boolean>)
  nameWithType: UserPermission.UserPermission(String, Nullable<Boolean>)
  fullName: BindOpen.Application.Rights.UserPermission.UserPermission(System.String, System.Nullable<System.Boolean>)
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nCreates a new instance of the UserPermission class.\n"
  syntax:
    content: public UserPermission(string actionName, Nullable<bool> value)
    parameters:
    - id: actionName
      type: System.String
      description: The action name to consider.
    - id: value
      type: System.Nullable{System.Boolean}
      description: The boolean value to consider.
    content.vb: Public Sub New(actionName As String, value As Nullable(Of Boolean))
  overload: BindOpen.Application.Rights.UserPermission.#ctor*
  nameWithType.vb: UserPermission.UserPermission(String, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Rights.UserPermission.UserPermission(System.String, System.Nullable(Of System.Boolean))
  name.vb: UserPermission(String, Nullable(Of Boolean))
- uid: BindOpen.Application.Rights.UserPermission.#ctor(BindOpen.Application.Navigation.ActionKinds,System.Nullable{System.Boolean})
  commentId: M:BindOpen.Application.Rights.UserPermission.#ctor(BindOpen.Application.Navigation.ActionKinds,System.Nullable{System.Boolean})
  id: '#ctor(BindOpen.Application.Navigation.ActionKinds,System.Nullable{System.Boolean})'
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: UserPermission(ActionKinds, Nullable<Boolean>)
  nameWithType: UserPermission.UserPermission(ActionKinds, Nullable<Boolean>)
  fullName: BindOpen.Application.Rights.UserPermission.UserPermission(BindOpen.Application.Navigation.ActionKinds, System.Nullable<System.Boolean>)
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nCreates a new instance of the UserPermission class.\n"
  syntax:
    content: public UserPermission(ActionKinds actionKind, Nullable<bool> value)
    parameters:
    - id: actionKind
      type: BindOpen.Application.Navigation.ActionKinds
      description: The action kind to consider.
    - id: value
      type: System.Nullable{System.Boolean}
      description: The boolean value to consider.
    content.vb: Public Sub New(actionKind As ActionKinds, value As Nullable(Of Boolean))
  overload: BindOpen.Application.Rights.UserPermission.#ctor*
  nameWithType.vb: UserPermission.UserPermission(ActionKinds, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Rights.UserPermission.UserPermission(BindOpen.Application.Navigation.ActionKinds, System.Nullable(Of System.Boolean))
  name.vb: UserPermission(ActionKinds, Nullable(Of Boolean))
- uid: BindOpen.Application.Rights.UserPermission.GetValue(BindOpen.System.Scripting.IBdoScriptInterpreter,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Application.Rights.UserPermission.GetValue(BindOpen.System.Scripting.IBdoScriptInterpreter,BindOpen.System.Scripting.IBdoScriptVariableSet)
  id: GetValue(BindOpen.System.Scripting.IBdoScriptInterpreter,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: GetValue(IBdoScriptInterpreter, IBdoScriptVariableSet)
  nameWithType: UserPermission.GetValue(IBdoScriptInterpreter, IBdoScriptVariableSet)
  fullName: BindOpen.Application.Rights.UserPermission.GetValue(BindOpen.System.Scripting.IBdoScriptInterpreter, BindOpen.System.Scripting.IBdoScriptVariableSet)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nGets the value of this instance.\n"
  syntax:
    content: public bool GetValue(IBdoScriptInterpreter scriptInterpreter = null, IBdoScriptVariableSet scriptVariableSet = null)
    parameters:
    - id: scriptInterpreter
      type: BindOpen.System.Scripting.IBdoScriptInterpreter
      description: The script interpreter to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    return:
      type: System.Boolean
      description: Returns the value of this instance.
    content.vb: Public Function GetValue(scriptInterpreter As IBdoScriptInterpreter = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing) As Boolean
  overload: BindOpen.Application.Rights.UserPermission.GetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.UserPermission.ActionName
  commentId: P:BindOpen.Application.Rights.UserPermission.ActionName
  id: ActionName
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: ActionName
  nameWithType: UserPermission.ActionName
  fullName: BindOpen.Application.Rights.UserPermission.ActionName
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nAction name of this instance.\n"
  syntax:
    content: public string ActionName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ActionName As String
  overload: BindOpen.Application.Rights.UserPermission.ActionName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.UserPermission.Value
  commentId: P:BindOpen.Application.Rights.UserPermission.Value
  id: Value
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: UserPermission.Value
  fullName: BindOpen.Application.Rights.UserPermission.Value
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nThe value of this instance.\n"
  syntax:
    content: public Nullable<bool> Value { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property Value As Nullable(Of Boolean)
  overload: BindOpen.Application.Rights.UserPermission.Value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.UserPermission.ValueScript
  commentId: P:BindOpen.Application.Rights.UserPermission.ValueScript
  id: ValueScript
  parent: BindOpen.Application.Rights.UserPermission
  langs:
  - csharp
  - vb
  name: ValueScript
  nameWithType: UserPermission.ValueScript
  fullName: BindOpen.Application.Rights.UserPermission.ValueScript
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nThe value of this instance.\n"
  syntax:
    content: public string ValueScript { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ValueScript As String
  overload: BindOpen.Application.Rights.UserPermission.ValueScript*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: BindOpen.Application.Rights
  commentId: N:BindOpen.Application.Rights
  isExternal: true
  name: BindOpen.Application.Rights
  nameWithType: BindOpen.Application.Rights
  fullName: BindOpen.Application.Rights
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Application.Rights.UserPermission.#ctor*
  commentId: Overload:BindOpen.Application.Rights.UserPermission.#ctor
  isExternal: true
  name: UserPermission
  nameWithType: UserPermission.UserPermission
  fullName: BindOpen.Application.Rights.UserPermission.UserPermission
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Application.Navigation.ActionKinds
  commentId: T:BindOpen.Application.Navigation.ActionKinds
  parent: BindOpen.Application.Navigation
  isExternal: true
  name: ActionKinds
  nameWithType: ActionKinds
  fullName: BindOpen.Application.Navigation.ActionKinds
- uid: BindOpen.Application.Navigation
  commentId: N:BindOpen.Application.Navigation
  isExternal: true
  name: BindOpen.Application.Navigation
  nameWithType: BindOpen.Application.Navigation
  fullName: BindOpen.Application.Navigation
- uid: System.Nullable{System.Boolean}
  commentId: '!:System.Nullable{System.Boolean}'
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Rights.UserPermission.GetValue*
  commentId: Overload:BindOpen.Application.Rights.UserPermission.GetValue
  isExternal: true
  name: GetValue
  nameWithType: UserPermission.GetValue
  fullName: BindOpen.Application.Rights.UserPermission.GetValue
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter
  isExternal: true
  name: IBdoScriptInterpreter
  nameWithType: IBdoScriptInterpreter
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  isExternal: true
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Application.Rights.UserPermission.ActionName*
  commentId: Overload:BindOpen.Application.Rights.UserPermission.ActionName
  isExternal: true
  name: ActionName
  nameWithType: UserPermission.ActionName
  fullName: BindOpen.Application.Rights.UserPermission.ActionName
- uid: BindOpen.Application.Rights.UserPermission.Value*
  commentId: Overload:BindOpen.Application.Rights.UserPermission.Value
  isExternal: true
  name: Value
  nameWithType: UserPermission.Value
  fullName: BindOpen.Application.Rights.UserPermission.Value
- uid: BindOpen.Application.Rights.UserPermission.ValueScript*
  commentId: Overload:BindOpen.Application.Rights.UserPermission.ValueScript
  isExternal: true
  name: ValueScript
  nameWithType: UserPermission.ValueScript
  fullName: BindOpen.Application.Rights.UserPermission.ValueScript
shouldSkipMarkup: true
