### YamlMime:ManagedReference
items:
- uid: BindOpen.Extensions.Handlers.TextFromFile
  commentId: T:BindOpen.Extensions.Handlers.TextFromFile
  id: TextFromFile
  parent: BindOpen.Extensions.Handlers
  children:
  - BindOpen.Extensions.Handlers.TextFromFile.Get(BindOpen.Data.Elements.DataElement,BindOpen.Data.Elements.DataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Extensions.Handlers.TextFromFile.Post(System.Object,BindOpen.Data.Elements.DataElement@,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  langs:
  - csharp
  - vb
  name: TextFromFile
  nameWithType: TextFromFile
  fullName: BindOpen.Extensions.Handlers.TextFromFile
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Extensions.Handlers
  summary: "\nThis static class represents the handler \n"
  syntax:
    content: 'public static class TextFromFile : Object'
    content.vb: >-
      Public Module TextFromFile
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Extensions.Handlers.TextFromFile.Get(BindOpen.Data.Elements.DataElement,BindOpen.Data.Elements.DataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Extensions.Handlers.TextFromFile.Get(BindOpen.Data.Elements.DataElement,BindOpen.Data.Elements.DataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: Get(BindOpen.Data.Elements.DataElement,BindOpen.Data.Elements.DataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Extensions.Handlers.TextFromFile
  langs:
  - csharp
  - vb
  name: Get(DataElement, DataElementSet, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: TextFromFile.Get(DataElement, DataElementSet, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Extensions.Handlers.TextFromFile.Get(BindOpen.Data.Elements.DataElement, BindOpen.Data.Elements.DataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Extensions.Handlers
  summary: "\nGets the target objects from the specified source.\n"
  syntax:
    content: public static List<object> Get(DataElement sourceElement = null, DataElementSet pathDetail = null, IBdoScope scope = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: sourceElement
      type: BindOpen.Data.Elements.DataElement
      description: The source element to consider.
    - id: pathDetail
      type: BindOpen.Data.Elements.DataElementSet
      description: The path detail to consider.
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.Collections.Generic.List{System.Object}
      description: Returns the target objects.
    content.vb: Public Shared Function Get(sourceElement As DataElement = Nothing, pathDetail As DataElementSet = Nothing, scope As IBdoScope = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As List(Of Object)
  overload: BindOpen.Extensions.Handlers.TextFromFile.Get*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Extensions.Handlers.TextFromFile.Post(System.Object,BindOpen.Data.Elements.DataElement@,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Extensions.Handlers.TextFromFile.Post(System.Object,BindOpen.Data.Elements.DataElement@,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: Post(System.Object,BindOpen.Data.Elements.DataElement@,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Extensions.Handlers.TextFromFile
  langs:
  - csharp
  - vb
  name: Post(Object, ref DataElement, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: TextFromFile.Post(Object, ref DataElement, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Extensions.Handlers.TextFromFile.Post(System.Object, ref BindOpen.Data.Elements.DataElement, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Extensions.Handlers
  summary: "\nPosts the selected targets to the source.\n"
  syntax:
    content: public static List<object> Post(object targetObject, ref DataElement sourceDataElement, IBdoScope scope = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: targetObject
      type: System.Object
      description: The target object to consider.
    - id: sourceDataElement
      type: BindOpen.Data.Elements.DataElement
      description: The source data element to consider.
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.Collections.Generic.List{System.Object}
      description: Returns the source object.
    content.vb: Public Shared Function Post(targetObject As Object, ByRef sourceDataElement As DataElement, scope As IBdoScope = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As List(Of Object)
  overload: BindOpen.Extensions.Handlers.TextFromFile.Post*
  nameWithType.vb: TextFromFile.Post(Object, ByRef DataElement, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Handlers.TextFromFile.Post(System.Object, ByRef BindOpen.Data.Elements.DataElement, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Post(Object, ByRef DataElement, IBdoScope, IBdoScriptVariableSet, IBdoLog)
references:
- uid: BindOpen.Extensions.Handlers
  commentId: N:BindOpen.Extensions.Handlers
  isExternal: true
  name: BindOpen.Extensions.Handlers
  nameWithType: BindOpen.Extensions.Handlers
  fullName: BindOpen.Extensions.Handlers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Extensions.Handlers.TextFromFile.Get*
  commentId: Overload:BindOpen.Extensions.Handlers.TextFromFile.Get
  isExternal: true
  name: Get
  nameWithType: TextFromFile.Get
  fullName: BindOpen.Extensions.Handlers.TextFromFile.Get
- uid: BindOpen.Data.Elements.DataElement
  isExternal: true
  name: DataElement
  nameWithType: DataElement
  fullName: BindOpen.Data.Elements.DataElement
- uid: BindOpen.Data.Elements.DataElementSet
  isExternal: true
  name: DataElementSet
  nameWithType: DataElementSet
  fullName: BindOpen.Data.Elements.DataElementSet
- uid: BindOpen.Application.Scopes.IBdoScope
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  isExternal: true
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: System.Collections.Generic.List{System.Object}
  commentId: '!:System.Collections.Generic.List{System.Object}'
  definition: System.Collections.Generic.List`1
  name: List<Object>
  nameWithType: List<Object>
  fullName: System.Collections.Generic.List<System.Object>
  nameWithType.vb: List(Of Object)
  fullName.vb: System.Collections.Generic.List(Of System.Object)
  name.vb: List(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Handlers.TextFromFile.Post*
  commentId: Overload:BindOpen.Extensions.Handlers.TextFromFile.Post
  isExternal: true
  name: Post
  nameWithType: TextFromFile.Post
  fullName: BindOpen.Extensions.Handlers.TextFromFile.Post
shouldSkipMarkup: true
