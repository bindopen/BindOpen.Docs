### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationExtension
  id: ConfigurationExtension
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String)
  - Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  langs:
  - csharp
  - vb
  name: ConfigurationExtension
  nameWithType: ConfigurationExtension
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension
  type: Class
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.Configuration
  summary: "\nThis static class extends .Net core configuration.\n"
  syntax:
    content: 'public static class ConfigurationExtension : Object'
    content.vb: >-
      Public Module ConfigurationExtension
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: GetBdoValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationExtension
  langs:
  - csharp
  - vb
  name: GetBdoValue<T>(IConfiguration, String, IBdoScope, ScriptVariableSet, IBdoLog)
  nameWithType: ConfigurationExtension.GetBdoValue<T>(IConfiguration, String, IBdoScope, ScriptVariableSet, IBdoLog)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue<T>(Microsoft.Extensions.Configuration.IConfiguration, System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.ScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.Configuration
  summary: "\n\n"
  syntax:
    content: >-
      public static T GetBdoValue<T>(this IConfiguration configuration, string key, IBdoScope scope = null, ScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
          where T : class
    parameters:
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
    - id: key
      type: System.String
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.ScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBdoValue(Of T As Class)(configuration As IConfiguration, key As String, scope As IBdoScope = Nothing, scriptVariableSet As ScriptVariableSet = Nothing, log As IBdoLog = Nothing) As T
  overload: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue*
  nameWithType.vb: ConfigurationExtension.GetBdoValue(Of T)(IConfiguration, String, IBdoScope, ScriptVariableSet, IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Of T)(Microsoft.Extensions.Configuration.IConfiguration, System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.ScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: GetBdoValue(Of T)(IConfiguration, String, IBdoScope, ScriptVariableSet, IBdoLog)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: GetBdoValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationExtension
  langs:
  - csharp
  - vb
  name: GetBdoValue<T>(IConfiguration, String, String, IBdoScope, ScriptVariableSet, IBdoLog)
  nameWithType: ConfigurationExtension.GetBdoValue<T>(IConfiguration, String, String, IBdoScope, ScriptVariableSet, IBdoLog)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue<T>(Microsoft.Extensions.Configuration.IConfiguration, System.String, System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.ScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.Configuration
  summary: "\n\n"
  syntax:
    content: >-
      public static T GetBdoValue<T>(this IConfiguration configuration, string key, string defaultValue, IBdoScope scope = null, ScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
          where T : class
    parameters:
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
    - id: key
      type: System.String
    - id: defaultValue
      type: System.String
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.ScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBdoValue(Of T As Class)(configuration As IConfiguration, key As String, defaultValue As String, scope As IBdoScope = Nothing, scriptVariableSet As ScriptVariableSet = Nothing, log As IBdoLog = Nothing) As T
  overload: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue*
  nameWithType.vb: ConfigurationExtension.GetBdoValue(Of T)(IConfiguration, String, String, IBdoScope, ScriptVariableSet, IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Of T)(Microsoft.Extensions.Configuration.IConfiguration, System.String, System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.ScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: GetBdoValue(Of T)(IConfiguration, String, String, IBdoScope, ScriptVariableSet, IBdoLog)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String)
  id: GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationExtension
  langs:
  - csharp
  - vb
  name: GetBdoValue(IConfiguration, Type, String)
  nameWithType: ConfigurationExtension.GetBdoValue(IConfiguration, Type, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration, System.Type, System.String)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.Configuration
  summary: "\n\n"
  syntax:
    content: public static object GetBdoValue(this IConfiguration configuration, Type type, string key)
    parameters:
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
    - id: type
      type: System.Type
    - id: key
      type: System.String
    return:
      type: System.Object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBdoValue(configuration As IConfiguration, type As Type, key As String) As Object
  overload: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String,System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.ScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationExtension
  langs:
  - csharp
  - vb
  name: GetBdoValue(IConfiguration, Type, String, String, IBdoScope, ScriptVariableSet, IBdoLog)
  nameWithType: ConfigurationExtension.GetBdoValue(IConfiguration, Type, String, String, IBdoScope, ScriptVariableSet, IBdoLog)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue(Microsoft.Extensions.Configuration.IConfiguration, System.Type, System.String, System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.ScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.Configuration
  summary: "\n\n"
  syntax:
    content: public static object GetBdoValue(this IConfiguration configuration, Type type, string key, string defaultValue, IBdoScope scope = null, ScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
    - id: type
      type: System.Type
    - id: key
      type: System.String
    - id: defaultValue
      type: System.String
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.ScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
    return:
      type: System.Object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBdoValue(configuration As IConfiguration, type As Type, key As String, defaultValue As String, scope As IBdoScope = Nothing, scriptVariableSet As ScriptVariableSet = Nothing, log As IBdoLog = Nothing) As Object
  overload: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: true
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue
  isExternal: true
  name: GetBdoValue
  nameWithType: ConfigurationExtension.GetBdoValue
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetBdoValue
- uid: Microsoft.Extensions.Configuration.IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Application.Scopes.IBdoScope
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.System.Scripting.ScriptVariableSet
  isExternal: true
  name: ScriptVariableSet
  nameWithType: ScriptVariableSet
  fullName: BindOpen.System.Scripting.ScriptVariableSet
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
shouldSkipMarkup: true
