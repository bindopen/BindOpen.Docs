### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Models.IBdoDbModel
  commentId: T:BindOpen.Data.Models.IBdoDbModel
  id: IBdoDbModel
  parent: BindOpen.Data.Models
  children:
  - BindOpen.Data.Models.IBdoDbModel.JoinCondition(System.String,System.ValueTuple{System.String,System.String}[])
  - BindOpen.Data.Models.IBdoDbModel.OnCreating(BindOpen.Data.Models.IBdoDbModelBuilder)
  - BindOpen.Data.Models.IBdoDbModel.Query(System.String)
  - BindOpen.Data.Models.IBdoDbModel.Table(System.String,System.String)
  - BindOpen.Data.Models.IBdoDbModel.Tuple(System.String,System.String)
  - BindOpen.Data.Models.IBdoDbModel.Tuple(System.String,System.ValueTuple{System.String,System.String}[])
  langs:
  - csharp
  - vb
  name: IBdoDbModel
  nameWithType: IBdoDbModel
  fullName: BindOpen.Data.Models.IBdoDbModel
  type: Interface
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Models
  summary: "\n\n"
  syntax:
    content: 'public interface IBdoDbModel : IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced'
    content.vb: >-
      Public Interface IBdoDbModel
          Inherits IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.Data.Models.IBdoDbModel.OnCreating(BindOpen.Data.Models.IBdoDbModelBuilder)
  commentId: M:BindOpen.Data.Models.IBdoDbModel.OnCreating(BindOpen.Data.Models.IBdoDbModelBuilder)
  id: OnCreating(BindOpen.Data.Models.IBdoDbModelBuilder)
  parent: BindOpen.Data.Models.IBdoDbModel
  langs:
  - csharp
  - vb
  name: OnCreating(IBdoDbModelBuilder)
  nameWithType: IBdoDbModel.OnCreating(IBdoDbModelBuilder)
  fullName: BindOpen.Data.Models.IBdoDbModel.OnCreating(BindOpen.Data.Models.IBdoDbModelBuilder)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Models
  summary: "\n\n"
  syntax:
    content: void OnCreating(IBdoDbModelBuilder builder)
    parameters:
    - id: builder
      type: BindOpen.Data.Models.IBdoDbModelBuilder
    content.vb: Sub OnCreating(builder As IBdoDbModelBuilder)
  overload: BindOpen.Data.Models.IBdoDbModel.OnCreating*
- uid: BindOpen.Data.Models.IBdoDbModel.Table(System.String,System.String)
  commentId: M:BindOpen.Data.Models.IBdoDbModel.Table(System.String,System.String)
  id: Table(System.String,System.String)
  parent: BindOpen.Data.Models.IBdoDbModel
  langs:
  - csharp
  - vb
  name: Table(String, String)
  nameWithType: IBdoDbModel.Table(String, String)
  fullName: BindOpen.Data.Models.IBdoDbModel.Table(System.String, System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Models
  summary: "\n\n"
  syntax:
    content: DbTable Table(string name, string alias = null)
    parameters:
    - id: name
      type: System.String
    - id: alias
      type: System.String
    return:
      type: BindOpen.Extensions.Carriers.DbTable
    content.vb: Function Table(name As String, alias As String = Nothing) As DbTable
  overload: BindOpen.Data.Models.IBdoDbModel.Table*
- uid: BindOpen.Data.Models.IBdoDbModel.JoinCondition(System.String,System.ValueTuple{System.String,System.String}[])
  commentId: M:BindOpen.Data.Models.IBdoDbModel.JoinCondition(System.String,System.ValueTuple{System.String,System.String}[])
  id: JoinCondition(System.String,System.ValueTuple{System.String,System.String}[])
  parent: BindOpen.Data.Models.IBdoDbModel
  langs:
  - csharp
  - vb
  name: JoinCondition(String, ValueTuple<String, String>[])
  nameWithType: IBdoDbModel.JoinCondition(String, ValueTuple<String, String>[])
  fullName: BindOpen.Data.Models.IBdoDbModel.JoinCondition(System.String, System.ValueTuple<System.String, System.String>[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Models
  summary: "\n\n"
  syntax:
    content: DataExpression JoinCondition(string name, params ValueTuple<string, string>[] aliases)
    parameters:
    - id: name
      type: System.String
    - id: aliases
      type: System.ValueTuple{System.String,System.String}[]
    return:
      type: BindOpen.Data.Expression.DataExpression
    content.vb: Function JoinCondition(name As String, ParamArray aliases As ValueTuple(Of String, String)()) As DataExpression
  overload: BindOpen.Data.Models.IBdoDbModel.JoinCondition*
  nameWithType.vb: IBdoDbModel.JoinCondition(String, ValueTuple(Of String, String)())
  fullName.vb: BindOpen.Data.Models.IBdoDbModel.JoinCondition(System.String, System.ValueTuple(Of System.String, System.String)())
  name.vb: JoinCondition(String, ValueTuple(Of String, String)())
- uid: BindOpen.Data.Models.IBdoDbModel.Tuple(System.String,System.String)
  commentId: M:BindOpen.Data.Models.IBdoDbModel.Tuple(System.String,System.String)
  id: Tuple(System.String,System.String)
  parent: BindOpen.Data.Models.IBdoDbModel
  langs:
  - csharp
  - vb
  name: Tuple(String, String)
  nameWithType: IBdoDbModel.Tuple(String, String)
  fullName: BindOpen.Data.Models.IBdoDbModel.Tuple(System.String, System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Models
  summary: "\n\n"
  syntax:
    content: DbField[] Tuple(string name, string alias)
    parameters:
    - id: name
      type: System.String
    - id: alias
      type: System.String
    return:
      type: BindOpen.Extensions.Carriers.DbField[]
    content.vb: Function Tuple(name As String, alias As String) As DbField()
  overload: BindOpen.Data.Models.IBdoDbModel.Tuple*
- uid: BindOpen.Data.Models.IBdoDbModel.Tuple(System.String,System.ValueTuple{System.String,System.String}[])
  commentId: M:BindOpen.Data.Models.IBdoDbModel.Tuple(System.String,System.ValueTuple{System.String,System.String}[])
  id: Tuple(System.String,System.ValueTuple{System.String,System.String}[])
  parent: BindOpen.Data.Models.IBdoDbModel
  langs:
  - csharp
  - vb
  name: Tuple(String, ValueTuple<String, String>[])
  nameWithType: IBdoDbModel.Tuple(String, ValueTuple<String, String>[])
  fullName: BindOpen.Data.Models.IBdoDbModel.Tuple(System.String, System.ValueTuple<System.String, System.String>[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Models
  summary: "\n\n"
  syntax:
    content: DbField[] Tuple(string name, params ValueTuple<string, string>[] aliases)
    parameters:
    - id: name
      type: System.String
    - id: aliases
      type: System.ValueTuple{System.String,System.String}[]
    return:
      type: BindOpen.Extensions.Carriers.DbField[]
    content.vb: Function Tuple(name As String, ParamArray aliases As ValueTuple(Of String, String)()) As DbField()
  overload: BindOpen.Data.Models.IBdoDbModel.Tuple*
  nameWithType.vb: IBdoDbModel.Tuple(String, ValueTuple(Of String, String)())
  fullName.vb: BindOpen.Data.Models.IBdoDbModel.Tuple(System.String, System.ValueTuple(Of System.String, System.String)())
  name.vb: Tuple(String, ValueTuple(Of String, String)())
- uid: BindOpen.Data.Models.IBdoDbModel.Query(System.String)
  commentId: M:BindOpen.Data.Models.IBdoDbModel.Query(System.String)
  id: Query(System.String)
  parent: BindOpen.Data.Models.IBdoDbModel
  langs:
  - csharp
  - vb
  name: Query(String)
  nameWithType: IBdoDbModel.Query(String)
  fullName: BindOpen.Data.Models.IBdoDbModel.Query(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Models
  summary: "\n\n"
  syntax:
    content: IDbStoredQuery Query(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: BindOpen.Data.Queries.IDbStoredQuery
    content.vb: Function Query(name As String) As IDbStoredQuery
  overload: BindOpen.Data.Models.IBdoDbModel.Query*
references:
- uid: BindOpen.Data.Models
  commentId: N:BindOpen.Data.Models
  isExternal: true
  name: BindOpen.Data.Models
  nameWithType: BindOpen.Data.Models
  fullName: BindOpen.Data.Models
- uid: BindOpen.Data.Models.IBdoDbModel.OnCreating*
  commentId: Overload:BindOpen.Data.Models.IBdoDbModel.OnCreating
  isExternal: true
  name: OnCreating
  nameWithType: IBdoDbModel.OnCreating
  fullName: BindOpen.Data.Models.IBdoDbModel.OnCreating
- uid: BindOpen.Data.Models.IBdoDbModelBuilder
  commentId: T:BindOpen.Data.Models.IBdoDbModelBuilder
  parent: BindOpen.Data.Models
  isExternal: true
  name: IBdoDbModelBuilder
  nameWithType: IBdoDbModelBuilder
  fullName: BindOpen.Data.Models.IBdoDbModelBuilder
- uid: BindOpen.Data.Models.IBdoDbModel.Table*
  commentId: Overload:BindOpen.Data.Models.IBdoDbModel.Table
  isExternal: true
  name: Table
  nameWithType: IBdoDbModel.Table
  fullName: BindOpen.Data.Models.IBdoDbModel.Table
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Extensions.Carriers.DbTable
  commentId: T:BindOpen.Extensions.Carriers.DbTable
  parent: BindOpen.Extensions.Carriers
  isExternal: true
  name: DbTable
  nameWithType: DbTable
  fullName: BindOpen.Extensions.Carriers.DbTable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Extensions.Carriers
  commentId: N:BindOpen.Extensions.Carriers
  isExternal: true
  name: BindOpen.Extensions.Carriers
  nameWithType: BindOpen.Extensions.Carriers
  fullName: BindOpen.Extensions.Carriers
- uid: BindOpen.Data.Models.IBdoDbModel.JoinCondition*
  commentId: Overload:BindOpen.Data.Models.IBdoDbModel.JoinCondition
  isExternal: true
  name: JoinCondition
  nameWithType: IBdoDbModel.JoinCondition
  fullName: BindOpen.Data.Models.IBdoDbModel.JoinCondition
- uid: System.ValueTuple{System.String,System.String}[]
  isExternal: true
  name: ValueTuple<String, String>[]
  nameWithType: ValueTuple<String, String>[]
  fullName: System.ValueTuple<System.String, System.String>[]
  nameWithType.vb: ValueTuple(Of String, String)()
  fullName.vb: System.ValueTuple(Of System.String, System.String)()
  name.vb: ValueTuple(Of String, String)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Expression.DataExpression
  isExternal: true
  name: DataExpression
  nameWithType: DataExpression
  fullName: BindOpen.Data.Expression.DataExpression
- uid: BindOpen.Data.Models.IBdoDbModel.Tuple*
  commentId: Overload:BindOpen.Data.Models.IBdoDbModel.Tuple
  isExternal: true
  name: Tuple
  nameWithType: IBdoDbModel.Tuple
  fullName: BindOpen.Data.Models.IBdoDbModel.Tuple
- uid: BindOpen.Extensions.Carriers.DbField[]
  isExternal: true
  name: DbField[]
  nameWithType: DbField[]
  fullName: BindOpen.Extensions.Carriers.DbField[]
  nameWithType.vb: DbField()
  fullName.vb: BindOpen.Extensions.Carriers.DbField()
  name.vb: DbField()
  spec.csharp:
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Models.IBdoDbModel.Query*
  commentId: Overload:BindOpen.Data.Models.IBdoDbModel.Query
  isExternal: true
  name: Query
  nameWithType: IBdoDbModel.Query
  fullName: BindOpen.Data.Models.IBdoDbModel.Query
- uid: BindOpen.Data.Queries.IDbStoredQuery
  commentId: T:BindOpen.Data.Queries.IDbStoredQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbStoredQuery
  nameWithType: IDbStoredQuery
  fullName: BindOpen.Data.Queries.IDbStoredQuery
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  isExternal: true
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
shouldSkipMarkup: true
