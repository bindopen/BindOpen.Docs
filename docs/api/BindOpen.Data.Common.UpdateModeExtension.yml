### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Common.UpdateModeExtension
  commentId: T:BindOpen.Data.Common.UpdateModeExtension
  id: UpdateModeExtension
  parent: BindOpen.Data.Common
  children:
  - BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes,BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Common.UpdateModeExtension.Has(BindOpen.Data.Common.UpdateModes[],BindOpen.Data.Common.UpdateModes)
  langs:
  - csharp
  - vb
  name: UpdateModeExtension
  nameWithType: UpdateModeExtension
  fullName: BindOpen.Data.Common.UpdateModeExtension
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/UpdateModes.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: UpdateModeExtension
    path: ../src/BindOpen.Core/Data/Common/UpdateModes.cs
    startLine: 61
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nThis class represents an update mode extension.\n"
  example: []
  syntax:
    content: public static class UpdateModeExtension
    content.vb: Public Module UpdateModeExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Common.UpdateModeExtension.Has(BindOpen.Data.Common.UpdateModes[],BindOpen.Data.Common.UpdateModes)
  commentId: M:BindOpen.Data.Common.UpdateModeExtension.Has(BindOpen.Data.Common.UpdateModes[],BindOpen.Data.Common.UpdateModes)
  id: Has(BindOpen.Data.Common.UpdateModes[],BindOpen.Data.Common.UpdateModes)
  isExtensionMethod: true
  parent: BindOpen.Data.Common.UpdateModeExtension
  langs:
  - csharp
  - vb
  name: Has(UpdateModes[], UpdateModes)
  nameWithType: UpdateModeExtension.Has(UpdateModes[], UpdateModes)
  fullName: BindOpen.Data.Common.UpdateModeExtension.Has(BindOpen.Data.Common.UpdateModes[], BindOpen.Data.Common.UpdateModes)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/UpdateModes.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Has
    path: ../src/BindOpen.Core/Data/Common/UpdateModes.cs
    startLine: 69
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nIndicates whether the specified update mode list contains the specified update mode.\n"
  example: []
  syntax:
    content: public static bool Has(this UpdateModes[] updateModes, UpdateModes updateMode)
    parameters:
    - id: updateModes
      type: BindOpen.Data.Common.UpdateModes[]
      description: The specified update mode list to consider.
    - id: updateMode
      type: BindOpen.Data.Common.UpdateModes
      description: The specified update mode to consider.
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Has(updateModes As UpdateModes(), updateMode As UpdateModes) As Boolean
  overload: BindOpen.Data.Common.UpdateModeExtension.Has*
  nameWithType.vb: UpdateModeExtension.Has(UpdateModes(), UpdateModes)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Common.UpdateModeExtension.Has(BindOpen.Data.Common.UpdateModes(), BindOpen.Data.Common.UpdateModes)
  name.vb: Has(UpdateModes(), UpdateModes)
- uid: BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes[],BindOpen.Data.Common.UpdateModes[])
  id: Excluding(BindOpen.Data.Common.UpdateModes[],BindOpen.Data.Common.UpdateModes[])
  isExtensionMethod: true
  parent: BindOpen.Data.Common.UpdateModeExtension
  langs:
  - csharp
  - vb
  name: Excluding(UpdateModes[], UpdateModes[])
  nameWithType: UpdateModeExtension.Excluding(UpdateModes[], UpdateModes[])
  fullName: BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes[], BindOpen.Data.Common.UpdateModes[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/UpdateModes.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Excluding
    path: ../src/BindOpen.Core/Data/Common/UpdateModes.cs
    startLine: 82
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nGets the specified list excluding the second specified list.\n"
  example: []
  syntax:
    content: public static UpdateModes[] Excluding(this UpdateModes[] updateModes, params UpdateModes[] excludingUpdateModes)
    parameters:
    - id: updateModes
      type: BindOpen.Data.Common.UpdateModes[]
      description: The update modes to consider.
    - id: excludingUpdateModes
      type: BindOpen.Data.Common.UpdateModes[]
      description: The excluding update modes to consider.
    return:
      type: BindOpen.Data.Common.UpdateModes[]
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Excluding(updateModes As UpdateModes(), ParamArray excludingUpdateModes As UpdateModes()) As UpdateModes()
  overload: BindOpen.Data.Common.UpdateModeExtension.Excluding*
  nameWithType.vb: UpdateModeExtension.Excluding(UpdateModes(), UpdateModes())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes(), BindOpen.Data.Common.UpdateModes())
  name.vb: Excluding(UpdateModes(), UpdateModes())
- uid: BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes,BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes,BindOpen.Data.Common.UpdateModes[])
  id: Excluding(BindOpen.Data.Common.UpdateModes,BindOpen.Data.Common.UpdateModes[])
  isExtensionMethod: true
  parent: BindOpen.Data.Common.UpdateModeExtension
  langs:
  - csharp
  - vb
  name: Excluding(UpdateModes, UpdateModes[])
  nameWithType: UpdateModeExtension.Excluding(UpdateModes, UpdateModes[])
  fullName: BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes, BindOpen.Data.Common.UpdateModes[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/UpdateModes.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Excluding
    path: ../src/BindOpen.Core/Data/Common/UpdateModes.cs
    startLine: 97
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nGets the specified list excluding the secong specified list.\n"
  example: []
  syntax:
    content: public static UpdateModes[] Excluding(this UpdateModes updateMode, params UpdateModes[] excludingUpdateModes)
    parameters:
    - id: updateMode
      type: BindOpen.Data.Common.UpdateModes
      description: The update mode to consider.
    - id: excludingUpdateModes
      type: BindOpen.Data.Common.UpdateModes[]
      description: The excluding update modes to consider.
    return:
      type: BindOpen.Data.Common.UpdateModes[]
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Excluding(updateMode As UpdateModes, ParamArray excludingUpdateModes As UpdateModes()) As UpdateModes()
  overload: BindOpen.Data.Common.UpdateModeExtension.Excluding*
  nameWithType.vb: UpdateModeExtension.Excluding(UpdateModes, UpdateModes())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Common.UpdateModeExtension.Excluding(BindOpen.Data.Common.UpdateModes, BindOpen.Data.Common.UpdateModes())
  name.vb: Excluding(UpdateModes, UpdateModes())
references:
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Common.UpdateModeExtension.Has*
  commentId: Overload:BindOpen.Data.Common.UpdateModeExtension.Has
  name: Has
  nameWithType: UpdateModeExtension.Has
  fullName: BindOpen.Data.Common.UpdateModeExtension.Has
- uid: BindOpen.Data.Common.UpdateModes[]
  isExternal: true
  name: UpdateModes[]
  nameWithType: UpdateModes[]
  fullName: BindOpen.Data.Common.UpdateModes[]
  nameWithType.vb: UpdateModes()
  fullName.vb: BindOpen.Data.Common.UpdateModes()
  name.vb: UpdateModes()
  spec.csharp:
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Common.UpdateModes
  commentId: T:BindOpen.Data.Common.UpdateModes
  parent: BindOpen.Data.Common
  name: UpdateModes
  nameWithType: UpdateModes
  fullName: BindOpen.Data.Common.UpdateModes
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Common.UpdateModeExtension.Excluding*
  commentId: Overload:BindOpen.Data.Common.UpdateModeExtension.Excluding
  name: Excluding
  nameWithType: UpdateModeExtension.Excluding
  fullName: BindOpen.Data.Common.UpdateModeExtension.Excluding
shouldSkipMarkup: true
