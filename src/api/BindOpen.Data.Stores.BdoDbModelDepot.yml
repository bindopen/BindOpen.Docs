### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Stores.BdoDbModelDepot
  commentId: T:BindOpen.Data.Stores.BdoDbModelDepot
  id: BdoDbModelDepot
  parent: BindOpen.Data.Stores
  children:
  - BindOpen.Data.Stores.BdoDbModelDepot.#ctor
  - BindOpen.Data.Stores.BdoDbModelDepot.#ctor(BindOpen.Data.Models.BdoDbModel[])
  - BindOpen.Data.Stores.BdoDbModelDepot.Add(BindOpen.Data.Models.BdoDbModel,BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel})
  - BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly(System.String,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Stores.BdoDbModelDepot.GetModel(System.String)
  - BindOpen.Data.Stores.BdoDbModelDepot.GetModel``1
  - BindOpen.Data.Stores.BdoDbModelDepot.Models
  langs:
  - csharp
  - vb
  name: BdoDbModelDepot
  nameWithType: BdoDbModelDepot
  fullName: BindOpen.Data.Stores.BdoDbModelDepot
  type: Class
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nThis class represents a database model depot.\n"
  syntax:
    content: 'public class BdoDbModelDepot : TBdoDepot<BdoDbModel>, IBdoDbModelDepot, ITBdoDepot<BdoDbModel>, IDataItemSet<BdoDbModel>, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IBdoDepot'
    content.vb: >-
      Public Class BdoDbModelDepot
          Inherits TBdoDepot(Of BdoDbModel)
          Implements IBdoDbModelDepot, ITBdoDepot(Of BdoDbModel), IDataItemSet(Of BdoDbModel), IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IBdoDepot
  inheritance:
  - System.Object
  implements:
  - BindOpen.Data.Stores.IBdoDbModelDepot
  - BindOpen.Data.Stores.ITBdoDepot{BindOpen.Data.Models.BdoDbModel}
  - BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel}
  - BindOpen.Data.Items.IIdentifiedDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  - BindOpen.Data.Items.IIdentified
  - BindOpen.Data.Items.IReferenced
  - BindOpen.Data.Stores.IBdoDepot
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Data.Stores.BdoDbModelDepot.#ctor
  commentId: M:BindOpen.Data.Stores.BdoDbModelDepot.#ctor
  id: '#ctor'
  parent: BindOpen.Data.Stores.BdoDbModelDepot
  langs:
  - csharp
  - vb
  name: BdoDbModelDepot()
  nameWithType: BdoDbModelDepot.BdoDbModelDepot()
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.BdoDbModelDepot()
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nInstantiates a new instance of the BdoDbModelDepot class.\n"
  syntax:
    content: public BdoDbModelDepot()
    content.vb: Public Sub New
  overload: BindOpen.Data.Stores.BdoDbModelDepot.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Stores.BdoDbModelDepot.#ctor(BindOpen.Data.Models.BdoDbModel[])
  commentId: M:BindOpen.Data.Stores.BdoDbModelDepot.#ctor(BindOpen.Data.Models.BdoDbModel[])
  id: '#ctor(BindOpen.Data.Models.BdoDbModel[])'
  parent: BindOpen.Data.Stores.BdoDbModelDepot
  langs:
  - csharp
  - vb
  name: BdoDbModelDepot(BdoDbModel[])
  nameWithType: BdoDbModelDepot.BdoDbModelDepot(BdoDbModel[])
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.BdoDbModelDepot(BindOpen.Data.Models.BdoDbModel[])
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nInstantiates a new instance of the BdoDbModelDepot class.\n"
  syntax:
    content: public BdoDbModelDepot(params BdoDbModel[] models)
    parameters:
    - id: models
      type: BindOpen.Data.Models.BdoDbModel[]
    content.vb: Public Sub New(ParamArray models As BdoDbModel())
  overload: BindOpen.Data.Stores.BdoDbModelDepot.#ctor*
  nameWithType.vb: BdoDbModelDepot.BdoDbModelDepot(BdoDbModel())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Stores.BdoDbModelDepot.BdoDbModelDepot(BindOpen.Data.Models.BdoDbModel())
  name.vb: BdoDbModelDepot(BdoDbModel())
- uid: BindOpen.Data.Stores.BdoDbModelDepot.Add(BindOpen.Data.Models.BdoDbModel,BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel})
  commentId: M:BindOpen.Data.Stores.BdoDbModelDepot.Add(BindOpen.Data.Models.BdoDbModel,BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel})
  id: Add(BindOpen.Data.Models.BdoDbModel,BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel})
  parent: BindOpen.Data.Stores.BdoDbModelDepot
  langs:
  - csharp
  - vb
  name: Add(BdoDbModel, IDataItemSet<BdoDbModel>)
  nameWithType: BdoDbModelDepot.Add(BdoDbModel, IDataItemSet<BdoDbModel>)
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.Add(BindOpen.Data.Models.BdoDbModel, BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Models.BdoDbModel>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nAdds a new item.\n"
  remarks: The new item must have a name.
  syntax:
    content: public override void Add(BdoDbModel item, IDataItemSet<BdoDbModel> referenceCollection = null)
    parameters:
    - id: item
      type: BindOpen.Data.Models.BdoDbModel
      description: The new item to add.
    - id: referenceCollection
      type: BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel}
      description: The reference collection to consider.
    content.vb: Public Overrides Sub Add(item As BdoDbModel, referenceCollection As IDataItemSet(Of BdoDbModel) = Nothing)
  overload: BindOpen.Data.Stores.BdoDbModelDepot.Add*
  nameWithType.vb: BdoDbModelDepot.Add(BdoDbModel, IDataItemSet(Of BdoDbModel))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.Data.Stores.BdoDbModelDepot.Add(BindOpen.Data.Models.BdoDbModel, BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Models.BdoDbModel))
  name.vb: Add(BdoDbModel, IDataItemSet(Of BdoDbModel))
- uid: BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly(System.String,BindOpen.System.Diagnostics.IBdoLog)
  id: AddFromAssembly(System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Stores.BdoDbModelDepot
  langs:
  - csharp
  - vb
  name: AddFromAssembly(String, IBdoLog)
  nameWithType: BdoDbModelDepot.AddFromAssembly(String, IBdoLog)
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly(System.String, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nAdd the items from the specified assembly.\n"
  syntax:
    content: public override IBdoDepot AddFromAssembly(string assemblyName, IBdoLog log = null)
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: BindOpen.Data.Stores.IBdoDepot
    content.vb: Public Overrides Function AddFromAssembly(assemblyName As String, log As IBdoLog = Nothing) As IBdoDepot
  overload: BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.Data.Stores.BdoDbModelDepot.GetModel``1
  commentId: M:BindOpen.Data.Stores.BdoDbModelDepot.GetModel``1
  id: GetModel``1
  parent: BindOpen.Data.Stores.BdoDbModelDepot
  langs:
  - csharp
  - vb
  name: GetModel<T>()
  nameWithType: BdoDbModelDepot.GetModel<T>()
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.GetModel<T>()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nGets the database model of the specified type and with the specified name.\n"
  syntax:
    content: >-
      public T GetModel<T>()
          where T : BdoDbModel
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function GetModel(Of T As BdoDbModel) As T
  overload: BindOpen.Data.Stores.BdoDbModelDepot.GetModel*
  implements:
  - BindOpen.Data.Stores.IBdoDbModelDepot.GetModel``1
  nameWithType.vb: BdoDbModelDepot.GetModel(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Stores.BdoDbModelDepot.GetModel(Of T)()
  name.vb: GetModel(Of T)()
- uid: BindOpen.Data.Stores.BdoDbModelDepot.GetModel(System.String)
  commentId: M:BindOpen.Data.Stores.BdoDbModelDepot.GetModel(System.String)
  id: GetModel(System.String)
  parent: BindOpen.Data.Stores.BdoDbModelDepot
  langs:
  - csharp
  - vb
  name: GetModel(String)
  nameWithType: BdoDbModelDepot.GetModel(String)
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.GetModel(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nGets the database model with the specified name.\n"
  syntax:
    content: public IBdoDbModel GetModel(string name)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    return:
      type: BindOpen.Data.Models.IBdoDbModel
      description: Returns the database model with the specified name.
    content.vb: Public Function GetModel(name As String) As IBdoDbModel
  overload: BindOpen.Data.Stores.BdoDbModelDepot.GetModel*
  implements:
  - BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Stores.BdoDbModelDepot.Models
  commentId: P:BindOpen.Data.Stores.BdoDbModelDepot.Models
  id: Models
  parent: BindOpen.Data.Stores.BdoDbModelDepot
  langs:
  - csharp
  - vb
  name: Models
  nameWithType: BdoDbModelDepot.Models
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.Models
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nQueries of this instance.\n"
  syntax:
    content: public List<BdoDbModel> Models { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Models.BdoDbModel}
    content.vb: Public Property Models As List(Of BdoDbModel)
  overload: BindOpen.Data.Stores.BdoDbModelDepot.Models*
  implements:
  - BindOpen.Data.Stores.IBdoDbModelDepot.Models
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: BindOpen.Data.Stores
  commentId: N:BindOpen.Data.Stores
  isExternal: true
  name: BindOpen.Data.Stores
  nameWithType: BindOpen.Data.Stores
  fullName: BindOpen.Data.Stores
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.Data.Stores.IBdoDbModelDepot
  commentId: T:BindOpen.Data.Stores.IBdoDbModelDepot
  parent: BindOpen.Data.Stores
  isExternal: true
  name: IBdoDbModelDepot
  nameWithType: IBdoDbModelDepot
  fullName: BindOpen.Data.Stores.IBdoDbModelDepot
- uid: BindOpen.Data.Stores.ITBdoDepot{BindOpen.Data.Models.BdoDbModel}
  commentId: '!:BindOpen.Data.Stores.ITBdoDepot{BindOpen.Data.Models.BdoDbModel}'
  definition: BindOpen.Data.Stores.ITBdoDepot`1
  name: ITBdoDepot<BdoDbModel>
  nameWithType: ITBdoDepot<BdoDbModel>
  fullName: BindOpen.Data.Stores.ITBdoDepot<BindOpen.Data.Models.BdoDbModel>
  nameWithType.vb: ITBdoDepot(Of BdoDbModel)
  fullName.vb: BindOpen.Data.Stores.ITBdoDepot(Of BindOpen.Data.Models.BdoDbModel)
  name.vb: ITBdoDepot(Of BdoDbModel)
  spec.csharp:
  - uid: BindOpen.Data.Stores.ITBdoDepot`1
    name: ITBdoDepot
    nameWithType: ITBdoDepot
    fullName: BindOpen.Data.Stores.ITBdoDepot
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Models.BdoDbModel
    name: BdoDbModel
    nameWithType: BdoDbModel
    fullName: BindOpen.Data.Models.BdoDbModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Data.Stores.ITBdoDepot`1
    name: ITBdoDepot
    nameWithType: ITBdoDepot
    fullName: BindOpen.Data.Stores.ITBdoDepot
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Models.BdoDbModel
    name: BdoDbModel
    nameWithType: BdoDbModel
    fullName: BindOpen.Data.Models.BdoDbModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel}
  commentId: '!:BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel}'
  definition: BindOpen.Data.Items.IDataItemSet`1
  name: IDataItemSet<BdoDbModel>
  nameWithType: IDataItemSet<BdoDbModel>
  fullName: BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Models.BdoDbModel>
  nameWithType.vb: IDataItemSet(Of BdoDbModel)
  fullName.vb: BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Models.BdoDbModel)
  name.vb: IDataItemSet(Of BdoDbModel)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Models.BdoDbModel
    name: BdoDbModel
    nameWithType: BdoDbModel
    fullName: BindOpen.Data.Models.BdoDbModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Models.BdoDbModel
    name: BdoDbModel
    nameWithType: BdoDbModel
    fullName: BindOpen.Data.Models.BdoDbModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IIdentifiedDataItem
  isExternal: true
  name: IIdentifiedDataItem
  nameWithType: IIdentifiedDataItem
  fullName: BindOpen.Data.Items.IIdentifiedDataItem
- uid: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  isExternal: true
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  isExternal: true
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Stores.IBdoDepot
  isExternal: true
  name: IBdoDepot
  nameWithType: IBdoDepot
  fullName: BindOpen.Data.Stores.IBdoDepot
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Stores.ITBdoDepot`1
  commentId: '!:BindOpen.Data.Stores.ITBdoDepot`1'
  isExternal: true
  name: ITBdoDepot<>
  nameWithType: ITBdoDepot<>
  fullName: BindOpen.Data.Stores.ITBdoDepot<>
  nameWithType.vb: ITBdoDepot(Of )
  fullName.vb: BindOpen.Data.Stores.ITBdoDepot(Of )
  name.vb: ITBdoDepot(Of )
  spec.csharp:
  - uid: BindOpen.Data.Stores.ITBdoDepot`1
    name: ITBdoDepot
    nameWithType: ITBdoDepot
    fullName: BindOpen.Data.Stores.ITBdoDepot
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Data.Stores.ITBdoDepot`1
    name: ITBdoDepot
    nameWithType: ITBdoDepot
    fullName: BindOpen.Data.Stores.ITBdoDepot
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItemSet`1
  isExternal: true
  name: IDataItemSet<>
  nameWithType: IDataItemSet<>
  fullName: BindOpen.Data.Items.IDataItemSet<>
  nameWithType.vb: IDataItemSet(Of )
  fullName.vb: BindOpen.Data.Items.IDataItemSet(Of )
  name.vb: IDataItemSet(Of )
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Stores.BdoDbModelDepot.#ctor*
  commentId: Overload:BindOpen.Data.Stores.BdoDbModelDepot.#ctor
  isExternal: true
  name: BdoDbModelDepot
  nameWithType: BdoDbModelDepot.BdoDbModelDepot
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.BdoDbModelDepot
- uid: BindOpen.Data.Models.BdoDbModel[]
  isExternal: true
  name: BdoDbModel[]
  nameWithType: BdoDbModel[]
  fullName: BindOpen.Data.Models.BdoDbModel[]
  nameWithType.vb: BdoDbModel()
  fullName.vb: BindOpen.Data.Models.BdoDbModel()
  name.vb: BdoDbModel()
  spec.csharp:
  - uid: BindOpen.Data.Models.BdoDbModel
    name: BdoDbModel
    nameWithType: BdoDbModel
    fullName: BindOpen.Data.Models.BdoDbModel
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Models.BdoDbModel
    name: BdoDbModel
    nameWithType: BdoDbModel
    fullName: BindOpen.Data.Models.BdoDbModel
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Stores.BdoDbModelDepot.Add*
  commentId: Overload:BindOpen.Data.Stores.BdoDbModelDepot.Add
  isExternal: true
  name: Add
  nameWithType: BdoDbModelDepot.Add
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.Add
- uid: BindOpen.Data.Models.BdoDbModel
  commentId: T:BindOpen.Data.Models.BdoDbModel
  parent: BindOpen.Data.Models
  isExternal: true
  name: BdoDbModel
  nameWithType: BdoDbModel
  fullName: BindOpen.Data.Models.BdoDbModel
- uid: BindOpen.Data.Models
  commentId: N:BindOpen.Data.Models
  isExternal: true
  name: BindOpen.Data.Models
  nameWithType: BindOpen.Data.Models
  fullName: BindOpen.Data.Models
- uid: BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly*
  commentId: Overload:BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly
  isExternal: true
  name: AddFromAssembly
  nameWithType: BdoDbModelDepot.AddFromAssembly
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Data.Stores.BdoDbModelDepot.GetModel*
  commentId: Overload:BindOpen.Data.Stores.BdoDbModelDepot.GetModel
  isExternal: true
  name: GetModel
  nameWithType: BdoDbModelDepot.GetModel
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.GetModel
- uid: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel``1
  commentId: M:BindOpen.Data.Stores.IBdoDbModelDepot.GetModel``1
  parent: BindOpen.Data.Stores.IBdoDbModelDepot
  isExternal: true
  name: GetModel<T>()
  nameWithType: IBdoDbModelDepot.GetModel<T>()
  fullName: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel<T>()
  nameWithType.vb: IBdoDbModelDepot.GetModel(Of T)()
  fullName.vb: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(Of T)()
  name.vb: GetModel(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel``1
    name: GetModel<T>
    nameWithType: IBdoDbModelDepot.GetModel<T>
    fullName: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel``1
    name: GetModel(Of T)
    nameWithType: IBdoDbModelDepot.GetModel(Of T)
    fullName: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(System.String)
  commentId: M:BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(System.String)
  parent: BindOpen.Data.Stores.IBdoDbModelDepot
  isExternal: true
  name: GetModel(String)
  nameWithType: IBdoDbModelDepot.GetModel(String)
  fullName: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(System.String)
    name: GetModel
    nameWithType: IBdoDbModelDepot.GetModel
    fullName: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(System.String)
    name: GetModel
    nameWithType: IBdoDbModelDepot.GetModel
    fullName: BindOpen.Data.Stores.IBdoDbModelDepot.GetModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Models.IBdoDbModel
  commentId: T:BindOpen.Data.Models.IBdoDbModel
  parent: BindOpen.Data.Models
  isExternal: true
  name: IBdoDbModel
  nameWithType: IBdoDbModel
  fullName: BindOpen.Data.Models.IBdoDbModel
- uid: BindOpen.Data.Stores.BdoDbModelDepot.Models*
  commentId: Overload:BindOpen.Data.Stores.BdoDbModelDepot.Models
  isExternal: true
  name: Models
  nameWithType: BdoDbModelDepot.Models
  fullName: BindOpen.Data.Stores.BdoDbModelDepot.Models
- uid: BindOpen.Data.Stores.IBdoDbModelDepot.Models
  commentId: P:BindOpen.Data.Stores.IBdoDbModelDepot.Models
  parent: BindOpen.Data.Stores.IBdoDbModelDepot
  isExternal: true
  name: Models
  nameWithType: IBdoDbModelDepot.Models
  fullName: BindOpen.Data.Stores.IBdoDbModelDepot.Models
- uid: System.Collections.Generic.List{BindOpen.Data.Models.BdoDbModel}
  commentId: '!:System.Collections.Generic.List{BindOpen.Data.Models.BdoDbModel}'
  definition: System.Collections.Generic.List`1
  name: List<BdoDbModel>
  nameWithType: List<BdoDbModel>
  fullName: System.Collections.Generic.List<BindOpen.Data.Models.BdoDbModel>
  nameWithType.vb: List(Of BdoDbModel)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Data.Models.BdoDbModel)
  name.vb: List(Of BdoDbModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Models.BdoDbModel
    name: BdoDbModel
    nameWithType: BdoDbModel
    fullName: BindOpen.Data.Models.BdoDbModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Models.BdoDbModel
    name: BdoDbModel
    nameWithType: BdoDbModel
    fullName: BindOpen.Data.Models.BdoDbModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
