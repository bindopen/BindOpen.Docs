### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.IDbQueryOrderByClause
  commentId: T:BindOpen.Data.Queries.IDbQueryOrderByClause
  id: IDbQueryOrderByClause
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.IDbQueryOrderByClause.Statements
  langs:
  - csharp
  - vb
  name: IDbQueryOrderByClause
  nameWithType: IDbQueryOrderByClause
  fullName: BindOpen.Data.Queries.IDbQueryOrderByClause
  type: Interface
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Clauses/Interfaces/IDbQueryOrderByClause.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: IDbQueryOrderByClause
    path: ../src/BindOpen.Databases/Data/Queries/Clauses/Interfaces/IDbQueryOrderByClause.cs
    startLine: 7
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  example: []
  syntax:
    content: 'public interface IDbQueryOrderByClause : IDbQueryItem'
    content.vb: >-
      Public Interface IDbQueryOrderByClause
          Inherits IDbQueryItem
  inheritedMembers:
  - BindOpen.Data.Queries.IDbQueryItem.Expression
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.Data.Queries.IDbQueryOrderByClause.Statements
  commentId: P:BindOpen.Data.Queries.IDbQueryOrderByClause.Statements
  id: Statements
  parent: BindOpen.Data.Queries.IDbQueryOrderByClause
  langs:
  - csharp
  - vb
  name: Statements
  nameWithType: IDbQueryOrderByClause.Statements
  fullName: BindOpen.Data.Queries.IDbQueryOrderByClause.Statements
  type: Property
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Clauses/Interfaces/IDbQueryOrderByClause.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Statements
    path: ../src/BindOpen.Databases/Data/Queries/Clauses/Interfaces/IDbQueryOrderByClause.cs
    startLine: 12
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe statements of this instance.\n"
  example: []
  syntax:
    content: List<DbQueryOrderByStatement> Statements { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Queries.DbQueryOrderByStatement}
    content.vb: Property Statements As List(Of DbQueryOrderByStatement)
  overload: BindOpen.Data.Queries.IDbQueryOrderByClause.Statements*
  modifiers.csharp:
  - get
  - set
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: BindOpen.Data.Queries.IDbQueryItem.Expression
  commentId: P:BindOpen.Data.Queries.IDbQueryItem.Expression
  parent: BindOpen.Data.Queries.IDbQueryItem
  name: Expression
  nameWithType: IDbQueryItem.Expression
  fullName: BindOpen.Data.Queries.IDbQueryItem.Expression
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: BindOpen.Data.Queries.IDbQueryOrderByClause.Statements*
  commentId: Overload:BindOpen.Data.Queries.IDbQueryOrderByClause.Statements
  name: Statements
  nameWithType: IDbQueryOrderByClause.Statements
  fullName: BindOpen.Data.Queries.IDbQueryOrderByClause.Statements
- uid: System.Collections.Generic.List{BindOpen.Data.Queries.DbQueryOrderByStatement}
  commentId: T:System.Collections.Generic.List{BindOpen.Data.Queries.DbQueryOrderByStatement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbQueryOrderByStatement>
  nameWithType: List<DbQueryOrderByStatement>
  fullName: System.Collections.Generic.List<BindOpen.Data.Queries.DbQueryOrderByStatement>
  nameWithType.vb: List(Of DbQueryOrderByStatement)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Data.Queries.DbQueryOrderByStatement)
  name.vb: List(Of DbQueryOrderByStatement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Queries.DbQueryOrderByStatement
    name: DbQueryOrderByStatement
    nameWithType: DbQueryOrderByStatement
    fullName: BindOpen.Data.Queries.DbQueryOrderByStatement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Queries.DbQueryOrderByStatement
    name: DbQueryOrderByStatement
    nameWithType: DbQueryOrderByStatement
    fullName: BindOpen.Data.Queries.DbQueryOrderByStatement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
shouldSkipMarkup: true
