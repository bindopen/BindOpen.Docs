### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.DbStoredQuery
  commentId: T:BindOpen.Data.Queries.DbStoredQuery
  id: DbStoredQuery
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.DbStoredQuery.#ctor
  - BindOpen.Data.Queries.DbStoredQuery.#ctor(BindOpen.Data.Queries.IDbQuery,System.String)
  - BindOpen.Data.Queries.DbStoredQuery.GetName
  - BindOpen.Data.Queries.DbStoredQuery.Key
  - BindOpen.Data.Queries.DbStoredQuery.Query
  - BindOpen.Data.Queries.DbStoredQuery.QueryTexts
  langs:
  - csharp
  - vb
  name: DbStoredQuery
  nameWithType: DbStoredQuery
  fullName: BindOpen.Data.Queries.DbStoredQuery
  type: Class
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThis class represents a stored data query.\n"
  syntax:
    content: 'public class DbStoredQuery : DbQuery, IDbStoredQuery, IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem'
    content.vb: >-
      Public Class DbStoredQuery
          Inherits DbQuery
          Implements IDbStoredQuery, IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem
  inheritance:
  - System.Object
  - BindOpen.Data.Queries.DbQuery
  implements:
  - BindOpen.Data.Queries.IDbStoredQuery
  - BindOpen.Data.Queries.IDbQuery
  - BindOpen.Data.Items.IDescribedDataItem
  - BindOpen.Data.Items.ITitledDataItem
  - BindOpen.Data.Items.INamedDataItem
  - BindOpen.Data.Items.IStoredDataItem
  - BindOpen.Data.Items.IIdentifiedDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  - BindOpen.Data.Items.IIdentified
  - BindOpen.Data.Items.IReferenced
  - BindOpen.Data.Items.IStorable
  - BindOpen.Data.Items.INamed
  - BindOpen.Data.Items.IGloballyTitled
  - BindOpen.Data.Items.IGloballyDescribed
  - BindOpen.Data.Queries.IDbQueryItem
  inheritedMembers:
  - BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  - BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  - BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  - BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  - BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  - BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  - BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  - BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  - BindOpen.Data.Queries.DbQuery.Name
  - BindOpen.Data.Queries.DbQuery.DataModule
  - BindOpen.Data.Queries.DbQuery.DataTable
  - BindOpen.Data.Queries.DbQuery.DataTableAlias
  - BindOpen.Data.Queries.DbQuery.Schema
  - BindOpen.Data.Queries.DbQuery.Kind
  - BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  - BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  - BindOpen.Data.Queries.DbQuery.ParameterSet
  - BindOpen.Data.Queries.DbQuery.CTETables
  - BindOpen.Data.Queries.DbQuery.Expression
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Data.Queries.DbStoredQuery.#ctor
  commentId: M:BindOpen.Data.Queries.DbStoredQuery.#ctor
  id: '#ctor'
  parent: BindOpen.Data.Queries.DbStoredQuery
  langs:
  - csharp
  - vb
  name: DbStoredQuery()
  nameWithType: DbStoredQuery.DbStoredQuery()
  fullName: BindOpen.Data.Queries.DbStoredQuery.DbStoredQuery()
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the StoredDbQuery class.\n"
  syntax:
    content: public DbStoredQuery()
    content.vb: Public Sub New
  overload: BindOpen.Data.Queries.DbStoredQuery.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbStoredQuery.#ctor(BindOpen.Data.Queries.IDbQuery,System.String)
  commentId: M:BindOpen.Data.Queries.DbStoredQuery.#ctor(BindOpen.Data.Queries.IDbQuery,System.String)
  id: '#ctor(BindOpen.Data.Queries.IDbQuery,System.String)'
  parent: BindOpen.Data.Queries.DbStoredQuery
  langs:
  - csharp
  - vb
  name: DbStoredQuery(IDbQuery, String)
  nameWithType: DbStoredQuery.DbStoredQuery(IDbQuery, String)
  fullName: BindOpen.Data.Queries.DbStoredQuery.DbStoredQuery(BindOpen.Data.Queries.IDbQuery, System.String)
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the StoredDbQuery class.\n"
  syntax:
    content: public DbStoredQuery(IDbQuery query, string name = null)
    parameters:
    - id: query
      type: BindOpen.Data.Queries.IDbQuery
      description: The query to consider.
    - id: name
      type: System.String
      description: The name of the query to consider.
    content.vb: Public Sub New(query As IDbQuery, name As String = Nothing)
  overload: BindOpen.Data.Queries.DbStoredQuery.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbStoredQuery.Key
  commentId: M:BindOpen.Data.Queries.DbStoredQuery.Key
  id: Key
  parent: BindOpen.Data.Queries.DbStoredQuery
  langs:
  - csharp
  - vb
  name: Key()
  nameWithType: DbStoredQuery.Key()
  fullName: BindOpen.Data.Queries.DbStoredQuery.Key()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nGets the key of the item.\n"
  syntax:
    content: public override string Key()
    return:
      type: System.String
      description: Returns the key of the item.
    content.vb: Public Overrides Function Key As String
  overload: BindOpen.Data.Queries.DbStoredQuery.Key*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.Data.Queries.DbStoredQuery.GetName
  commentId: M:BindOpen.Data.Queries.DbStoredQuery.GetName
  id: GetName
  parent: BindOpen.Data.Queries.DbStoredQuery
  langs:
  - csharp
  - vb
  name: GetName()
  nameWithType: DbStoredQuery.GetName()
  fullName: BindOpen.Data.Queries.DbStoredQuery.GetName()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nGets the name of this instance.\n"
  remarks: If the name of this instance is empty or null then the returned name is determined from this instance&apos;s properties.
  syntax:
    content: public override string GetName()
    return:
      type: System.String
      description: Returns the name of this instance.
    content.vb: Public Overrides Function GetName As String
  overridden: BindOpen.Data.Queries.DbQuery.GetName
  overload: BindOpen.Data.Queries.DbStoredQuery.GetName*
  implements:
  - BindOpen.Data.Queries.IDbQuery.GetName
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.Data.Queries.DbStoredQuery.Query
  commentId: P:BindOpen.Data.Queries.DbStoredQuery.Query
  id: Query
  parent: BindOpen.Data.Queries.DbStoredQuery
  langs:
  - csharp
  - vb
  name: Query
  nameWithType: DbStoredQuery.Query
  fullName: BindOpen.Data.Queries.DbStoredQuery.Query
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe query of this instance.\n"
  syntax:
    content: public IDbQuery Query { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.IDbQuery
    content.vb: Public Property Query As IDbQuery
  overload: BindOpen.Data.Queries.DbStoredQuery.Query*
  implements:
  - BindOpen.Data.Queries.IDbStoredQuery.Query
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbStoredQuery.QueryTexts
  commentId: P:BindOpen.Data.Queries.DbStoredQuery.QueryTexts
  id: QueryTexts
  parent: BindOpen.Data.Queries.DbStoredQuery
  langs:
  - csharp
  - vb
  name: QueryTexts
  nameWithType: DbStoredQuery.QueryTexts
  fullName: BindOpen.Data.Queries.DbStoredQuery.QueryTexts
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe SQL query text of this instance.\n"
  syntax:
    content: public Dictionary<string, string> QueryTexts { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Property QueryTexts As Dictionary(Of String, String)
  overload: BindOpen.Data.Queries.DbStoredQuery.QueryTexts*
  implements:
  - BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  isExternal: true
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.Data.Queries.DbQuery
  commentId: T:BindOpen.Data.Queries.DbQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQuery
  nameWithType: DbQuery
  fullName: BindOpen.Data.Queries.DbQuery
- uid: BindOpen.Data.Queries.IDbStoredQuery
  commentId: T:BindOpen.Data.Queries.IDbStoredQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbStoredQuery
  nameWithType: IDbStoredQuery
  fullName: BindOpen.Data.Queries.IDbStoredQuery
- uid: BindOpen.Data.Queries.IDbQuery
  commentId: T:BindOpen.Data.Queries.IDbQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQuery
  nameWithType: IDbQuery
  fullName: BindOpen.Data.Queries.IDbQuery
- uid: BindOpen.Data.Items.IDescribedDataItem
  isExternal: true
  name: IDescribedDataItem
  nameWithType: IDescribedDataItem
  fullName: BindOpen.Data.Items.IDescribedDataItem
- uid: BindOpen.Data.Items.ITitledDataItem
  isExternal: true
  name: ITitledDataItem
  nameWithType: ITitledDataItem
  fullName: BindOpen.Data.Items.ITitledDataItem
- uid: BindOpen.Data.Items.INamedDataItem
  isExternal: true
  name: INamedDataItem
  nameWithType: INamedDataItem
  fullName: BindOpen.Data.Items.INamedDataItem
- uid: BindOpen.Data.Items.IStoredDataItem
  isExternal: true
  name: IStoredDataItem
  nameWithType: IStoredDataItem
  fullName: BindOpen.Data.Items.IStoredDataItem
- uid: BindOpen.Data.Items.IIdentifiedDataItem
  isExternal: true
  name: IIdentifiedDataItem
  nameWithType: IIdentifiedDataItem
  fullName: BindOpen.Data.Items.IIdentifiedDataItem
- uid: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  isExternal: true
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  isExternal: true
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Items.IStorable
  isExternal: true
  name: IStorable
  nameWithType: IStorable
  fullName: BindOpen.Data.Items.IStorable
- uid: BindOpen.Data.Items.INamed
  isExternal: true
  name: INamed
  nameWithType: INamed
  fullName: BindOpen.Data.Items.INamed
- uid: BindOpen.Data.Items.IGloballyTitled
  isExternal: true
  name: IGloballyTitled
  nameWithType: IGloballyTitled
  fullName: BindOpen.Data.Items.IGloballyTitled
- uid: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: IGloballyDescribed
  nameWithType: IGloballyDescribed
  fullName: BindOpen.Data.Items.IGloballyDescribed
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  commentId: M:BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: CheckExistence(Boolean)
  nameWithType: DbQuery.CheckExistence(Boolean)
  fullName: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: DbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.DbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: DbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.DbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  commentId: M:BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: WithParameters(IDataElement[])
  nameWithType: DbQuery.WithParameters(IDataElement[])
  fullName: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  nameWithType.vb: DbQuery.WithParameters(IDataElement())
  fullName.vb: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement())
  name.vb: WithParameters(IDataElement())
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: DbQuery.WithParameters
    fullName: BindOpen.Data.Queries.DbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: DbQuery.WithParameters
    fullName: BindOpen.Data.Queries.DbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  commentId: M:BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: UsingParameters(IDataElementSpec[])
  nameWithType: DbQuery.UsingParameters(IDataElementSpec[])
  fullName: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  nameWithType.vb: DbQuery.UsingParameters(IDataElementSpec())
  fullName.vb: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec())
  name.vb: UsingParameters(IDataElementSpec())
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: DbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.DbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: DbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.DbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  commentId: M:BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: AddParameter(ScalarElement)
  nameWithType: DbQuery.AddParameter(ScalarElement)
  fullName: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: DbQuery.AddParameter
    fullName: BindOpen.Data.Queries.DbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: DbQuery.AddParameter
    fullName: BindOpen.Data.Queries.DbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  commentId: M:BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: UseParameter(String, Object)
  nameWithType: DbQuery.UseParameter(String, Object)
  fullName: BindOpen.Data.Queries.DbQuery.UseParameter(System.String, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: DbQuery.UseParameter
    fullName: BindOpen.Data.Queries.DbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: DbQuery.UseParameter
    fullName: BindOpen.Data.Queries.DbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  commentId: M:BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: UseParameter(String, DataValueType, Object)
  nameWithType: DbQuery.UseParameter(String, DataValueType, Object)
  fullName: BindOpen.Data.Queries.DbQuery.UseParameter(System.String, BindOpen.Data.Common.DataValueType, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: DbQuery.UseParameter
    fullName: BindOpen.Data.Queries.DbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: DbQuery.UseParameter
    fullName: BindOpen.Data.Queries.DbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  commentId: M:BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: WithCTE(DbTable[])
  nameWithType: DbQuery.WithCTE(DbTable[])
  fullName: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  nameWithType.vb: DbQuery.WithCTE(DbTable())
  fullName.vb: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable())
  name.vb: WithCTE(DbTable())
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: DbQuery.WithCTE
    fullName: BindOpen.Data.Queries.DbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: DbQuery.WithCTE
    fullName: BindOpen.Data.Queries.DbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DbQuery.Dispose(Boolean)
  fullName: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DbQuery.Dispose
    fullName: BindOpen.Data.Queries.DbQuery.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DbQuery.Dispose
    fullName: BindOpen.Data.Queries.DbQuery.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.Name
  commentId: P:BindOpen.Data.Queries.DbQuery.Name
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Name
  nameWithType: DbQuery.Name
  fullName: BindOpen.Data.Queries.DbQuery.Name
- uid: BindOpen.Data.Queries.DbQuery.DataModule
  commentId: P:BindOpen.Data.Queries.DbQuery.DataModule
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: DataModule
  nameWithType: DbQuery.DataModule
  fullName: BindOpen.Data.Queries.DbQuery.DataModule
- uid: BindOpen.Data.Queries.DbQuery.DataTable
  commentId: P:BindOpen.Data.Queries.DbQuery.DataTable
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: DataTable
  nameWithType: DbQuery.DataTable
  fullName: BindOpen.Data.Queries.DbQuery.DataTable
- uid: BindOpen.Data.Queries.DbQuery.DataTableAlias
  commentId: P:BindOpen.Data.Queries.DbQuery.DataTableAlias
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: DataTableAlias
  nameWithType: DbQuery.DataTableAlias
  fullName: BindOpen.Data.Queries.DbQuery.DataTableAlias
- uid: BindOpen.Data.Queries.DbQuery.Schema
  commentId: P:BindOpen.Data.Queries.DbQuery.Schema
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Schema
  nameWithType: DbQuery.Schema
  fullName: BindOpen.Data.Queries.DbQuery.Schema
- uid: BindOpen.Data.Queries.DbQuery.Kind
  commentId: P:BindOpen.Data.Queries.DbQuery.Kind
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Kind
  nameWithType: DbQuery.Kind
  fullName: BindOpen.Data.Queries.DbQuery.Kind
- uid: BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  commentId: P:BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: IsExistenceChecked
  nameWithType: DbQuery.IsExistenceChecked
  fullName: BindOpen.Data.Queries.DbQuery.IsExistenceChecked
- uid: BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  commentId: P:BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: ParameterSpecSet
  nameWithType: DbQuery.ParameterSpecSet
  fullName: BindOpen.Data.Queries.DbQuery.ParameterSpecSet
- uid: BindOpen.Data.Queries.DbQuery.ParameterSet
  commentId: P:BindOpen.Data.Queries.DbQuery.ParameterSet
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: ParameterSet
  nameWithType: DbQuery.ParameterSet
  fullName: BindOpen.Data.Queries.DbQuery.ParameterSet
- uid: BindOpen.Data.Queries.DbQuery.CTETables
  commentId: P:BindOpen.Data.Queries.DbQuery.CTETables
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: CTETables
  nameWithType: DbQuery.CTETables
  fullName: BindOpen.Data.Queries.DbQuery.CTETables
- uid: BindOpen.Data.Queries.DbQuery.Expression
  commentId: P:BindOpen.Data.Queries.DbQuery.Expression
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Expression
  nameWithType: DbQuery.Expression
  fullName: BindOpen.Data.Queries.DbQuery.Expression
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Queries.DbStoredQuery.#ctor*
  commentId: Overload:BindOpen.Data.Queries.DbStoredQuery.#ctor
  isExternal: true
  name: DbStoredQuery
  nameWithType: DbStoredQuery.DbStoredQuery
  fullName: BindOpen.Data.Queries.DbStoredQuery.DbStoredQuery
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Queries.DbStoredQuery.Key*
  commentId: Overload:BindOpen.Data.Queries.DbStoredQuery.Key
  isExternal: true
  name: Key
  nameWithType: DbStoredQuery.Key
  fullName: BindOpen.Data.Queries.DbStoredQuery.Key
- uid: BindOpen.Data.Queries.DbQuery.GetName
  commentId: M:BindOpen.Data.Queries.DbQuery.GetName
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: GetName()
  nameWithType: DbQuery.GetName()
  fullName: BindOpen.Data.Queries.DbQuery.GetName()
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.GetName
    name: GetName
    nameWithType: DbQuery.GetName
    fullName: BindOpen.Data.Queries.DbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.GetName
    name: GetName
    nameWithType: DbQuery.GetName
    fullName: BindOpen.Data.Queries.DbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbStoredQuery.GetName*
  commentId: Overload:BindOpen.Data.Queries.DbStoredQuery.GetName
  isExternal: true
  name: GetName
  nameWithType: DbStoredQuery.GetName
  fullName: BindOpen.Data.Queries.DbStoredQuery.GetName
- uid: BindOpen.Data.Queries.IDbQuery.GetName
  commentId: M:BindOpen.Data.Queries.IDbQuery.GetName
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: GetName()
  nameWithType: IDbQuery.GetName()
  fullName: BindOpen.Data.Queries.IDbQuery.GetName()
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.GetName
    name: GetName
    nameWithType: IDbQuery.GetName
    fullName: BindOpen.Data.Queries.IDbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.GetName
    name: GetName
    nameWithType: IDbQuery.GetName
    fullName: BindOpen.Data.Queries.IDbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbStoredQuery.Query*
  commentId: Overload:BindOpen.Data.Queries.DbStoredQuery.Query
  isExternal: true
  name: Query
  nameWithType: DbStoredQuery.Query
  fullName: BindOpen.Data.Queries.DbStoredQuery.Query
- uid: BindOpen.Data.Queries.IDbStoredQuery.Query
  commentId: P:BindOpen.Data.Queries.IDbStoredQuery.Query
  parent: BindOpen.Data.Queries.IDbStoredQuery
  isExternal: true
  name: Query
  nameWithType: IDbStoredQuery.Query
  fullName: BindOpen.Data.Queries.IDbStoredQuery.Query
- uid: BindOpen.Data.Queries.DbStoredQuery.QueryTexts*
  commentId: Overload:BindOpen.Data.Queries.DbStoredQuery.QueryTexts
  isExternal: true
  name: QueryTexts
  nameWithType: DbStoredQuery.QueryTexts
  fullName: BindOpen.Data.Queries.DbStoredQuery.QueryTexts
- uid: BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
  commentId: P:BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
  parent: BindOpen.Data.Queries.IDbStoredQuery
  isExternal: true
  name: QueryTexts
  nameWithType: IDbStoredQuery.QueryTexts
  fullName: BindOpen.Data.Queries.IDbStoredQuery.QueryTexts
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.String}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
