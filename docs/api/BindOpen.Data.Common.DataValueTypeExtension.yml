### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  id: DataValueTypeExtension
  parent: BindOpen.Data.Common
  children:
  - BindOpen.Data.Common.DataValueTypeExtension.GetObjectType(BindOpen.Data.Common.DataValueType)
  - BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  - BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object[])
  - BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Type)
  - BindOpen.Data.Common.DataValueTypeExtension.IsCompatibleWith(BindOpen.Data.Common.DataValueType,BindOpen.Data.Common.DataValueType)
  - BindOpen.Data.Common.DataValueTypeExtension.IsScalar(BindOpen.Data.Common.DataValueType)
  - BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  langs:
  - csharp
  - vb
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/DataValueType.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DataValueTypeExtension
    path: ../src/BindOpen.Core/Data/Common/DataValueType.cs
    startLine: 121
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nThis class represents an extension of the DataValueType enumeration.\n"
  example: []
  syntax:
    content: public static class DataValueTypeExtension
    content.vb: Public Module DataValueTypeExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(BindOpen.Data.Common.DataValueType)
  id: IsScalar(BindOpen.Data.Common.DataValueType)
  isExtensionMethod: true
  parent: BindOpen.Data.Common.DataValueTypeExtension
  langs:
  - csharp
  - vb
  name: IsScalar(DataValueType)
  nameWithType: DataValueTypeExtension.IsScalar(DataValueType)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(BindOpen.Data.Common.DataValueType)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/DataValueType.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IsScalar
    path: ../src/BindOpen.Core/Data/Common/DataValueType.cs
    startLine: 128
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nIndicates whether the specified value type corresponds to a scalar.\n"
  example: []
  syntax:
    content: public static bool IsScalar(this DataValueType valueType)
    parameters:
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The object to consider.
    return:
      type: System.Boolean
      description: The result object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsScalar(valueType As DataValueType) As Boolean
  overload: BindOpen.Data.Common.DataValueTypeExtension.IsScalar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  id: IsScalar(System.Object)
  isExtensionMethod: true
  parent: BindOpen.Data.Common.DataValueTypeExtension
  langs:
  - csharp
  - vb
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/DataValueType.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IsScalar
    path: ../src/BindOpen.Core/Data/Common/DataValueType.cs
    startLine: 151
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nIndicates whether the specified value type corresponds to a scalar.\n"
  example: []
  syntax:
    content: public static bool IsScalar(this object object1)
    parameters:
    - id: object1
      type: System.Object
      description: The object to consider.
    return:
      type: System.Boolean
      description: The result object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsScalar(object1 As Object) As Boolean
  overload: BindOpen.Data.Common.DataValueTypeExtension.IsScalar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetObjectType(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetObjectType(BindOpen.Data.Common.DataValueType)
  id: GetObjectType(BindOpen.Data.Common.DataValueType)
  isExtensionMethod: true
  parent: BindOpen.Data.Common.DataValueTypeExtension
  langs:
  - csharp
  - vb
  name: GetObjectType(DataValueType)
  nameWithType: DataValueTypeExtension.GetObjectType(DataValueType)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetObjectType(BindOpen.Data.Common.DataValueType)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/DataValueType.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetObjectType
    path: ../src/BindOpen.Core/Data/Common/DataValueType.cs
    startLine: 161
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nReturns the object type of the specified data value type.\n"
  example: []
  syntax:
    content: public static Type GetObjectType(this DataValueType dataValueType)
    parameters:
    - id: dataValueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    return:
      type: System.Type
      description: The result object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetObjectType(dataValueType As DataValueType) As Type
  overload: BindOpen.Data.Common.DataValueTypeExtension.GetObjectType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsCompatibleWith(BindOpen.Data.Common.DataValueType,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsCompatibleWith(BindOpen.Data.Common.DataValueType,BindOpen.Data.Common.DataValueType)
  id: IsCompatibleWith(BindOpen.Data.Common.DataValueType,BindOpen.Data.Common.DataValueType)
  isExtensionMethod: true
  parent: BindOpen.Data.Common.DataValueTypeExtension
  langs:
  - csharp
  - vb
  name: IsCompatibleWith(DataValueType, DataValueType)
  nameWithType: DataValueTypeExtension.IsCompatibleWith(DataValueType, DataValueType)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsCompatibleWith(BindOpen.Data.Common.DataValueType, BindOpen.Data.Common.DataValueType)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/DataValueType.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IsCompatibleWith
    path: ../src/BindOpen.Core/Data/Common/DataValueType.cs
    startLine: 202
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nReturns the value type of the specified object.\n"
  example: []
  syntax:
    content: public static bool IsCompatibleWith(this DataValueType valueType, DataValueType refValueType)
    parameters:
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    - id: refValueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    return:
      type: System.Boolean
      description: The result object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsCompatibleWith(valueType As DataValueType, refValueType As DataValueType) As Boolean
  overload: BindOpen.Data.Common.DataValueTypeExtension.IsCompatibleWith*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Type)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Type)
  id: GetValueType(System.Type)
  isExtensionMethod: true
  parent: BindOpen.Data.Common.DataValueTypeExtension
  langs:
  - csharp
  - vb
  name: GetValueType(Type)
  nameWithType: DataValueTypeExtension.GetValueType(Type)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Type)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/DataValueType.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetValueType
    path: ../src/BindOpen.Core/Data/Common/DataValueType.cs
    startLine: 223
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nReturns the value type of the specified object.\n"
  example: []
  syntax:
    content: public static DataValueType GetValueType(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type to consider.
    return:
      type: BindOpen.Data.Common.DataValueType
      description: The result object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValueType(type As Type) As DataValueType
  overload: BindOpen.Data.Common.DataValueTypeExtension.GetValueType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  id: GetValueType(System.Object)
  isExtensionMethod: true
  parent: BindOpen.Data.Common.DataValueTypeExtension
  langs:
  - csharp
  - vb
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/DataValueType.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetValueType
    path: ../src/BindOpen.Core/Data/Common/DataValueType.cs
    startLine: 269
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nReturns the value type of the specified object.\n"
  example: []
  syntax:
    content: public static DataValueType GetValueType(this object object1)
    parameters:
    - id: object1
      type: System.Object
      description: The object to consider.
    return:
      type: BindOpen.Data.Common.DataValueType
      description: The result object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValueType(object1 As Object) As DataValueType
  overload: BindOpen.Data.Common.DataValueTypeExtension.GetValueType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object[])
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object[])
  id: GetValueType(System.Object[])
  isExtensionMethod: true
  parent: BindOpen.Data.Common.DataValueTypeExtension
  langs:
  - csharp
  - vb
  name: GetValueType(Object[])
  nameWithType: DataValueTypeExtension.GetValueType(Object[])
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/DataValueType.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetValueType
    path: ../src/BindOpen.Core/Data/Common/DataValueType.cs
    startLine: 280
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nReturns the value type of the specified object.\n"
  example: []
  syntax:
    content: public static DataValueType GetValueType(this object[] objects)
    parameters:
    - id: objects
      type: System.Object[]
      description: The objects to consider.
    return:
      type: BindOpen.Data.Common.DataValueType
      description: The result object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValueType(objects As Object()) As DataValueType
  overload: BindOpen.Data.Common.DataValueTypeExtension.GetValueType*
  nameWithType.vb: DataValueTypeExtension.GetValueType(Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object())
  name.vb: GetValueType(Object())
references:
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar*
  commentId: Overload:BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  name: IsScalar
  nameWithType: DataValueTypeExtension.IsScalar
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
- uid: BindOpen.Data.Common.DataValueType
  commentId: T:BindOpen.Data.Common.DataValueType
  parent: BindOpen.Data.Common
  name: DataValueType
  nameWithType: DataValueType
  fullName: BindOpen.Data.Common.DataValueType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetObjectType*
  commentId: Overload:BindOpen.Data.Common.DataValueTypeExtension.GetObjectType
  name: GetObjectType
  nameWithType: DataValueTypeExtension.GetObjectType
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetObjectType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsCompatibleWith*
  commentId: Overload:BindOpen.Data.Common.DataValueTypeExtension.IsCompatibleWith
  name: IsCompatibleWith
  nameWithType: DataValueTypeExtension.IsCompatibleWith
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsCompatibleWith
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType*
  commentId: Overload:BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  name: GetValueType
  nameWithType: DataValueTypeExtension.GetValueType
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
shouldSkipMarkup: true
