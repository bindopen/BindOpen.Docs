### YamlMime:ManagedReference
items:
- uid: BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension
  commentId: T:BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension
  id: HandlerUniqueName_standardExtension
  parent: BindOpen.Extensions.Handlers
  children:
  - BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension.GetUniqueName(BindOpen.Extensions.Handlers.HandlerKind_standard)
  langs:
  - csharp
  - vb
  name: HandlerUniqueName_standardExtension
  nameWithType: HandlerUniqueName_standardExtension
  fullName: BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Extensions.Handlers
  summary: "\nThis class represents an extension of the HandlerUniqueName_standard enumeration.\n"
  syntax:
    content: 'public static class HandlerUniqueName_standardExtension : Object'
    content.vb: >-
      Public Module HandlerUniqueName_standardExtension
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension.GetUniqueName(BindOpen.Extensions.Handlers.HandlerKind_standard)
  commentId: M:BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension.GetUniqueName(BindOpen.Extensions.Handlers.HandlerKind_standard)
  id: GetUniqueName(BindOpen.Extensions.Handlers.HandlerKind_standard)
  isExtensionMethod: true
  parent: BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension
  langs:
  - csharp
  - vb
  name: GetUniqueName(HandlerKind_standard)
  nameWithType: HandlerUniqueName_standardExtension.GetUniqueName(HandlerKind_standard)
  fullName: BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension.GetUniqueName(BindOpen.Extensions.Handlers.HandlerKind_standard)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Extensions.Handlers
  summary: "\nGets the unique name corresponding to the specified handler kind.\n"
  syntax:
    content: public static string GetUniqueName(this HandlerKind_standard kind)
    parameters:
    - id: kind
      type: BindOpen.Extensions.Handlers.HandlerKind_standard
      description: The handler kind to consider.
    return:
      type: System.String
      description: The result object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetUniqueName(kind As HandlerKind_standard) As String
  overload: BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension.GetUniqueName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BindOpen.Extensions.Handlers
  commentId: N:BindOpen.Extensions.Handlers
  isExternal: true
  name: BindOpen.Extensions.Handlers
  nameWithType: BindOpen.Extensions.Handlers
  fullName: BindOpen.Extensions.Handlers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension.GetUniqueName*
  commentId: Overload:BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension.GetUniqueName
  isExternal: true
  name: GetUniqueName
  nameWithType: HandlerUniqueName_standardExtension.GetUniqueName
  fullName: BindOpen.Extensions.Handlers.HandlerUniqueName_standardExtension.GetUniqueName
- uid: BindOpen.Extensions.Handlers.HandlerKind_standard
  commentId: T:BindOpen.Extensions.Handlers.HandlerKind_standard
  parent: BindOpen.Extensions.Handlers
  isExternal: true
  name: HandlerKind_standard
  nameWithType: HandlerKind_standard
  fullName: BindOpen.Extensions.Handlers.HandlerKind_standard
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
shouldSkipMarkup: true
