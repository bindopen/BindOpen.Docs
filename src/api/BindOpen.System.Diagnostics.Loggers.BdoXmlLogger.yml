### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  commentId: T:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  id: BdoXmlLogger
  parent: BindOpen.System.Diagnostics.Loggers
  children:
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.IsHistoryRequired
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLog(System.String,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLogFromString(System.String,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.Save(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Boolean)
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteChildLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Object)
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  - BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteTask(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  langs:
  - csharp
  - vb
  name: BdoXmlLogger
  nameWithType: BdoXmlLogger
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThis class represents a XML logger.\n"
  remarks: The output format is YAML.
  syntax:
    content: 'public class BdoXmlLogger : BdoLogger'
    content.vb: >-
      Public Class BdoXmlLogger
          Inherits BdoLogger
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor
  id: '#ctor'
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: BdoXmlLogger()
  nameWithType: BdoXmlLogger.BdoXmlLogger()
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.BdoXmlLogger()
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nInstantiates a new instance of the XmlLogger class.\n"
  syntax:
    content: public BdoXmlLogger()
    content.vb: Public Sub New
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  id: '#ctor(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})'
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: BdoXmlLogger(String, BdoLoggerMode, Predicate<IBdoLogEvent>)
  nameWithType: BdoXmlLogger.BdoXmlLogger(String, BdoLoggerMode, Predicate<IBdoLogEvent>)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.BdoXmlLogger(System.String, BindOpen.System.Diagnostics.BdoLoggerMode, System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>)
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nInstantiates a new instance of the XmlLogger class.\n"
  remarks: With expiration day number equaling to -1, no files expires. Equaling to 0, all files except the current one expires.
  syntax:
    content: public BdoXmlLogger(string name, BdoLoggerMode mode, Predicate<IBdoLogEvent> eventFilter = null)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to consider.
    - id: eventFilter
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: The function that filters events.
    content.vb: Public Sub New(name As String, mode As BdoLoggerMode, eventFilter As Predicate(Of IBdoLogEvent) = Nothing)
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor*
  nameWithType.vb: BdoXmlLogger.BdoXmlLogger(String, BdoLoggerMode, Predicate(Of IBdoLogEvent))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.BdoXmlLogger(System.String, BindOpen.System.Diagnostics.BdoLoggerMode, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent))
  name.vb: BdoXmlLogger(String, BdoLoggerMode, Predicate(Of IBdoLogEvent))
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteTask(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteTask(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  id: WriteTask(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: WriteTask(IBdoLog, IBdoTaskConfiguration)
  nameWithType: BdoXmlLogger.WriteTask(IBdoLog, IBdoTaskConfiguration)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteTask(BindOpen.System.Diagnostics.IBdoLog, BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified task.\n"
  syntax:
    content: public override bool WriteTask(IBdoLog log, IBdoTaskConfiguration task)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: task
      type: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
      description: The task to log.
    return:
      type: System.Boolean
    content.vb: Public Overrides Function WriteTask(log As IBdoLog, task As IBdoTaskConfiguration) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteTask*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  id: WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: WriteEvent(IBdoLogEvent)
  nameWithType: BdoXmlLogger.WriteEvent(IBdoLogEvent)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified record.\n"
  syntax:
    content: public override bool WriteEvent(IBdoLogEvent logEvent)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: The log event to consider.
    return:
      type: System.Boolean
    content.vb: Public Overrides Function WriteEvent(logEvent As IBdoLogEvent) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteEvent*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Object)
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Object)
  id: WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Object)
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: WriteDetailElement(IBdoLog, String, Object)
  nameWithType: BdoXmlLogger.WriteDetailElement(IBdoLog, String, Object)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog, System.String, System.Object)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified element.\n"
  syntax:
    content: public override bool WriteDetailElement(IBdoLog log, string elementName, object elementValue)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: elementName
      type: System.String
      description: The element name to consider.
    - id: elementValue
      type: System.Object
      description: The element value to consider.
    return:
      type: System.Boolean
    content.vb: Public Overrides Function WriteDetailElement(log As IBdoLog, elementName As String, elementValue As Object) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteDetailElement*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteChildLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteChildLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLog)
  id: WriteChildLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: WriteChildLog(IBdoLog, IBdoLog)
  nameWithType: BdoXmlLogger.WriteChildLog(IBdoLog, IBdoLog)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteChildLog(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified record.\n"
  syntax:
    content: public override bool WriteChildLog(IBdoLog log, IBdoLog childLog)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log to log.
    return:
      type: System.Boolean
    content.vb: Public Overrides Function WriteChildLog(log As IBdoLog, childLog As IBdoLog) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteChildLog*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.IsHistoryRequired
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.IsHistoryRequired
  id: IsHistoryRequired
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: IsHistoryRequired()
  nameWithType: BdoXmlLogger.IsHistoryRequired()
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.IsHistoryRequired()
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nIndicates whether this instance requires all the event history to be maintained.\n"
  syntax:
    content: public override bool IsHistoryRequired()
    return:
      type: System.Boolean
      description: Returns True if this instance requires all the event history.
    content.vb: Public Overrides Function IsHistoryRequired As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.IsHistoryRequired*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLog(System.String,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLog(System.String,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  id: LoadLog(System.String,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: LoadLog(String, IBdoLog, Boolean)
  nameWithType: BdoXmlLogger.LoadLog(String, IBdoLog, Boolean)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLog(System.String, BindOpen.System.Diagnostics.IBdoLog, System.Boolean)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nInstantiates a new instance of Log class from a xml file.\n"
  syntax:
    content: public override IBdoLog LoadLog(string filePath, IBdoLog loadLog = null, bool mustFileExist = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the Xml file to load.
    - id: loadLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The output log of the load task.
    - id: mustFileExist
      type: System.Boolean
      description: Indicates whether the file must exist.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The load log.
    content.vb: Public Overrides Function LoadLog(filePath As String, loadLog As IBdoLog = Nothing, mustFileExist As Boolean = True) As IBdoLog
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLog*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLogFromString(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLogFromString(System.String,BindOpen.System.Diagnostics.IBdoLog)
  id: LoadLogFromString(System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: LoadLogFromString(String, IBdoLog)
  nameWithType: BdoXmlLogger.LoadLogFromString(String, IBdoLog)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLogFromString(System.String, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nInstantiates a new instance of Log class from a xml string.\n"
  syntax:
    content: public override IBdoLog LoadLogFromString(string xmlString, IBdoLog loadLog = null)
    parameters:
    - id: xmlString
      type: System.String
      description: The Xml string to load.
    - id: loadLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The output log of the load task.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log defined in the Xml file.
    content.vb: Public Overrides Function LoadLogFromString(xmlString As String, loadLog As IBdoLog = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLogFromString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.Save(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.Save(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Boolean)
  id: Save(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: Save(IBdoLog, String, Boolean)
  nameWithType: BdoXmlLogger.Save(IBdoLog, String, Boolean)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.Save(BindOpen.System.Diagnostics.IBdoLog, System.String, System.Boolean)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nSaves this instance in the specified log file.\n"
  syntax:
    content: public override bool Save(IBdoLog log, string logFilePath, bool isAppended = false)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: logFilePath
      type: System.String
      description: The path of the log file to save.
    - id: isAppended
      type: System.Boolean
      description: Indicates whether the new content is appended if one alreay exists.
    return:
      type: System.Boolean
      description: Returns the saving log.
    content.vb: Public Overrides Function Save(log As IBdoLog, logFilePath As String, isAppended As Boolean = False) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.Save*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  id: ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  parent: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger
  langs:
  - csharp
  - vb
  name: ToString(IBdoLog, List<String>)
  nameWithType: BdoXmlLogger.ToString(IBdoLog, List<String>)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString(BindOpen.System.Diagnostics.IBdoLog, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nGets the string representing to the specified log.\n"
  syntax:
    content: public override string ToString(IBdoLog log, List<string> attributeNames = null)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: attributeNames
      type: System.Collections.Generic.List{System.String}
      description: The attribute names to consider.
    return:
      type: System.String
      description: The string representing to the specified log.
    content.vb: Public Overrides Function ToString(log As IBdoLog, attributeNames As List(Of String) = Nothing) As String
  overload: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString*
  nameWithType.vb: BdoXmlLogger.ToString(IBdoLog, List(Of String))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString(BindOpen.System.Diagnostics.IBdoLog, System.Collections.Generic.List(Of System.String))
  name.vb: ToString(IBdoLog, List(Of String))
references:
- uid: BindOpen.System.Diagnostics.Loggers
  commentId: N:BindOpen.System.Diagnostics.Loggers
  isExternal: true
  name: BindOpen.System.Diagnostics.Loggers
  nameWithType: BindOpen.System.Diagnostics.Loggers
  fullName: BindOpen.System.Diagnostics.Loggers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.#ctor
  isExternal: true
  name: BdoXmlLogger
  nameWithType: BdoXmlLogger.BdoXmlLogger
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.BdoXmlLogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.BdoLoggerMode
  isExternal: true
  name: BdoLoggerMode
  nameWithType: BdoLoggerMode
  fullName: BindOpen.System.Diagnostics.BdoLoggerMode
- uid: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  commentId: '!:System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}'
  definition: System.Predicate`1
  name: Predicate<IBdoLogEvent>
  nameWithType: Predicate<IBdoLogEvent>
  fullName: System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>
  nameWithType.vb: Predicate(Of IBdoLogEvent)
  fullName.vb: System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent)
  name.vb: Predicate(Of IBdoLogEvent)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteTask*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteTask
  isExternal: true
  name: WriteTask
  nameWithType: BdoXmlLogger.WriteTask
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteTask
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  isExternal: true
  name: IBdoTaskConfiguration
  nameWithType: IBdoTaskConfiguration
  fullName: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteEvent*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteEvent
  isExternal: true
  name: WriteEvent
  nameWithType: BdoXmlLogger.WriteEvent
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteEvent
- uid: BindOpen.System.Diagnostics.IBdoLogEvent
  isExternal: true
  name: IBdoLogEvent
  nameWithType: IBdoLogEvent
  fullName: BindOpen.System.Diagnostics.IBdoLogEvent
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteDetailElement*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteDetailElement
  isExternal: true
  name: WriteDetailElement
  nameWithType: BdoXmlLogger.WriteDetailElement
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteDetailElement
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteChildLog*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteChildLog
  isExternal: true
  name: WriteChildLog
  nameWithType: BdoXmlLogger.WriteChildLog
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.WriteChildLog
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.IsHistoryRequired*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.IsHistoryRequired
  isExternal: true
  name: IsHistoryRequired
  nameWithType: BdoXmlLogger.IsHistoryRequired
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.IsHistoryRequired
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLog*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLog
  isExternal: true
  name: LoadLog
  nameWithType: BdoXmlLogger.LoadLog
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLog
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLogFromString*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLogFromString
  isExternal: true
  name: LoadLogFromString
  nameWithType: BdoXmlLogger.LoadLogFromString
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.LoadLogFromString
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.Save*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.Save
  isExternal: true
  name: Save
  nameWithType: BdoXmlLogger.Save
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.Save
- uid: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString
  isExternal: true
  name: ToString
  nameWithType: BdoXmlLogger.ToString
  fullName: BindOpen.System.Diagnostics.Loggers.BdoXmlLogger.ToString
- uid: System.Collections.Generic.List{System.String}
  commentId: '!:System.Collections.Generic.List{System.String}'
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
