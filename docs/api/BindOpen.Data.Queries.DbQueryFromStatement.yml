### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.DbQueryFromStatement
  commentId: T:BindOpen.Data.Queries.DbQueryFromStatement
  id: DbQueryFromStatement
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.DbQueryFromStatement.#ctor
  - BindOpen.Data.Queries.DbQueryFromStatement.Expression
  - BindOpen.Data.Queries.DbQueryFromStatement.Tables
  langs:
  - csharp
  - vb
  name: DbQueryFromStatement
  nameWithType: DbQueryFromStatement
  fullName: BindOpen.Data.Queries.DbQueryFromStatement
  type: Class
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Clauses/DbQueryFromStatement.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: DbQueryFromStatement
    path: ../src/BindOpen.Databases/Data/Queries/Clauses/DbQueryFromStatement.cs
    startLine: 9
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThis class represents the From clause of a database data query.\n"
  example: []
  syntax:
    content: 'public class DbQueryFromStatement : IDbQueryFromStatement, IDbQueryItem'
    content.vb: >-
      Public Class DbQueryFromStatement
          Implements IDbQueryFromStatement, IDbQueryItem
  inheritance:
  - System.Object
  implements:
  - BindOpen.Data.Queries.IDbQueryFromStatement
  - BindOpen.Data.Queries.IDbQueryItem
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Data.Queries.DbQueryFromStatement.Tables
  commentId: P:BindOpen.Data.Queries.DbQueryFromStatement.Tables
  id: Tables
  parent: BindOpen.Data.Queries.DbQueryFromStatement
  langs:
  - csharp
  - vb
  name: Tables
  nameWithType: DbQueryFromStatement.Tables
  fullName: BindOpen.Data.Queries.DbQueryFromStatement.Tables
  type: Property
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Clauses/DbQueryFromStatement.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Tables
    path: ../src/BindOpen.Databases/Data/Queries/Clauses/DbQueryFromStatement.cs
    startLine: 20
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe tables of this instance.\n"
  example: []
  syntax:
    content: public List<DbTable> Tables { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbTable}
    content.vb: Public Property Tables As List(Of DbTable)
  overload: BindOpen.Data.Queries.DbQueryFromStatement.Tables*
  implements:
  - BindOpen.Data.Queries.IDbQueryFromStatement.Tables
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQueryFromStatement.Expression
  commentId: P:BindOpen.Data.Queries.DbQueryFromStatement.Expression
  id: Expression
  parent: BindOpen.Data.Queries.DbQueryFromStatement
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: DbQueryFromStatement.Expression
  fullName: BindOpen.Data.Queries.DbQueryFromStatement.Expression
  type: Property
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Clauses/DbQueryFromStatement.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Expression
    path: ../src/BindOpen.Databases/Data/Queries/Clauses/DbQueryFromStatement.cs
    startLine: 25
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nValue of this instance.\n"
  example: []
  syntax:
    content: public DataExpression Expression { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Expression.DataExpression
    content.vb: Public Property Expression As DataExpression
  overload: BindOpen.Data.Queries.DbQueryFromStatement.Expression*
  implements:
  - BindOpen.Data.Queries.IDbQueryItem.Expression
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQueryFromStatement.#ctor
  commentId: M:BindOpen.Data.Queries.DbQueryFromStatement.#ctor
  id: '#ctor'
  parent: BindOpen.Data.Queries.DbQueryFromStatement
  langs:
  - csharp
  - vb
  name: DbQueryFromStatement()
  nameWithType: DbQueryFromStatement.DbQueryFromStatement()
  fullName: BindOpen.Data.Queries.DbQueryFromStatement.DbQueryFromStatement()
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Clauses/DbQueryFromStatement.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: .ctor
    path: ../src/BindOpen.Databases/Data/Queries/Clauses/DbQueryFromStatement.cs
    startLine: 38
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the DbQueryFromStatement class.\n"
  example: []
  syntax:
    content: public DbQueryFromStatement()
    content.vb: Public Sub New
  overload: BindOpen.Data.Queries.DbQueryFromStatement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.Data.Queries.IDbQueryFromStatement
  commentId: T:BindOpen.Data.Queries.IDbQueryFromStatement
  parent: BindOpen.Data.Queries
  name: IDbQueryFromStatement
  nameWithType: IDbQueryFromStatement
  fullName: BindOpen.Data.Queries.IDbQueryFromStatement
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Queries.DbQueryFromStatement.Tables*
  commentId: Overload:BindOpen.Data.Queries.DbQueryFromStatement.Tables
  name: Tables
  nameWithType: DbQueryFromStatement.Tables
  fullName: BindOpen.Data.Queries.DbQueryFromStatement.Tables
- uid: BindOpen.Data.Queries.IDbQueryFromStatement.Tables
  commentId: P:BindOpen.Data.Queries.IDbQueryFromStatement.Tables
  parent: BindOpen.Data.Queries.IDbQueryFromStatement
  name: Tables
  nameWithType: IDbQueryFromStatement.Tables
  fullName: BindOpen.Data.Queries.IDbQueryFromStatement.Tables
- uid: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbTable}
  commentId: T:System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbTable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbTable>
  nameWithType: List<DbTable>
  fullName: System.Collections.Generic.List<BindOpen.Extensions.Carriers.DbTable>
  nameWithType.vb: List(Of DbTable)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Extensions.Carriers.DbTable)
  name.vb: List(Of DbTable)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.Data.Queries.DbQueryFromStatement.Expression*
  commentId: Overload:BindOpen.Data.Queries.DbQueryFromStatement.Expression
  name: Expression
  nameWithType: DbQueryFromStatement.Expression
  fullName: BindOpen.Data.Queries.DbQueryFromStatement.Expression
- uid: BindOpen.Data.Queries.IDbQueryItem.Expression
  commentId: P:BindOpen.Data.Queries.IDbQueryItem.Expression
  parent: BindOpen.Data.Queries.IDbQueryItem
  name: Expression
  nameWithType: IDbQueryItem.Expression
  fullName: BindOpen.Data.Queries.IDbQueryItem.Expression
- uid: BindOpen.Data.Expression.DataExpression
  commentId: T:BindOpen.Data.Expression.DataExpression
  parent: BindOpen.Data.Expression
  isExternal: true
  name: DataExpression
  nameWithType: DataExpression
  fullName: BindOpen.Data.Expression.DataExpression
- uid: BindOpen.Data.Expression
  commentId: N:BindOpen.Data.Expression
  isExternal: true
  name: BindOpen.Data.Expression
  nameWithType: BindOpen.Data.Expression
  fullName: BindOpen.Data.Expression
- uid: BindOpen.Data.Queries.DbQueryFromStatement.#ctor*
  commentId: Overload:BindOpen.Data.Queries.DbQueryFromStatement.#ctor
  name: DbQueryFromStatement
  nameWithType: DbQueryFromStatement.DbQueryFromStatement
  fullName: BindOpen.Data.Queries.DbQueryFromStatement.DbQueryFromStatement
shouldSkipMarkup: true
