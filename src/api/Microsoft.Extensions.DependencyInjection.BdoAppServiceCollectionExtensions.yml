### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  commentId: T:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  id: BdoAppServiceCollectionExtensions
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Func{BindOpen.Application.Scopes.IBdoHost,``1})
  - Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{BindOpen.Application.Scopes.IBdoHost,``1})
  - Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{BindOpen.Application.Settings.BdoDefaultAppSettings}})
  - Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``0}})
  - Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``1}})
  - Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.GetBindOpenHost(System.IServiceProvider)
  langs:
  - csharp
  - vb
  name: BdoAppServiceCollectionExtensions
  nameWithType: BdoAppServiceCollectionExtensions
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  type: Class
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nThis static class extends .Net core dependency injection namespace.\n"
  syntax:
    content: 'public static class BdoAppServiceCollectionExtensions : Object'
    content.vb: >-
      Public Module BdoAppServiceCollectionExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{BindOpen.Application.Settings.BdoDefaultAppSettings}})
  commentId: M:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{BindOpen.Application.Settings.BdoDefaultAppSettings}})
  id: AddBindOpen(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{BindOpen.Application.Settings.BdoDefaultAppSettings}})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddBindOpen(IServiceCollection, Action<ITBdoHostOptions<BdoDefaultAppSettings>>)
  nameWithType: BdoAppServiceCollectionExtensions.AddBindOpen(IServiceCollection, Action<ITBdoHostOptions<BdoDefaultAppSettings>>)
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<BindOpen.Application.Scopes.ITBdoHostOptions<BindOpen.Application.Settings.BdoDefaultAppSettings>>)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a BindOpen default service.\n"
  syntax:
    content: public static IServiceCollection AddBindOpen(this IServiceCollection services, Action<ITBdoHostOptions<BdoDefaultAppSettings>> setupAction = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The collection of services to populate.
    - id: setupAction
      type: System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{BindOpen.Application.Settings.BdoDefaultAppSettings}}
      description: The setup action to consider.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddBindOpen(services As IServiceCollection, setupAction As Action(Of ITBdoHostOptions(Of BdoDefaultAppSettings)) = Nothing) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen*
  nameWithType.vb: BdoAppServiceCollectionExtensions.AddBindOpen(IServiceCollection, Action(Of ITBdoHostOptions(Of BdoDefaultAppSettings)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of BindOpen.Application.Settings.BdoDefaultAppSettings)))
  name.vb: AddBindOpen(IServiceCollection, Action(Of ITBdoHostOptions(Of BdoDefaultAppSettings)))
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.GetBindOpenHost(System.IServiceProvider)
  commentId: M:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.GetBindOpenHost(System.IServiceProvider)
  id: GetBindOpenHost(System.IServiceProvider)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: GetBindOpenHost(IServiceProvider)
  nameWithType: BdoAppServiceCollectionExtensions.GetBindOpenHost(IServiceProvider)
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.GetBindOpenHost(System.IServiceProvider)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a BindOpen host.\n"
  syntax:
    content: public static IBdoHost GetBindOpenHost(this IServiceProvider provider)
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: The service provider to consider.
    return:
      type: BindOpen.Application.Scopes.IBdoHost
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBindOpenHost(provider As IServiceProvider) As IBdoHost
  overload: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.GetBindOpenHost*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``0}})
  commentId: M:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``0}})
  id: AddBindOpen``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``0}})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddBindOpen<S>(IServiceCollection, Action<ITBdoHostOptions<S>>)
  nameWithType: BdoAppServiceCollectionExtensions.AddBindOpen<S>(IServiceCollection, Action<ITBdoHostOptions<S>>)
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen<S>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<BindOpen.Application.Scopes.ITBdoHostOptions<S>>)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a BindOpen service.\n"
  syntax:
    content: >-
      public static IServiceCollection AddBindOpen<S>(this IServiceCollection services, Action<ITBdoHostOptions<S>> setupAction = null)
          where S : class, IBdoAppSettings, new()
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The collection of services to populate.
    - id: setupAction
      type: System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}}
      description: The setup action to consider.
    typeParameters:
    - id: S
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddBindOpen(Of S As {Class, IBdoAppSettings, New})(services As IServiceCollection, setupAction As Action(Of ITBdoHostOptions(Of S)) = Nothing) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen*
  nameWithType.vb: BdoAppServiceCollectionExtensions.AddBindOpen(Of S)(IServiceCollection, Action(Of ITBdoHostOptions(Of S)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen(Of S)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of S)))
  name.vb: AddBindOpen(Of S)(IServiceCollection, Action(Of ITBdoHostOptions(Of S)))
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``1}})
  commentId: M:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``1}})
  id: AddBindOpen``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``1}})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddBindOpen<SHost, S>(IServiceCollection, Action<ITBdoHostOptions<S>>)
  nameWithType: BdoAppServiceCollectionExtensions.AddBindOpen<SHost, S>(IServiceCollection, Action<ITBdoHostOptions<S>>)
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen<SHost, S>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<BindOpen.Application.Scopes.ITBdoHostOptions<S>>)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a BindOpen service.\n"
  syntax:
    content: >-
      public static IServiceCollection AddBindOpen<SHost, S>(this IServiceCollection services, Action<ITBdoHostOptions<S>> setupAction = null)
          where SHost : TBdoHost<S>, new()
          where S : class, IBdoAppSettings, new()
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The collection of services to populate.
    - id: setupAction
      type: System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}}
      description: The setup action to consider.
    typeParameters:
    - id: SHost
      description: The class of bot to consider.
    - id: S
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddBindOpen(Of SHost As {TBdoHost(Of S), New}, S As {Class, IBdoAppSettings, New})(services As IServiceCollection, setupAction As Action(Of ITBdoHostOptions(Of S)) = Nothing) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen*
  nameWithType.vb: BdoAppServiceCollectionExtensions.AddBindOpen(Of SHost, S)(IServiceCollection, Action(Of ITBdoHostOptions(Of S)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen(Of SHost, S)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of S)))
  name.vb: AddBindOpen(Of SHost, S)(IServiceCollection, Action(Of ITBdoHostOptions(Of S)))
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{BindOpen.Application.Scopes.IBdoHost,``1})
  commentId: M:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{BindOpen.Application.Scopes.IBdoHost,``1})
  id: AddBdoConnectedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{BindOpen.Application.Scopes.IBdoHost,``1})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddBdoConnectedService<TService, TImplementation>(IServiceCollection, Func<IBdoHost, TImplementation>)
  nameWithType: BdoAppServiceCollectionExtensions.AddBdoConnectedService<TService, TImplementation>(IServiceCollection, Func<IBdoHost, TImplementation>)
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<BindOpen.Application.Scopes.IBdoHost, TImplementation>)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a BidnOpen connected service.\n"
  syntax:
    content: >-
      public static IServiceCollection AddBdoConnectedService<TService, TImplementation>(this IServiceCollection services, Func<IBdoHost, TImplementation> setupAction)
          where TService : class, IBdoConnectedService where TImplementation : class, TService
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The collection of services to populate.
    - id: setupAction
      type: System.Func{BindOpen.Application.Scopes.IBdoHost,{TImplementation}}
      description: The setup action to consider.
    typeParameters:
    - id: TService
      description: The interface of BindOpen connected service to consider.
    - id: TImplementation
      description: The service implementation to consider.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Returns the updated service collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddBdoConnectedService(Of TService As {Class, IBdoConnectedService}, TImplementation As {Class, TService})(services As IServiceCollection, setupAction As Func(Of IBdoHost, TImplementation)) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService*
  nameWithType.vb: BdoAppServiceCollectionExtensions.AddBdoConnectedService(Of TService, TImplementation)(IServiceCollection, Func(Of IBdoHost, TImplementation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of BindOpen.Application.Scopes.IBdoHost, TImplementation))
  name.vb: AddBdoConnectedService(Of TService, TImplementation)(IServiceCollection, Func(Of IBdoHost, TImplementation))
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Func{BindOpen.Application.Scopes.IBdoHost,``1})
  commentId: M:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Func{BindOpen.Application.Scopes.IBdoHost,``1})
  id: AddBdoConnectedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Func{BindOpen.Application.Scopes.IBdoHost,``1})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddBdoConnectedService<TService, TImplementation>(IServiceCollection, ServiceLifetime, Func<IBdoHost, TImplementation>)
  nameWithType: BdoAppServiceCollectionExtensions.AddBdoConnectedService<TService, TImplementation>(IServiceCollection, ServiceLifetime, Func<IBdoHost, TImplementation>)
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime, System.Func<BindOpen.Application.Scopes.IBdoHost, TImplementation>)
  type: Method
  source:
    path: BindOpen.Runtime.NetCore
    isExternal: true
  assemblies:
  - BindOpen.Runtime.NetCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a BidnOpen connected service.\n"
  syntax:
    content: >-
      public static IServiceCollection AddBdoConnectedService<TService, TImplementation>(this IServiceCollection services, ServiceLifetime serviceLifetime, Func<IBdoHost, TImplementation> setupAction)
          where TService : class, IBdoConnectedService where TImplementation : class, TService
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The collection of services to populate.
    - id: serviceLifetime
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
      description: The service life time to consider.
    - id: setupAction
      type: System.Func{BindOpen.Application.Scopes.IBdoHost,{TImplementation}}
      description: The setup action to consider.
    typeParameters:
    - id: TService
      description: The interface of BindOpen connected service to consider.
    - id: TImplementation
      description: The service implementation to consider.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Returns the updated service collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddBdoConnectedService(Of TService As {Class, IBdoConnectedService}, TImplementation As {Class, TService})(services As IServiceCollection, serviceLifetime As ServiceLifetime, setupAction As Func(Of IBdoHost, TImplementation)) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService*
  nameWithType.vb: BdoAppServiceCollectionExtensions.AddBdoConnectedService(Of TService, TImplementation)(IServiceCollection, ServiceLifetime, Func(Of IBdoHost, TImplementation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime, System.Func(Of BindOpen.Application.Scopes.IBdoHost, TImplementation))
  name.vb: AddBdoConnectedService(Of TService, TImplementation)(IServiceCollection, ServiceLifetime, Func(Of IBdoHost, TImplementation))
references:
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen
  isExternal: true
  name: AddBindOpen
  nameWithType: BdoAppServiceCollectionExtensions.AddBindOpen
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBindOpen
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{BindOpen.Application.Settings.BdoDefaultAppSettings}}
  commentId: '!:System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{BindOpen.Application.Settings.BdoDefaultAppSettings}}'
  definition: System.Action`1
  name: Action<ITBdoHostOptions<BdoDefaultAppSettings>>
  nameWithType: Action<ITBdoHostOptions<BdoDefaultAppSettings>>
  fullName: System.Action<BindOpen.Application.Scopes.ITBdoHostOptions<BindOpen.Application.Settings.BdoDefaultAppSettings>>
  nameWithType.vb: Action(Of ITBdoHostOptions(Of BdoDefaultAppSettings))
  fullName.vb: System.Action(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of BindOpen.Application.Settings.BdoDefaultAppSettings))
  name.vb: Action(Of ITBdoHostOptions(Of BdoDefaultAppSettings))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Settings.BdoDefaultAppSettings
    name: BdoDefaultAppSettings
    nameWithType: BdoDefaultAppSettings
    fullName: BindOpen.Application.Settings.BdoDefaultAppSettings
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Settings.BdoDefaultAppSettings
    name: BdoDefaultAppSettings
    nameWithType: BdoDefaultAppSettings
    fullName: BindOpen.Application.Settings.BdoDefaultAppSettings
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.GetBindOpenHost*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.GetBindOpenHost
  isExternal: true
  name: GetBindOpenHost
  nameWithType: BdoAppServiceCollectionExtensions.GetBindOpenHost
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.GetBindOpenHost
- uid: System.IServiceProvider
  commentId: '!:System.IServiceProvider'
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: BindOpen.Application.Scopes.IBdoHost
  commentId: T:BindOpen.Application.Scopes.IBdoHost
  parent: BindOpen.Application.Scopes
  isExternal: true
  name: IBdoHost
  nameWithType: IBdoHost
  fullName: BindOpen.Application.Scopes.IBdoHost
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  isExternal: true
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}}
  commentId: '!:System.Action{BindOpen.Application.Scopes.ITBdoHostOptions{``0}}'
  definition: System.Action`1
  name: Action<ITBdoHostOptions<S>>
  nameWithType: Action<ITBdoHostOptions<S>>
  fullName: System.Action<BindOpen.Application.Scopes.ITBdoHostOptions<S>>
  nameWithType.vb: Action(Of ITBdoHostOptions(Of S))
  fullName.vb: System.Action(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of S))
  name.vb: Action(Of ITBdoHostOptions(Of S))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService
  isExternal: true
  name: AddBdoConnectedService
  nameWithType: BdoAppServiceCollectionExtensions.AddBdoConnectedService
  fullName: Microsoft.Extensions.DependencyInjection.BdoAppServiceCollectionExtensions.AddBdoConnectedService
- uid: System.Func{BindOpen.Application.Scopes.IBdoHost,{TImplementation}}
  commentId: '!:System.Func{BindOpen.Application.Scopes.IBdoHost,``1}'
  definition: System.Func`2
  name: Func<IBdoHost, TImplementation>
  nameWithType: Func<IBdoHost, TImplementation>
  fullName: System.Func<BindOpen.Application.Scopes.IBdoHost, TImplementation>
  nameWithType.vb: Func(Of IBdoHost, TImplementation)
  fullName.vb: System.Func(Of BindOpen.Application.Scopes.IBdoHost, TImplementation)
  name.vb: Func(Of IBdoHost, TImplementation)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.IBdoHost
    name: IBdoHost
    nameWithType: IBdoHost
    fullName: BindOpen.Application.Scopes.IBdoHost
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TImplementation
    nameWithType: TImplementation
    fullName: TImplementation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.IBdoHost
    name: IBdoHost
    nameWithType: IBdoHost
    fullName: BindOpen.Application.Scopes.IBdoHost
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TImplementation
    nameWithType: TImplementation
    fullName: TImplementation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  commentId: '!:Microsoft.Extensions.DependencyInjection.ServiceLifetime'
  isExternal: true
  name: ServiceLifetime
  nameWithType: ServiceLifetime
  fullName: Microsoft.Extensions.DependencyInjection.ServiceLifetime
shouldSkipMarkup: true
