### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory
  commentId: T:BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory
  id: BdoLoggerFactory
  parent: BindOpen.System.Diagnostics.Loggers
  children:
  - BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create``1(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  langs:
  - csharp
  - vb
  name: BdoLoggerFactory
  nameWithType: BdoLoggerFactory
  fullName: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThis class represents a logger.\n"
  remarks: The output format is YAML.
  syntax:
    content: 'public static class BdoLoggerFactory : Object'
    content.vb: >-
      Public Module BdoLoggerFactory
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create``1(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create``1(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  id: Create``1(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  parent: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory
  langs:
  - csharp
  - vb
  name: Create<T>(String, BdoLoggerMode, Predicate<IBdoLogEvent>)
  nameWithType: BdoLoggerFactory.Create<T>(String, BdoLoggerMode, Predicate<IBdoLogEvent>)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create<T>(System.String, BindOpen.System.Diagnostics.BdoLoggerMode, System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nCreates the specified logger.\n"
  syntax:
    content: >-
      public static IBdoLogger Create<T>(string name, BdoLoggerMode mode, Predicate<IBdoLogEvent> eventFilter = null)
          where T : IBdoLogger, new()
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to consider.
    - id: eventFilter
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: The function that filters events.
    typeParameters:
    - id: T
      description: The logger class to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
      description: Returns the specified logger.
    content.vb: Public Shared Function Create(Of T As {IBdoLogger, New})(name As String, mode As BdoLoggerMode, eventFilter As Predicate(Of IBdoLogEvent) = Nothing) As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create*
  nameWithType.vb: BdoLoggerFactory.Create(Of T)(String, BdoLoggerMode, Predicate(Of IBdoLogEvent))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create(Of T)(System.String, BindOpen.System.Diagnostics.BdoLoggerMode, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent))
  name.vb: Create(Of T)(String, BdoLoggerMode, Predicate(Of IBdoLogEvent))
references:
- uid: BindOpen.System.Diagnostics.Loggers
  commentId: N:BindOpen.System.Diagnostics.Loggers
  isExternal: true
  name: BindOpen.System.Diagnostics.Loggers
  nameWithType: BindOpen.System.Diagnostics.Loggers
  fullName: BindOpen.System.Diagnostics.Loggers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create
  isExternal: true
  name: Create
  nameWithType: BdoLoggerFactory.Create
  fullName: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.BdoLoggerMode
  isExternal: true
  name: BdoLoggerMode
  nameWithType: BdoLoggerMode
  fullName: BindOpen.System.Diagnostics.BdoLoggerMode
- uid: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  commentId: '!:System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}'
  definition: System.Predicate`1
  name: Predicate<IBdoLogEvent>
  nameWithType: Predicate<IBdoLogEvent>
  fullName: System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>
  nameWithType.vb: Predicate(Of IBdoLogEvent)
  fullName.vb: System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent)
  name.vb: Predicate(Of IBdoLogEvent)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  commentId: '!:BindOpen.System.Diagnostics.Loggers.IBdoLogger'
  isExternal: true
  name: IBdoLogger
  nameWithType: IBdoLogger
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
- uid: System.Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
