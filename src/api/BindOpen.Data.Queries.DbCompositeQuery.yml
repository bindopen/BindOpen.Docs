### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.DbCompositeQuery
  commentId: T:BindOpen.Data.Queries.DbCompositeQuery
  id: DbCompositeQuery
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.DbCompositeQuery.#ctor
  - BindOpen.Data.Queries.DbCompositeQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  - BindOpen.Data.Queries.DbCompositeQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  - BindOpen.Data.Queries.DbCompositeQuery.Key
  - BindOpen.Data.Queries.DbCompositeQuery.Queries
  - BindOpen.Data.Queries.DbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
  langs:
  - csharp
  - vb
  name: DbCompositeQuery
  nameWithType: DbCompositeQuery
  fullName: BindOpen.Data.Queries.DbCompositeQuery
  type: Class
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThis class represents a merge data query.\n"
  syntax:
    content: 'public class DbCompositeQuery : DbQuery, IDbCompositeQuery, IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem'
    content.vb: >-
      Public Class DbCompositeQuery
          Inherits DbQuery
          Implements IDbCompositeQuery, IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem
  inheritance:
  - System.Object
  - BindOpen.Data.Queries.DbQuery
  implements:
  - BindOpen.Data.Queries.IDbCompositeQuery
  - BindOpen.Data.Queries.IDbQuery
  - BindOpen.Data.Items.IDescribedDataItem
  - BindOpen.Data.Items.ITitledDataItem
  - BindOpen.Data.Items.INamedDataItem
  - BindOpen.Data.Items.IStoredDataItem
  - BindOpen.Data.Items.IIdentifiedDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  - BindOpen.Data.Items.IIdentified
  - BindOpen.Data.Items.IReferenced
  - BindOpen.Data.Items.IStorable
  - BindOpen.Data.Items.INamed
  - BindOpen.Data.Items.IGloballyTitled
  - BindOpen.Data.Items.IGloballyDescribed
  - BindOpen.Data.Queries.IDbQueryItem
  inheritedMembers:
  - BindOpen.Data.Queries.DbQuery.GetName
  - BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  - BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  - BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  - BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  - BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  - BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  - BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  - BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  - BindOpen.Data.Queries.DbQuery.Name
  - BindOpen.Data.Queries.DbQuery.DataModule
  - BindOpen.Data.Queries.DbQuery.DataTable
  - BindOpen.Data.Queries.DbQuery.DataTableAlias
  - BindOpen.Data.Queries.DbQuery.Schema
  - BindOpen.Data.Queries.DbQuery.Kind
  - BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  - BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  - BindOpen.Data.Queries.DbQuery.ParameterSet
  - BindOpen.Data.Queries.DbQuery.CTETables
  - BindOpen.Data.Queries.DbQuery.Expression
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Data.Queries.DbCompositeQuery.#ctor
  commentId: M:BindOpen.Data.Queries.DbCompositeQuery.#ctor
  id: '#ctor'
  parent: BindOpen.Data.Queries.DbCompositeQuery
  langs:
  - csharp
  - vb
  name: DbCompositeQuery()
  nameWithType: DbCompositeQuery.DbCompositeQuery()
  fullName: BindOpen.Data.Queries.DbCompositeQuery.DbCompositeQuery()
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the DbCTEQuery class.\n"
  syntax:
    content: public DbCompositeQuery()
    content.vb: Public Sub New
  overload: BindOpen.Data.Queries.DbCompositeQuery.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbCompositeQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  commentId: M:BindOpen.Data.Queries.DbCompositeQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  id: '#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)'
  parent: BindOpen.Data.Queries.DbCompositeQuery
  langs:
  - csharp
  - vb
  name: DbCompositeQuery(DbQueryKind, DbTable)
  nameWithType: DbCompositeQuery.DbCompositeQuery(DbQueryKind, DbTable)
  fullName: BindOpen.Data.Queries.DbCompositeQuery.DbCompositeQuery(BindOpen.Data.Queries.DbQueryKind, BindOpen.Extensions.Carriers.DbTable)
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the DbCTEQuery class.\n"
  syntax:
    content: public DbCompositeQuery(DbQueryKind kind, DbTable table)
    parameters:
    - id: kind
      type: BindOpen.Data.Queries.DbQueryKind
      description: The kind to consider.
    - id: table
      type: BindOpen.Extensions.Carriers.DbTable
      description: The table to consider.
    content.vb: Public Sub New(kind As DbQueryKind, table As DbTable)
  overload: BindOpen.Data.Queries.DbCompositeQuery.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbCompositeQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  commentId: M:BindOpen.Data.Queries.DbCompositeQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)
  id: '#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)'
  parent: BindOpen.Data.Queries.DbCompositeQuery
  langs:
  - csharp
  - vb
  name: DbCompositeQuery(String, DbQueryKind, DbTable)
  nameWithType: DbCompositeQuery.DbCompositeQuery(String, DbQueryKind, DbTable)
  fullName: BindOpen.Data.Queries.DbCompositeQuery.DbCompositeQuery(System.String, BindOpen.Data.Queries.DbQueryKind, BindOpen.Extensions.Carriers.DbTable)
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the DbCTEQuery class.\n"
  syntax:
    content: public DbCompositeQuery(string name, DbQueryKind kind, DbTable table)
    parameters:
    - id: name
      type: System.String
      description: The name of the query to consider.
    - id: kind
      type: BindOpen.Data.Queries.DbQueryKind
      description: The kind to consider.
    - id: table
      type: BindOpen.Extensions.Carriers.DbTable
      description: The table to consider.
    content.vb: Public Sub New(name As String, kind As DbQueryKind, table As DbTable)
  overload: BindOpen.Data.Queries.DbCompositeQuery.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbCompositeQuery.Key
  commentId: M:BindOpen.Data.Queries.DbCompositeQuery.Key
  id: Key
  parent: BindOpen.Data.Queries.DbCompositeQuery
  langs:
  - csharp
  - vb
  name: Key()
  nameWithType: DbCompositeQuery.Key()
  fullName: BindOpen.Data.Queries.DbCompositeQuery.Key()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nGets the key of the item.\n"
  syntax:
    content: public override string Key()
    return:
      type: System.String
      description: Returns the key of the item.
    content.vb: Public Overrides Function Key As String
  overload: BindOpen.Data.Queries.DbCompositeQuery.Key*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.Data.Queries.DbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
  commentId: M:BindOpen.Data.Queries.DbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
  id: WithQueries(BindOpen.Data.Queries.IDbQuery[])
  parent: BindOpen.Data.Queries.DbCompositeQuery
  langs:
  - csharp
  - vb
  name: WithQueries(IDbQuery[])
  nameWithType: DbCompositeQuery.WithQueries(IDbQuery[])
  fullName: BindOpen.Data.Queries.DbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the specified queries.\n"
  syntax:
    content: public IDbCompositeQuery WithQueries(params IDbQuery[] queries)
    parameters:
    - id: queries
      type: BindOpen.Data.Queries.IDbQuery[]
      description: The queries to consider.
    return:
      type: BindOpen.Data.Queries.IDbCompositeQuery
      description: Returns this instance.
    content.vb: Public Function WithQueries(ParamArray queries As IDbQuery()) As IDbCompositeQuery
  overload: BindOpen.Data.Queries.DbCompositeQuery.WithQueries*
  implements:
  - BindOpen.Data.Queries.IDbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
  nameWithType.vb: DbCompositeQuery.WithQueries(IDbQuery())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Queries.DbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery())
  name.vb: WithQueries(IDbQuery())
- uid: BindOpen.Data.Queries.DbCompositeQuery.Queries
  commentId: P:BindOpen.Data.Queries.DbCompositeQuery.Queries
  id: Queries
  parent: BindOpen.Data.Queries.DbCompositeQuery
  langs:
  - csharp
  - vb
  name: Queries
  nameWithType: DbCompositeQuery.Queries
  fullName: BindOpen.Data.Queries.DbCompositeQuery.Queries
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe queries of this instance.\n"
  syntax:
    content: public List<DbQuery> Queries { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Queries.DbQuery}
    content.vb: Public Property Queries As List(Of DbQuery)
  overload: BindOpen.Data.Queries.DbCompositeQuery.Queries*
  implements:
  - BindOpen.Data.Queries.IDbCompositeQuery.Queries
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  isExternal: true
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.Data.Queries.DbQuery
  commentId: T:BindOpen.Data.Queries.DbQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQuery
  nameWithType: DbQuery
  fullName: BindOpen.Data.Queries.DbQuery
- uid: BindOpen.Data.Queries.IDbCompositeQuery
  commentId: T:BindOpen.Data.Queries.IDbCompositeQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbCompositeQuery
  nameWithType: IDbCompositeQuery
  fullName: BindOpen.Data.Queries.IDbCompositeQuery
- uid: BindOpen.Data.Queries.IDbQuery
  commentId: T:BindOpen.Data.Queries.IDbQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQuery
  nameWithType: IDbQuery
  fullName: BindOpen.Data.Queries.IDbQuery
- uid: BindOpen.Data.Items.IDescribedDataItem
  isExternal: true
  name: IDescribedDataItem
  nameWithType: IDescribedDataItem
  fullName: BindOpen.Data.Items.IDescribedDataItem
- uid: BindOpen.Data.Items.ITitledDataItem
  isExternal: true
  name: ITitledDataItem
  nameWithType: ITitledDataItem
  fullName: BindOpen.Data.Items.ITitledDataItem
- uid: BindOpen.Data.Items.INamedDataItem
  isExternal: true
  name: INamedDataItem
  nameWithType: INamedDataItem
  fullName: BindOpen.Data.Items.INamedDataItem
- uid: BindOpen.Data.Items.IStoredDataItem
  isExternal: true
  name: IStoredDataItem
  nameWithType: IStoredDataItem
  fullName: BindOpen.Data.Items.IStoredDataItem
- uid: BindOpen.Data.Items.IIdentifiedDataItem
  isExternal: true
  name: IIdentifiedDataItem
  nameWithType: IIdentifiedDataItem
  fullName: BindOpen.Data.Items.IIdentifiedDataItem
- uid: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  isExternal: true
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  isExternal: true
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Items.IStorable
  isExternal: true
  name: IStorable
  nameWithType: IStorable
  fullName: BindOpen.Data.Items.IStorable
- uid: BindOpen.Data.Items.INamed
  isExternal: true
  name: INamed
  nameWithType: INamed
  fullName: BindOpen.Data.Items.INamed
- uid: BindOpen.Data.Items.IGloballyTitled
  isExternal: true
  name: IGloballyTitled
  nameWithType: IGloballyTitled
  fullName: BindOpen.Data.Items.IGloballyTitled
- uid: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: IGloballyDescribed
  nameWithType: IGloballyDescribed
  fullName: BindOpen.Data.Items.IGloballyDescribed
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: BindOpen.Data.Queries.DbQuery.GetName
  commentId: M:BindOpen.Data.Queries.DbQuery.GetName
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: GetName()
  nameWithType: DbQuery.GetName()
  fullName: BindOpen.Data.Queries.DbQuery.GetName()
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.GetName
    name: GetName
    nameWithType: DbQuery.GetName
    fullName: BindOpen.Data.Queries.DbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.GetName
    name: GetName
    nameWithType: DbQuery.GetName
    fullName: BindOpen.Data.Queries.DbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  commentId: M:BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: CheckExistence(Boolean)
  nameWithType: DbQuery.CheckExistence(Boolean)
  fullName: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: DbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.DbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: DbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.DbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  commentId: M:BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: WithParameters(IDataElement[])
  nameWithType: DbQuery.WithParameters(IDataElement[])
  fullName: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  nameWithType.vb: DbQuery.WithParameters(IDataElement())
  fullName.vb: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement())
  name.vb: WithParameters(IDataElement())
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: DbQuery.WithParameters
    fullName: BindOpen.Data.Queries.DbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: DbQuery.WithParameters
    fullName: BindOpen.Data.Queries.DbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  commentId: M:BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: UsingParameters(IDataElementSpec[])
  nameWithType: DbQuery.UsingParameters(IDataElementSpec[])
  fullName: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  nameWithType.vb: DbQuery.UsingParameters(IDataElementSpec())
  fullName.vb: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec())
  name.vb: UsingParameters(IDataElementSpec())
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: DbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.DbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: DbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.DbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  commentId: M:BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: AddParameter(ScalarElement)
  nameWithType: DbQuery.AddParameter(ScalarElement)
  fullName: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: DbQuery.AddParameter
    fullName: BindOpen.Data.Queries.DbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: DbQuery.AddParameter
    fullName: BindOpen.Data.Queries.DbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  commentId: M:BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: UseParameter(String, Object)
  nameWithType: DbQuery.UseParameter(String, Object)
  fullName: BindOpen.Data.Queries.DbQuery.UseParameter(System.String, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: DbQuery.UseParameter
    fullName: BindOpen.Data.Queries.DbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: DbQuery.UseParameter
    fullName: BindOpen.Data.Queries.DbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  commentId: M:BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: UseParameter(String, DataValueType, Object)
  nameWithType: DbQuery.UseParameter(String, DataValueType, Object)
  fullName: BindOpen.Data.Queries.DbQuery.UseParameter(System.String, BindOpen.Data.Common.DataValueType, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: DbQuery.UseParameter
    fullName: BindOpen.Data.Queries.DbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: DbQuery.UseParameter
    fullName: BindOpen.Data.Queries.DbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  commentId: M:BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: WithCTE(DbTable[])
  nameWithType: DbQuery.WithCTE(DbTable[])
  fullName: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  nameWithType.vb: DbQuery.WithCTE(DbTable())
  fullName.vb: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable())
  name.vb: WithCTE(DbTable())
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: DbQuery.WithCTE
    fullName: BindOpen.Data.Queries.DbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: DbQuery.WithCTE
    fullName: BindOpen.Data.Queries.DbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DbQuery.Dispose(Boolean)
  fullName: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DbQuery.Dispose
    fullName: BindOpen.Data.Queries.DbQuery.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DbQuery.Dispose
    fullName: BindOpen.Data.Queries.DbQuery.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQuery.Name
  commentId: P:BindOpen.Data.Queries.DbQuery.Name
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Name
  nameWithType: DbQuery.Name
  fullName: BindOpen.Data.Queries.DbQuery.Name
- uid: BindOpen.Data.Queries.DbQuery.DataModule
  commentId: P:BindOpen.Data.Queries.DbQuery.DataModule
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: DataModule
  nameWithType: DbQuery.DataModule
  fullName: BindOpen.Data.Queries.DbQuery.DataModule
- uid: BindOpen.Data.Queries.DbQuery.DataTable
  commentId: P:BindOpen.Data.Queries.DbQuery.DataTable
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: DataTable
  nameWithType: DbQuery.DataTable
  fullName: BindOpen.Data.Queries.DbQuery.DataTable
- uid: BindOpen.Data.Queries.DbQuery.DataTableAlias
  commentId: P:BindOpen.Data.Queries.DbQuery.DataTableAlias
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: DataTableAlias
  nameWithType: DbQuery.DataTableAlias
  fullName: BindOpen.Data.Queries.DbQuery.DataTableAlias
- uid: BindOpen.Data.Queries.DbQuery.Schema
  commentId: P:BindOpen.Data.Queries.DbQuery.Schema
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Schema
  nameWithType: DbQuery.Schema
  fullName: BindOpen.Data.Queries.DbQuery.Schema
- uid: BindOpen.Data.Queries.DbQuery.Kind
  commentId: P:BindOpen.Data.Queries.DbQuery.Kind
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Kind
  nameWithType: DbQuery.Kind
  fullName: BindOpen.Data.Queries.DbQuery.Kind
- uid: BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  commentId: P:BindOpen.Data.Queries.DbQuery.IsExistenceChecked
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: IsExistenceChecked
  nameWithType: DbQuery.IsExistenceChecked
  fullName: BindOpen.Data.Queries.DbQuery.IsExistenceChecked
- uid: BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  commentId: P:BindOpen.Data.Queries.DbQuery.ParameterSpecSet
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: ParameterSpecSet
  nameWithType: DbQuery.ParameterSpecSet
  fullName: BindOpen.Data.Queries.DbQuery.ParameterSpecSet
- uid: BindOpen.Data.Queries.DbQuery.ParameterSet
  commentId: P:BindOpen.Data.Queries.DbQuery.ParameterSet
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: ParameterSet
  nameWithType: DbQuery.ParameterSet
  fullName: BindOpen.Data.Queries.DbQuery.ParameterSet
- uid: BindOpen.Data.Queries.DbQuery.CTETables
  commentId: P:BindOpen.Data.Queries.DbQuery.CTETables
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: CTETables
  nameWithType: DbQuery.CTETables
  fullName: BindOpen.Data.Queries.DbQuery.CTETables
- uid: BindOpen.Data.Queries.DbQuery.Expression
  commentId: P:BindOpen.Data.Queries.DbQuery.Expression
  parent: BindOpen.Data.Queries.DbQuery
  isExternal: true
  name: Expression
  nameWithType: DbQuery.Expression
  fullName: BindOpen.Data.Queries.DbQuery.Expression
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Queries.DbCompositeQuery.#ctor*
  commentId: Overload:BindOpen.Data.Queries.DbCompositeQuery.#ctor
  isExternal: true
  name: DbCompositeQuery
  nameWithType: DbCompositeQuery.DbCompositeQuery
  fullName: BindOpen.Data.Queries.DbCompositeQuery.DbCompositeQuery
- uid: BindOpen.Data.Queries.DbQueryKind
  commentId: T:BindOpen.Data.Queries.DbQueryKind
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryKind
  nameWithType: DbQueryKind
  fullName: BindOpen.Data.Queries.DbQueryKind
- uid: BindOpen.Extensions.Carriers.DbTable
  commentId: T:BindOpen.Extensions.Carriers.DbTable
  parent: BindOpen.Extensions.Carriers
  isExternal: true
  name: DbTable
  nameWithType: DbTable
  fullName: BindOpen.Extensions.Carriers.DbTable
- uid: BindOpen.Extensions.Carriers
  commentId: N:BindOpen.Extensions.Carriers
  isExternal: true
  name: BindOpen.Extensions.Carriers
  nameWithType: BindOpen.Extensions.Carriers
  fullName: BindOpen.Extensions.Carriers
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Queries.DbCompositeQuery.Key*
  commentId: Overload:BindOpen.Data.Queries.DbCompositeQuery.Key
  isExternal: true
  name: Key
  nameWithType: DbCompositeQuery.Key
  fullName: BindOpen.Data.Queries.DbCompositeQuery.Key
- uid: BindOpen.Data.Queries.DbCompositeQuery.WithQueries*
  commentId: Overload:BindOpen.Data.Queries.DbCompositeQuery.WithQueries
  isExternal: true
  name: WithQueries
  nameWithType: DbCompositeQuery.WithQueries
  fullName: BindOpen.Data.Queries.DbCompositeQuery.WithQueries
- uid: BindOpen.Data.Queries.IDbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
  commentId: M:BindOpen.Data.Queries.IDbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
  parent: BindOpen.Data.Queries.IDbCompositeQuery
  isExternal: true
  name: WithQueries(IDbQuery[])
  nameWithType: IDbCompositeQuery.WithQueries(IDbQuery[])
  fullName: BindOpen.Data.Queries.IDbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
  nameWithType.vb: IDbCompositeQuery.WithQueries(IDbQuery())
  fullName.vb: BindOpen.Data.Queries.IDbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery())
  name.vb: WithQueries(IDbQuery())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
    name: WithQueries
    nameWithType: IDbCompositeQuery.WithQueries
    fullName: BindOpen.Data.Queries.IDbCompositeQuery.WithQueries
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbQuery
    name: IDbQuery
    nameWithType: IDbQuery
    fullName: BindOpen.Data.Queries.IDbQuery
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])
    name: WithQueries
    nameWithType: IDbCompositeQuery.WithQueries
    fullName: BindOpen.Data.Queries.IDbCompositeQuery.WithQueries
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbQuery
    name: IDbQuery
    nameWithType: IDbQuery
    fullName: BindOpen.Data.Queries.IDbQuery
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery[]
  isExternal: true
  name: IDbQuery[]
  nameWithType: IDbQuery[]
  fullName: BindOpen.Data.Queries.IDbQuery[]
  nameWithType.vb: IDbQuery()
  fullName.vb: BindOpen.Data.Queries.IDbQuery()
  name.vb: IDbQuery()
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery
    name: IDbQuery
    nameWithType: IDbQuery
    fullName: BindOpen.Data.Queries.IDbQuery
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery
    name: IDbQuery
    nameWithType: IDbQuery
    fullName: BindOpen.Data.Queries.IDbQuery
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Queries.DbCompositeQuery.Queries*
  commentId: Overload:BindOpen.Data.Queries.DbCompositeQuery.Queries
  isExternal: true
  name: Queries
  nameWithType: DbCompositeQuery.Queries
  fullName: BindOpen.Data.Queries.DbCompositeQuery.Queries
- uid: BindOpen.Data.Queries.IDbCompositeQuery.Queries
  commentId: P:BindOpen.Data.Queries.IDbCompositeQuery.Queries
  parent: BindOpen.Data.Queries.IDbCompositeQuery
  isExternal: true
  name: Queries
  nameWithType: IDbCompositeQuery.Queries
  fullName: BindOpen.Data.Queries.IDbCompositeQuery.Queries
- uid: System.Collections.Generic.List{BindOpen.Data.Queries.DbQuery}
  commentId: '!:System.Collections.Generic.List{BindOpen.Data.Queries.DbQuery}'
  definition: System.Collections.Generic.List`1
  name: List<DbQuery>
  nameWithType: List<DbQuery>
  fullName: System.Collections.Generic.List<BindOpen.Data.Queries.DbQuery>
  nameWithType.vb: List(Of DbQuery)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Data.Queries.DbQuery)
  name.vb: List(Of DbQuery)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Queries.DbQuery
    name: DbQuery
    nameWithType: DbQuery
    fullName: BindOpen.Data.Queries.DbQuery
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Queries.DbQuery
    name: DbQuery
    nameWithType: DbQuery
    fullName: BindOpen.Data.Queries.DbQuery
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
