### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions
  commentId: T:BindOpen.Data.Stores.BdoDataStoreExtensions
  id: BdoDataStoreExtensions
  parent: BindOpen.Data.Stores
  children:
  - BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Application.Scopes.IBdoScope)
  - BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Data.Stores.IBdoDataStore)
  - BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel``1(BindOpen.Application.Scopes.IBdoScope)
  - BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore)
  - BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot,BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot})
  langs:
  - csharp
  - vb
  name: BdoDataStoreExtensions
  nameWithType: BdoDataStoreExtensions
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions
  type: Class
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nThis class represents an data queries factory.\n"
  syntax:
    content: 'public static class BdoDataStoreExtensions : Object'
    content.vb: >-
      Public Module BdoDataStoreExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore)
  commentId: M:BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore)
  id: RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore)
  isExtensionMethod: true
  parent: BindOpen.Data.Stores.BdoDataStoreExtensions
  langs:
  - csharp
  - vb
  name: RegisterDbModels(IBdoDataStore)
  nameWithType: BdoDataStoreExtensions.RegisterDbModels(IBdoDataStore)
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nAdd a database queries depot into the specified data store executing the specified action.\n"
  syntax:
    content: public static IBdoDataStore RegisterDbModels(this IBdoDataStore dataStore)
    parameters:
    - id: dataStore
      type: BindOpen.Data.Stores.IBdoDataStore
      description: The data store to consider.
    return:
      type: BindOpen.Data.Stores.IBdoDataStore
      description: Returns the data store to update.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RegisterDbModels(dataStore As IBdoDataStore) As IBdoDataStore
  overload: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot})
  commentId: M:BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot})
  id: RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot})
  isExtensionMethod: true
  parent: BindOpen.Data.Stores.BdoDataStoreExtensions
  langs:
  - csharp
  - vb
  name: RegisterDbModels(IBdoDataStore, Action<IBdoDbModelDepot>)
  nameWithType: BdoDataStoreExtensions.RegisterDbModels(IBdoDataStore, Action<IBdoDbModelDepot>)
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore, System.Action<BindOpen.Data.Stores.IBdoDbModelDepot>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nAdd a database queries depot into the specified data store executing the specified action.\n"
  syntax:
    content: public static IBdoDataStore RegisterDbModels(this IBdoDataStore dataStore, Action<IBdoDbModelDepot> action)
    parameters:
    - id: dataStore
      type: BindOpen.Data.Stores.IBdoDataStore
      description: The data store to consider.
    - id: action
      type: System.Action{BindOpen.Data.Stores.IBdoDbModelDepot}
      description: The action to execute on the created depot.
    return:
      type: BindOpen.Data.Stores.IBdoDataStore
      description: Returns the data store to update.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RegisterDbModels(dataStore As IBdoDataStore, action As Action(Of IBdoDbModelDepot)) As IBdoDataStore
  overload: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels*
  nameWithType.vb: BdoDataStoreExtensions.RegisterDbModels(IBdoDataStore, Action(Of IBdoDbModelDepot))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore, System.Action(Of BindOpen.Data.Stores.IBdoDbModelDepot))
  name.vb: RegisterDbModels(IBdoDataStore, Action(Of IBdoDbModelDepot))
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot,BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot,BindOpen.System.Diagnostics.IBdoLog})
  id: RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot,BindOpen.System.Diagnostics.IBdoLog})
  isExtensionMethod: true
  parent: BindOpen.Data.Stores.BdoDataStoreExtensions
  langs:
  - csharp
  - vb
  name: RegisterDbModels(IBdoDataStore, Action<IBdoDbModelDepot, IBdoLog>)
  nameWithType: BdoDataStoreExtensions.RegisterDbModels(IBdoDataStore, Action<IBdoDbModelDepot, IBdoLog>)
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore, System.Action<BindOpen.Data.Stores.IBdoDbModelDepot, BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nAdd a database queries depot into the specified data store executing the specified action.\n"
  syntax:
    content: public static IBdoDataStore RegisterDbModels(this IBdoDataStore dataStore, Action<IBdoDbModelDepot, IBdoLog> action)
    parameters:
    - id: dataStore
      type: BindOpen.Data.Stores.IBdoDataStore
      description: The data store to consider.
    - id: action
      type: System.Action{BindOpen.Data.Stores.IBdoDbModelDepot,BindOpen.System.Diagnostics.IBdoLog}
      description: The action to execute on the created depot.
    return:
      type: BindOpen.Data.Stores.IBdoDataStore
      description: Returns the data store to update.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RegisterDbModels(dataStore As IBdoDataStore, action As Action(Of IBdoDbModelDepot, IBdoLog)) As IBdoDataStore
  overload: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels*
  nameWithType.vb: BdoDataStoreExtensions.RegisterDbModels(IBdoDataStore, Action(Of IBdoDbModelDepot, IBdoLog))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore, System.Action(Of BindOpen.Data.Stores.IBdoDbModelDepot, BindOpen.System.Diagnostics.IBdoLog))
  name.vb: RegisterDbModels(IBdoDataStore, Action(Of IBdoDbModelDepot, IBdoLog))
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Data.Stores.IBdoDataStore)
  commentId: M:BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Data.Stores.IBdoDataStore)
  id: GetDbModelDepot(BindOpen.Data.Stores.IBdoDataStore)
  isExtensionMethod: true
  parent: BindOpen.Data.Stores.BdoDataStoreExtensions
  langs:
  - csharp
  - vb
  name: GetDbModelDepot(IBdoDataStore)
  nameWithType: BdoDataStoreExtensions.GetDbModelDepot(IBdoDataStore)
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Data.Stores.IBdoDataStore)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nGets the database queries depot of the specified data store.\n"
  syntax:
    content: public static IBdoDbModelDepot GetDbModelDepot(this IBdoDataStore dataStore)
    parameters:
    - id: dataStore
      type: BindOpen.Data.Stores.IBdoDataStore
      description: The data store to consider.
    return:
      type: BindOpen.Data.Stores.IBdoDbModelDepot
      description: Returns the database model depot of the specified data store.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDbModelDepot(dataStore As IBdoDataStore) As IBdoDbModelDepot
  overload: BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Application.Scopes.IBdoScope)
  commentId: M:BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Application.Scopes.IBdoScope)
  id: GetDbModelDepot(BindOpen.Application.Scopes.IBdoScope)
  isExtensionMethod: true
  parent: BindOpen.Data.Stores.BdoDataStoreExtensions
  langs:
  - csharp
  - vb
  name: GetDbModelDepot(IBdoScope)
  nameWithType: BdoDataStoreExtensions.GetDbModelDepot(IBdoScope)
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Application.Scopes.IBdoScope)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nGets the database model depot of the specified scope.\n"
  syntax:
    content: public static IBdoDbModelDepot GetDbModelDepot(this IBdoScope scope)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The data store to consider.
    return:
      type: BindOpen.Data.Stores.IBdoDbModelDepot
      description: Returns the database model depot of the specified scope.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDbModelDepot(scope As IBdoScope) As IBdoDbModelDepot
  overload: BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel``1(BindOpen.Application.Scopes.IBdoScope)
  commentId: M:BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel``1(BindOpen.Application.Scopes.IBdoScope)
  id: GetModel``1(BindOpen.Application.Scopes.IBdoScope)
  isExtensionMethod: true
  parent: BindOpen.Data.Stores.BdoDataStoreExtensions
  langs:
  - csharp
  - vb
  name: GetModel<T>(IBdoScope)
  nameWithType: BdoDataStoreExtensions.GetModel<T>(IBdoScope)
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel<T>(BindOpen.Application.Scopes.IBdoScope)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Stores
  summary: "\nGets the database model with the specified name.\n"
  syntax:
    content: >-
      public static T GetModel<T>(this IBdoScope scope)
          where T : BdoDbModel
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The data store to consider.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns the database query with the specified name.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetModel(Of T As BdoDbModel)(scope As IBdoScope) As T
  overload: BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel*
  nameWithType.vb: BdoDataStoreExtensions.GetModel(Of T)(IBdoScope)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel(Of T)(BindOpen.Application.Scopes.IBdoScope)
  name.vb: GetModel(Of T)(IBdoScope)
references:
- uid: BindOpen.Data.Stores
  commentId: N:BindOpen.Data.Stores
  isExternal: true
  name: BindOpen.Data.Stores
  nameWithType: BindOpen.Data.Stores
  fullName: BindOpen.Data.Stores
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels*
  commentId: Overload:BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels
  isExternal: true
  name: RegisterDbModels
  nameWithType: BdoDataStoreExtensions.RegisterDbModels
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels
- uid: BindOpen.Data.Stores.IBdoDataStore
  isExternal: true
  name: IBdoDataStore
  nameWithType: IBdoDataStore
  fullName: BindOpen.Data.Stores.IBdoDataStore
- uid: System.Action{BindOpen.Data.Stores.IBdoDbModelDepot}
  commentId: '!:System.Action{BindOpen.Data.Stores.IBdoDbModelDepot}'
  definition: System.Action`1
  name: Action<IBdoDbModelDepot>
  nameWithType: Action<IBdoDbModelDepot>
  fullName: System.Action<BindOpen.Data.Stores.IBdoDbModelDepot>
  nameWithType.vb: Action(Of IBdoDbModelDepot)
  fullName.vb: System.Action(Of BindOpen.Data.Stores.IBdoDbModelDepot)
  name.vb: Action(Of IBdoDbModelDepot)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Stores.IBdoDbModelDepot
    name: IBdoDbModelDepot
    nameWithType: IBdoDbModelDepot
    fullName: BindOpen.Data.Stores.IBdoDbModelDepot
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Stores.IBdoDbModelDepot
    name: IBdoDbModelDepot
    nameWithType: IBdoDbModelDepot
    fullName: BindOpen.Data.Stores.IBdoDbModelDepot
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{BindOpen.Data.Stores.IBdoDbModelDepot,BindOpen.System.Diagnostics.IBdoLog}
  commentId: '!:System.Action{BindOpen.Data.Stores.IBdoDbModelDepot,BindOpen.System.Diagnostics.IBdoLog}'
  definition: System.Action`2
  name: Action<IBdoDbModelDepot, IBdoLog>
  nameWithType: Action<IBdoDbModelDepot, IBdoLog>
  fullName: System.Action<BindOpen.Data.Stores.IBdoDbModelDepot, BindOpen.System.Diagnostics.IBdoLog>
  nameWithType.vb: Action(Of IBdoDbModelDepot, IBdoLog)
  fullName.vb: System.Action(Of BindOpen.Data.Stores.IBdoDbModelDepot, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Action(Of IBdoDbModelDepot, IBdoLog)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Stores.IBdoDbModelDepot
    name: IBdoDbModelDepot
    nameWithType: IBdoDbModelDepot
    fullName: BindOpen.Data.Stores.IBdoDbModelDepot
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Stores.IBdoDbModelDepot
    name: IBdoDbModelDepot
    nameWithType: IBdoDbModelDepot
    fullName: BindOpen.Data.Stores.IBdoDbModelDepot
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: System.Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: System.Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot*
  commentId: Overload:BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot
  isExternal: true
  name: GetDbModelDepot
  nameWithType: BdoDataStoreExtensions.GetDbModelDepot
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot
- uid: BindOpen.Data.Stores.IBdoDbModelDepot
  commentId: T:BindOpen.Data.Stores.IBdoDbModelDepot
  parent: BindOpen.Data.Stores
  isExternal: true
  name: IBdoDbModelDepot
  nameWithType: IBdoDbModelDepot
  fullName: BindOpen.Data.Stores.IBdoDbModelDepot
- uid: BindOpen.Application.Scopes.IBdoScope
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel*
  commentId: Overload:BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel
  isExternal: true
  name: GetModel
  nameWithType: BdoDataStoreExtensions.GetModel
  fullName: BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
shouldSkipMarkup: true
