### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Common.AccessibilityLevelExtension
  commentId: T:BindOpen.Data.Common.AccessibilityLevelExtension
  id: AccessibilityLevelExtension
  parent: BindOpen.Data.Common
  children:
  - BindOpen.Data.Common.AccessibilityLevelExtension.ToAccessibilityLevel(System.String,System.String)
  langs:
  - csharp
  - vb
  name: AccessibilityLevelExtension
  nameWithType: AccessibilityLevelExtension
  fullName: BindOpen.Data.Common.AccessibilityLevelExtension
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/AccessibilityLevel.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AccessibilityLevelExtension
    path: ../src/BindOpen.Core/Data/Common/AccessibilityLevel.cs
    startLine: 55
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nThis class represents an accessibility level extension.\n"
  example: []
  syntax:
    content: public static class AccessibilityLevelExtension
    content.vb: Public Module AccessibilityLevelExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Common.AccessibilityLevelExtension.ToAccessibilityLevel(System.String,System.String)
  commentId: M:BindOpen.Data.Common.AccessibilityLevelExtension.ToAccessibilityLevel(System.String,System.String)
  id: ToAccessibilityLevel(System.String,System.String)
  parent: BindOpen.Data.Common.AccessibilityLevelExtension
  langs:
  - csharp
  - vb
  name: ToAccessibilityLevel(String, String)
  nameWithType: AccessibilityLevelExtension.ToAccessibilityLevel(String, String)
  fullName: BindOpen.Data.Common.AccessibilityLevelExtension.ToAccessibilityLevel(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Common/AccessibilityLevel.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ToAccessibilityLevel
    path: ../src/BindOpen.Core/Data/Common/AccessibilityLevel.cs
    startLine: 63
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Common
  summary: "\nGets the accessibility level corresponding to the specified string.\n"
  example: []
  syntax:
    content: public static AccessibilityLevels ToAccessibilityLevel(string levelString, string defaultLevelString)
    parameters:
    - id: levelString
      type: System.String
      description: The visibility to consider.
    - id: defaultLevelString
      type: System.String
      description: The default visibility to consider.
    return:
      type: BindOpen.Data.Common.AccessibilityLevels
      description: Returns the visibility corresponding to the specified strings.
    content.vb: Public Shared Function ToAccessibilityLevel(levelString As String, defaultLevelString As String) As AccessibilityLevels
  overload: BindOpen.Data.Common.AccessibilityLevelExtension.ToAccessibilityLevel*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Common.AccessibilityLevelExtension.ToAccessibilityLevel*
  commentId: Overload:BindOpen.Data.Common.AccessibilityLevelExtension.ToAccessibilityLevel
  name: ToAccessibilityLevel
  nameWithType: AccessibilityLevelExtension.ToAccessibilityLevel
  fullName: BindOpen.Data.Common.AccessibilityLevelExtension.ToAccessibilityLevel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Common.AccessibilityLevels
  commentId: T:BindOpen.Data.Common.AccessibilityLevels
  parent: BindOpen.Data.Common
  name: AccessibilityLevels
  nameWithType: AccessibilityLevels
  fullName: BindOpen.Data.Common.AccessibilityLevels
shouldSkipMarkup: true
