### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Elements.ElementFactory
  commentId: T:BindOpen.Data.Elements.ElementFactory
  id: ElementFactory
  parent: BindOpen.Data.Elements
  children:
  - BindOpen.Data.Elements.ElementFactory.Create(System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Elements.IDataElementSpec,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.Create(System.String,System.Object)
  - BindOpen.Data.Elements.ElementFactory.Create(System.String,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateCarrier(BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  - BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  - BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,System.String,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  - BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,System.String,System.String,BindOpen.Data.Elements.ICarrierElementSpec,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  - BindOpen.Data.Elements.ElementFactory.CreateCollection(BindOpen.Data.Elements.DataElement[])
  - BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String,BindOpen.Data.Elements.DataElement[])
  - BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String,System.String,BindOpen.Data.Elements.ICollectionElementSpec,BindOpen.Data.Elements.DataElement[])
  - BindOpen.Data.Elements.ElementFactory.CreateDocument(System.String,System.String,BindOpen.Data.Elements.ICarrierElement,BindOpen.Data.Elements.IObjectElement)
  - BindOpen.Data.Elements.ElementFactory.CreateFromSpec(BindOpen.Data.Elements.DataElementSpec)
  - BindOpen.Data.Elements.ElementFactory.CreateObject(System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.String,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.String,System.String,BindOpen.Data.Elements.IObjectElementSpec,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType)
  - BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String)
  - BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,BindOpen.Data.Common.DataValueType,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Elements.IScalarElementSpec,System.Object[])
  - BindOpen.Data.Elements.ElementFactory.CreateSource(BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  - BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  - BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,System.String,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  - BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,System.String,System.String,BindOpen.Data.Elements.ISourceElementSpec,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  langs:
  - csharp
  - vb
  name: ElementFactory
  nameWithType: ElementFactory
  fullName: BindOpen.Data.Elements.ElementFactory
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ElementFactory
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
    startLine: 8
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nThis static class provides methods to create data elements.\n"
  example: []
  syntax:
    content: public static class ElementFactory
    content.vb: Public Module ElementFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Elements.ElementFactory.Create(System.String,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.Create(System.String,System.Object[])
  id: Create(System.String,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: Create(String, Object[])
  nameWithType: ElementFactory.Create(String, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.Create(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory.cs
    startLine: 18
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a data element with specified items.\n"
  example: []
  syntax:
    content: public static IDataElement Create(string name, object[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.IDataElement
    content.vb: Public Shared Function Create(name As String, items As Object()) As IDataElement
  overload: BindOpen.Data.Elements.ElementFactory.Create*
  nameWithType.vb: ElementFactory.Create(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.Create(System.String, System.Object())
  name.vb: Create(String, Object())
- uid: BindOpen.Data.Elements.ElementFactory.Create(System.String,System.Object)
  commentId: M:BindOpen.Data.Elements.ElementFactory.Create(System.String,System.Object)
  id: Create(System.String,System.Object)
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: Create(String, Object)
  nameWithType: ElementFactory.Create(String, Object)
  fullName: BindOpen.Data.Elements.ElementFactory.Create(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory.cs
    startLine: 30
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a data element of the specified kind.\n"
  example: []
  syntax:
    content: public static IDataElement Create(string name, object item)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: item
      type: System.Object
      description: The item to consider.
    return:
      type: BindOpen.Data.Elements.IDataElement
    content.vb: Public Shared Function Create(name As String, item As Object) As IDataElement
  overload: BindOpen.Data.Elements.ElementFactory.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Elements.ElementFactory.Create(System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Elements.IDataElementSpec,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.Create(System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Elements.IDataElementSpec,System.Object[])
  id: Create(System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Elements.IDataElementSpec,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: Create(String, DataValueType, IDataElementSpec, Object[])
  nameWithType: ElementFactory.Create(String, DataValueType, IDataElementSpec, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.Create(System.String, BindOpen.Data.Common.DataValueType, BindOpen.Data.Elements.IDataElementSpec, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory.cs
    startLine: 44
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a data element of the specified kind.\n"
  example: []
  syntax:
    content: public static IDataElement Create(string name, DataValueType valueType = DataValueType.Any, IDataElementSpec specification = null, params object[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    - id: specification
      type: BindOpen.Data.Elements.IDataElementSpec
      description: The specification to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.IDataElement
    content.vb: Public Shared Function Create(name As String, valueType As DataValueType = DataValueType.Any, specification As IDataElementSpec = Nothing, ParamArray items As Object()) As IDataElement
  overload: BindOpen.Data.Elements.ElementFactory.Create*
  nameWithType.vb: ElementFactory.Create(String, DataValueType, IDataElementSpec, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.Create(System.String, BindOpen.Data.Common.DataValueType, BindOpen.Data.Elements.IDataElementSpec, System.Object())
  name.vb: Create(String, DataValueType, IDataElementSpec, Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateFromSpec(BindOpen.Data.Elements.DataElementSpec)
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateFromSpec(BindOpen.Data.Elements.DataElementSpec)
  id: CreateFromSpec(BindOpen.Data.Elements.DataElementSpec)
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateFromSpec(DataElementSpec)
  nameWithType: ElementFactory.CreateFromSpec(DataElementSpec)
  fullName: BindOpen.Data.Elements.ElementFactory.CreateFromSpec(BindOpen.Data.Elements.DataElementSpec)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateFromSpec
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory.cs
    startLine: 107
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a data element from the specified specification.\n"
  example: []
  syntax:
    content: public static IDataElement CreateFromSpec(DataElementSpec elementSpec)
    parameters:
    - id: elementSpec
      type: BindOpen.Data.Elements.DataElementSpec
      description: The data element specification to consider.
    return:
      type: BindOpen.Data.Elements.IDataElement
      description: ''
    content.vb: Public Shared Function CreateFromSpec(elementSpec As DataElementSpec) As IDataElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateFromSpec*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  id: CreateCarrier(System.String,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateCarrier(String, IBdoCarrierConfiguration[])
  nameWithType: ElementFactory.CreateCarrier(String, IBdoCarrierConfiguration[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String, BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Carrier.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateCarrier
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Carrier.cs
    startLine: 15
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new carrier element.\n"
  example: []
  syntax:
    content: public static CarrierElement CreateCarrier(string name, params IBdoCarrierConfiguration[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: items
      type: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.CarrierElement
    content.vb: Public Shared Function CreateCarrier(name As String, ParamArray items As IBdoCarrierConfiguration()) As CarrierElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateCarrier*
  nameWithType.vb: ElementFactory.CreateCarrier(String, IBdoCarrierConfiguration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String, BindOpen.Extensions.Runtime.IBdoCarrierConfiguration())
  name.vb: CreateCarrier(String, IBdoCarrierConfiguration())
- uid: BindOpen.Data.Elements.ElementFactory.CreateCarrier(BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateCarrier(BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  id: CreateCarrier(BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateCarrier(IBdoCarrierConfiguration[])
  nameWithType: ElementFactory.CreateCarrier(IBdoCarrierConfiguration[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCarrier(BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Carrier.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateCarrier
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Carrier.cs
    startLine: 26
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new carrier element.\n"
  example: []
  syntax:
    content: public static CarrierElement CreateCarrier(params IBdoCarrierConfiguration[] items)
    parameters:
    - id: items
      type: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.CarrierElement
    content.vb: Public Shared Function CreateCarrier(ParamArray items As IBdoCarrierConfiguration()) As CarrierElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateCarrier*
  nameWithType.vb: ElementFactory.CreateCarrier(IBdoCarrierConfiguration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateCarrier(BindOpen.Extensions.Runtime.IBdoCarrierConfiguration())
  name.vb: CreateCarrier(IBdoCarrierConfiguration())
- uid: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,System.String,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,System.String,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  id: CreateCarrier(System.String,System.String,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateCarrier(String, String, IBdoCarrierConfiguration[])
  nameWithType: ElementFactory.CreateCarrier(String, String, IBdoCarrierConfiguration[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String, System.String, BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Carrier.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateCarrier
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Carrier.cs
    startLine: 38
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new carrier element.\n"
  example: []
  syntax:
    content: public static CarrierElement CreateCarrier(string name, string definitionUniqueId, params IBdoCarrierConfiguration[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: definitionUniqueId
      type: System.String
    - id: items
      type: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.CarrierElement
    content.vb: Public Shared Function CreateCarrier(name As String, definitionUniqueId As String, ParamArray items As IBdoCarrierConfiguration()) As CarrierElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateCarrier*
  nameWithType.vb: ElementFactory.CreateCarrier(String, String, IBdoCarrierConfiguration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String, System.String, BindOpen.Extensions.Runtime.IBdoCarrierConfiguration())
  name.vb: CreateCarrier(String, String, IBdoCarrierConfiguration())
- uid: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,System.String,System.String,BindOpen.Data.Elements.ICarrierElementSpec,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String,System.String,System.String,BindOpen.Data.Elements.ICarrierElementSpec,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  id: CreateCarrier(System.String,System.String,System.String,BindOpen.Data.Elements.ICarrierElementSpec,BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateCarrier(String, String, String, ICarrierElementSpec, IBdoCarrierConfiguration[])
  nameWithType: ElementFactory.CreateCarrier(String, String, String, ICarrierElementSpec, IBdoCarrierConfiguration[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String, System.String, System.String, BindOpen.Data.Elements.ICarrierElementSpec, BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Carrier.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateCarrier
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Carrier.cs
    startLine: 54
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new carrier element.\n"
  example: []
  syntax:
    content: public static CarrierElement CreateCarrier(string name, string id, string definitionUniqueId, ICarrierElementSpec specification, params IBdoCarrierConfiguration[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: id
      type: System.String
      description: The ID to consider.
    - id: definitionUniqueId
      type: System.String
    - id: specification
      type: BindOpen.Data.Elements.ICarrierElementSpec
      description: The specification to consider.
    - id: items
      type: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.CarrierElement
    content.vb: Public Shared Function CreateCarrier(name As String, id As String, definitionUniqueId As String, specification As ICarrierElementSpec, ParamArray items As IBdoCarrierConfiguration()) As CarrierElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateCarrier*
  nameWithType.vb: ElementFactory.CreateCarrier(String, String, String, ICarrierElementSpec, IBdoCarrierConfiguration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateCarrier(System.String, System.String, System.String, BindOpen.Data.Elements.ICarrierElementSpec, BindOpen.Extensions.Runtime.IBdoCarrierConfiguration())
  name.vb: CreateCarrier(String, String, String, ICarrierElementSpec, IBdoCarrierConfiguration())
- uid: BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String,BindOpen.Data.Elements.DataElement[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String,BindOpen.Data.Elements.DataElement[])
  id: CreateCollection(System.String,BindOpen.Data.Elements.DataElement[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateCollection(String, DataElement[])
  nameWithType: ElementFactory.CreateCollection(String, DataElement[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String, BindOpen.Data.Elements.DataElement[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Collection.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateCollection
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Collection.cs
    startLine: 14
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new collection element.\n"
  example: []
  syntax:
    content: public static CollectionElement CreateCollection(string name, params DataElement[] elements)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: elements
      type: BindOpen.Data.Elements.DataElement[]
      description: The elements to consider.
    return:
      type: BindOpen.Data.Elements.CollectionElement
    content.vb: Public Shared Function CreateCollection(name As String, ParamArray elements As DataElement()) As CollectionElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateCollection*
  nameWithType.vb: ElementFactory.CreateCollection(String, DataElement())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String, BindOpen.Data.Elements.DataElement())
  name.vb: CreateCollection(String, DataElement())
- uid: BindOpen.Data.Elements.ElementFactory.CreateCollection(BindOpen.Data.Elements.DataElement[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateCollection(BindOpen.Data.Elements.DataElement[])
  id: CreateCollection(BindOpen.Data.Elements.DataElement[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateCollection(DataElement[])
  nameWithType: ElementFactory.CreateCollection(DataElement[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCollection(BindOpen.Data.Elements.DataElement[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Collection.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateCollection
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Collection.cs
    startLine: 25
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new collection element.\n"
  example: []
  syntax:
    content: public static CollectionElement CreateCollection(params DataElement[] elements)
    parameters:
    - id: elements
      type: BindOpen.Data.Elements.DataElement[]
      description: The elements to consider.
    return:
      type: BindOpen.Data.Elements.CollectionElement
    content.vb: Public Shared Function CreateCollection(ParamArray elements As DataElement()) As CollectionElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateCollection*
  nameWithType.vb: ElementFactory.CreateCollection(DataElement())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateCollection(BindOpen.Data.Elements.DataElement())
  name.vb: CreateCollection(DataElement())
- uid: BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String,System.String,BindOpen.Data.Elements.ICollectionElementSpec,BindOpen.Data.Elements.DataElement[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String,System.String,BindOpen.Data.Elements.ICollectionElementSpec,BindOpen.Data.Elements.DataElement[])
  id: CreateCollection(System.String,System.String,BindOpen.Data.Elements.ICollectionElementSpec,BindOpen.Data.Elements.DataElement[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateCollection(String, String, ICollectionElementSpec, DataElement[])
  nameWithType: ElementFactory.CreateCollection(String, String, ICollectionElementSpec, DataElement[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String, System.String, BindOpen.Data.Elements.ICollectionElementSpec, BindOpen.Data.Elements.DataElement[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Collection.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateCollection
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Collection.cs
    startLine: 38
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new collection element.\n"
  example: []
  syntax:
    content: public static CollectionElement CreateCollection(string name, string id, ICollectionElementSpec specification, params DataElement[] elements)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: id
      type: System.String
      description: The ID to consider.
    - id: specification
      type: BindOpen.Data.Elements.ICollectionElementSpec
      description: The specification to consider.
    - id: elements
      type: BindOpen.Data.Elements.DataElement[]
      description: The elements to consider.
    return:
      type: BindOpen.Data.Elements.CollectionElement
    content.vb: Public Shared Function CreateCollection(name As String, id As String, specification As ICollectionElementSpec, ParamArray elements As DataElement()) As CollectionElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateCollection*
  nameWithType.vb: ElementFactory.CreateCollection(String, String, ICollectionElementSpec, DataElement())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateCollection(System.String, System.String, BindOpen.Data.Elements.ICollectionElementSpec, BindOpen.Data.Elements.DataElement())
  name.vb: CreateCollection(String, String, ICollectionElementSpec, DataElement())
- uid: BindOpen.Data.Elements.ElementFactory.CreateDocument(System.String,System.String,BindOpen.Data.Elements.ICarrierElement,BindOpen.Data.Elements.IObjectElement)
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateDocument(System.String,System.String,BindOpen.Data.Elements.ICarrierElement,BindOpen.Data.Elements.IObjectElement)
  id: CreateDocument(System.String,System.String,BindOpen.Data.Elements.ICarrierElement,BindOpen.Data.Elements.IObjectElement)
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateDocument(String, String, ICarrierElement, IObjectElement)
  nameWithType: ElementFactory.CreateDocument(String, String, ICarrierElement, IObjectElement)
  fullName: BindOpen.Data.Elements.ElementFactory.CreateDocument(System.String, System.String, BindOpen.Data.Elements.ICarrierElement, BindOpen.Data.Elements.IObjectElement)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Document.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateDocument
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Document.cs
    startLine: 14
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new document element.\n"
  example: []
  syntax:
    content: public static DocumentElement CreateDocument(string name, string id, ICarrierElement containerElement = null, IObjectElement contentElement = null)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: id
      type: System.String
      description: The ID to consider.
    - id: containerElement
      type: BindOpen.Data.Elements.ICarrierElement
      description: The container element to consider.
    - id: contentElement
      type: BindOpen.Data.Elements.IObjectElement
      description: The content element to consider.
    return:
      type: BindOpen.Data.Elements.DocumentElement
    content.vb: Public Shared Function CreateDocument(name As String, id As String, containerElement As ICarrierElement = Nothing, contentElement As IObjectElement = Nothing) As DocumentElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateDocument*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.Object[])
  id: CreateObject(System.String,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateObject(String, Object[])
  nameWithType: ElementFactory.CreateObject(String, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Object.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateObject
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Object.cs
    startLine: 14
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new object element.\n"
  example: []
  syntax:
    content: public static ObjectElement CreateObject(string name, params object[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.ObjectElement
    content.vb: Public Shared Function CreateObject(name As String, ParamArray items As Object()) As ObjectElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateObject*
  nameWithType.vb: ElementFactory.CreateObject(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String, System.Object())
  name.vb: CreateObject(String, Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateObject(System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateObject(System.Object[])
  id: CreateObject(System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateObject(Object[])
  nameWithType: ElementFactory.CreateObject(Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateObject(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Object.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateObject
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Object.cs
    startLine: 25
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new object element.\n"
  example: []
  syntax:
    content: public static ObjectElement CreateObject(params object[] items)
    parameters:
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.ObjectElement
    content.vb: Public Shared Function CreateObject(ParamArray items As Object()) As ObjectElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateObject*
  nameWithType.vb: ElementFactory.CreateObject(Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateObject(System.Object())
  name.vb: CreateObject(Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.String,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.String,System.Object[])
  id: CreateObject(System.String,System.String,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateObject(String, String, Object[])
  nameWithType: ElementFactory.CreateObject(String, String, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Object.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateObject
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Object.cs
    startLine: 37
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new object element.\n"
  example: []
  syntax:
    content: public static ObjectElement CreateObject(string name, string classFullName, params object[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: classFullName
      type: System.String
      description: The class full name to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.ObjectElement
    content.vb: Public Shared Function CreateObject(name As String, classFullName As String, ParamArray items As Object()) As ObjectElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateObject*
  nameWithType.vb: ElementFactory.CreateObject(String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String, System.String, System.Object())
  name.vb: CreateObject(String, String, Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.String,System.String,BindOpen.Data.Elements.IObjectElementSpec,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateObject(System.String,System.String,System.String,BindOpen.Data.Elements.IObjectElementSpec,System.Object[])
  id: CreateObject(System.String,System.String,System.String,BindOpen.Data.Elements.IObjectElementSpec,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateObject(String, String, String, IObjectElementSpec, Object[])
  nameWithType: ElementFactory.CreateObject(String, String, String, IObjectElementSpec, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String, System.String, System.String, BindOpen.Data.Elements.IObjectElementSpec, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Object.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateObject
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Object.cs
    startLine: 53
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new object element.\n"
  example: []
  syntax:
    content: public static ObjectElement CreateObject(string name, string id, string classFullName, IObjectElementSpec specification, params object[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: id
      type: System.String
      description: The ID to consider.
    - id: classFullName
      type: System.String
      description: The class full name to consider.
    - id: specification
      type: BindOpen.Data.Elements.IObjectElementSpec
      description: The specification to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.ObjectElement
    content.vb: Public Shared Function CreateObject(name As String, id As String, classFullName As String, specification As IObjectElementSpec, ParamArray items As Object()) As ObjectElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateObject*
  nameWithType.vb: ElementFactory.CreateObject(String, String, String, IObjectElementSpec, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateObject(System.String, System.String, System.String, BindOpen.Data.Elements.IObjectElementSpec, System.Object())
  name.vb: CreateObject(String, String, String, IObjectElementSpec, Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType)
  id: CreateScalar(BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateScalar(DataValueType)
  nameWithType: ElementFactory.CreateScalar(DataValueType)
  fullName: BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateScalar
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
    startLine: 13
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a new instance of the ScalarElement class.\n"
  example: []
  syntax:
    content: public static ScalarElement CreateScalar(DataValueType dataValueType)
    parameters:
    - id: dataValueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    return:
      type: BindOpen.Data.Elements.ScalarElement
    content.vb: Public Shared Function CreateScalar(dataValueType As DataValueType) As ScalarElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateScalar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String)
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String)
  id: CreateScalar(System.String)
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateScalar(String)
  nameWithType: ElementFactory.CreateScalar(String)
  fullName: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateScalar
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
    startLine: 22
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a new instance of the ScalarElement class.\n"
  example: []
  syntax:
    content: public static ScalarElement CreateScalar(string name)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    return:
      type: BindOpen.Data.Elements.ScalarElement
    content.vb: Public Shared Function CreateScalar(name As String) As ScalarElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateScalar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType,System.Object[])
  id: CreateScalar(BindOpen.Data.Common.DataValueType,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateScalar(DataValueType, Object[])
  nameWithType: ElementFactory.CreateScalar(DataValueType, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateScalar
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
    startLine: 32
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a new instance of the ScalarElement class.\n"
  example: []
  syntax:
    content: public static ScalarElement CreateScalar(DataValueType valueType, params object[] items)
    parameters:
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.ScalarElement
    content.vb: Public Shared Function CreateScalar(valueType As DataValueType, ParamArray items As Object()) As ScalarElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateScalar*
  nameWithType.vb: ElementFactory.CreateScalar(DataValueType, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateScalar(BindOpen.Data.Common.DataValueType, System.Object())
  name.vb: CreateScalar(DataValueType, Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,System.Object[])
  id: CreateScalar(System.String,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateScalar(String, Object[])
  nameWithType: ElementFactory.CreateScalar(String, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateScalar
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
    startLine: 44
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a new instance of the ScalarElement class.\n"
  example: []
  syntax:
    content: public static ScalarElement CreateScalar(string name, params object[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.ScalarElement
    content.vb: Public Shared Function CreateScalar(name As String, ParamArray items As Object()) As ScalarElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateScalar*
  nameWithType.vb: ElementFactory.CreateScalar(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String, System.Object())
  name.vb: CreateScalar(String, Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,BindOpen.Data.Common.DataValueType,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,BindOpen.Data.Common.DataValueType,System.Object[])
  id: CreateScalar(System.String,BindOpen.Data.Common.DataValueType,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateScalar(String, DataValueType, Object[])
  nameWithType: ElementFactory.CreateScalar(String, DataValueType, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String, BindOpen.Data.Common.DataValueType, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateScalar
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
    startLine: 57
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a new instance of the ScalarElement class.\n"
  example: []
  syntax:
    content: public static ScalarElement CreateScalar(string name, DataValueType valueType, params object[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.ScalarElement
    content.vb: Public Shared Function CreateScalar(name As String, valueType As DataValueType, ParamArray items As Object()) As ScalarElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateScalar*
  nameWithType.vb: ElementFactory.CreateScalar(String, DataValueType, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String, BindOpen.Data.Common.DataValueType, System.Object())
  name.vb: CreateScalar(String, DataValueType, Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Elements.IScalarElementSpec,System.Object[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String,System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Elements.IScalarElementSpec,System.Object[])
  id: CreateScalar(System.String,System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Elements.IScalarElementSpec,System.Object[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateScalar(String, String, DataValueType, IScalarElementSpec, Object[])
  nameWithType: ElementFactory.CreateScalar(String, String, DataValueType, IScalarElementSpec, Object[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String, System.String, BindOpen.Data.Common.DataValueType, BindOpen.Data.Elements.IScalarElementSpec, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateScalar
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Scalar.cs
    startLine: 73
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nCreates a new instance of the ScalarElement class.\n"
  example: []
  syntax:
    content: public static ScalarElement CreateScalar(string name, string id, DataValueType valueType, IScalarElementSpec specification, params object[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: id
      type: System.String
      description: The ID to consider.
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    - id: specification
      type: BindOpen.Data.Elements.IScalarElementSpec
      description: The specification to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.ScalarElement
    content.vb: Public Shared Function CreateScalar(name As String, id As String, valueType As DataValueType, specification As IScalarElementSpec, ParamArray items As Object()) As ScalarElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateScalar*
  nameWithType.vb: ElementFactory.CreateScalar(String, String, DataValueType, IScalarElementSpec, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateScalar(System.String, System.String, BindOpen.Data.Common.DataValueType, BindOpen.Data.Elements.IScalarElementSpec, System.Object())
  name.vb: CreateScalar(String, String, DataValueType, IScalarElementSpec, Object())
- uid: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  id: CreateSource(System.String,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateSource(String, IBdoConnectorConfiguration[])
  nameWithType: ElementFactory.CreateSource(String, IBdoConnectorConfiguration[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String, BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateSource
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
    startLine: 15
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new source element.\n"
  example: []
  syntax:
    content: public static SourceElement CreateSource(string name, params IBdoConnectorConfiguration[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: items
      type: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.SourceElement
    content.vb: Public Shared Function CreateSource(name As String, ParamArray items As IBdoConnectorConfiguration()) As SourceElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateSource*
  nameWithType.vb: ElementFactory.CreateSource(String, IBdoConnectorConfiguration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String, BindOpen.Extensions.Runtime.IBdoConnectorConfiguration())
  name.vb: CreateSource(String, IBdoConnectorConfiguration())
- uid: BindOpen.Data.Elements.ElementFactory.CreateSource(BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateSource(BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  id: CreateSource(BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateSource(IBdoConnectorConfiguration[])
  nameWithType: ElementFactory.CreateSource(IBdoConnectorConfiguration[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateSource(BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateSource
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
    startLine: 26
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new source element.\n"
  example: []
  syntax:
    content: public static SourceElement CreateSource(params IBdoConnectorConfiguration[] items)
    parameters:
    - id: items
      type: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.SourceElement
    content.vb: Public Shared Function CreateSource(ParamArray items As IBdoConnectorConfiguration()) As SourceElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateSource*
  nameWithType.vb: ElementFactory.CreateSource(IBdoConnectorConfiguration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateSource(BindOpen.Extensions.Runtime.IBdoConnectorConfiguration())
  name.vb: CreateSource(IBdoConnectorConfiguration())
- uid: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,System.String,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,System.String,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  id: CreateSource(System.String,System.String,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateSource(String, String, IBdoConnectorConfiguration[])
  nameWithType: ElementFactory.CreateSource(String, String, IBdoConnectorConfiguration[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String, System.String, BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateSource
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
    startLine: 38
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new source element.\n"
  example: []
  syntax:
    content: public static SourceElement CreateSource(string name, string definitionUniqueId, params IBdoConnectorConfiguration[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: definitionUniqueId
      type: System.String
    - id: items
      type: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.SourceElement
    content.vb: Public Shared Function CreateSource(name As String, definitionUniqueId As String, ParamArray items As IBdoConnectorConfiguration()) As SourceElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateSource*
  nameWithType.vb: ElementFactory.CreateSource(String, String, IBdoConnectorConfiguration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String, System.String, BindOpen.Extensions.Runtime.IBdoConnectorConfiguration())
  name.vb: CreateSource(String, String, IBdoConnectorConfiguration())
- uid: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,System.String,System.String,BindOpen.Data.Elements.ISourceElementSpec,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  commentId: M:BindOpen.Data.Elements.ElementFactory.CreateSource(System.String,System.String,System.String,BindOpen.Data.Elements.ISourceElementSpec,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  id: CreateSource(System.String,System.String,System.String,BindOpen.Data.Elements.ISourceElementSpec,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  parent: BindOpen.Data.Elements.ElementFactory
  langs:
  - csharp
  - vb
  name: CreateSource(String, String, String, ISourceElementSpec, IBdoConnectorConfiguration[])
  nameWithType: ElementFactory.CreateSource(String, String, String, ISourceElementSpec, IBdoConnectorConfiguration[])
  fullName: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String, System.String, System.String, BindOpen.Data.Elements.ISourceElementSpec, BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateSource
    path: ../src/BindOpen.Core/Data/Elements/Factories/ElementFactory_Source.cs
    startLine: 54
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInitializes a new source element.\n"
  example: []
  syntax:
    content: public static SourceElement CreateSource(string name, string id, string definitionUniqueId, ISourceElementSpec specification, params IBdoConnectorConfiguration[] items)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: id
      type: System.String
      description: The ID to consider.
    - id: definitionUniqueId
      type: System.String
    - id: specification
      type: BindOpen.Data.Elements.ISourceElementSpec
      description: The specification to consider.
    - id: items
      type: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Elements.SourceElement
    content.vb: Public Shared Function CreateSource(name As String, id As String, definitionUniqueId As String, specification As ISourceElementSpec, ParamArray items As IBdoConnectorConfiguration()) As SourceElement
  overload: BindOpen.Data.Elements.ElementFactory.CreateSource*
  nameWithType.vb: ElementFactory.CreateSource(String, String, String, ISourceElementSpec, IBdoConnectorConfiguration())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.ElementFactory.CreateSource(System.String, System.String, System.String, BindOpen.Data.Elements.ISourceElementSpec, BindOpen.Extensions.Runtime.IBdoConnectorConfiguration())
  name.vb: CreateSource(String, String, String, ISourceElementSpec, IBdoConnectorConfiguration())
references:
- uid: BindOpen.Data.Elements
  commentId: N:BindOpen.Data.Elements
  name: BindOpen.Data.Elements
  nameWithType: BindOpen.Data.Elements
  fullName: BindOpen.Data.Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Elements.ElementFactory.Create*
  commentId: Overload:BindOpen.Data.Elements.ElementFactory.Create
  name: Create
  nameWithType: ElementFactory.Create
  fullName: BindOpen.Data.Elements.ElementFactory.Create
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Elements.IDataElement
  commentId: T:BindOpen.Data.Elements.IDataElement
  parent: BindOpen.Data.Elements
  name: IDataElement
  nameWithType: IDataElement
  fullName: BindOpen.Data.Elements.IDataElement
- uid: BindOpen.Data.Common.DataValueType
  commentId: T:BindOpen.Data.Common.DataValueType
  parent: BindOpen.Data.Common
  name: DataValueType
  nameWithType: DataValueType
  fullName: BindOpen.Data.Common.DataValueType
- uid: BindOpen.Data.Elements.IDataElementSpec
  commentId: T:BindOpen.Data.Elements.IDataElementSpec
  parent: BindOpen.Data.Elements
  name: IDataElementSpec
  nameWithType: IDataElementSpec
  fullName: BindOpen.Data.Elements.IDataElementSpec
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Elements.ElementFactory.CreateFromSpec*
  commentId: Overload:BindOpen.Data.Elements.ElementFactory.CreateFromSpec
  name: CreateFromSpec
  nameWithType: ElementFactory.CreateFromSpec
  fullName: BindOpen.Data.Elements.ElementFactory.CreateFromSpec
- uid: BindOpen.Data.Elements.DataElementSpec
  commentId: T:BindOpen.Data.Elements.DataElementSpec
  parent: BindOpen.Data.Elements
  name: DataElementSpec
  nameWithType: DataElementSpec
  fullName: BindOpen.Data.Elements.DataElementSpec
- uid: BindOpen.Data.Elements.ElementFactory.CreateCarrier*
  commentId: Overload:BindOpen.Data.Elements.ElementFactory.CreateCarrier
  name: CreateCarrier
  nameWithType: ElementFactory.CreateCarrier
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCarrier
- uid: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[]
  isExternal: true
  name: IBdoCarrierConfiguration[]
  nameWithType: IBdoCarrierConfiguration[]
  fullName: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration[]
  nameWithType.vb: IBdoCarrierConfiguration()
  fullName.vb: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration()
  name.vb: IBdoCarrierConfiguration()
  spec.csharp:
  - uid: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration
    name: IBdoCarrierConfiguration
    nameWithType: IBdoCarrierConfiguration
    fullName: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration
    name: IBdoCarrierConfiguration
    nameWithType: IBdoCarrierConfiguration
    fullName: BindOpen.Extensions.Runtime.IBdoCarrierConfiguration
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Elements.CarrierElement
  commentId: T:BindOpen.Data.Elements.CarrierElement
  parent: BindOpen.Data.Elements
  name: CarrierElement
  nameWithType: CarrierElement
  fullName: BindOpen.Data.Elements.CarrierElement
- uid: BindOpen.Data.Elements.ICarrierElementSpec
  commentId: T:BindOpen.Data.Elements.ICarrierElementSpec
  parent: BindOpen.Data.Elements
  name: ICarrierElementSpec
  nameWithType: ICarrierElementSpec
  fullName: BindOpen.Data.Elements.ICarrierElementSpec
- uid: BindOpen.Data.Elements.ElementFactory.CreateCollection*
  commentId: Overload:BindOpen.Data.Elements.ElementFactory.CreateCollection
  name: CreateCollection
  nameWithType: ElementFactory.CreateCollection
  fullName: BindOpen.Data.Elements.ElementFactory.CreateCollection
- uid: BindOpen.Data.Elements.DataElement[]
  isExternal: true
  name: DataElement[]
  nameWithType: DataElement[]
  fullName: BindOpen.Data.Elements.DataElement[]
  nameWithType.vb: DataElement()
  fullName.vb: BindOpen.Data.Elements.DataElement()
  name.vb: DataElement()
  spec.csharp:
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Elements.CollectionElement
  commentId: T:BindOpen.Data.Elements.CollectionElement
  parent: BindOpen.Data.Elements
  name: CollectionElement
  nameWithType: CollectionElement
  fullName: BindOpen.Data.Elements.CollectionElement
- uid: BindOpen.Data.Elements.ICollectionElementSpec
  commentId: T:BindOpen.Data.Elements.ICollectionElementSpec
  parent: BindOpen.Data.Elements
  name: ICollectionElementSpec
  nameWithType: ICollectionElementSpec
  fullName: BindOpen.Data.Elements.ICollectionElementSpec
- uid: BindOpen.Data.Elements.ElementFactory.CreateDocument*
  commentId: Overload:BindOpen.Data.Elements.ElementFactory.CreateDocument
  name: CreateDocument
  nameWithType: ElementFactory.CreateDocument
  fullName: BindOpen.Data.Elements.ElementFactory.CreateDocument
- uid: BindOpen.Data.Elements.ICarrierElement
  commentId: T:BindOpen.Data.Elements.ICarrierElement
  parent: BindOpen.Data.Elements
  name: ICarrierElement
  nameWithType: ICarrierElement
  fullName: BindOpen.Data.Elements.ICarrierElement
- uid: BindOpen.Data.Elements.IObjectElement
  commentId: T:BindOpen.Data.Elements.IObjectElement
  parent: BindOpen.Data.Elements
  name: IObjectElement
  nameWithType: IObjectElement
  fullName: BindOpen.Data.Elements.IObjectElement
- uid: BindOpen.Data.Elements.DocumentElement
  commentId: T:BindOpen.Data.Elements.DocumentElement
  parent: BindOpen.Data.Elements
  name: DocumentElement
  nameWithType: DocumentElement
  fullName: BindOpen.Data.Elements.DocumentElement
- uid: BindOpen.Data.Elements.ElementFactory.CreateObject*
  commentId: Overload:BindOpen.Data.Elements.ElementFactory.CreateObject
  name: CreateObject
  nameWithType: ElementFactory.CreateObject
  fullName: BindOpen.Data.Elements.ElementFactory.CreateObject
- uid: BindOpen.Data.Elements.ObjectElement
  commentId: T:BindOpen.Data.Elements.ObjectElement
  parent: BindOpen.Data.Elements
  name: ObjectElement
  nameWithType: ObjectElement
  fullName: BindOpen.Data.Elements.ObjectElement
- uid: BindOpen.Data.Elements.IObjectElementSpec
  commentId: T:BindOpen.Data.Elements.IObjectElementSpec
  parent: BindOpen.Data.Elements
  name: IObjectElementSpec
  nameWithType: IObjectElementSpec
  fullName: BindOpen.Data.Elements.IObjectElementSpec
- uid: BindOpen.Data.Elements.ElementFactory.CreateScalar*
  commentId: Overload:BindOpen.Data.Elements.ElementFactory.CreateScalar
  name: CreateScalar
  nameWithType: ElementFactory.CreateScalar
  fullName: BindOpen.Data.Elements.ElementFactory.CreateScalar
- uid: BindOpen.Data.Elements.ScalarElement
  commentId: T:BindOpen.Data.Elements.ScalarElement
  parent: BindOpen.Data.Elements
  name: ScalarElement
  nameWithType: ScalarElement
  fullName: BindOpen.Data.Elements.ScalarElement
- uid: BindOpen.Data.Elements.IScalarElementSpec
  commentId: T:BindOpen.Data.Elements.IScalarElementSpec
  parent: BindOpen.Data.Elements
  name: IScalarElementSpec
  nameWithType: IScalarElementSpec
  fullName: BindOpen.Data.Elements.IScalarElementSpec
- uid: BindOpen.Data.Elements.ElementFactory.CreateSource*
  commentId: Overload:BindOpen.Data.Elements.ElementFactory.CreateSource
  name: CreateSource
  nameWithType: ElementFactory.CreateSource
  fullName: BindOpen.Data.Elements.ElementFactory.CreateSource
- uid: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[]
  isExternal: true
  name: IBdoConnectorConfiguration[]
  nameWithType: IBdoConnectorConfiguration[]
  fullName: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration[]
  nameWithType.vb: IBdoConnectorConfiguration()
  fullName.vb: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration()
  name.vb: IBdoConnectorConfiguration()
  spec.csharp:
  - uid: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration
    name: IBdoConnectorConfiguration
    nameWithType: IBdoConnectorConfiguration
    fullName: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration
    name: IBdoConnectorConfiguration
    nameWithType: IBdoConnectorConfiguration
    fullName: BindOpen.Extensions.Runtime.IBdoConnectorConfiguration
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Elements.SourceElement
  commentId: T:BindOpen.Data.Elements.SourceElement
  parent: BindOpen.Data.Elements
  name: SourceElement
  nameWithType: SourceElement
  fullName: BindOpen.Data.Elements.SourceElement
- uid: BindOpen.Data.Elements.ISourceElementSpec
  commentId: T:BindOpen.Data.Elements.ISourceElementSpec
  parent: BindOpen.Data.Elements
  name: ISourceElementSpec
  nameWithType: ISourceElementSpec
  fullName: BindOpen.Data.Elements.ISourceElementSpec
shouldSkipMarkup: true
