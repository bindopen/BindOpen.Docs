### YamlMime:ManagedReference
items:
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  commentId: T:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  id: ScriptwordDefinition_Database
  parent: BindOpen.Extensions.Scriptwords
  children:
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  - BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  langs:
  - csharp
  - vb
  name: ScriptwordDefinition_Database
  nameWithType: ScriptwordDefinition_Database
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  type: Class
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: ScriptwordDefinition_Database
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 13
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nThis class represents a &apos;Database&apos; script word definition.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptwordDefinition]

      public static class ScriptwordDefinition_Database
    content.vb: >-
      <BdoScriptwordDefinition>

      Public Module ScriptwordDefinition_Database
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordDefinitionAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordDefinitionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlCount(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlCount(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlCount(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlCount
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 32
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLCOUNT.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlCount")]

      public static string Fun_SqlCount(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlCount")>

      Public Shared Function Fun_SqlCount(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlCount
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlCount(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlCount(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlSum(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlSum(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlSum(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlSum
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 61
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLSUM.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlSum")]

      public static string Fun_SqlSum(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlSum")>

      Public Shared Function Fun_SqlSum(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlSum
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlSum(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlSum(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlAverage(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlAverage(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlAverage(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlAverage
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 90
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLAVG.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlAverage")]

      public static string Fun_SqlAverage(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlAverage")>

      Public Shared Function Fun_SqlAverage(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlAverage
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlAverage(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlAverage(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlGetCurrentDate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlGetCurrentDate(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlGetCurrentDate
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 121
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLGETCURRENTDATE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlGetCurrentDate")]

      public static string Fun_SqlGetCurrentDate(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlGetCurrentDate")>

      Public Shared Function Fun_SqlGetCurrentDate(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlGetCurrentDate
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlGetCurrentDate(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlTrue(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlTrue(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlTrue(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlTrue
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 154
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLTRUE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlTrue")]

      public static string Fun_SqlTrue(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlTrue")>

      Public Shared Function Fun_SqlTrue(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlTrue
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlTrue(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlTrue(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlIf(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlIf(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlIf(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlIf
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 183
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLIF.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlIf")]

      public static string Fun_SqlIf(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlIf")>

      Public Shared Function Fun_SqlIf(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlIf
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlIf(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlIf(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlNot(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlNot(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlNot(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlNot
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 216
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLNOT.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlNot")]

      public static string Fun_SqlNot(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The set of variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: The script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlNot")>

      Public Shared Function Fun_SqlNot(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlNot
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlNot(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlNot(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlOr(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlOr(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlOr(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlOr
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 247
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLOR.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlOr")]

      public static string Fun_SqlOr(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlOr")>

      Public Shared Function Fun_SqlOr(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlOr
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlOr(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlOr(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlAnd(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlAnd(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlAnd(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlAnd
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 276
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLAND.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlAnd")]

      public static string Fun_SqlAnd(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlAnd")>

      Public Shared Function Fun_SqlAnd(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlAnd
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlAnd(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlAnd(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlXor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlXor(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlXor(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlXor
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 305
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLXOR.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlXor")]

      public static string Fun_SqlXor(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlXor")>

      Public Shared Function Fun_SqlXor(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlXor
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlXor(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlXor(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlEq(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlEq(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlEq(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlEq
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 335
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLEQ.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlEq")]

      public static string Fun_SqlEq(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlEq")>

      Public Shared Function Fun_SqlEq(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlEq
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlEq(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlEq(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlDiff(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlDiff(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDiff(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlDiff
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 367
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLDIFF.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlDiff")]

      public static string Fun_SqlDiff(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlDiff")>

      Public Shared Function Fun_SqlDiff(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlDiff
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlDiff(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlDiff(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlGt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlGt(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlGt(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlGt
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 399
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLGT.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlGt")]

      public static string Fun_SqlGt(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlGt")>

      Public Shared Function Fun_SqlGt(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlGt
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlGt(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlGt(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlGte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlGte(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlGte(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlGte
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 431
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLGTE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlGte")]

      public static string Fun_SqlGte(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlGte")>

      Public Shared Function Fun_SqlGte(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlGte
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlGte(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlGte(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlLt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlLt(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlLt(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlLt
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 463
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLLT.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlLt")]

      public static string Fun_SqlLt(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlLt")>

      Public Shared Function Fun_SqlLt(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlLt
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlLt(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlLt(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlLte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlLte(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlLte(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlLte
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 495
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLLTE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlLte")]

      public static string Fun_SqlLte(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlLte")>

      Public Shared Function Fun_SqlLte(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlLte
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlLte(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlLte(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlIsNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlIsNull(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlIsNull(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlIsNull
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 527
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLISNULL.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlIsNull")]

      public static string Fun_SqlIsNull(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlIsNull")>

      Public Shared Function Fun_SqlIsNull(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlIsNull
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlIsNull(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlIsNull(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlConvertToText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlConvertToText(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlConvertToText(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlConvertToText
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 560
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLCONVERTTOTEXT.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlConvertToText")]

      public static string Fun_SqlConvertToText(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlConvertToText")>

      Public Shared Function Fun_SqlConvertToText(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlConvertToText
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlConvertToText(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlConvertToText(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlText(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlText(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlText
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 593
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLTEXT.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlText")]

      public static string Fun_SqlText(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlText")>

      Public Shared Function Fun_SqlText(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlText
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlText(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlText(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlLike(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlLike(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlLike(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlLike
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 624
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLLIKE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlLike")]

      public static string Fun_SqlLike(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlLike")>

      Public Shared Function Fun_SqlLike(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlLike
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlLike(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlLike(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlReplace(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlReplace(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlReplace(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlReplace
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 656
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLREPLACE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlReplace")]

      public static string Fun_SqlReplace(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlReplace")>

      Public Shared Function Fun_SqlReplace(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlReplace
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlReplace(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlReplace(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlConcatenate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlConcatenate(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlConcatenate(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlConcatenate
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 689
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLCONCATENATE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlConcatenate")]

      public static string Fun_SqlConcatenate(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlConcatenate")>

      Public Shared Function Fun_SqlConcatenate(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlConcatenate
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlConcatenate(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlConcatenate(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlNull(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlNull(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlNull
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 718
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLNULL.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlNull")]

      public static string Fun_SqlNull(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlNull")>

      Public Shared Function Fun_SqlNull(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlNull
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlNull(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlNull(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlDatabase(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlDatabase(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDatabase(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlDatabase
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 749
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word %SQLDATABASE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlDatabase")]

      public static string Fun_SqlDatabase(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlDatabase")>

      Public Shared Function Fun_SqlDatabase(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlDatabase
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlDatabase(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlDatabase(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlDatabase_SqlSchema(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlDatabase_SqlSchema(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlDatabase_SqlSchema
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 786
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word [%DATABASE->]%SCHEMA.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword]

      public static string Fun_SqlDatabase_SqlSchema(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword>

      Public Shared Function Fun_SqlDatabase_SqlSchema(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlDatabase_SqlSchema(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlDatabase_SqlTable(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlDatabase_SqlTable(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlDatabase_SqlTable
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 818
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word [%DATABASE->]%TABLE.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword]

      public static string Fun_SqlDatabase_SqlTable(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword>

      Public Shared Function Fun_SqlDatabase_SqlTable(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlDatabase_SqlTable(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlDatabase_SqlTable_SqlField(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlDatabase_SqlTable_SqlField(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlDatabase_SqlTable_SqlField
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 850
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word [[%DATABASE->]%TABLE->]%FIELD.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword]

      public static string Fun_SqlDatabase_SqlTable_SqlField(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword>

      Public Shared Function Fun_SqlDatabase_SqlTable_SqlField(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlDatabase_SqlTable_SqlField(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlNewGuid(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlNewGuid(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlNewGuid(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlNewGuid
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 884
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLNEWGUID.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlNewGuid")]

      public static string Fun_SqlNewGuid(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlNewGuid")>

      Public Shared Function Fun_SqlNewGuid(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlNewGuid
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlNewGuid(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlNewGuid(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlRandom(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlRandom(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlRandom(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlRandom
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 913
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLRANDOM.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlRandom")]

      public static string Fun_SqlRandom(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlRandom")>

      Public Shared Function Fun_SqlRandom(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlRandom
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlRandom(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlRandom(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlIn(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlIn(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlIn(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlIn
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 943
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLIN.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlIn")]

      public static string Fun_SqlIn(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlIn")>

      Public Shared Function Fun_SqlIn(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlIn
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlIn(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlIn(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  commentId: M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  id: Fun_SqlList(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])
  parent: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database
  langs:
  - csharp
  - vb
  name: Fun_SqlList(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  nameWithType: ScriptwordDefinition_Database.Fun_SqlList(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object[])
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Fun_SqlList
    path: ../src/BindOpen.Databases/Extensions/Scriptwords/ScriptWordDefinition_Database.cs
    startLine: 976
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Scriptwords
  summary: "\nEvaluates the script word $SQLLIST.\n"
  example: []
  syntax:
    content: >-
      [BdoScriptword(Name = "sqlList")]

      public static string Fun_SqlList(IBdoScope scope, IBdoScriptVariableSet scriptVariableSet, IBdoScriptword scriptWord, params object[] parameters)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: Variables that can be used for interpretation.
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: Script word to evaluate.
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: >-
      <BdoScriptword(Name:="sqlList")>

      Public Shared Function Fun_SqlList(scope As IBdoScope, scriptVariableSet As IBdoScriptVariableSet, scriptWord As IBdoScriptword, ParamArray parameters As Object()) As String
  overload: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList*
  attributes:
  - type: BindOpen.Extensions.Runtime.BdoScriptwordAttribute
    ctor: BindOpen.Extensions.Runtime.BdoScriptwordAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: sqlList
  nameWithType.vb: ScriptwordDefinition_Database.Fun_SqlList(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.Extensions.Runtime.IBdoScriptword, System.Object())
  name.vb: Fun_SqlList(IBdoScope, IBdoScriptVariableSet, IBdoScriptword, Object())
references:
- uid: BindOpen.Extensions.Scriptwords
  commentId: N:BindOpen.Extensions.Scriptwords
  name: BindOpen.Extensions.Scriptwords
  nameWithType: BindOpen.Extensions.Scriptwords
  fullName: BindOpen.Extensions.Scriptwords
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount
  name: Fun_SqlCount
  nameWithType: ScriptwordDefinition_Database.Fun_SqlCount
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount
- uid: BindOpen.Application.Scopes.IBdoScope
  commentId: T:BindOpen.Application.Scopes.IBdoScope
  parent: BindOpen.Application.Scopes
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  commentId: T:BindOpen.System.Scripting.IBdoScriptVariableSet
  parent: BindOpen.System.Scripting
  isExternal: true
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: BindOpen.Extensions.Runtime.IBdoScriptword
  commentId: T:BindOpen.Extensions.Runtime.IBdoScriptword
  parent: BindOpen.Extensions.Runtime
  isExternal: true
  name: IBdoScriptword
  nameWithType: IBdoScriptword
  fullName: BindOpen.Extensions.Runtime.IBdoScriptword
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: BindOpen.System.Scripting
  commentId: N:BindOpen.System.Scripting
  isExternal: true
  name: BindOpen.System.Scripting
  nameWithType: BindOpen.System.Scripting
  fullName: BindOpen.System.Scripting
- uid: BindOpen.Extensions.Runtime
  commentId: N:BindOpen.Extensions.Runtime
  isExternal: true
  name: BindOpen.Extensions.Runtime
  nameWithType: BindOpen.Extensions.Runtime
  fullName: BindOpen.Extensions.Runtime
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum
  name: Fun_SqlSum
  nameWithType: ScriptwordDefinition_Database.Fun_SqlSum
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage
  name: Fun_SqlAverage
  nameWithType: ScriptwordDefinition_Database.Fun_SqlAverage
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate
  name: Fun_SqlGetCurrentDate
  nameWithType: ScriptwordDefinition_Database.Fun_SqlGetCurrentDate
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue
  name: Fun_SqlTrue
  nameWithType: ScriptwordDefinition_Database.Fun_SqlTrue
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf
  name: Fun_SqlIf
  nameWithType: ScriptwordDefinition_Database.Fun_SqlIf
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot
  name: Fun_SqlNot
  nameWithType: ScriptwordDefinition_Database.Fun_SqlNot
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr
  name: Fun_SqlOr
  nameWithType: ScriptwordDefinition_Database.Fun_SqlOr
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd
  name: Fun_SqlAnd
  nameWithType: ScriptwordDefinition_Database.Fun_SqlAnd
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor
  name: Fun_SqlXor
  nameWithType: ScriptwordDefinition_Database.Fun_SqlXor
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq
  name: Fun_SqlEq
  nameWithType: ScriptwordDefinition_Database.Fun_SqlEq
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff
  name: Fun_SqlDiff
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDiff
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt
  name: Fun_SqlGt
  nameWithType: ScriptwordDefinition_Database.Fun_SqlGt
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte
  name: Fun_SqlGte
  nameWithType: ScriptwordDefinition_Database.Fun_SqlGte
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt
  name: Fun_SqlLt
  nameWithType: ScriptwordDefinition_Database.Fun_SqlLt
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte
  name: Fun_SqlLte
  nameWithType: ScriptwordDefinition_Database.Fun_SqlLte
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull
  name: Fun_SqlIsNull
  nameWithType: ScriptwordDefinition_Database.Fun_SqlIsNull
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText
  name: Fun_SqlConvertToText
  nameWithType: ScriptwordDefinition_Database.Fun_SqlConvertToText
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText
  name: Fun_SqlText
  nameWithType: ScriptwordDefinition_Database.Fun_SqlText
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike
  name: Fun_SqlLike
  nameWithType: ScriptwordDefinition_Database.Fun_SqlLike
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace
  name: Fun_SqlReplace
  nameWithType: ScriptwordDefinition_Database.Fun_SqlReplace
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate
  name: Fun_SqlConcatenate
  nameWithType: ScriptwordDefinition_Database.Fun_SqlConcatenate
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull
  name: Fun_SqlNull
  nameWithType: ScriptwordDefinition_Database.Fun_SqlNull
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase
  name: Fun_SqlDatabase
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDatabase
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema
  name: Fun_SqlDatabase_SqlSchema
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable
  name: Fun_SqlDatabase_SqlTable
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField
  name: Fun_SqlDatabase_SqlTable_SqlField
  nameWithType: ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid
  name: Fun_SqlNewGuid
  nameWithType: ScriptwordDefinition_Database.Fun_SqlNewGuid
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom
  name: Fun_SqlRandom
  nameWithType: ScriptwordDefinition_Database.Fun_SqlRandom
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn
  name: Fun_SqlIn
  nameWithType: ScriptwordDefinition_Database.Fun_SqlIn
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn
- uid: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList*
  commentId: Overload:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList
  name: Fun_SqlList
  nameWithType: ScriptwordDefinition_Database.Fun_SqlList
  fullName: BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList
shouldSkipMarkup: true
