### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Options.OptionNameKindExtension
  commentId: T:BindOpen.Application.Options.OptionNameKindExtension
  id: OptionNameKindExtension
  parent: BindOpen.Application.Options
  children:
  - BindOpen.Application.Options.OptionNameKindExtension.HasName(BindOpen.Application.Options.OptionNameKind)
  - BindOpen.Application.Options.OptionNameKindExtension.HasValue(BindOpen.Application.Options.OptionNameKind)
  langs:
  - csharp
  - vb
  name: OptionNameKindExtension
  nameWithType: OptionNameKindExtension
  fullName: BindOpen.Application.Options.OptionNameKindExtension
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Options
  summary: "\nThe extension of the option name kind.\n"
  syntax:
    content: 'public static class OptionNameKindExtension : Object'
    content.vb: >-
      Public Module OptionNameKindExtension
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Application.Options.OptionNameKindExtension.HasName(BindOpen.Application.Options.OptionNameKind)
  commentId: M:BindOpen.Application.Options.OptionNameKindExtension.HasName(BindOpen.Application.Options.OptionNameKind)
  id: HasName(BindOpen.Application.Options.OptionNameKind)
  isExtensionMethod: true
  parent: BindOpen.Application.Options.OptionNameKindExtension
  langs:
  - csharp
  - vb
  name: HasName(OptionNameKind)
  nameWithType: OptionNameKindExtension.HasName(OptionNameKind)
  fullName: BindOpen.Application.Options.OptionNameKindExtension.HasName(BindOpen.Application.Options.OptionNameKind)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Options
  summary: "\nIndicates whether the specified kind has name.\n"
  syntax:
    content: public static bool HasName(this OptionNameKind kind)
    parameters:
    - id: kind
      type: BindOpen.Application.Options.OptionNameKind
      description: The kind of the option name.
    return:
      type: System.Boolean
      description: Returns true or false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasName(kind As OptionNameKind) As Boolean
  overload: BindOpen.Application.Options.OptionNameKindExtension.HasName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Application.Options.OptionNameKindExtension.HasValue(BindOpen.Application.Options.OptionNameKind)
  commentId: M:BindOpen.Application.Options.OptionNameKindExtension.HasValue(BindOpen.Application.Options.OptionNameKind)
  id: HasValue(BindOpen.Application.Options.OptionNameKind)
  isExtensionMethod: true
  parent: BindOpen.Application.Options.OptionNameKindExtension
  langs:
  - csharp
  - vb
  name: HasValue(OptionNameKind)
  nameWithType: OptionNameKindExtension.HasValue(OptionNameKind)
  fullName: BindOpen.Application.Options.OptionNameKindExtension.HasValue(BindOpen.Application.Options.OptionNameKind)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Options
  summary: "\nIndicates whether the specified kind has value.\n"
  syntax:
    content: public static bool HasValue(this OptionNameKind kind)
    parameters:
    - id: kind
      type: BindOpen.Application.Options.OptionNameKind
      description: The kind of the option name.
    return:
      type: System.Boolean
      description: Returns true or false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasValue(kind As OptionNameKind) As Boolean
  overload: BindOpen.Application.Options.OptionNameKindExtension.HasValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BindOpen.Application.Options
  commentId: N:BindOpen.Application.Options
  isExternal: true
  name: BindOpen.Application.Options
  nameWithType: BindOpen.Application.Options
  fullName: BindOpen.Application.Options
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Application.Options.OptionNameKindExtension.HasName*
  commentId: Overload:BindOpen.Application.Options.OptionNameKindExtension.HasName
  isExternal: true
  name: HasName
  nameWithType: OptionNameKindExtension.HasName
  fullName: BindOpen.Application.Options.OptionNameKindExtension.HasName
- uid: BindOpen.Application.Options.OptionNameKind
  commentId: T:BindOpen.Application.Options.OptionNameKind
  parent: BindOpen.Application.Options
  isExternal: true
  name: OptionNameKind
  nameWithType: OptionNameKind
  fullName: BindOpen.Application.Options.OptionNameKind
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Application.Options.OptionNameKindExtension.HasValue*
  commentId: Overload:BindOpen.Application.Options.OptionNameKindExtension.HasValue
  isExternal: true
  name: HasValue
  nameWithType: OptionNameKindExtension.HasValue
  fullName: BindOpen.Application.Options.OptionNameKindExtension.HasValue
shouldSkipMarkup: true
