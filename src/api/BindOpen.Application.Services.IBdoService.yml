### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Services.IBdoService
  commentId: T:BindOpen.Application.Services.IBdoService
  id: IBdoService
  parent: BindOpen.Application.Services
  children:
  - BindOpen.Application.Services.IBdoService.AppDomainPool
  - BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  - BindOpen.Application.Services.IBdoService.ExecutionState
  - BindOpen.Application.Services.IBdoService.ExecutionStatus
  - BindOpen.Application.Services.IBdoService.IsLoaded
  - BindOpen.Application.Services.IBdoService.Log
  - BindOpen.Application.Services.IBdoService.Loggers
  - BindOpen.Application.Services.IBdoService.Start
  langs:
  - csharp
  - vb
  name: IBdoService
  nameWithType: IBdoService
  fullName: BindOpen.Application.Services.IBdoService
  type: Interface
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe interface defines the BindOpen service.\n"
  syntax:
    content: 'public interface IBdoService : IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced'
    content.vb: >-
      Public Interface IBdoService
          Inherits IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.Application.Services.IBdoService.Start
  commentId: M:BindOpen.Application.Services.IBdoService.Start
  id: Start
  parent: BindOpen.Application.Services.IBdoService
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: IBdoService.Start()
  fullName: BindOpen.Application.Services.IBdoService.Start()
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nStarts the service.\n"
  syntax:
    content: IBdoService Start()
    return:
      type: BindOpen.Application.Services.IBdoService
      description: Returns the service to consider.
    content.vb: Function Start As IBdoService
  overload: BindOpen.Application.Services.IBdoService.Start*
- uid: BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  commentId: M:BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  id: End(BindOpen.System.Processing.ProcessExecutionStatus)
  parent: BindOpen.Application.Services.IBdoService
  langs:
  - csharp
  - vb
  name: End(ProcessExecutionStatus)
  nameWithType: IBdoService.End(ProcessExecutionStatus)
  fullName: BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nEnds the process specifying the status.\n"
  syntax:
    content: IBdoService End(ProcessExecutionStatus executionStatus)
    parameters:
    - id: executionStatus
      type: BindOpen.System.Processing.ProcessExecutionStatus
      description: The execution status to apply.
    return:
      type: BindOpen.Application.Services.IBdoService
      description: Returns the service to consider.
    content.vb: Function End(executionStatus As ProcessExecutionStatus) As IBdoService
  overload: BindOpen.Application.Services.IBdoService.End*
- uid: BindOpen.Application.Services.IBdoService.Loggers
  commentId: P:BindOpen.Application.Services.IBdoService.Loggers
  id: Loggers
  parent: BindOpen.Application.Services.IBdoService
  langs:
  - csharp
  - vb
  name: Loggers
  nameWithType: IBdoService.Loggers
  fullName: BindOpen.Application.Services.IBdoService.Loggers
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe loggers.\n"
  syntax:
    content: List<IBdoLogger> Loggers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
    content.vb: Property Loggers As List(Of IBdoLogger)
  overload: BindOpen.Application.Services.IBdoService.Loggers*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Application.Services.IBdoService.AppDomainPool
  commentId: P:BindOpen.Application.Services.IBdoService.AppDomainPool
  id: AppDomainPool
  parent: BindOpen.Application.Services.IBdoService
  langs:
  - csharp
  - vb
  name: AppDomainPool
  nameWithType: IBdoService.AppDomainPool
  fullName: BindOpen.Application.Services.IBdoService.AppDomainPool
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe application domain pool.\n"
  syntax:
    content: AppDomainPool AppDomainPool { get; }
    parameters: []
    return:
      type: BindOpen.System.Assemblies.AppDomainPool
    content.vb: ReadOnly Property AppDomainPool As AppDomainPool
  overload: BindOpen.Application.Services.IBdoService.AppDomainPool*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.Application.Services.IBdoService.Log
  commentId: P:BindOpen.Application.Services.IBdoService.Log
  id: Log
  parent: BindOpen.Application.Services.IBdoService
  langs:
  - csharp
  - vb
  name: Log
  nameWithType: IBdoService.Log
  fullName: BindOpen.Application.Services.IBdoService.Log
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe log.\n"
  syntax:
    content: IBdoLog Log { get; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: ReadOnly Property Log As IBdoLog
  overload: BindOpen.Application.Services.IBdoService.Log*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.Application.Services.IBdoService.IsLoaded
  commentId: P:BindOpen.Application.Services.IBdoService.IsLoaded
  id: IsLoaded
  parent: BindOpen.Application.Services.IBdoService
  langs:
  - csharp
  - vb
  name: IsLoaded
  nameWithType: IBdoService.IsLoaded
  fullName: BindOpen.Application.Services.IBdoService.IsLoaded
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nIndicates whether this is successfully loaded.\n"
  syntax:
    content: bool IsLoaded { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsLoaded As Boolean
  overload: BindOpen.Application.Services.IBdoService.IsLoaded*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.Application.Services.IBdoService.ExecutionState
  commentId: P:BindOpen.Application.Services.IBdoService.ExecutionState
  id: ExecutionState
  parent: BindOpen.Application.Services.IBdoService
  langs:
  - csharp
  - vb
  name: ExecutionState
  nameWithType: IBdoService.ExecutionState
  fullName: BindOpen.Application.Services.IBdoService.ExecutionState
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe state of the current execution.\n"
  syntax:
    content: ProcessExecutionState ExecutionState { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Processing.ProcessExecutionState
    content.vb: Property ExecutionState As ProcessExecutionState
  overload: BindOpen.Application.Services.IBdoService.ExecutionState*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Application.Services.IBdoService.ExecutionStatus
  commentId: P:BindOpen.Application.Services.IBdoService.ExecutionStatus
  id: ExecutionStatus
  parent: BindOpen.Application.Services.IBdoService
  langs:
  - csharp
  - vb
  name: ExecutionStatus
  nameWithType: IBdoService.ExecutionStatus
  fullName: BindOpen.Application.Services.IBdoService.ExecutionStatus
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe status of the current execution.\n"
  syntax:
    content: ProcessExecutionStatus ExecutionStatus { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Processing.ProcessExecutionStatus
    content.vb: Property ExecutionStatus As ProcessExecutionStatus
  overload: BindOpen.Application.Services.IBdoService.ExecutionStatus*
  modifiers.csharp:
  - get
  - set
references:
- uid: BindOpen.Application.Services
  commentId: N:BindOpen.Application.Services
  isExternal: true
  name: BindOpen.Application.Services
  nameWithType: BindOpen.Application.Services
  fullName: BindOpen.Application.Services
- uid: BindOpen.Application.Services.IBdoService.Start*
  commentId: Overload:BindOpen.Application.Services.IBdoService.Start
  isExternal: true
  name: Start
  nameWithType: IBdoService.Start
  fullName: BindOpen.Application.Services.IBdoService.Start
- uid: BindOpen.Application.Services.IBdoService
  commentId: T:BindOpen.Application.Services.IBdoService
  parent: BindOpen.Application.Services
  isExternal: true
  name: IBdoService
  nameWithType: IBdoService
  fullName: BindOpen.Application.Services.IBdoService
- uid: BindOpen.Application.Services.IBdoService.End*
  commentId: Overload:BindOpen.Application.Services.IBdoService.End
  isExternal: true
  name: End
  nameWithType: IBdoService.End
  fullName: BindOpen.Application.Services.IBdoService.End
- uid: BindOpen.System.Processing.ProcessExecutionStatus
  isExternal: true
  name: ProcessExecutionStatus
  nameWithType: ProcessExecutionStatus
  fullName: BindOpen.System.Processing.ProcessExecutionStatus
- uid: BindOpen.Application.Services.IBdoService.Loggers*
  commentId: Overload:BindOpen.Application.Services.IBdoService.Loggers
  isExternal: true
  name: Loggers
  nameWithType: IBdoService.Loggers
  fullName: BindOpen.Application.Services.IBdoService.Loggers
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  commentId: '!:System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}'
  definition: System.Collections.Generic.List`1
  name: List<IBdoLogger>
  nameWithType: List<IBdoLogger>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.Loggers.IBdoLogger>
  nameWithType.vb: List(Of IBdoLogger)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger)
  name.vb: List(Of IBdoLogger)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Services.IBdoService.AppDomainPool*
  commentId: Overload:BindOpen.Application.Services.IBdoService.AppDomainPool
  isExternal: true
  name: AppDomainPool
  nameWithType: IBdoService.AppDomainPool
  fullName: BindOpen.Application.Services.IBdoService.AppDomainPool
- uid: BindOpen.System.Assemblies.AppDomainPool
  isExternal: true
  name: AppDomainPool
  nameWithType: AppDomainPool
  fullName: BindOpen.System.Assemblies.AppDomainPool
- uid: BindOpen.Application.Services.IBdoService.Log*
  commentId: Overload:BindOpen.Application.Services.IBdoService.Log
  isExternal: true
  name: Log
  nameWithType: IBdoService.Log
  fullName: BindOpen.Application.Services.IBdoService.Log
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Application.Services.IBdoService.IsLoaded*
  commentId: Overload:BindOpen.Application.Services.IBdoService.IsLoaded
  isExternal: true
  name: IsLoaded
  nameWithType: IBdoService.IsLoaded
  fullName: BindOpen.Application.Services.IBdoService.IsLoaded
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Application.Services.IBdoService.ExecutionState*
  commentId: Overload:BindOpen.Application.Services.IBdoService.ExecutionState
  isExternal: true
  name: ExecutionState
  nameWithType: IBdoService.ExecutionState
  fullName: BindOpen.Application.Services.IBdoService.ExecutionState
- uid: BindOpen.System.Processing.ProcessExecutionState
  isExternal: true
  name: ProcessExecutionState
  nameWithType: ProcessExecutionState
  fullName: BindOpen.System.Processing.ProcessExecutionState
- uid: BindOpen.Application.Services.IBdoService.ExecutionStatus*
  commentId: Overload:BindOpen.Application.Services.IBdoService.ExecutionStatus
  isExternal: true
  name: ExecutionStatus
  nameWithType: IBdoService.ExecutionStatus
  fullName: BindOpen.Application.Services.IBdoService.ExecutionStatus
shouldSkipMarkup: true
