### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Connections.BdoDbConnectionFactory
  commentId: T:BindOpen.Data.Connections.BdoDbConnectionFactory
  id: BdoDbConnectionFactory
  parent: BindOpen.Data.Connections
  children:
  - BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  langs:
  - csharp
  - vb
  name: BdoDbConnectionFactory
  nameWithType: BdoDbConnectionFactory
  fullName: BindOpen.Data.Connections.BdoDbConnectionFactory
  type: Class
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Connections
  summary: "\nThis class represents a connection service.\n"
  syntax:
    content: 'public static class BdoDbConnectionFactory : Object'
    content.vb: >-
      Public Module BdoDbConnectionFactory
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  id: Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: BindOpen.Data.Connections.BdoDbConnectionFactory
  langs:
  - csharp
  - vb
  name: Open<T>(IBdoScope, IBdoDatasourceDepot, String, String, IBdoLog)
  nameWithType: BdoDbConnectionFactory.Open<T>(IBdoScope, IBdoDatasourceDepot, String, String, IBdoLog)
  fullName: BindOpen.Data.Connections.BdoDbConnectionFactory.Open<T>(BindOpen.Application.Scopes.IBdoScope, BindOpen.Data.Stores.IBdoDatasourceDepot, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Connections
  summary: "\nCreates a connector.\n"
  syntax:
    content: >-
      public static T Open<T>(this IBdoScope scope, IBdoDatasourceDepot depot, string dataSourceName, string connectorDefinitionUniqueId, IBdoLog log = null)
          where T : class, IBdoConnection
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: depot
      type: BindOpen.Data.Stores.IBdoDatasourceDepot
      description: The data source depot to consider.
    - id: dataSourceName
      type: System.String
      description: The data source name to consider.
    - id: connectorDefinitionUniqueId
      type: System.String
      description: The connector definition name to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log of execution to consider.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns True if the connector has been opened. False otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Open(Of T As {Class, IBdoConnection})(scope As IBdoScope, depot As IBdoDatasourceDepot, dataSourceName As String, connectorDefinitionUniqueId As String, log As IBdoLog = Nothing) As T
  overload: BindOpen.Data.Connections.BdoDbConnectionFactory.Open*
  nameWithType.vb: BdoDbConnectionFactory.Open(Of T)(IBdoScope, IBdoDatasourceDepot, String, String, IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Connections.BdoDbConnectionFactory.Open(Of T)(BindOpen.Application.Scopes.IBdoScope, BindOpen.Data.Stores.IBdoDatasourceDepot, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Open(Of T)(IBdoScope, IBdoDatasourceDepot, String, String, IBdoLog)
- uid: BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  id: Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: BindOpen.Data.Connections.BdoDbConnectionFactory
  langs:
  - csharp
  - vb
  name: Open<T>(IBdoScope, String, String, IBdoLog)
  nameWithType: BdoDbConnectionFactory.Open<T>(IBdoScope, String, String, IBdoLog)
  fullName: BindOpen.Data.Connections.BdoDbConnectionFactory.Open<T>(BindOpen.Application.Scopes.IBdoScope, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Connections
  summary: "\nCreates a connector.\n"
  syntax:
    content: >-
      public static T Open<T>(this IBdoScope scope, string dataSourceName, string connectorDefinitionUniqueId, IBdoLog log = null)
          where T : class, IBdoConnection
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: dataSourceName
      type: System.String
      description: The data source name to consider.
    - id: connectorDefinitionUniqueId
      type: System.String
      description: The connector definition name to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log of execution to consider.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns True if the connector has been opened. False otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Open(Of T As {Class, IBdoConnection})(scope As IBdoScope, dataSourceName As String, connectorDefinitionUniqueId As String, log As IBdoLog = Nothing) As T
  overload: BindOpen.Data.Connections.BdoDbConnectionFactory.Open*
  nameWithType.vb: BdoDbConnectionFactory.Open(Of T)(IBdoScope, String, String, IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Connections.BdoDbConnectionFactory.Open(Of T)(BindOpen.Application.Scopes.IBdoScope, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Open(Of T)(IBdoScope, String, String, IBdoLog)
references:
- uid: BindOpen.Data.Connections
  commentId: N:BindOpen.Data.Connections
  isExternal: true
  name: BindOpen.Data.Connections
  nameWithType: BindOpen.Data.Connections
  fullName: BindOpen.Data.Connections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Connections.BdoDbConnectionFactory.Open*
  commentId: Overload:BindOpen.Data.Connections.BdoDbConnectionFactory.Open
  isExternal: true
  name: Open
  nameWithType: BdoDbConnectionFactory.Open
  fullName: BindOpen.Data.Connections.BdoDbConnectionFactory.Open
- uid: BindOpen.Application.Scopes.IBdoScope
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.Data.Stores.IBdoDatasourceDepot
  isExternal: true
  name: IBdoDatasourceDepot
  nameWithType: IBdoDatasourceDepot
  fullName: BindOpen.Data.Stores.IBdoDatasourceDepot
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
shouldSkipMarkup: true
