### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  id: IBdoLog
  parent: BindOpen.System.Diagnostics
  children:
  - BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.IBdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.IBdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  - BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  - BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  - BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.IBdoLog.BuildTree
  - BindOpen.System.Diagnostics.IBdoLog.Checkpoints
  - BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.IBdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.IBdoLog.Detail
  - BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  - BindOpen.System.Diagnostics.IBdoLog.Errors
  - BindOpen.System.Diagnostics.IBdoLog.Events
  - BindOpen.System.Diagnostics.IBdoLog.Exceptions
  - BindOpen.System.Diagnostics.IBdoLog.Execution
  - BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  - BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String,System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  - BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
  - BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  - BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.GetRoot
  - BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String,System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String,System.String)
  - BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  - BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
  - BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
  - BindOpen.System.Diagnostics.IBdoLog.Level
  - BindOpen.System.Diagnostics.IBdoLog.Loggers
  - BindOpen.System.Diagnostics.IBdoLog.Messages
  - BindOpen.System.Diagnostics.IBdoLog.Parent
  - BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String,System.Boolean)
  - BindOpen.System.Diagnostics.IBdoLog.Root
  - BindOpen.System.Diagnostics.IBdoLog.Sanitize
  - BindOpen.System.Diagnostics.IBdoLog.Save``1(System.String)
  - BindOpen.System.Diagnostics.IBdoLog.Start
  - BindOpen.System.Diagnostics.IBdoLog.SubLogs
  - BindOpen.System.Diagnostics.IBdoLog.Task
  - BindOpen.System.Diagnostics.IBdoLog.ToString``1
  - BindOpen.System.Diagnostics.IBdoLog.Warnings
  - BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  - BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  - BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  - BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  - BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  langs:
  - csharp
  - vb
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
  type: Interface
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IBdoLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 14
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: 'public interface IBdoLog : IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed'
    content.vb: >-
      Public Interface IBdoLog
          Inherits IDescribedDataItem
  inheritedMembers:
  - BindOpen.Data.Items.IDescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
  - BindOpen.Data.Items.ITitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
  - BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.IDataItem.Clone``1
  - System.ICloneable.Clone
  - System.IDisposable.Dispose
  - BindOpen.Data.Items.IIdentified.Id
  - BindOpen.Data.Items.IReferenced.Key
  - BindOpen.Data.Items.IStorable.CreationDate
  - BindOpen.Data.Items.IStorable.LastModificationDate
  - BindOpen.Data.Items.INamed.Name
  - BindOpen.Data.Items.IGloballyTitled.Title
  - BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String)
  - BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String,System.String)
  - BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String,System.String)
  - BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String)
  - BindOpen.Data.Items.IGloballyDescribed.Description
  - BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String)
  - BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String,System.String)
  - BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
  - BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String,System.String)
  - BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String)
  extensionMethods:
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.IBdoLog.BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String,System.String)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
  id: Item(System.Int32)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: IBdoLog.Item[Int32]
  fullName: BindOpen.System.Diagnostics.IBdoLog.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 21
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: BdoLogEvent this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: ''
    return:
      type: BindOpen.System.Diagnostics.BdoLogEvent
      description: ''
    content.vb: ReadOnly Property Item(index As Integer) As BdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.Item*
  nameWithType.vb: IBdoLog.Item(Int32)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
  name.vb: Item(Int32)
- uid: BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
  id: Item(System.String)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: IBdoLog.Item[String]
  fullName: BindOpen.System.Diagnostics.IBdoLog.Item[System.String]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 28
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: BdoLogEvent this[string id] { get; }
    parameters:
    - id: id
      type: System.String
      description: ''
    return:
      type: BindOpen.System.Diagnostics.BdoLogEvent
      description: ''
    content.vb: ReadOnly Property Item(id As String) As BdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.Item*
  nameWithType.vb: IBdoLog.Item(String)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
  name.vb: Item(String)
- uid: BindOpen.System.Diagnostics.IBdoLog.Detail
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Detail
  id: Detail
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Detail
  nameWithType: IBdoLog.Detail
  fullName: BindOpen.System.Diagnostics.IBdoLog.Detail
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Detail
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 33
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: DataElementSet Detail { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Elements.DataElementSet
    content.vb: Property Detail As DataElementSet
  overload: BindOpen.System.Diagnostics.IBdoLog.Detail*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.System.Diagnostics.IBdoLog.Events
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Events
  id: Events
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: IBdoLog.Events
  fullName: BindOpen.System.Diagnostics.IBdoLog.Events
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Events
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 38
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<BdoLogEvent> Events { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.BdoLogEvent}
    content.vb: Property Events As List(Of BdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.Events*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.System.Diagnostics.IBdoLog.Execution
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Execution
  id: Execution
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Execution
  nameWithType: IBdoLog.Execution
  fullName: BindOpen.System.Diagnostics.IBdoLog.Execution
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Execution
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 43
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: ProcessExecution Execution { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Processing.ProcessExecution
    content.vb: Property Execution As ProcessExecution
  overload: BindOpen.System.Diagnostics.IBdoLog.Execution*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.System.Diagnostics.IBdoLog.Level
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Level
  id: Level
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Level
  nameWithType: IBdoLog.Level
  fullName: BindOpen.System.Diagnostics.IBdoLog.Level
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Level
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 48
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: int Level { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Level As Integer
  overload: BindOpen.System.Diagnostics.IBdoLog.Level*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.IBdoLog.Task
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Task
  id: Task
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Task
  nameWithType: IBdoLog.Task
  fullName: BindOpen.System.Diagnostics.IBdoLog.Task
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Task
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 53
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: BdoTaskConfiguration Task { get; set; }
    parameters: []
    return:
      type: BindOpen.Extensions.Runtime.BdoTaskConfiguration
    content.vb: Property Task As BdoTaskConfiguration
  overload: BindOpen.System.Diagnostics.IBdoLog.Task*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.System.Diagnostics.IBdoLog.Checkpoints
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Checkpoints
  id: Checkpoints
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Checkpoints
  nameWithType: IBdoLog.Checkpoints
  fullName: BindOpen.System.Diagnostics.IBdoLog.Checkpoints
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Checkpoints
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 58
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> Checkpoints { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: ReadOnly Property Checkpoints As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.Checkpoints*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.IBdoLog.Errors
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Errors
  id: Errors
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Errors
  nameWithType: IBdoLog.Errors
  fullName: BindOpen.System.Diagnostics.IBdoLog.Errors
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Errors
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 63
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> Errors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: ReadOnly Property Errors As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.Errors*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.IBdoLog.Exceptions
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Exceptions
  id: Exceptions
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Exceptions
  nameWithType: IBdoLog.Exceptions
  fullName: BindOpen.System.Diagnostics.IBdoLog.Exceptions
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Exceptions
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 68
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> Exceptions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: ReadOnly Property Exceptions As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.Exceptions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.IBdoLog.Messages
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Messages
  id: Messages
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Messages
  nameWithType: IBdoLog.Messages
  fullName: BindOpen.System.Diagnostics.IBdoLog.Messages
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Messages
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 73
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> Messages { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: ReadOnly Property Messages As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.Messages*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.IBdoLog.Warnings
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Warnings
  id: Warnings
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Warnings
  nameWithType: IBdoLog.Warnings
  fullName: BindOpen.System.Diagnostics.IBdoLog.Warnings
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Warnings
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 78
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> Warnings { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: ReadOnly Property Warnings As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.Warnings*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.IBdoLog.SubLogs
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.SubLogs
  id: SubLogs
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: SubLogs
  nameWithType: IBdoLog.SubLogs
  fullName: BindOpen.System.Diagnostics.IBdoLog.SubLogs
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SubLogs
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 83
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLog> SubLogs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLog}
    content.vb: ReadOnly Property SubLogs As List(Of IBdoLog)
  overload: BindOpen.System.Diagnostics.IBdoLog.SubLogs*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.IBdoLog.Loggers
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Loggers
  id: Loggers
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Loggers
  nameWithType: IBdoLog.Loggers
  fullName: BindOpen.System.Diagnostics.IBdoLog.Loggers
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Loggers
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 88
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLogger> Loggers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
    content.vb: Property Loggers As List(Of IBdoLogger)
  overload: BindOpen.System.Diagnostics.IBdoLog.Loggers*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.System.Diagnostics.IBdoLog.Parent
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Parent
  id: Parent
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: IBdoLog.Parent
  fullName: BindOpen.System.Diagnostics.IBdoLog.Parent
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Parent
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 93
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLog Parent { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Property Parent As IBdoLog
  overload: BindOpen.System.Diagnostics.IBdoLog.Parent*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.System.Diagnostics.IBdoLog.Root
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Root
  id: Root
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: IBdoLog.Root
  fullName: BindOpen.System.Diagnostics.IBdoLog.Root
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Root
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 98
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLog Root { get; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: ReadOnly Property Root As IBdoLog
  overload: BindOpen.System.Diagnostics.IBdoLog.Root*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddCheckpoint
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 112
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent AddCheckpoint(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: date
      type: System.Nullable{System.DateTime}
      description: ''
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function AddCheckpoint(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint*
  nameWithType.vb: IBdoLog.AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddError(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddError(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddError(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddError
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 126
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent AddError(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: date
      type: System.Nullable{System.DateTime}
      description: ''
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function AddError(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.AddError*
  nameWithType.vb: IBdoLog.AddError(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddError(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddError(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEvent
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 141
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent AddEvent(EventKinds kind, string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: kind
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: ''
    - id: title
      type: System.String
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: date
      type: System.Nullable{System.DateTime}
      description: ''
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function AddEvent(kind As EventKinds, title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.AddEvent*
  nameWithType.vb: IBdoLog.AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddEvent(IBdoLogEvent, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddEvent(IBdoLogEvent, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEvent
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 150
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent AddEvent(IBdoLogEvent logEvent, IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function AddEvent(logEvent As IBdoLogEvent, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.AddEvent*
  nameWithType.vb: IBdoLog.AddEvent(IBdoLogEvent, IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddEvent(IBdoLogEvent, IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddException
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 162
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent AddException(Exception exception, BdoEventCriticality criticality = BdoEventCriticality.None, string resultCode = null, string source = null, IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: exception
      type: System.Exception
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function AddException(exception As Exception, criticality As BdoEventCriticality = BdoEventCriticality.None, resultCode As String = Nothing, source As String = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.AddException*
  nameWithType.vb: IBdoLog.AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddException(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddException(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddException(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddException
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 176
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent AddException(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: date
      type: System.Nullable{System.DateTime}
      description: ''
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function AddException(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.AddException*
  nameWithType.vb: IBdoLog.AddException(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddException(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddException(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  id: AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddLoggers(IBdoLogger[])
  nameWithType: IBdoLog.AddLoggers(IBdoLogger[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddLoggers
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 182
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void AddLoggers(params IBdoLogger[] loggers)
    parameters:
    - id: loggers
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
      description: ''
    content.vb: Sub AddLoggers(ParamArray loggers As IBdoLogger())
  overload: BindOpen.System.Diagnostics.IBdoLog.AddLoggers*
  nameWithType.vb: IBdoLog.AddLoggers(IBdoLogger())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: AddLoggers(IBdoLogger())
- uid: BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddMessage(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddMessage(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddMessage
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 196
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent AddMessage(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: date
      type: System.Nullable{System.DateTime}
      description: ''
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function AddMessage(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.AddMessage*
  nameWithType.vb: IBdoLog.AddMessage(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddMessage(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  id: AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddSubLog(Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  nameWithType: IBdoLog.AddSubLog(Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 210
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLog AddSubLog(Predicate<IBdoLog> filterFinder = null, EventKinds eventKind = EventKinds.Message | EventKinds.Checkpoint | EventKinds.Warning | EventKinds.Error | EventKinds.Exception | EventKinds.Other | EventKinds.Any, string title = null, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ))
    parameters:
    - id: filterFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    - id: eventKind
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: ''
    - id: title
      type: System.String
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: date
      type: System.Nullable{System.DateTime}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    content.vb: Function AddSubLog(filterFinder As Predicate(Of IBdoLog) = Nothing, eventKind As EventKinds = EventKinds.Message Or EventKinds.Checkpoint Or EventKinds.Warning Or EventKinds.Error Or EventKinds.Exception Or EventKinds.Other Or EventKinds.Any, title As String = Nothing, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.IBdoLog.AddSubLog*
  nameWithType.vb: IBdoLog.AddSubLog(Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime))
  name.vb: AddSubLog(Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  id: AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddSubLog(IBdoLog, Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  nameWithType: IBdoLog.AddSubLog(IBdoLog, Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 225
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLog AddSubLog(IBdoLog childLog, Predicate<IBdoLog> logFinder = null, EventKinds eventKind = EventKinds.Message | EventKinds.Checkpoint | EventKinds.Warning | EventKinds.Error | EventKinds.Exception | EventKinds.Other | EventKinds.Any, string title = null, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ))
    parameters:
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    - id: eventKind
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: ''
    - id: title
      type: System.String
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: date
      type: System.Nullable{System.DateTime}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    content.vb: Function AddSubLog(childLog As IBdoLog, logFinder As Predicate(Of IBdoLog) = Nothing, eventKind As EventKinds = EventKinds.Message Or EventKinds.Checkpoint Or EventKinds.Warning Or EventKinds.Error Or EventKinds.Exception Or EventKinds.Other Or EventKinds.Any, title As String = Nothing, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.IBdoLog.AddSubLog*
  nameWithType.vb: IBdoLog.AddSubLog(IBdoLog, Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime))
  name.vb: AddSubLog(IBdoLog, Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddWarning(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddWarning(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddWarning
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 239
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent AddWarning(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: ''
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: resultCode
      type: System.String
      description: ''
    - id: source
      type: System.String
      description: ''
    - id: date
      type: System.Nullable{System.DateTime}
      description: ''
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function AddWarning(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.AddWarning*
  nameWithType.vb: IBdoLog.AddWarning(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddWarning(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  id: AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddEvents(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  nameWithType: IBdoLog.AddEvents(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEvents
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 248
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified events to this instance.\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> AddEvents(IBdoLog log, Predicate<IBdoLog> logFinder = null, params EventKinds[] kinds)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: ''
    content.vb: Function AddEvents(log As IBdoLog, logFinder As Predicate(Of IBdoLog) = Nothing, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.AddEvents*
  nameWithType.vb: IBdoLog.AddEvents(IBdoLog, Predicate(Of IBdoLog), EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEvents(IBdoLog, Predicate(Of IBdoLog), EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddEvents(IBdoLog, EventKinds[])
  nameWithType: IBdoLog.AddEvents(IBdoLog, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEvents
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 256
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified events to this instance.\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> AddEvents(IBdoLog log, params EventKinds[] kinds)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: ''
    content.vb: Function AddEvents(log As IBdoLog, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.AddEvents*
  nameWithType.vb: IBdoLog.AddEvents(IBdoLog, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEvents(IBdoLog, EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  id: WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: WithEvents(Func<IBdoLog, IBdoLogEvent>[])
  nameWithType: IBdoLog.WithEvents(Func<IBdoLog, IBdoLogEvent>[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func<BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent>[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WithEvents
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 263
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified events.\n"
  example: []
  syntax:
    content: IBdoLog WithEvents(params Func<IBdoLog, IBdoLogEvent>[] eventFuncs)
    parameters:
    - id: eventFuncs
      type: System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[]
      description: The functions that return events.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: Returns the added events.
    content.vb: Function WithEvents(ParamArray eventFuncs As Func(Of IBdoLog, IBdoLogEvent)()) As IBdoLog
  overload: BindOpen.System.Diagnostics.IBdoLog.WithEvents*
  nameWithType.vb: IBdoLog.WithEvents(Func(Of IBdoLog, IBdoLogEvent)())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func(Of BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent)())
  name.vb: WithEvents(Func(Of IBdoLog, IBdoLogEvent)())
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  id: AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddEventsTo(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  nameWithType: IBdoLog.AddEventsTo(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEventsTo
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 272
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the events of this instance to the specified log.\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> AddEventsTo(IBdoLog log, Predicate<IBdoLog> logFinder = null, params EventKinds[] kinds)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: ''
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: ''
    content.vb: Function AddEventsTo(log As IBdoLog, logFinder As Predicate(Of IBdoLog) = Nothing, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo*
  nameWithType.vb: IBdoLog.AddEventsTo(IBdoLog, Predicate(Of IBdoLog), EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEventsTo(IBdoLog, Predicate(Of IBdoLog), EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: AddEventsTo(IBdoLog, EventKinds[])
  nameWithType: IBdoLog.AddEventsTo(IBdoLog, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEventsTo
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 280
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the events of this instance to the specified log.\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> AddEventsTo(IBdoLog log, params EventKinds[] kinds)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: ''
    content.vb: Function AddEventsTo(log As IBdoLog, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo*
  nameWithType.vb: IBdoLog.AddEventsTo(IBdoLog, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEventsTo(IBdoLog, EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: ClearEvents(Boolean, EventKinds[])
  nameWithType: IBdoLog.ClearEvents(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ClearEvents
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 287
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void ClearEvents(bool isRecursive = true, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    content.vb: Sub ClearEvents(isRecursive As Boolean = True, ParamArray kinds As EventKinds())
  overload: BindOpen.System.Diagnostics.IBdoLog.ClearEvents*
  nameWithType.vb: IBdoLog.ClearEvents(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: ClearEvents(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  id: End(BindOpen.System.Processing.ProcessExecutionStatus)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: End(ProcessExecutionStatus)
  nameWithType: IBdoLog.End(ProcessExecutionStatus)
  fullName: BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: End
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 293
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void End(ProcessExecutionStatus status = ProcessExecutionStatus.Completed)
    parameters:
    - id: status
      type: BindOpen.System.Processing.ProcessExecutionStatus
      description: ''
    content.vb: Sub End(status As ProcessExecutionStatus = ProcessExecutionStatus.Completed)
  overload: BindOpen.System.Diagnostics.IBdoLog.End*
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetEventCount(Boolean, EventKinds[])
  nameWithType: IBdoLog.GetEventCount(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetEventCount
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 301
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: int GetEventCount(bool isRecursive = false, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Function GetEventCount(isRecursive As Boolean = False, ParamArray kinds As EventKinds()) As Integer
  overload: BindOpen.System.Diagnostics.IBdoLog.GetEventCount*
  nameWithType.vb: IBdoLog.GetEventCount(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetEventCount(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetEvents(Boolean, EventKinds[])
  nameWithType: IBdoLog.GetEvents(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetEvents
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 309
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLogEvent> GetEvents(bool isRecursive = false, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: ''
    content.vb: Function GetEvents(isRecursive As Boolean = False, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.IBdoLog.GetEvents*
  nameWithType.vb: IBdoLog.GetEvents(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetEvents(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String,System.Boolean)
  id: GetEventWithId(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetEventWithId(String, Boolean)
  nameWithType: IBdoLog.GetEventWithId(String, Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetEventWithId
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 317
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogEvent GetEventWithId(string id, bool isRecursive = false)
    parameters:
    - id: id
      type: System.String
      description: ''
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    content.vb: Function GetEventWithId(id As String, isRecursive As Boolean = False) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId*
- uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
  id: GetLogger(System.String)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetLogger(String)
  nameWithType: IBdoLog.GetLogger(String)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetLogger
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 324
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogger GetLogger(string name = null)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
      description: ''
    content.vb: Function GetLogger(name As String = Nothing) As IBdoLogger
  overload: BindOpen.System.Diagnostics.IBdoLog.GetLogger*
- uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  id: GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetLogger(BdoDefaultLoggerFormat)
  nameWithType: IBdoLog.GetLogger(BdoDefaultLoggerFormat)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetLogger
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 331
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLogger GetLogger(BdoDefaultLoggerFormat format)
    parameters:
    - id: format
      type: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
      description: ''
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
      description: ''
    content.vb: Function GetLogger(format As BdoDefaultLoggerFormat) As IBdoLogger
  overload: BindOpen.System.Diagnostics.IBdoLog.GetLogger*
- uid: BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  id: GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetLoggers(BdoDefaultLoggerFormat[])
  nameWithType: IBdoLog.GetLoggers(BdoDefaultLoggerFormat[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetLoggers
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 338
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: List<IBdoLogger> GetLoggers(params BdoDefaultLoggerFormat[] formats)
    parameters:
    - id: formats
      type: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[]
      description: ''
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
      description: ''
    content.vb: Function GetLoggers(ParamArray formats As BdoDefaultLoggerFormat()) As List(Of IBdoLogger)
  overload: BindOpen.System.Diagnostics.IBdoLog.GetLoggers*
  nameWithType.vb: IBdoLog.GetLoggers(BdoDefaultLoggerFormat())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat())
  name.vb: GetLoggers(BdoDefaultLoggerFormat())
- uid: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetMaxEventKind(Boolean, EventKinds[])
  nameWithType: IBdoLog.GetMaxEventKind(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetMaxEventKind
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 346
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: EventKinds GetMaxEventKind(bool isRecursive = true, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: ''
    content.vb: Function GetMaxEventKind(isRecursive As Boolean = True, ParamArray kinds As EventKinds()) As EventKinds
  overload: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind*
  nameWithType.vb: IBdoLog.GetMaxEventKind(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetMaxEventKind(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String,System.Boolean)
  id: GetSubLogWithId(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetSubLogWithId(String, Boolean)
  nameWithType: IBdoLog.GetSubLogWithId(String, Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetSubLogWithId
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 354
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLog GetSubLogWithId(string id, bool isRecursive = false)
    parameters:
    - id: id
      type: System.String
      description: ''
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    content.vb: Function GetSubLogWithId(id As String, isRecursive As Boolean = False) As IBdoLog
  overload: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId*
- uid: BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String,System.String)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String,System.String)
  id: GetTitle(System.String,System.String)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetTitle(String, String)
  nameWithType: IBdoLog.GetTitle(String, String)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetTitle
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 362
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: string GetTitle(string variantName = "*", string defaultVariantName = "*")
    parameters:
    - id: variantName
      type: System.String
      description: ''
    - id: defaultVariantName
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Function GetTitle(variantName As String = "*", defaultVariantName As String = "*") As String
  overload: BindOpen.System.Diagnostics.IBdoLog.GetTitle*
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
  id: HasErrors(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasErrors(Boolean)
  nameWithType: IBdoLog.HasErrors(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasErrors
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 369
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasErrors(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasErrors(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasErrors*
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
  id: HasErrorsOrExceptions(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasErrorsOrExceptions(Boolean)
  nameWithType: IBdoLog.HasErrorsOrExceptions(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasErrorsOrExceptions
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 376
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasErrorsOrExceptions(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasErrorsOrExceptions(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions*
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  id: HasErrorsOrExceptionsOrWarnings(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasErrorsOrExceptionsOrWarnings(Boolean)
  nameWithType: IBdoLog.HasErrorsOrExceptionsOrWarnings(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasErrorsOrExceptionsOrWarnings
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 383
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasErrorsOrExceptionsOrWarnings(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasErrorsOrExceptionsOrWarnings(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings*
- uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasEvent(Boolean, EventKinds[])
  nameWithType: IBdoLog.HasEvent(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasEvent
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 391
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasEvent(bool isRecursive = true, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasEvent(isRecursive As Boolean = True, ParamArray kinds As EventKinds()) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasEvent*
  nameWithType.vb: IBdoLog.HasEvent(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasEvent(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  id: HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasEvent(EventKinds[])
  nameWithType: IBdoLog.HasEvent(EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasEvent
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 398
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasEvent(params EventKinds[] kinds)
    parameters:
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasEvent(ParamArray kinds As EventKinds()) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasEvent*
  nameWithType.vb: IBdoLog.HasEvent(EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasEvent(EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
  id: HasExceptions(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasExceptions(Boolean)
  nameWithType: IBdoLog.HasExceptions(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasExceptions
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 405
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasExceptions(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasExceptions(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasExceptions*
- uid: BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
  id: HasMessages(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasMessages(Boolean)
  nameWithType: IBdoLog.HasMessages(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasMessages
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 412
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasMessages(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasMessages(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasMessages*
- uid: BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  id: HasSubLog
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasSubLog()
  nameWithType: IBdoLog.HasSubLog()
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasSubLog()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 418
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasSubLog()
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasSubLog As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasSubLog*
- uid: BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: HasWarnings(Boolean, EventKinds[])
  nameWithType: IBdoLog.HasWarnings(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasWarnings
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 426
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasWarnings(bool isRecursive = true, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: ''
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasWarnings(isRecursive As Boolean = True, ParamArray kinds As EventKinds()) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.HasWarnings*
  nameWithType.vb: IBdoLog.HasWarnings(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasWarnings(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  id: RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: RemoveSubLog(IBdoLog, Boolean)
  nameWithType: IBdoLog.RemoveSubLog(IBdoLog, Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 434
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool RemoveSubLog(IBdoLog childLog, bool isRecursive = true)
    parameters:
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function RemoveSubLog(childLog As IBdoLog, isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog*
- uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String,System.Boolean)
  id: RemoveSubLog(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: RemoveSubLog(String, Boolean)
  nameWithType: IBdoLog.RemoveSubLog(String, Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 442
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: bool RemoveSubLog(string id, bool isRecursive = true)
    parameters:
    - id: id
      type: System.String
      description: ''
    - id: isRecursive
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function RemoveSubLog(id As String, isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog*
- uid: BindOpen.System.Diagnostics.IBdoLog.Sanitize
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Sanitize
  id: Sanitize
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Sanitize()
  nameWithType: IBdoLog.Sanitize()
  fullName: BindOpen.System.Diagnostics.IBdoLog.Sanitize()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Sanitize
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 447
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void Sanitize()
    content.vb: Sub Sanitize
  overload: BindOpen.System.Diagnostics.IBdoLog.Sanitize*
- uid: BindOpen.System.Diagnostics.IBdoLog.Save``1(System.String)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Save``1(System.String)
  id: Save``1(System.String)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Save<T>(String)
  nameWithType: IBdoLog.Save<T>(String)
  fullName: BindOpen.System.Diagnostics.IBdoLog.Save<T>(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Save
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 455
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      bool Save<T>(string logFilePath)
          where T : IBdoLogger, new()
    parameters:
    - id: logFilePath
      type: System.String
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function Save(Of T As {IBdoLogger, New})(logFilePath As String) As Boolean
  overload: BindOpen.System.Diagnostics.IBdoLog.Save*
  nameWithType.vb: IBdoLog.Save(Of T)(String)
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.Save(Of T)(System.String)
  name.vb: Save(Of T)(String)
- uid: BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  id: ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: ForLoggers(Action<IBdoLogger>)
  nameWithType: IBdoLog.ForLoggers(Action<IBdoLogger>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action<BindOpen.System.Diagnostics.Loggers.IBdoLogger>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ForLoggers
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 461
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nExecutes the specified action on loggers of this instance.\n"
  example: []
  syntax:
    content: void ForLoggers(Action<IBdoLogger> action)
    parameters:
    - id: action
      type: System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
      description: The action to consider.
    content.vb: Sub ForLoggers(action As Action(Of IBdoLogger))
  overload: BindOpen.System.Diagnostics.IBdoLog.ForLoggers*
  nameWithType.vb: IBdoLog.ForLoggers(Action(Of IBdoLogger))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger))
  name.vb: ForLoggers(Action(Of IBdoLogger))
- uid: BindOpen.System.Diagnostics.IBdoLog.Start
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Start
  id: Start
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: IBdoLog.Start()
  fullName: BindOpen.System.Diagnostics.IBdoLog.Start()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Start
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 466
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void Start()
    content.vb: Sub Start
  overload: BindOpen.System.Diagnostics.IBdoLog.Start*
- uid: BindOpen.System.Diagnostics.IBdoLog.ToString``1
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.ToString``1
  id: ToString``1
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: ToString<T>()
  nameWithType: IBdoLog.ToString<T>()
  fullName: BindOpen.System.Diagnostics.IBdoLog.ToString<T>()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ToString
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 473
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      string ToString<T>()
          where T : IBdoLogger, new()
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Function ToString(Of T As {IBdoLogger, New}) As String
  overload: BindOpen.System.Diagnostics.IBdoLog.ToString*
  nameWithType.vb: IBdoLog.ToString(Of T)()
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.ToString(Of T)()
  name.vb: ToString(Of T)()
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: WriteLog(IBdoLog, BdoLoggerMode)
  nameWithType: IBdoLog.WriteLog(IBdoLog, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 480
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void WriteLog(IBdoLog childLog, BdoLoggerMode mode = BdoLoggerMode.Auto)
    parameters:
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: ''
    content.vb: Sub WriteLog(childLog As IBdoLog, mode As BdoLoggerMode = BdoLoggerMode.Auto)
  overload: BindOpen.System.Diagnostics.IBdoLog.WriteLog*
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: WriteLog(IBdoLogEvent, BdoLoggerMode)
  nameWithType: IBdoLog.WriteLog(IBdoLogEvent, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 487
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void WriteLog(IBdoLogEvent logEvent, BdoLoggerMode mode = BdoLoggerMode.Auto)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: ''
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: ''
    content.vb: Sub WriteLog(logEvent As IBdoLogEvent, mode As BdoLoggerMode = BdoLoggerMode.Auto)
  overload: BindOpen.System.Diagnostics.IBdoLog.WriteLog*
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: WriteLog(String, Object, BdoLoggerMode)
  nameWithType: IBdoLog.WriteLog(String, Object, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String, System.Object, BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 495
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void WriteLog(string elementName, object elementValue, BdoLoggerMode mode = BdoLoggerMode.Auto)
    parameters:
    - id: elementName
      type: System.String
      description: ''
    - id: elementValue
      type: System.Object
      description: ''
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: ''
    content.vb: Sub WriteLog(elementName As String, elementValue As Object, mode As BdoLoggerMode = BdoLoggerMode.Auto)
  overload: BindOpen.System.Diagnostics.IBdoLog.WriteLog*
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: WriteLog(IBdoTaskConfiguration, BdoLoggerMode)
  nameWithType: IBdoLog.WriteLog(IBdoTaskConfiguration, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration, BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 502
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void WriteLog(IBdoTaskConfiguration task, BdoLoggerMode mode = BdoLoggerMode.Auto)
    parameters:
    - id: task
      type: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
      description: ''
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: ''
    content.vb: Sub WriteLog(task As IBdoTaskConfiguration, mode As BdoLoggerMode = BdoLoggerMode.Auto)
  overload: BindOpen.System.Diagnostics.IBdoLog.WriteLog*
- uid: BindOpen.System.Diagnostics.IBdoLog.BuildTree
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.BuildTree
  id: BuildTree
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: BuildTree()
  nameWithType: IBdoLog.BuildTree()
  fullName: BindOpen.System.Diagnostics.IBdoLog.BuildTree()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: BuildTree
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 507
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: void BuildTree()
    content.vb: Sub BuildTree
  overload: BindOpen.System.Diagnostics.IBdoLog.BuildTree*
- uid: BindOpen.System.Diagnostics.IBdoLog.GetRoot
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetRoot
  id: GetRoot
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: GetRoot()
  nameWithType: IBdoLog.GetRoot()
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetRoot()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetRoot
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 513
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\n\n"
  example: []
  syntax:
    content: IBdoLog GetRoot()
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    content.vb: Function GetRoot As IBdoLog
  overload: BindOpen.System.Diagnostics.IBdoLog.GetRoot*
- uid: BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  id: Clone(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Clone(IBdoLog)
  nameWithType: IBdoLog.Clone(IBdoLog)
  fullName: BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clone
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 519
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nClones this instance considering the parent log.\n"
  example: []
  syntax:
    content: IBdoLog Clone(IBdoLog parent = null)
    parameters:
    - id: parent
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Function Clone(parent As IBdoLog = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.IBdoLog.Clone*
- uid: BindOpen.System.Diagnostics.IBdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  id: Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.IBdoLog
  langs:
  - csharp
  - vb
  name: Clone<T>(IBdoLog)
  nameWithType: IBdoLog.Clone<T>(IBdoLog)
  fullName: BindOpen.System.Diagnostics.IBdoLog.Clone<T>(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clone
    path: ../src/BindOpen.Core/System/Diagnostics/Interfaces/IBdoLog.cs
    startLine: 525
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nClones this instance considering the parent log.\n"
  example: []
  syntax:
    content: >-
      T Clone<T>(IBdoLog parent = null)
          where T : class
    parameters:
    - id: parent
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function Clone(Of T As Class)(parent As IBdoLog = Nothing) As T
  overload: BindOpen.System.Diagnostics.IBdoLog.Clone*
  nameWithType.vb: IBdoLog.Clone(Of T)(IBdoLog)
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.Clone(Of T)(BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Clone(Of T)(IBdoLog)
references:
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.Data.Items.IDescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
  commentId: M:BindOpen.Data.Items.IDescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
  parent: BindOpen.Data.Items.IDescribedDataItem
  name: Update(IDescribedDataItem)
  nameWithType: IDescribedDataItem.Update(IDescribedDataItem)
  fullName: BindOpen.Data.Items.IDescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
    name: Update
    nameWithType: IDescribedDataItem.Update
    fullName: BindOpen.Data.Items.IDescribedDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDescribedDataItem
    name: IDescribedDataItem
    nameWithType: IDescribedDataItem
    fullName: BindOpen.Data.Items.IDescribedDataItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
    name: Update
    nameWithType: IDescribedDataItem.Update
    fullName: BindOpen.Data.Items.IDescribedDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDescribedDataItem
    name: IDescribedDataItem
    nameWithType: IDescribedDataItem
    fullName: BindOpen.Data.Items.IDescribedDataItem
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.ITitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
  commentId: M:BindOpen.Data.Items.ITitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
  parent: BindOpen.Data.Items.ITitledDataItem
  name: Update(ITitledDataItem)
  nameWithType: ITitledDataItem.Update(ITitledDataItem)
  fullName: BindOpen.Data.Items.ITitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
  spec.csharp:
  - uid: BindOpen.Data.Items.ITitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
    name: Update
    nameWithType: ITitledDataItem.Update
    fullName: BindOpen.Data.Items.ITitledDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.ITitledDataItem
    name: ITitledDataItem
    nameWithType: ITitledDataItem
    fullName: BindOpen.Data.Items.ITitledDataItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.ITitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
    name: Update
    nameWithType: ITitledDataItem.Update
    fullName: BindOpen.Data.Items.ITitledDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.ITitledDataItem
    name: ITitledDataItem
    nameWithType: ITitledDataItem
    fullName: BindOpen.Data.Items.ITitledDataItem
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: IDataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: IDataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: IDataItem.Check
    fullName: BindOpen.Data.Items.IDataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: IDataItem.Check
    fullName: BindOpen.Data.Items.IDataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: IDataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: IDataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: IDataItem.Check<T>
    fullName: BindOpen.Data.Items.IDataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: IDataItem.Check(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: IDataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: IDataItem.Repair
    fullName: BindOpen.Data.Items.IDataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: IDataItem.Repair
    fullName: BindOpen.Data.Items.IDataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: IDataItem.Repair<T>
    fullName: BindOpen.Data.Items.IDataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: IDataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: IDataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: IDataItem.Update
    fullName: BindOpen.Data.Items.IDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: IDataItem.Update
    fullName: BindOpen.Data.Items.IDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.IDataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IDataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: IDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: IDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.IDataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: IDataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: IDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: IDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Clone``1
  commentId: M:BindOpen.Data.Items.IDataItem.Clone``1
  parent: BindOpen.Data.Items.IDataItem
  name: Clone<T>()
  nameWithType: IDataItem.Clone<T>()
  fullName: BindOpen.Data.Items.IDataItem.Clone<T>()
  nameWithType.vb: IDataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.IDataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Clone``1
    name: Clone<T>
    nameWithType: IDataItem.Clone<T>
    fullName: BindOpen.Data.Items.IDataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Clone``1
    name: Clone(Of T)
    nameWithType: IDataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IIdentified.Id
  commentId: P:BindOpen.Data.Items.IIdentified.Id
  parent: BindOpen.Data.Items.IIdentified
  name: Id
  nameWithType: IIdentified.Id
  fullName: BindOpen.Data.Items.IIdentified.Id
- uid: BindOpen.Data.Items.IReferenced.Key
  commentId: M:BindOpen.Data.Items.IReferenced.Key
  parent: BindOpen.Data.Items.IReferenced
  name: Key()
  nameWithType: IReferenced.Key()
  fullName: BindOpen.Data.Items.IReferenced.Key()
  spec.csharp:
  - uid: BindOpen.Data.Items.IReferenced.Key
    name: Key
    nameWithType: IReferenced.Key
    fullName: BindOpen.Data.Items.IReferenced.Key
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IReferenced.Key
    name: Key
    nameWithType: IReferenced.Key
    fullName: BindOpen.Data.Items.IReferenced.Key
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IStorable.CreationDate
  commentId: P:BindOpen.Data.Items.IStorable.CreationDate
  parent: BindOpen.Data.Items.IStorable
  name: CreationDate
  nameWithType: IStorable.CreationDate
  fullName: BindOpen.Data.Items.IStorable.CreationDate
- uid: BindOpen.Data.Items.IStorable.LastModificationDate
  commentId: P:BindOpen.Data.Items.IStorable.LastModificationDate
  parent: BindOpen.Data.Items.IStorable
  name: LastModificationDate
  nameWithType: IStorable.LastModificationDate
  fullName: BindOpen.Data.Items.IStorable.LastModificationDate
- uid: BindOpen.Data.Items.INamed.Name
  commentId: P:BindOpen.Data.Items.INamed.Name
  parent: BindOpen.Data.Items.INamed
  name: Name
  nameWithType: INamed.Name
  fullName: BindOpen.Data.Items.INamed.Name
- uid: BindOpen.Data.Items.IGloballyTitled.Title
  commentId: P:BindOpen.Data.Items.IGloballyTitled.Title
  parent: BindOpen.Data.Items.IGloballyTitled
  name: Title
  nameWithType: IGloballyTitled.Title
  fullName: BindOpen.Data.Items.IGloballyTitled.Title
- uid: BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String)
  commentId: M:BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String)
  parent: BindOpen.Data.Items.IGloballyTitled
  isExternal: true
  name: AddTitle(String)
  nameWithType: IGloballyTitled.AddTitle(String)
  fullName: BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String)
    name: AddTitle
    nameWithType: IGloballyTitled.AddTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.AddTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String)
    name: AddTitle
    nameWithType: IGloballyTitled.AddTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.AddTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String,System.String)
  parent: BindOpen.Data.Items.IGloballyTitled
  isExternal: true
  name: AddTitle(String, String)
  nameWithType: IGloballyTitled.AddTitle(String, String)
  fullName: BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String,System.String)
    name: AddTitle
    nameWithType: IGloballyTitled.AddTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.AddTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyTitled.AddTitle(System.String,System.String)
    name: AddTitle
    nameWithType: IGloballyTitled.AddTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.AddTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String,System.String)
  parent: BindOpen.Data.Items.IGloballyTitled
  isExternal: true
  name: SetTitle(String, String)
  nameWithType: IGloballyTitled.SetTitle(String, String)
  fullName: BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String,System.String)
    name: SetTitle
    nameWithType: IGloballyTitled.SetTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.SetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String,System.String)
    name: SetTitle
    nameWithType: IGloballyTitled.SetTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.SetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String)
  commentId: M:BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String)
  parent: BindOpen.Data.Items.IGloballyTitled
  isExternal: true
  name: SetTitle(String)
  nameWithType: IGloballyTitled.SetTitle(String)
  fullName: BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String)
    name: SetTitle
    nameWithType: IGloballyTitled.SetTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.SetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyTitled.SetTitle(System.String)
    name: SetTitle
    nameWithType: IGloballyTitled.SetTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.SetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyDescribed.Description
  commentId: P:BindOpen.Data.Items.IGloballyDescribed.Description
  parent: BindOpen.Data.Items.IGloballyDescribed
  name: Description
  nameWithType: IGloballyDescribed.Description
  fullName: BindOpen.Data.Items.IGloballyDescribed.Description
- uid: BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String)
  commentId: M:BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String)
  parent: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: AddDescription(String)
  nameWithType: IGloballyDescribed.AddDescription(String)
  fullName: BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String)
    name: AddDescription
    nameWithType: IGloballyDescribed.AddDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.AddDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String)
    name: AddDescription
    nameWithType: IGloballyDescribed.AddDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.AddDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String,System.String)
  parent: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: AddDescription(String, String)
  nameWithType: IGloballyDescribed.AddDescription(String, String)
  fullName: BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String,System.String)
    name: AddDescription
    nameWithType: IGloballyDescribed.AddDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.AddDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyDescribed.AddDescription(System.String,System.String)
    name: AddDescription
    nameWithType: IGloballyDescribed.AddDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.AddDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
  parent: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: GetDescription(String, String)
  nameWithType: IGloballyDescribed.GetDescription(String, String)
  fullName: BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
    name: GetDescription
    nameWithType: IGloballyDescribed.GetDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.GetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
    name: GetDescription
    nameWithType: IGloballyDescribed.GetDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.GetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String,System.String)
  parent: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: SetDescription(String, String)
  nameWithType: IGloballyDescribed.SetDescription(String, String)
  fullName: BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String,System.String)
    name: SetDescription
    nameWithType: IGloballyDescribed.SetDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.SetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String,System.String)
    name: SetDescription
    nameWithType: IGloballyDescribed.SetDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.SetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String)
  commentId: M:BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String)
  parent: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: SetDescription(String)
  nameWithType: IGloballyDescribed.SetDescription(String)
  fullName: BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String)
    name: SetDescription
    nameWithType: IGloballyDescribed.SetDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.SetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyDescribed.SetDescription(System.String)
    name: SetDescription
    nameWithType: IGloballyDescribed.SetDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.SetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String,System.String)
  commentId: M:BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
  parent: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory
  definition: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
  name: ToApiDto(String, String)
  nameWithType: ApiBdoLogDtoFactory.ToApiDto(String, String)
  fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String,System.String)
    name: ToApiDto
    nameWithType: ApiBdoLogDtoFactory.ToApiDto
    fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String,System.String)
    name: ToApiDto
    nameWithType: ApiBdoLogDtoFactory.ToApiDto
    fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDescribedDataItem
  commentId: T:BindOpen.Data.Items.IDescribedDataItem
  parent: BindOpen.Data.Items
  name: IDescribedDataItem
  nameWithType: IDescribedDataItem
  fullName: BindOpen.Data.Items.IDescribedDataItem
- uid: BindOpen.Data.Items.ITitledDataItem
  commentId: T:BindOpen.Data.Items.ITitledDataItem
  parent: BindOpen.Data.Items
  name: ITitledDataItem
  nameWithType: ITitledDataItem
  fullName: BindOpen.Data.Items.ITitledDataItem
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: IDataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: IDataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: IDataItem.Check<T>
    fullName: BindOpen.Data.Items.IDataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: IDataItem.Check(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: IDataItem.Repair<T>
    fullName: BindOpen.Data.Items.IDataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: IDataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  commentId: T:BindOpen.Data.Items.IIdentified
  parent: BindOpen.Data.Items
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  commentId: T:BindOpen.Data.Items.IReferenced
  parent: BindOpen.Data.Items
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Items.IStorable
  commentId: T:BindOpen.Data.Items.IStorable
  parent: BindOpen.Data.Items
  name: IStorable
  nameWithType: IStorable
  fullName: BindOpen.Data.Items.IStorable
- uid: BindOpen.Data.Items.INamed
  commentId: T:BindOpen.Data.Items.INamed
  parent: BindOpen.Data.Items
  name: INamed
  nameWithType: INamed
  fullName: BindOpen.Data.Items.INamed
- uid: BindOpen.Data.Items.IGloballyTitled
  commentId: T:BindOpen.Data.Items.IGloballyTitled
  parent: BindOpen.Data.Items
  name: IGloballyTitled
  nameWithType: IGloballyTitled
  fullName: BindOpen.Data.Items.IGloballyTitled
- uid: BindOpen.Data.Items.IGloballyDescribed
  commentId: T:BindOpen.Data.Items.IGloballyDescribed
  parent: BindOpen.Data.Items
  name: IGloballyDescribed
  nameWithType: IGloballyDescribed
  fullName: BindOpen.Data.Items.IGloballyDescribed
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
  commentId: M:BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
  isExternal: true
  name: ToApiDto(IBdoLog, String, String)
  nameWithType: ApiBdoLogDtoFactory.ToApiDto(IBdoLog, String, String)
  fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog, System.String, System.String)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
    name: ToApiDto
    nameWithType: ApiBdoLogDtoFactory.ToApiDto
    fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
    name: ToApiDto
    nameWithType: ApiBdoLogDtoFactory.ToApiDto
    fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory
  commentId: T:BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory
  parent: BindOpen.System.Diagnostics.Dto
  name: ApiBdoLogDtoFactory
  nameWithType: ApiBdoLogDtoFactory
  fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.System.Diagnostics.Dto
  commentId: N:BindOpen.System.Diagnostics.Dto
  name: BindOpen.System.Diagnostics.Dto
  nameWithType: BindOpen.System.Diagnostics.Dto
  fullName: BindOpen.System.Diagnostics.Dto
- uid: BindOpen.System.Diagnostics.IBdoLog.Item*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Item
  name: Item
  nameWithType: IBdoLog.Item
  fullName: BindOpen.System.Diagnostics.IBdoLog.Item
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: BindOpen.System.Diagnostics.BdoLogEvent
  commentId: T:BindOpen.System.Diagnostics.BdoLogEvent
  parent: BindOpen.System.Diagnostics
  name: BdoLogEvent
  nameWithType: BdoLogEvent
  fullName: BindOpen.System.Diagnostics.BdoLogEvent
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.IBdoLog.Detail*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Detail
  name: Detail
  nameWithType: IBdoLog.Detail
  fullName: BindOpen.System.Diagnostics.IBdoLog.Detail
- uid: BindOpen.Data.Elements.DataElementSet
  commentId: T:BindOpen.Data.Elements.DataElementSet
  parent: BindOpen.Data.Elements
  name: DataElementSet
  nameWithType: DataElementSet
  fullName: BindOpen.Data.Elements.DataElementSet
- uid: BindOpen.Data.Elements
  commentId: N:BindOpen.Data.Elements
  name: BindOpen.Data.Elements
  nameWithType: BindOpen.Data.Elements
  fullName: BindOpen.Data.Elements
- uid: BindOpen.System.Diagnostics.IBdoLog.Events*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Events
  name: Events
  nameWithType: IBdoLog.Events
  fullName: BindOpen.System.Diagnostics.IBdoLog.Events
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.BdoLogEvent}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.BdoLogEvent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<BdoLogEvent>
  nameWithType: List<BdoLogEvent>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.BdoLogEvent>
  nameWithType.vb: List(Of BdoLogEvent)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.BdoLogEvent)
  name.vb: List(Of BdoLogEvent)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.BdoLogEvent
    name: BdoLogEvent
    nameWithType: BdoLogEvent
    fullName: BindOpen.System.Diagnostics.BdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.BdoLogEvent
    name: BdoLogEvent
    nameWithType: BdoLogEvent
    fullName: BindOpen.System.Diagnostics.BdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.System.Diagnostics.IBdoLog.Execution*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Execution
  name: Execution
  nameWithType: IBdoLog.Execution
  fullName: BindOpen.System.Diagnostics.IBdoLog.Execution
- uid: BindOpen.System.Processing.ProcessExecution
  commentId: T:BindOpen.System.Processing.ProcessExecution
  parent: BindOpen.System.Processing
  name: ProcessExecution
  nameWithType: ProcessExecution
  fullName: BindOpen.System.Processing.ProcessExecution
- uid: BindOpen.System.Processing
  commentId: N:BindOpen.System.Processing
  name: BindOpen.System.Processing
  nameWithType: BindOpen.System.Processing
  fullName: BindOpen.System.Processing
- uid: BindOpen.System.Diagnostics.IBdoLog.Level*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Level
  name: Level
  nameWithType: IBdoLog.Level
  fullName: BindOpen.System.Diagnostics.IBdoLog.Level
- uid: BindOpen.System.Diagnostics.IBdoLog.Task*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Task
  name: Task
  nameWithType: IBdoLog.Task
  fullName: BindOpen.System.Diagnostics.IBdoLog.Task
- uid: BindOpen.Extensions.Runtime.BdoTaskConfiguration
  commentId: T:BindOpen.Extensions.Runtime.BdoTaskConfiguration
  parent: BindOpen.Extensions.Runtime
  name: BdoTaskConfiguration
  nameWithType: BdoTaskConfiguration
  fullName: BindOpen.Extensions.Runtime.BdoTaskConfiguration
- uid: BindOpen.Extensions.Runtime
  commentId: N:BindOpen.Extensions.Runtime
  name: BindOpen.Extensions.Runtime
  nameWithType: BindOpen.Extensions.Runtime
  fullName: BindOpen.Extensions.Runtime
- uid: BindOpen.System.Diagnostics.IBdoLog.Checkpoints*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Checkpoints
  name: Checkpoints
  nameWithType: IBdoLog.Checkpoints
  fullName: BindOpen.System.Diagnostics.IBdoLog.Checkpoints
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IBdoLogEvent>
  nameWithType: List<IBdoLogEvent>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.IBdoLogEvent>
  nameWithType.vb: List(Of IBdoLogEvent)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.IBdoLogEvent)
  name.vb: List(Of IBdoLogEvent)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.Errors*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Errors
  name: Errors
  nameWithType: IBdoLog.Errors
  fullName: BindOpen.System.Diagnostics.IBdoLog.Errors
- uid: BindOpen.System.Diagnostics.IBdoLog.Exceptions*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Exceptions
  name: Exceptions
  nameWithType: IBdoLog.Exceptions
  fullName: BindOpen.System.Diagnostics.IBdoLog.Exceptions
- uid: BindOpen.System.Diagnostics.IBdoLog.Messages*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Messages
  name: Messages
  nameWithType: IBdoLog.Messages
  fullName: BindOpen.System.Diagnostics.IBdoLog.Messages
- uid: BindOpen.System.Diagnostics.IBdoLog.Warnings*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Warnings
  name: Warnings
  nameWithType: IBdoLog.Warnings
  fullName: BindOpen.System.Diagnostics.IBdoLog.Warnings
- uid: BindOpen.System.Diagnostics.IBdoLog.SubLogs*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.SubLogs
  name: SubLogs
  nameWithType: IBdoLog.SubLogs
  fullName: BindOpen.System.Diagnostics.IBdoLog.SubLogs
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLog}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLog}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IBdoLog>
  nameWithType: List<IBdoLog>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.IBdoLog>
  nameWithType.vb: List(Of IBdoLog)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.IBdoLog)
  name.vb: List(Of IBdoLog)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.Loggers*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Loggers
  name: Loggers
  nameWithType: IBdoLog.Loggers
  fullName: BindOpen.System.Diagnostics.IBdoLog.Loggers
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IBdoLogger>
  nameWithType: List<IBdoLogger>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.Loggers.IBdoLogger>
  nameWithType.vb: List(Of IBdoLogger)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger)
  name.vb: List(Of IBdoLogger)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.Parent*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Parent
  name: Parent
  nameWithType: IBdoLog.Parent
  fullName: BindOpen.System.Diagnostics.IBdoLog.Parent
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.System.Diagnostics.IBdoLog.Root*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Root
  name: Root
  nameWithType: IBdoLog.Root
  fullName: BindOpen.System.Diagnostics.IBdoLog.Root
- uid: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint
  name: AddCheckpoint
  nameWithType: IBdoLog.AddCheckpoint
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint
- uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  commentId: T:BindOpen.System.Diagnostics.Events.BdoEventCriticality
  parent: BindOpen.System.Diagnostics.Events
  name: BdoEventCriticality
  nameWithType: BdoEventCriticality
  fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
  commentId: T:System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
  parent: System
  definition: System.Predicate`1
  name: Predicate<IBdoLog>
  nameWithType: Predicate<IBdoLog>
  fullName: System.Predicate<BindOpen.System.Diagnostics.IBdoLog>
  nameWithType.vb: Predicate(Of IBdoLog)
  fullName.vb: System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Predicate(Of IBdoLog)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLogEvent
  commentId: T:BindOpen.System.Diagnostics.IBdoLogEvent
  parent: BindOpen.System.Diagnostics
  name: IBdoLogEvent
  nameWithType: IBdoLogEvent
  fullName: BindOpen.System.Diagnostics.IBdoLogEvent
- uid: BindOpen.System.Diagnostics.Events
  commentId: N:BindOpen.System.Diagnostics.Events
  name: BindOpen.System.Diagnostics.Events
  nameWithType: BindOpen.System.Diagnostics.Events
  fullName: BindOpen.System.Diagnostics.Events
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.AddError*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddError
  name: AddError
  nameWithType: IBdoLog.AddError
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddError
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddEvent
  name: AddEvent
  nameWithType: IBdoLog.AddEvent
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent
- uid: BindOpen.System.Diagnostics.Events.EventKinds
  commentId: T:BindOpen.System.Diagnostics.Events.EventKinds
  parent: BindOpen.System.Diagnostics.Events
  name: EventKinds
  nameWithType: EventKinds
  fullName: BindOpen.System.Diagnostics.Events.EventKinds
- uid: BindOpen.System.Diagnostics.IBdoLog.AddException*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddException
  name: AddException
  nameWithType: IBdoLog.AddException
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddException
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: BindOpen.System.Diagnostics.IBdoLog.AddLoggers*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddLoggers
  name: AddLoggers
  nameWithType: IBdoLog.AddLoggers
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddLoggers
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
  isExternal: true
  name: IBdoLogger[]
  nameWithType: IBdoLogger[]
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
  nameWithType.vb: IBdoLogger()
  fullName.vb: BindOpen.System.Diagnostics.Loggers.IBdoLogger()
  name.vb: IBdoLogger()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.IBdoLog.AddMessage*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddMessage
  name: AddMessage
  nameWithType: IBdoLog.AddMessage
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddMessage
- uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddSubLog
  name: AddSubLog
  nameWithType: IBdoLog.AddSubLog
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog
- uid: BindOpen.System.Diagnostics.IBdoLog.AddWarning*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddWarning
  name: AddWarning
  nameWithType: IBdoLog.AddWarning
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddWarning
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddEvents
  name: AddEvents
  nameWithType: IBdoLog.AddEvents
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents
- uid: BindOpen.System.Diagnostics.Events.EventKinds[]
  isExternal: true
  name: EventKinds[]
  nameWithType: EventKinds[]
  fullName: BindOpen.System.Diagnostics.Events.EventKinds[]
  nameWithType.vb: EventKinds()
  fullName.vb: BindOpen.System.Diagnostics.Events.EventKinds()
  name.vb: EventKinds()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.IBdoLog.WithEvents*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.WithEvents
  name: WithEvents
  nameWithType: IBdoLog.WithEvents
  fullName: BindOpen.System.Diagnostics.IBdoLog.WithEvents
- uid: System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[]
  isExternal: true
  name: Func<IBdoLog, IBdoLogEvent>[]
  nameWithType: Func<IBdoLog, IBdoLogEvent>[]
  fullName: System.Func<BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent>[]
  nameWithType.vb: Func(Of IBdoLog, IBdoLogEvent)()
  fullName.vb: System.Func(Of BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent)()
  name.vb: Func(Of IBdoLog, IBdoLogEvent)()
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.AddEventsTo
  name: AddEventsTo
  nameWithType: IBdoLog.AddEventsTo
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo
- uid: BindOpen.System.Diagnostics.IBdoLog.ClearEvents*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.ClearEvents
  name: ClearEvents
  nameWithType: IBdoLog.ClearEvents
  fullName: BindOpen.System.Diagnostics.IBdoLog.ClearEvents
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.System.Diagnostics.IBdoLog.End*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.End
  name: End
  nameWithType: IBdoLog.End
  fullName: BindOpen.System.Diagnostics.IBdoLog.End
- uid: BindOpen.System.Processing.ProcessExecutionStatus
  commentId: T:BindOpen.System.Processing.ProcessExecutionStatus
  parent: BindOpen.System.Processing
  name: ProcessExecutionStatus
  nameWithType: ProcessExecutionStatus
  fullName: BindOpen.System.Processing.ProcessExecutionStatus
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEventCount*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetEventCount
  name: GetEventCount
  nameWithType: IBdoLog.GetEventCount
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventCount
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEvents*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetEvents
  name: GetEvents
  nameWithType: IBdoLog.GetEvents
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEvents
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetEventWithId
  name: GetEventWithId
  nameWithType: IBdoLog.GetEventWithId
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId
- uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetLogger
  name: GetLogger
  nameWithType: IBdoLog.GetLogger
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  commentId: T:BindOpen.System.Diagnostics.Loggers.IBdoLogger
  parent: BindOpen.System.Diagnostics.Loggers
  name: IBdoLogger
  nameWithType: IBdoLogger
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
- uid: BindOpen.System.Diagnostics.Loggers
  commentId: N:BindOpen.System.Diagnostics.Loggers
  name: BindOpen.System.Diagnostics.Loggers
  nameWithType: BindOpen.System.Diagnostics.Loggers
  fullName: BindOpen.System.Diagnostics.Loggers
- uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  commentId: T:BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  parent: BindOpen.System.Diagnostics.Loggers
  name: BdoDefaultLoggerFormat
  nameWithType: BdoDefaultLoggerFormat
  fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
- uid: BindOpen.System.Diagnostics.IBdoLog.GetLoggers*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetLoggers
  name: GetLoggers
  nameWithType: IBdoLog.GetLoggers
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetLoggers
- uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[]
  isExternal: true
  name: BdoDefaultLoggerFormat[]
  nameWithType: BdoDefaultLoggerFormat[]
  fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[]
  nameWithType.vb: BdoDefaultLoggerFormat()
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat()
  name.vb: BdoDefaultLoggerFormat()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    name: BdoDefaultLoggerFormat
    nameWithType: BdoDefaultLoggerFormat
    fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    name: BdoDefaultLoggerFormat
    nameWithType: BdoDefaultLoggerFormat
    fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind
  name: GetMaxEventKind
  nameWithType: IBdoLog.GetMaxEventKind
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind
- uid: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId
  name: GetSubLogWithId
  nameWithType: IBdoLog.GetSubLogWithId
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId
- uid: BindOpen.System.Diagnostics.IBdoLog.GetTitle*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetTitle
  name: GetTitle
  nameWithType: IBdoLog.GetTitle
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetTitle
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrors*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.HasErrors
  name: HasErrors
  nameWithType: IBdoLog.HasErrors
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrors
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions
  name: HasErrorsOrExceptions
  nameWithType: IBdoLog.HasErrorsOrExceptions
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings
  name: HasErrorsOrExceptionsOrWarnings
  nameWithType: IBdoLog.HasErrorsOrExceptionsOrWarnings
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings
- uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.HasEvent
  name: HasEvent
  nameWithType: IBdoLog.HasEvent
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent
- uid: BindOpen.System.Diagnostics.IBdoLog.HasExceptions*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.HasExceptions
  name: HasExceptions
  nameWithType: IBdoLog.HasExceptions
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasExceptions
- uid: BindOpen.System.Diagnostics.IBdoLog.HasMessages*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.HasMessages
  name: HasMessages
  nameWithType: IBdoLog.HasMessages
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasMessages
- uid: BindOpen.System.Diagnostics.IBdoLog.HasSubLog*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  name: HasSubLog
  nameWithType: IBdoLog.HasSubLog
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasSubLog
- uid: BindOpen.System.Diagnostics.IBdoLog.HasWarnings*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.HasWarnings
  name: HasWarnings
  nameWithType: IBdoLog.HasWarnings
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasWarnings
- uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog
  name: RemoveSubLog
  nameWithType: IBdoLog.RemoveSubLog
  fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog
- uid: BindOpen.System.Diagnostics.IBdoLog.Sanitize*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Sanitize
  name: Sanitize
  nameWithType: IBdoLog.Sanitize
  fullName: BindOpen.System.Diagnostics.IBdoLog.Sanitize
- uid: BindOpen.System.Diagnostics.IBdoLog.Save*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Save
  name: Save
  nameWithType: IBdoLog.Save
  fullName: BindOpen.System.Diagnostics.IBdoLog.Save
- uid: BindOpen.System.Diagnostics.IBdoLog.ForLoggers*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.ForLoggers
  name: ForLoggers
  nameWithType: IBdoLog.ForLoggers
  fullName: BindOpen.System.Diagnostics.IBdoLog.ForLoggers
- uid: System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  commentId: T:System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  parent: System
  definition: System.Action`1
  name: Action<IBdoLogger>
  nameWithType: Action<IBdoLogger>
  fullName: System.Action<BindOpen.System.Diagnostics.Loggers.IBdoLogger>
  nameWithType.vb: Action(Of IBdoLogger)
  fullName.vb: System.Action(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger)
  name.vb: Action(Of IBdoLogger)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.Start*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Start
  name: Start
  nameWithType: IBdoLog.Start
  fullName: BindOpen.System.Diagnostics.IBdoLog.Start
- uid: BindOpen.System.Diagnostics.IBdoLog.ToString*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.ToString
  name: ToString
  nameWithType: IBdoLog.ToString
  fullName: BindOpen.System.Diagnostics.IBdoLog.ToString
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.WriteLog
  name: WriteLog
  nameWithType: IBdoLog.WriteLog
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
- uid: BindOpen.System.Diagnostics.BdoLoggerMode
  commentId: T:BindOpen.System.Diagnostics.BdoLoggerMode
  parent: BindOpen.System.Diagnostics
  name: BdoLoggerMode
  nameWithType: BdoLoggerMode
  fullName: BindOpen.System.Diagnostics.BdoLoggerMode
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  commentId: T:BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  parent: BindOpen.Extensions.Runtime
  name: IBdoTaskConfiguration
  nameWithType: IBdoTaskConfiguration
  fullName: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
- uid: BindOpen.System.Diagnostics.IBdoLog.BuildTree*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.BuildTree
  name: BuildTree
  nameWithType: IBdoLog.BuildTree
  fullName: BindOpen.System.Diagnostics.IBdoLog.BuildTree
- uid: BindOpen.System.Diagnostics.IBdoLog.GetRoot*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.GetRoot
  name: GetRoot
  nameWithType: IBdoLog.GetRoot
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetRoot
- uid: BindOpen.System.Diagnostics.IBdoLog.Clone*
  commentId: Overload:BindOpen.System.Diagnostics.IBdoLog.Clone
  name: Clone
  nameWithType: IBdoLog.Clone
  fullName: BindOpen.System.Diagnostics.IBdoLog.Clone
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
shouldSkipMarkup: true
