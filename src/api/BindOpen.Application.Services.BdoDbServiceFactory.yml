### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Services.BdoDbServiceFactory
  commentId: T:BindOpen.Application.Services.BdoDbServiceFactory
  id: BdoDbServiceFactory
  parent: BindOpen.Application.Services
  children:
  - BindOpen.Application.Services.BdoDbServiceFactory.Create``1(BindOpen.Application.Scopes.IBdoScope,System.Func{BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoConnector},BindOpen.System.Diagnostics.IBdoLog)
  langs:
  - csharp
  - vb
  name: BdoDbServiceFactory
  nameWithType: BdoDbServiceFactory
  fullName: BindOpen.Application.Services.BdoDbServiceFactory
  type: Class
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Application.Services
  summary: "\nThis class represents a repository factory.\n"
  syntax:
    content: 'public static class BdoDbServiceFactory : Object'
    content.vb: >-
      Public Module BdoDbServiceFactory
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Application.Services.BdoDbServiceFactory.Create``1(BindOpen.Application.Scopes.IBdoScope,System.Func{BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoConnector},BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Application.Services.BdoDbServiceFactory.Create``1(BindOpen.Application.Scopes.IBdoScope,System.Func{BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoConnector},BindOpen.System.Diagnostics.IBdoLog)
  id: Create``1(BindOpen.Application.Scopes.IBdoScope,System.Func{BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoConnector},BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: BindOpen.Application.Services.BdoDbServiceFactory
  langs:
  - csharp
  - vb
  name: Create<T>(IBdoScope, Func<IBdoScope, IBdoLog, IBdoConnector>, IBdoLog)
  nameWithType: BdoDbServiceFactory.Create<T>(IBdoScope, Func<IBdoScope, IBdoLog, IBdoConnector>, IBdoLog)
  fullName: BindOpen.Application.Services.BdoDbServiceFactory.Create<T>(BindOpen.Application.Scopes.IBdoScope, System.Func<BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Extensions.Runtime.IBdoConnector>, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Application.Services
  summary: "\nCreates a new database service.\n"
  syntax:
    content: >-
      public static T Create<T>(this IBdoScope scope, Func<IBdoScope, IBdoLog, IBdoConnector> initializer, IBdoLog log = null)
          where T : IBdoDbService, new()
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
    - id: initializer
      type: System.Func{BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoConnector}
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns the log of the operation.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Create(Of T As {IBdoDbService, New})(scope As IBdoScope, initializer As Func(Of IBdoScope, IBdoLog, IBdoConnector), log As IBdoLog = Nothing) As T
  overload: BindOpen.Application.Services.BdoDbServiceFactory.Create*
  nameWithType.vb: BdoDbServiceFactory.Create(Of T)(IBdoScope, Func(Of IBdoScope, IBdoLog, IBdoConnector), IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Application.Services.BdoDbServiceFactory.Create(Of T)(BindOpen.Application.Scopes.IBdoScope, System.Func(Of BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Extensions.Runtime.IBdoConnector), BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Create(Of T)(IBdoScope, Func(Of IBdoScope, IBdoLog, IBdoConnector), IBdoLog)
references:
- uid: BindOpen.Application.Services
  commentId: N:BindOpen.Application.Services
  isExternal: true
  name: BindOpen.Application.Services
  nameWithType: BindOpen.Application.Services
  fullName: BindOpen.Application.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Application.Services.BdoDbServiceFactory.Create*
  commentId: Overload:BindOpen.Application.Services.BdoDbServiceFactory.Create
  isExternal: true
  name: Create
  nameWithType: BdoDbServiceFactory.Create
  fullName: BindOpen.Application.Services.BdoDbServiceFactory.Create
- uid: BindOpen.Application.Scopes.IBdoScope
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: System.Func{BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoConnector}
  commentId: '!:System.Func{BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoConnector}'
  definition: System.Func`3
  name: Func<IBdoScope, IBdoLog, IBdoConnector>
  nameWithType: Func<IBdoScope, IBdoLog, IBdoConnector>
  fullName: System.Func<BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Extensions.Runtime.IBdoConnector>
  nameWithType.vb: Func(Of IBdoScope, IBdoLog, IBdoConnector)
  fullName.vb: System.Func(Of BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Extensions.Runtime.IBdoConnector)
  name.vb: Func(Of IBdoScope, IBdoLog, IBdoConnector)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Runtime.IBdoConnector
    name: IBdoConnector
    nameWithType: IBdoConnector
    fullName: BindOpen.Extensions.Runtime.IBdoConnector
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Runtime.IBdoConnector
    name: IBdoConnector
    nameWithType: IBdoConnector
    fullName: BindOpen.Extensions.Runtime.IBdoConnector
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`3
  commentId: '!:System.Func`3'
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: System.Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
shouldSkipMarkup: true
