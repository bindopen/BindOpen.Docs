### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Rights.ApplicationPrivilege
  commentId: T:BindOpen.Application.Rights.ApplicationPrivilege
  id: ApplicationPrivilege
  parent: BindOpen.Application.Rights
  children:
  - BindOpen.Application.Rights.ApplicationPrivilege.#ctor
  - BindOpen.Application.Rights.ApplicationPrivilege.#ctor(System.String,System.String,BindOpen.Application.Rights.UserPermission[])
  - BindOpen.Application.Rights.ApplicationPrivilege.DefaultPermissions
  - BindOpen.Application.Rights.ApplicationPrivilege.EntityKind
  - BindOpen.Application.Rights.ApplicationPrivilege.EntityName
  - BindOpen.Application.Rights.ApplicationPrivilege.EntityUniqueName
  - BindOpen.Application.Rights.ApplicationPrivilege.GetDefaultPermission(System.String)
  - BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(BindOpen.Application.Rights.UserPermission)
  - BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(System.String,System.Boolean)
  - BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(System.String,System.String)
  langs:
  - csharp
  - vb
  name: ApplicationPrivilege
  nameWithType: ApplicationPrivilege
  fullName: BindOpen.Application.Rights.ApplicationPrivilege
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nThis structure respresents a right granted by an application.\n"
  syntax:
    content: 'public class ApplicationPrivilege : DataItem'
    content.vb: >-
      Public Class ApplicationPrivilege
          Inherits DataItem
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Application.Rights.ApplicationPrivilege.#ctor
  commentId: M:BindOpen.Application.Rights.ApplicationPrivilege.#ctor
  id: '#ctor'
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: ApplicationPrivilege()
  nameWithType: ApplicationPrivilege.ApplicationPrivilege()
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.ApplicationPrivilege()
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nCreates a new instance of the ApplicationPrivilege class.\n"
  syntax:
    content: public ApplicationPrivilege()
    content.vb: Public Sub New
  overload: BindOpen.Application.Rights.ApplicationPrivilege.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.ApplicationPrivilege.#ctor(System.String,System.String,BindOpen.Application.Rights.UserPermission[])
  commentId: M:BindOpen.Application.Rights.ApplicationPrivilege.#ctor(System.String,System.String,BindOpen.Application.Rights.UserPermission[])
  id: '#ctor(System.String,System.String,BindOpen.Application.Rights.UserPermission[])'
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: ApplicationPrivilege(String, String, UserPermission[])
  nameWithType: ApplicationPrivilege.ApplicationPrivilege(String, String, UserPermission[])
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.ApplicationPrivilege(System.String, System.String, BindOpen.Application.Rights.UserPermission[])
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nCreates a new instance of the ActionPermission class.\n"
  syntax:
    content: public ApplicationPrivilege(string entityKind, string entityName, params UserPermission[] defaultPermissions)
    parameters:
    - id: entityKind
      type: System.String
      description: The entity kind to consider.
    - id: entityName
      type: System.String
      description: The entity name to consider.
    - id: defaultPermissions
      type: BindOpen.Application.Rights.UserPermission[]
      description: The default permissions to add.
    content.vb: Public Sub New(entityKind As String, entityName As String, ParamArray defaultPermissions As UserPermission())
  overload: BindOpen.Application.Rights.ApplicationPrivilege.#ctor*
  nameWithType.vb: ApplicationPrivilege.ApplicationPrivilege(String, String, UserPermission())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Rights.ApplicationPrivilege.ApplicationPrivilege(System.String, System.String, BindOpen.Application.Rights.UserPermission())
  name.vb: ApplicationPrivilege(String, String, UserPermission())
- uid: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(BindOpen.Application.Rights.UserPermission)
  commentId: M:BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(BindOpen.Application.Rights.UserPermission)
  id: SetDefaultPermission(BindOpen.Application.Rights.UserPermission)
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: SetDefaultPermission(UserPermission)
  nameWithType: ApplicationPrivilege.SetDefaultPermission(UserPermission)
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(BindOpen.Application.Rights.UserPermission)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nSets the specified permission.\n"
  syntax:
    content: public void SetDefaultPermission(UserPermission permission)
    parameters:
    - id: permission
      type: BindOpen.Application.Rights.UserPermission
      description: The action rule.
    content.vb: Public Sub SetDefaultPermission(permission As UserPermission)
  overload: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(System.String,System.Boolean)
  commentId: M:BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(System.String,System.Boolean)
  id: SetDefaultPermission(System.String,System.Boolean)
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: SetDefaultPermission(String, Boolean)
  nameWithType: ApplicationPrivilege.SetDefaultPermission(String, Boolean)
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(System.String, System.Boolean)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nSets the specified default permission.\n"
  syntax:
    content: public void SetDefaultPermission(string actionName, bool value)
    parameters:
    - id: actionName
      type: System.String
      description: Name of the action.
    - id: value
      type: System.Boolean
      description: Value.
    content.vb: Public Sub SetDefaultPermission(actionName As String, value As Boolean)
  overload: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(System.String,System.String)
  commentId: M:BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(System.String,System.String)
  id: SetDefaultPermission(System.String,System.String)
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: SetDefaultPermission(String, String)
  nameWithType: ApplicationPrivilege.SetDefaultPermission(String, String)
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission(System.String, System.String)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nSets the specified default permission.\n"
  syntax:
    content: public void SetDefaultPermission(string actionName, string stringValue)
    parameters:
    - id: actionName
      type: System.String
      description: Name of the action to consider.
    - id: stringValue
      type: System.String
      description: String value to consider.
    content.vb: Public Sub SetDefaultPermission(actionName As String, stringValue As String)
  overload: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.ApplicationPrivilege.GetDefaultPermission(System.String)
  commentId: M:BindOpen.Application.Rights.ApplicationPrivilege.GetDefaultPermission(System.String)
  id: GetDefaultPermission(System.String)
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: GetDefaultPermission(String)
  nameWithType: ApplicationPrivilege.GetDefaultPermission(String)
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.GetDefaultPermission(System.String)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nReturn the default privilege of this instance.\n"
  syntax:
    content: public UserPermission GetDefaultPermission(string actionName)
    parameters:
    - id: actionName
      type: System.String
      description: Action name to consider.
    return:
      type: BindOpen.Application.Rights.UserPermission
      description: The specified action rule of this instance.
    content.vb: Public Function GetDefaultPermission(actionName As String) As UserPermission
  overload: BindOpen.Application.Rights.ApplicationPrivilege.GetDefaultPermission*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.ApplicationPrivilege.EntityUniqueName
  commentId: P:BindOpen.Application.Rights.ApplicationPrivilege.EntityUniqueName
  id: EntityUniqueName
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: EntityUniqueName
  nameWithType: ApplicationPrivilege.EntityUniqueName
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.EntityUniqueName
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nEntity unique ID of this instance.\n"
  syntax:
    content: public string EntityUniqueName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property EntityUniqueName As String
  overload: BindOpen.Application.Rights.ApplicationPrivilege.EntityUniqueName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Application.Rights.ApplicationPrivilege.EntityKind
  commentId: P:BindOpen.Application.Rights.ApplicationPrivilege.EntityKind
  id: EntityKind
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: EntityKind
  nameWithType: ApplicationPrivilege.EntityKind
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.EntityKind
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nEntity kind of this instance.\n"
  syntax:
    content: public string EntityKind { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property EntityKind As String
  overload: BindOpen.Application.Rights.ApplicationPrivilege.EntityKind*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.ApplicationPrivilege.EntityName
  commentId: P:BindOpen.Application.Rights.ApplicationPrivilege.EntityName
  id: EntityName
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: EntityName
  nameWithType: ApplicationPrivilege.EntityName
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.EntityName
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nEntity name of this instance.\n"
  syntax:
    content: public string EntityName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property EntityName As String
  overload: BindOpen.Application.Rights.ApplicationPrivilege.EntityName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Rights.ApplicationPrivilege.DefaultPermissions
  commentId: P:BindOpen.Application.Rights.ApplicationPrivilege.DefaultPermissions
  id: DefaultPermissions
  parent: BindOpen.Application.Rights.ApplicationPrivilege
  langs:
  - csharp
  - vb
  name: DefaultPermissions
  nameWithType: ApplicationPrivilege.DefaultPermissions
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.DefaultPermissions
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Rights
  summary: "\nDefault privileges of this instance.\n"
  syntax:
    content: public List<UserPermission> DefaultPermissions { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Application.Rights.UserPermission}
    content.vb: Public Property DefaultPermissions As List(Of UserPermission)
  overload: BindOpen.Application.Rights.ApplicationPrivilege.DefaultPermissions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: BindOpen.Application.Rights
  commentId: N:BindOpen.Application.Rights
  isExternal: true
  name: BindOpen.Application.Rights
  nameWithType: BindOpen.Application.Rights
  fullName: BindOpen.Application.Rights
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Application.Rights.ApplicationPrivilege.#ctor*
  commentId: Overload:BindOpen.Application.Rights.ApplicationPrivilege.#ctor
  isExternal: true
  name: ApplicationPrivilege
  nameWithType: ApplicationPrivilege.ApplicationPrivilege
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.ApplicationPrivilege
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Application.Rights.UserPermission[]
  isExternal: true
  name: UserPermission[]
  nameWithType: UserPermission[]
  fullName: BindOpen.Application.Rights.UserPermission[]
  nameWithType.vb: UserPermission()
  fullName.vb: BindOpen.Application.Rights.UserPermission()
  name.vb: UserPermission()
  spec.csharp:
  - uid: BindOpen.Application.Rights.UserPermission
    name: UserPermission
    nameWithType: UserPermission
    fullName: BindOpen.Application.Rights.UserPermission
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Application.Rights.UserPermission
    name: UserPermission
    nameWithType: UserPermission
    fullName: BindOpen.Application.Rights.UserPermission
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission*
  commentId: Overload:BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission
  isExternal: true
  name: SetDefaultPermission
  nameWithType: ApplicationPrivilege.SetDefaultPermission
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.SetDefaultPermission
- uid: BindOpen.Application.Rights.UserPermission
  commentId: T:BindOpen.Application.Rights.UserPermission
  parent: BindOpen.Application.Rights
  isExternal: true
  name: UserPermission
  nameWithType: UserPermission
  fullName: BindOpen.Application.Rights.UserPermission
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Application.Rights.ApplicationPrivilege.GetDefaultPermission*
  commentId: Overload:BindOpen.Application.Rights.ApplicationPrivilege.GetDefaultPermission
  isExternal: true
  name: GetDefaultPermission
  nameWithType: ApplicationPrivilege.GetDefaultPermission
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.GetDefaultPermission
- uid: BindOpen.Application.Rights.ApplicationPrivilege.EntityUniqueName*
  commentId: Overload:BindOpen.Application.Rights.ApplicationPrivilege.EntityUniqueName
  isExternal: true
  name: EntityUniqueName
  nameWithType: ApplicationPrivilege.EntityUniqueName
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.EntityUniqueName
- uid: BindOpen.Application.Rights.ApplicationPrivilege.EntityKind*
  commentId: Overload:BindOpen.Application.Rights.ApplicationPrivilege.EntityKind
  isExternal: true
  name: EntityKind
  nameWithType: ApplicationPrivilege.EntityKind
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.EntityKind
- uid: BindOpen.Application.Rights.ApplicationPrivilege.EntityName*
  commentId: Overload:BindOpen.Application.Rights.ApplicationPrivilege.EntityName
  isExternal: true
  name: EntityName
  nameWithType: ApplicationPrivilege.EntityName
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.EntityName
- uid: BindOpen.Application.Rights.ApplicationPrivilege.DefaultPermissions*
  commentId: Overload:BindOpen.Application.Rights.ApplicationPrivilege.DefaultPermissions
  isExternal: true
  name: DefaultPermissions
  nameWithType: ApplicationPrivilege.DefaultPermissions
  fullName: BindOpen.Application.Rights.ApplicationPrivilege.DefaultPermissions
- uid: System.Collections.Generic.List{BindOpen.Application.Rights.UserPermission}
  commentId: '!:System.Collections.Generic.List{BindOpen.Application.Rights.UserPermission}'
  definition: System.Collections.Generic.List`1
  name: List<UserPermission>
  nameWithType: List<UserPermission>
  fullName: System.Collections.Generic.List<BindOpen.Application.Rights.UserPermission>
  nameWithType.vb: List(Of UserPermission)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Application.Rights.UserPermission)
  name.vb: List(Of UserPermission)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Rights.UserPermission
    name: UserPermission
    nameWithType: UserPermission
    fullName: BindOpen.Application.Rights.UserPermission
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Rights.UserPermission
    name: UserPermission
    nameWithType: UserPermission
    fullName: BindOpen.Application.Rights.UserPermission
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
