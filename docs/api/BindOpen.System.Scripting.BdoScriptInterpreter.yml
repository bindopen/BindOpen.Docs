### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Scripting.BdoScriptInterpreter
  commentId: T:BindOpen.System.Scripting.BdoScriptInterpreter
  id: BdoScriptInterpreter
  parent: BindOpen.System.Scripting
  children:
  - BindOpen.System.Scripting.BdoScriptInterpreter.#ctor
  - BindOpen.System.Scripting.BdoScriptInterpreter.#ctor(BindOpen.Application.Scopes.IBdoScope)
  - BindOpen.System.Scripting.BdoScriptInterpreter.Dispose(System.Boolean)
  - BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitions
  - BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  - BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  - BindOpen.System.Scripting.BdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Scripting.BdoScriptInterpreter.Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Scripting.BdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  langs:
  - csharp
  - vb
  name: BdoScriptInterpreter
  nameWithType: BdoScriptInterpreter
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: BdoScriptInterpreter
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 21
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nThis class represents a script interpreter. A script interpreter allows to interpret a script\nusing script dictionnaries and data context, providing a log for the interpretation task.\n"
  example: []
  syntax:
    content: 'public class BdoScriptInterpreter : DataItem, IBdoScriptInterpreter, IDataItem, ICloneable, IDisposable'
    content.vb: >-
      Public Class BdoScriptInterpreter
          Inherits DataItem
          Implements IBdoScriptInterpreter, IDataItem, ICloneable, IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - BindOpen.Data.Items.DataItem
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - BindOpen.Data.Items.DataItem.Clone
  - BindOpen.Data.Items.DataItem.Clone``1
  - BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Dispose
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - BindOpen.System.Scripting.BdoScriptInterpreter.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.System.Scripting.BdoScriptInterpreter})
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.#ctor
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.#ctor
  id: '#ctor'
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: BdoScriptInterpreter()
  nameWithType: BdoScriptInterpreter.BdoScriptInterpreter()
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.BdoScriptInterpreter()
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 44
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nInstantiates a new instance of the BdoScriptInterpreter class.\n"
  example: []
  syntax:
    content: public BdoScriptInterpreter()
    content.vb: Public Sub New
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.#ctor(BindOpen.Application.Scopes.IBdoScope)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.#ctor(BindOpen.Application.Scopes.IBdoScope)
  id: '#ctor(BindOpen.Application.Scopes.IBdoScope)'
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: BdoScriptInterpreter(IBdoScope)
  nameWithType: BdoScriptInterpreter.BdoScriptInterpreter(IBdoScope)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.BdoScriptInterpreter(BindOpen.Application.Scopes.IBdoScope)
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 52
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nInstantiates a new instance of the BdoScriptInterpreter class.\n"
  example: []
  syntax:
    content: public BdoScriptInterpreter(IBdoScope scope)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The application scope used to interprete.
    content.vb: Public Sub New(scope As IBdoScope)
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: Evaluate(IDataExpression, out String, IBdoScriptVariableSet, IBdoLog)
  nameWithType: BdoScriptInterpreter.Evaluate(IDataExpression, out String, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression, out System.String, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Evaluate
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 75
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nEvaluates the specified data expression.\n"
  example: []
  syntax:
    content: public object Evaluate(IDataExpression dataExpression, out string resultScript, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: dataExpression
      type: BindOpen.Data.Expression.IDataExpression
      description: The data expression to consider.
    - id: resultScript
      type: System.String
      description: The result script to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.Object
      description: Literal or script value according to the specified default mode.
    content.vb: Public Function Evaluate(dataExpression As IDataExpression, ByRef resultScript As String, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As Object
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: BdoScriptInterpreter.Evaluate(IDataExpression, ByRef String, IBdoScriptVariableSet, IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression, ByRef System.String, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Evaluate(IDataExpression, ByRef String, IBdoScriptVariableSet, IBdoLog)
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: Evaluate(IDataExpression, IBdoScriptVariableSet, IBdoLog)
  nameWithType: BdoScriptInterpreter.Evaluate(IDataExpression, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Evaluate
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 94
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nEvaluates the specified data expression.\n"
  example: []
  syntax:
    content: public object Evaluate(IDataExpression dataExpression, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: dataExpression
      type: BindOpen.Data.Expression.IDataExpression
      description: The data expression to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.Object
      description: Literal or script value according to the specified default mode.
    content.vb: Public Function Evaluate(dataExpression As IDataExpression, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As Object
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: Evaluate(String, DataExpressionKind, out String, IBdoScriptVariableSet, IBdoLog)
  nameWithType: BdoScriptInterpreter.Evaluate(String, DataExpressionKind, out String, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String, BindOpen.Data.Expression.DataExpressionKind, out System.String, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Evaluate
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 112
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nEvaluates the specified script using the defined script words of this instance\nof the specified libraries.\n"
  example: []
  syntax:
    content: public object Evaluate(string script, DataExpressionKind dataExpressionKind, out string resultScript, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: script
      type: System.String
      description: The script to consider.
    - id: dataExpressionKind
      type: BindOpen.Data.Expression.DataExpressionKind
      description: The expression kind to consider.
    - id: resultScript
      type: System.String
      description: The result script to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to use.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.Object
      description: The log of the interpretation task.
    content.vb: Public Function Evaluate(script As String, dataExpressionKind As DataExpressionKind, ByRef resultScript As String, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As Object
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: BdoScriptInterpreter.Evaluate(String, DataExpressionKind, ByRef String, IBdoScriptVariableSet, IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String, BindOpen.Data.Expression.DataExpressionKind, ByRef System.String, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Evaluate(String, DataExpressionKind, ByRef String, IBdoScriptVariableSet, IBdoLog)
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: Evaluate(String, DataExpressionKind, IBdoScriptVariableSet, IBdoLog)
  nameWithType: BdoScriptInterpreter.Evaluate(String, DataExpressionKind, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate(System.String, BindOpen.Data.Expression.DataExpressionKind, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Evaluate
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 132
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nEvaluates the specified script using the defined script words of this instance\nof the specified libraries.\n"
  example: []
  syntax:
    content: public object Evaluate(string script, DataExpressionKind dataExpressionKind, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: script
      type: System.String
      description: The script to consider.
    - id: dataExpressionKind
      type: BindOpen.Data.Expression.DataExpressionKind
      description: The expression kind to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to use.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.Object
      description: The log of the interpretation task.
    content.vb: Public Function Evaluate(script As String, dataExpressionKind As DataExpressionKind, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As Object
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: Interprete(IDataExpression, IBdoScriptVariableSet, IBdoLog)
  nameWithType: BdoScriptInterpreter.Interprete(IDataExpression, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Interprete
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 152
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nInterprets the specified script using the defined script words of this instance\nof the specified libraries.\n"
  example: []
  syntax:
    content: public string Interprete(IDataExpression dataExpression, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: dataExpression
      type: BindOpen.Data.Expression.IDataExpression
      description: The data expression to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.String
      description: The log of the interpretation task.
    content.vb: Public Function Interprete(dataExpression As IDataExpression, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As String
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.Interprete*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: Interprete(String, DataExpressionKind, IBdoScriptVariableSet, IBdoLog)
  nameWithType: BdoScriptInterpreter.Interprete(String, DataExpressionKind, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Interprete(System.String, BindOpen.Data.Expression.DataExpressionKind, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Interprete
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 170
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nInterprets the specified script using the defined script words of this instance\nof the specified libraries.\n"
  example: []
  syntax:
    content: public string Interprete(string script, DataExpressionKind dataExpressionKind, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: script
      type: System.String
      description: The script to consider.
    - id: dataExpressionKind
      type: BindOpen.Data.Expression.DataExpressionKind
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to use.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.String
      description: The log of the interpretation task.
    content.vb: Public Function Interprete(script As String, dataExpressionKind As DataExpressionKind, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As String
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.Interprete*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  id: FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: FindNextScriptword(ref String, IBdoScriptword, ref Int32, Int32, IBdoScriptVariableSet, Boolean, IBdoLog)
  nameWithType: BdoScriptInterpreter.FindNextScriptword(ref String, IBdoScriptword, ref Int32, Int32, IBdoScriptVariableSet, Boolean, IBdoLog)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword(ref System.String, BindOpen.Extensions.Runtime.IBdoScriptword, ref System.Int32, System.Int32, BindOpen.System.Scripting.IBdoScriptVariableSet, System.Boolean, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: FindNextScriptword
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 347
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nFinds the next script words at the specified index.\n"
  example: []
  syntax:
    content: public IBdoScriptword FindNextScriptword(ref string script, IBdoScriptword parentScriptword, ref int index, int offsetIndex, IBdoScriptVariableSet scriptVariableSet = null, bool isSimulationModeOn = false, IBdoLog log = null)
    parameters:
    - id: script
      type: System.String
      description: The script to consider.
    - id: parentScriptword
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: The parent script word to consider.
    - id: index
      type: System.Int32
      description: The index to consider.
    - id: offsetIndex
      type: System.Int32
      description: The offset index to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    - id: isSimulationModeOn
      type: System.Boolean
      description: Indicates whether the simulation mode is on.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: ''
    return:
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: ''
    content.vb: Public Function FindNextScriptword(ByRef script As String, parentScriptword As IBdoScriptword, ByRef index As Integer, offsetIndex As Integer, scriptVariableSet As IBdoScriptVariableSet = Nothing, isSimulationModeOn As Boolean = False, log As IBdoLog = Nothing) As IBdoScriptword
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: BdoScriptInterpreter.FindNextScriptword(ByRef String, IBdoScriptword, ByRef Int32, Int32, IBdoScriptVariableSet, Boolean, IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword(ByRef System.String, BindOpen.Extensions.Runtime.IBdoScriptword, ByRef System.Int32, System.Int32, BindOpen.System.Scripting.IBdoScriptVariableSet, System.Boolean, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: FindNextScriptword(ByRef String, IBdoScriptword, ByRef Int32, Int32, IBdoScriptVariableSet, Boolean, IBdoLog)
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  id: IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: IsWordMatching(IBdoScriptword, IBdoScriptwordDefinition)
  nameWithType: BdoScriptInterpreter.IsWordMatching(IBdoScriptword, IBdoScriptwordDefinition)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword, BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IsWordMatching
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 672
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nDetermines whether the specified script word corresponds to the specified definition.\n"
  example: []
  syntax:
    content: public bool IsWordMatching(IBdoScriptword scriptWord, IBdoScriptwordDefinition scriptWordDefinition)
    parameters:
    - id: scriptWord
      type: BindOpen.Extensions.Runtime.IBdoScriptword
      description: The script word to consider.
    - id: scriptWordDefinition
      type: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
      description: The script word definition to consider.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsWordMatching(scriptWord As IBdoScriptword, scriptWordDefinition As IBdoScriptwordDefinition) As Boolean
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.IsWordMatching*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitions
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitions
  id: GetDefinitions
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: GetDefinitions()
  nameWithType: BdoScriptInterpreter.GetDefinitions()
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitions()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetDefinitions
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 735
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nGets the script word definitions of this instance.\n"
  example: []
  syntax:
    content: public Dictionary<string, IBdoScriptwordDefinition> GetDefinitions()
    return:
      type: System.Collections.Generic.Dictionary{System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition}
      description: Returns the script word definitions of this instance.
    content.vb: Public Function GetDefinitions As Dictionary(Of String, IBdoScriptwordDefinition)
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitions*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitions
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  id: GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: GetDefinitionsWithExactName(String, IBdoScriptwordDefinition)
  nameWithType: BdoScriptInterpreter.GetDefinitionsWithExactName(String, IBdoScriptwordDefinition)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithExactName(System.String, BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetDefinitionsWithExactName
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 743
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nReturns the word definitions with the specified name.\n"
  example: []
  syntax:
    content: public Dictionary<string, IBdoScriptwordDefinition> GetDefinitionsWithExactName(string name, IBdoScriptwordDefinition parentDefinition = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the script words to return.
    - id: parentDefinition
      type: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
      description: The parent definition.
    return:
      type: System.Collections.Generic.Dictionary{System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition}
      description: The script words with the specified name.
    content.vb: Public Function GetDefinitionsWithExactName(name As String, parentDefinition As IBdoScriptwordDefinition = Nothing) As Dictionary(Of String, IBdoScriptwordDefinition)
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithExactName*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  id: GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: GetDefinitionsWithApproximativeName(String, IBdoScriptwordDefinition)
  nameWithType: BdoScriptInterpreter.GetDefinitionsWithApproximativeName(String, IBdoScriptwordDefinition)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String, BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetDefinitionsWithApproximativeName
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 774
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nGets the word definitions approximatively with the specified name.\n"
  example: []
  syntax:
    content: public Dictionary<string, IBdoScriptwordDefinition> GetDefinitionsWithApproximativeName(string name, IBdoScriptwordDefinition parentDefinition = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the script words to return.
    - id: parentDefinition
      type: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
      description: The parent definition.
    return:
      type: System.Collections.Generic.Dictionary{System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition}
      description: The script words with the specified name.
    content.vb: Public Function GetDefinitionsWithApproximativeName(name As String, parentDefinition As IBdoScriptwordDefinition = Nothing) As Dictionary(Of String, IBdoScriptwordDefinition)
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithApproximativeName*
  implements:
  - BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Dispose(System.Boolean)
  commentId: M:BindOpen.System.Scripting.BdoScriptInterpreter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: BindOpen.System.Scripting.BdoScriptInterpreter
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: BdoScriptInterpreter.Dispose(Boolean)
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Dispose
    path: ../src/BindOpen.Core/System/Scripting/BdoScriptInterpreter.cs
    startLine: 809
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Scripting
  summary: "\nDisposes this instance. \n"
  example: []
  syntax:
    content: protected override void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(isDisposing As Boolean)
  overridden: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  overload: BindOpen.System.Scripting.BdoScriptInterpreter.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: BindOpen.System.Scripting
  commentId: N:BindOpen.System.Scripting
  name: BindOpen.System.Scripting
  nameWithType: BindOpen.System.Scripting
  fullName: BindOpen.System.Scripting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: BindOpen.Data.Items.DataItem
  commentId: T:BindOpen.Data.Items.DataItem
  parent: BindOpen.Data.Items
  name: DataItem
  nameWithType: DataItem
  fullName: BindOpen.Data.Items.DataItem
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter
  commentId: T:BindOpen.System.Scripting.IBdoScriptInterpreter
  parent: BindOpen.System.Scripting
  name: IBdoScriptInterpreter
  nameWithType: IBdoScriptInterpreter
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  commentId: M:BindOpen.Data.Items.DataItem.InitializeLifetimeService
  parent: BindOpen.Data.Items.DataItem
  name: InitializeLifetimeService()
  nameWithType: DataItem.InitializeLifetimeService()
  fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone
  commentId: M:BindOpen.Data.Items.DataItem.Clone
  parent: BindOpen.Data.Items.DataItem
  name: Clone()
  nameWithType: DataItem.Clone()
  fullName: BindOpen.Data.Items.DataItem.Clone()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone
    name: Clone
    nameWithType: DataItem.Clone
    fullName: BindOpen.Data.Items.DataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone
    name: Clone
    nameWithType: DataItem.Clone
    fullName: BindOpen.Data.Items.DataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone``1
  commentId: M:BindOpen.Data.Items.DataItem.Clone``1
  parent: BindOpen.Data.Items.DataItem
  name: Clone<T>()
  nameWithType: DataItem.Clone<T>()
  fullName: BindOpen.Data.Items.DataItem.Clone<T>()
  nameWithType.vb: DataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.DataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone<T>
    nameWithType: DataItem.Clone<T>
    fullName: BindOpen.Data.Items.DataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone(Of T)
    nameWithType: DataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.DataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: DataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: DataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: DataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: DataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: DataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose
  commentId: M:BindOpen.Data.Items.DataItem.Dispose
  parent: BindOpen.Data.Items.DataItem
  name: Dispose()
  nameWithType: DataItem.Dispose()
  fullName: BindOpen.Data.Items.DataItem.Dispose()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.System.Scripting.BdoScriptInterpreter})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  name: Using<BdoScriptInterpreter>(Action<BdoScriptInterpreter>)
  nameWithType: ObjectHelper.Using<BdoScriptInterpreter>(Action<BdoScriptInterpreter>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.System.Scripting.BdoScriptInterpreter>(System.Action<BindOpen.System.Scripting.BdoScriptInterpreter>)
  nameWithType.vb: ObjectHelper.Using(Of BdoScriptInterpreter)(Action(Of BdoScriptInterpreter))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.System.Scripting.BdoScriptInterpreter)(System.Action(Of BindOpen.System.Scripting.BdoScriptInterpreter))
  name.vb: Using(Of BdoScriptInterpreter)(Action(Of BdoScriptInterpreter))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using<BdoScriptInterpreter>
    nameWithType: ObjectHelper.Using<BdoScriptInterpreter>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.System.Scripting.BdoScriptInterpreter>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Scripting.BdoScriptInterpreter
    name: BdoScriptInterpreter
    nameWithType: BdoScriptInterpreter
    fullName: BindOpen.System.Scripting.BdoScriptInterpreter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using(Of BdoScriptInterpreter)
    nameWithType: ObjectHelper.Using(Of BdoScriptInterpreter)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.System.Scripting.BdoScriptInterpreter)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Scripting.BdoScriptInterpreter
    name: BdoScriptInterpreter
    nameWithType: BdoScriptInterpreter
    fullName: BindOpen.System.Scripting.BdoScriptInterpreter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  isExternal: true
  name: Using<T>(T, Action<T>)
  nameWithType: ObjectHelper.Using<T>(T, Action<T>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>(T, System.Action<T>)
  nameWithType.vb: ObjectHelper.Using(Of T)(T, Action(Of T))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)(T, System.Action(Of T))
  name.vb: Using(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using<T>
    nameWithType: ObjectHelper.Using<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using(Of T)
    nameWithType: ObjectHelper.Using(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.#ctor*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.#ctor
  name: BdoScriptInterpreter
  nameWithType: BdoScriptInterpreter.BdoScriptInterpreter
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.BdoScriptInterpreter
- uid: BindOpen.Application.Scopes.IBdoScope
  commentId: T:BindOpen.Application.Scopes.IBdoScope
  parent: BindOpen.Application.Scopes
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate
  name: Evaluate
  nameWithType: BdoScriptInterpreter.Evaluate
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Evaluate
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  isExternal: true
  name: Evaluate(IDataExpression, String, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IBdoScriptInterpreter.Evaluate(IDataExpression, String, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression, System.String, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Evaluate
    nameWithType: IBdoScriptInterpreter.Evaluate
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Expression.IDataExpression
    name: IDataExpression
    nameWithType: IDataExpression
    fullName: BindOpen.Data.Expression.IDataExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Evaluate
    nameWithType: IBdoScriptInterpreter.Evaluate
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Expression.IDataExpression
    name: IDataExpression
    nameWithType: IDataExpression
    fullName: BindOpen.Data.Expression.IDataExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Expression.IDataExpression
  commentId: T:BindOpen.Data.Expression.IDataExpression
  parent: BindOpen.Data.Expression
  name: IDataExpression
  nameWithType: IDataExpression
  fullName: BindOpen.Data.Expression.IDataExpression
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  commentId: T:BindOpen.System.Scripting.IBdoScriptVariableSet
  parent: BindOpen.System.Scripting
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Data.Expression
  commentId: N:BindOpen.Data.Expression
  name: BindOpen.Data.Expression
  nameWithType: BindOpen.Data.Expression
  fullName: BindOpen.Data.Expression
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  name: Evaluate(IDataExpression, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IBdoScriptInterpreter.Evaluate(IDataExpression, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Evaluate
    nameWithType: IBdoScriptInterpreter.Evaluate
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Expression.IDataExpression
    name: IDataExpression
    nameWithType: IDataExpression
    fullName: BindOpen.Data.Expression.IDataExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Evaluate
    nameWithType: IBdoScriptInterpreter.Evaluate
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Expression.IDataExpression
    name: IDataExpression
    nameWithType: IDataExpression
    fullName: BindOpen.Data.Expression.IDataExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  isExternal: true
  name: Evaluate(String, DataExpressionKind, String, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IBdoScriptInterpreter.Evaluate(String, DataExpressionKind, String, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String, BindOpen.Data.Expression.DataExpressionKind, System.String, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Evaluate
    nameWithType: IBdoScriptInterpreter.Evaluate
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Expression.DataExpressionKind
    name: DataExpressionKind
    nameWithType: DataExpressionKind
    fullName: BindOpen.Data.Expression.DataExpressionKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,System.String@,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Evaluate
    nameWithType: IBdoScriptInterpreter.Evaluate
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Expression.DataExpressionKind
    name: DataExpressionKind
    nameWithType: DataExpressionKind
    fullName: BindOpen.Data.Expression.DataExpressionKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Expression.DataExpressionKind
  commentId: T:BindOpen.Data.Expression.DataExpressionKind
  parent: BindOpen.Data.Expression
  name: DataExpressionKind
  nameWithType: DataExpressionKind
  fullName: BindOpen.Data.Expression.DataExpressionKind
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  isExternal: true
  name: Evaluate(String, DataExpressionKind, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IBdoScriptInterpreter.Evaluate(String, DataExpressionKind, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String, BindOpen.Data.Expression.DataExpressionKind, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Evaluate
    nameWithType: IBdoScriptInterpreter.Evaluate
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Expression.DataExpressionKind
    name: DataExpressionKind
    nameWithType: DataExpressionKind
    fullName: BindOpen.Data.Expression.DataExpressionKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Evaluate
    nameWithType: IBdoScriptInterpreter.Evaluate
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Expression.DataExpressionKind
    name: DataExpressionKind
    nameWithType: DataExpressionKind
    fullName: BindOpen.Data.Expression.DataExpressionKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Interprete*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.Interprete
  name: Interprete
  nameWithType: BdoScriptInterpreter.Interprete
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Interprete
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  name: Interprete(IDataExpression, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IBdoScriptInterpreter.Interprete(IDataExpression, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Interprete
    nameWithType: IBdoScriptInterpreter.Interprete
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Expression.IDataExpression
    name: IDataExpression
    nameWithType: IDataExpression
    fullName: BindOpen.Data.Expression.IDataExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(BindOpen.Data.Expression.IDataExpression,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Interprete
    nameWithType: IBdoScriptInterpreter.Interprete
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Expression.IDataExpression
    name: IDataExpression
    nameWithType: IDataExpression
    fullName: BindOpen.Data.Expression.IDataExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  isExternal: true
  name: Interprete(String, DataExpressionKind, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IBdoScriptInterpreter.Interprete(String, DataExpressionKind, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(System.String, BindOpen.Data.Expression.DataExpressionKind, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Interprete
    nameWithType: IBdoScriptInterpreter.Interprete
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Expression.DataExpressionKind
    name: DataExpressionKind
    nameWithType: DataExpressionKind
    fullName: BindOpen.Data.Expression.DataExpressionKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete(System.String,BindOpen.Data.Expression.DataExpressionKind,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: Interprete
    nameWithType: IBdoScriptInterpreter.Interprete
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.Interprete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Expression.DataExpressionKind
    name: DataExpressionKind
    nameWithType: DataExpressionKind
    fullName: BindOpen.Data.Expression.DataExpressionKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword
  name: FindNextScriptword
  nameWithType: BdoScriptInterpreter.FindNextScriptword
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.FindNextScriptword
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  isExternal: true
  name: FindNextScriptword(String, IBdoScriptword, Int32, Int32, IBdoScriptVariableSet, Boolean, IBdoLog)
  nameWithType: IBdoScriptInterpreter.FindNextScriptword(String, IBdoScriptword, Int32, Int32, IBdoScriptVariableSet, Boolean, IBdoLog)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.FindNextScriptword(System.String, BindOpen.Extensions.Runtime.IBdoScriptword, System.Int32, System.Int32, BindOpen.System.Scripting.IBdoScriptVariableSet, System.Boolean, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
    name: FindNextScriptword
    nameWithType: IBdoScriptInterpreter.FindNextScriptword
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.FindNextScriptword
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Runtime.IBdoScriptword
    name: IBdoScriptword
    nameWithType: IBdoScriptword
    fullName: BindOpen.Extensions.Runtime.IBdoScriptword
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.FindNextScriptword(System.String@,BindOpen.Extensions.Runtime.IBdoScriptword,System.Int32@,System.Int32,BindOpen.System.Scripting.IBdoScriptVariableSet,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
    name: FindNextScriptword
    nameWithType: IBdoScriptInterpreter.FindNextScriptword
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.FindNextScriptword
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Runtime.IBdoScriptword
    name: IBdoScriptword
    nameWithType: IBdoScriptword
    fullName: BindOpen.Extensions.Runtime.IBdoScriptword
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Runtime.IBdoScriptword
  commentId: T:BindOpen.Extensions.Runtime.IBdoScriptword
  parent: BindOpen.Extensions.Runtime
  name: IBdoScriptword
  nameWithType: IBdoScriptword
  fullName: BindOpen.Extensions.Runtime.IBdoScriptword
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Extensions.Runtime
  commentId: N:BindOpen.Extensions.Runtime
  name: BindOpen.Extensions.Runtime
  nameWithType: BindOpen.Extensions.Runtime
  fullName: BindOpen.Extensions.Runtime
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.IsWordMatching*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.IsWordMatching
  name: IsWordMatching
  nameWithType: BdoScriptInterpreter.IsWordMatching
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.IsWordMatching
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  name: IsWordMatching(IBdoScriptword, IBdoScriptwordDefinition)
  nameWithType: IBdoScriptInterpreter.IsWordMatching(IBdoScriptword, IBdoScriptwordDefinition)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword, BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
    name: IsWordMatching
    nameWithType: IBdoScriptInterpreter.IsWordMatching
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.IsWordMatching
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Runtime.IBdoScriptword
    name: IBdoScriptword
    nameWithType: IBdoScriptword
    fullName: BindOpen.Extensions.Runtime.IBdoScriptword
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
    name: IBdoScriptwordDefinition
    nameWithType: IBdoScriptwordDefinition
    fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Runtime.IBdoScriptword,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
    name: IsWordMatching
    nameWithType: IBdoScriptInterpreter.IsWordMatching
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.IsWordMatching
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Runtime.IBdoScriptword
    name: IBdoScriptword
    nameWithType: IBdoScriptword
    fullName: BindOpen.Extensions.Runtime.IBdoScriptword
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
    name: IBdoScriptwordDefinition
    nameWithType: IBdoScriptwordDefinition
    fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  commentId: T:BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  parent: BindOpen.Extensions.Definition
  name: IBdoScriptwordDefinition
  nameWithType: IBdoScriptwordDefinition
  fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
- uid: BindOpen.Extensions.Definition
  commentId: N:BindOpen.Extensions.Definition
  name: BindOpen.Extensions.Definition
  nameWithType: BindOpen.Extensions.Definition
  fullName: BindOpen.Extensions.Definition
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitions*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitions
  name: GetDefinitions
  nameWithType: BdoScriptInterpreter.GetDefinitions
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitions
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitions
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitions
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  name: GetDefinitions()
  nameWithType: IBdoScriptInterpreter.GetDefinitions()
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitions()
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitions
    name: GetDefinitions
    nameWithType: IBdoScriptInterpreter.GetDefinitions
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitions
    name: GetDefinitions
    nameWithType: IBdoScriptInterpreter.GetDefinitions
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition}
  commentId: T:System.Collections.Generic.Dictionary{System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, IBdoScriptwordDefinition>
  nameWithType: Dictionary<String, IBdoScriptwordDefinition>
  fullName: System.Collections.Generic.Dictionary<System.String, BindOpen.Extensions.Definition.IBdoScriptwordDefinition>
  nameWithType.vb: Dictionary(Of String, IBdoScriptwordDefinition)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  name.vb: Dictionary(Of String, IBdoScriptwordDefinition)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
    name: IBdoScriptwordDefinition
    nameWithType: IBdoScriptwordDefinition
    fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
    name: IBdoScriptwordDefinition
    nameWithType: IBdoScriptwordDefinition
    fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithExactName*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithExactName
  name: GetDefinitionsWithExactName
  nameWithType: BdoScriptInterpreter.GetDefinitionsWithExactName
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithExactName
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  isExternal: true
  name: GetDefinitionsWithExactName(String, IBdoScriptwordDefinition)
  nameWithType: IBdoScriptInterpreter.GetDefinitionsWithExactName(String, IBdoScriptwordDefinition)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName(System.String, BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
    name: GetDefinitionsWithExactName
    nameWithType: IBdoScriptInterpreter.GetDefinitionsWithExactName
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
    name: IBdoScriptwordDefinition
    nameWithType: IBdoScriptwordDefinition
    fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
    name: GetDefinitionsWithExactName
    nameWithType: IBdoScriptInterpreter.GetDefinitionsWithExactName
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
    name: IBdoScriptwordDefinition
    nameWithType: IBdoScriptwordDefinition
    fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithApproximativeName*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithApproximativeName
  name: GetDefinitionsWithApproximativeName
  nameWithType: BdoScriptInterpreter.GetDefinitionsWithApproximativeName
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.GetDefinitionsWithApproximativeName
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  commentId: M:BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  parent: BindOpen.System.Scripting.IBdoScriptInterpreter
  isExternal: true
  name: GetDefinitionsWithApproximativeName(String, IBdoScriptwordDefinition)
  nameWithType: IBdoScriptInterpreter.GetDefinitionsWithApproximativeName(String, IBdoScriptwordDefinition)
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String, BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
  spec.csharp:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
    name: GetDefinitionsWithApproximativeName
    nameWithType: IBdoScriptInterpreter.GetDefinitionsWithApproximativeName
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
    name: IBdoScriptwordDefinition
    nameWithType: IBdoScriptwordDefinition
    fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Definition.IBdoScriptwordDefinition)
    name: GetDefinitionsWithApproximativeName
    nameWithType: IBdoScriptInterpreter.GetDefinitionsWithApproximativeName
    fullName: BindOpen.System.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
    name: IBdoScriptwordDefinition
    nameWithType: IBdoScriptwordDefinition
    fullName: BindOpen.Extensions.Definition.IBdoScriptwordDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DataItem.Dispose(Boolean)
  fullName: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Scripting.BdoScriptInterpreter.Dispose*
  commentId: Overload:BindOpen.System.Scripting.BdoScriptInterpreter.Dispose
  name: Dispose
  nameWithType: BdoScriptInterpreter.Dispose
  fullName: BindOpen.System.Scripting.BdoScriptInterpreter.Dispose
shouldSkipMarkup: true
