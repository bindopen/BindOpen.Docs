### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Encryption.EncryptionHelper
  commentId: T:BindOpen.Application.Encryption.EncryptionHelper
  id: EncryptionHelper
  parent: BindOpen.Application.Encryption
  children:
  - BindOpen.Application.Encryption.EncryptionHelper.DecryptData(System.String,System.String,System.Byte[])
  - BindOpen.Application.Encryption.EncryptionHelper.EncryptData(System.String,System.String,System.Byte[])
  langs:
  - csharp
  - vb
  name: EncryptionHelper
  nameWithType: EncryptionHelper
  fullName: BindOpen.Application.Encryption.EncryptionHelper
  type: Class
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Encryption/EncryptionHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: EncryptionHelper
    path: ../src/BindOpen.Runtime/Application/Encryption/EncryptionHelper.cs
    startLine: 10
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Encryption
  summary: "\nThis class represents a encryption box.\n"
  example: []
  syntax:
    content: public static class EncryptionHelper
    content.vb: Public Module EncryptionHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Application.Encryption.EncryptionHelper.EncryptData(System.String,System.String,System.Byte[])
  commentId: M:BindOpen.Application.Encryption.EncryptionHelper.EncryptData(System.String,System.String,System.Byte[])
  id: EncryptData(System.String,System.String,System.Byte[])
  parent: BindOpen.Application.Encryption.EncryptionHelper
  langs:
  - csharp
  - vb
  name: EncryptData(String, String, Byte[])
  nameWithType: EncryptionHelper.EncryptData(String, String, Byte[])
  fullName: BindOpen.Application.Encryption.EncryptionHelper.EncryptData(System.String, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Encryption/EncryptionHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: EncryptData
    path: ../src/BindOpen.Runtime/Application/Encryption/EncryptionHelper.cs
    startLine: 25
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Encryption
  summary: "\nEncrypts data.\n"
  example: []
  syntax:
    content: public static byte[] EncryptData(string aSecretKey, string aSecretKeyIV, byte[] inputBytes)
    parameters:
    - id: aSecretKey
      type: System.String
      description: The secret key to consider.
    - id: aSecretKeyIV
      type: System.String
      description: The secret IV key to consider.
    - id: inputBytes
      type: System.Byte[]
      description: The input bytes to consider.
    return:
      type: System.Byte[]
      description: Returns the decrypted data.
    content.vb: Public Shared Function EncryptData(aSecretKey As String, aSecretKeyIV As String, inputBytes As Byte()) As Byte()
  overload: BindOpen.Application.Encryption.EncryptionHelper.EncryptData*
  nameWithType.vb: EncryptionHelper.EncryptData(String, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Application.Encryption.EncryptionHelper.EncryptData(System.String, System.String, System.Byte())
  name.vb: EncryptData(String, String, Byte())
- uid: BindOpen.Application.Encryption.EncryptionHelper.DecryptData(System.String,System.String,System.Byte[])
  commentId: M:BindOpen.Application.Encryption.EncryptionHelper.DecryptData(System.String,System.String,System.Byte[])
  id: DecryptData(System.String,System.String,System.Byte[])
  parent: BindOpen.Application.Encryption.EncryptionHelper
  langs:
  - csharp
  - vb
  name: DecryptData(String, String, Byte[])
  nameWithType: EncryptionHelper.DecryptData(String, String, Byte[])
  fullName: BindOpen.Application.Encryption.EncryptionHelper.DecryptData(System.String, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Encryption/EncryptionHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DecryptData
    path: ../src/BindOpen.Runtime/Application/Encryption/EncryptionHelper.cs
    startLine: 86
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Encryption
  summary: "\nDecrypts data.\n"
  example: []
  syntax:
    content: public static byte[] DecryptData(string aSecretKey, string aSecretKeyIV, byte[] inputBytes)
    parameters:
    - id: aSecretKey
      type: System.String
      description: The secret key to consider.
    - id: aSecretKeyIV
      type: System.String
      description: The secret IV key to consider.
    - id: inputBytes
      type: System.Byte[]
      description: The input bytes to consider.
    return:
      type: System.Byte[]
      description: Returns the decrypted data.
    content.vb: Public Shared Function DecryptData(aSecretKey As String, aSecretKeyIV As String, inputBytes As Byte()) As Byte()
  overload: BindOpen.Application.Encryption.EncryptionHelper.DecryptData*
  nameWithType.vb: EncryptionHelper.DecryptData(String, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Application.Encryption.EncryptionHelper.DecryptData(System.String, System.String, System.Byte())
  name.vb: DecryptData(String, String, Byte())
references:
- uid: BindOpen.Application.Encryption
  commentId: N:BindOpen.Application.Encryption
  name: BindOpen.Application.Encryption
  nameWithType: BindOpen.Application.Encryption
  fullName: BindOpen.Application.Encryption
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Application.Encryption.EncryptionHelper.EncryptData*
  commentId: Overload:BindOpen.Application.Encryption.EncryptionHelper.EncryptData
  name: EncryptData
  nameWithType: EncryptionHelper.EncryptData
  fullName: BindOpen.Application.Encryption.EncryptionHelper.EncryptData
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Application.Encryption.EncryptionHelper.DecryptData*
  commentId: Overload:BindOpen.Application.Encryption.EncryptionHelper.DecryptData
  name: DecryptData
  nameWithType: EncryptionHelper.DecryptData
  fullName: BindOpen.Application.Encryption.EncryptionHelper.DecryptData
shouldSkipMarkup: true
