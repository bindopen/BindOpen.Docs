### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  commentId: T:BindOpen.System.Diagnostics.Loggers.IBdoLogger
  id: IBdoLogger
  parent: BindOpen.System.Diagnostics.Loggers
  children:
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddConsoleOutput
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddFileOutput(System.String,System.String,System.Boolean,System.String)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.DefaultFormat
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.DeleteExpiredLogs(System.Int32,System.String)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.EventFilter
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.Filepath
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.FolderPath
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.IsHistoryRequired
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLog(System.String,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLogFromString(System.String,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.Log
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.Mode
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.OutputKinds
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Boolean)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save(System.Boolean)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.SetLog(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent,System.Collections.Generic.List{System.String})
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.UICulture
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter(System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithMode(BindOpen.System.Diagnostics.BdoLoggerMode)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithUICulture(System.String)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.Write(System.String)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteChildLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Object)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteLog(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteTask(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  langs:
  - csharp
  - vb
  name: IBdoLogger
  nameWithType: IBdoLogger
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  type: Interface
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IBdoLogger
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 11
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThis interface represents a logger.\n"
  remarks: The output format is YAML.
  example: []
  syntax:
    content: 'public interface IBdoLogger : INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed'
    content.vb: >-
      Public Interface IBdoLogger
          Inherits INamedDataItem
  inheritedMembers:
  - BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.IDataItem.Clone``1
  - System.ICloneable.Clone
  - System.IDisposable.Dispose
  - BindOpen.Data.Items.IIdentified.Id
  - BindOpen.Data.Items.IReferenced.Key
  - BindOpen.Data.Items.IStorable.CreationDate
  - BindOpen.Data.Items.IStorable.LastModificationDate
  - BindOpen.Data.Items.INamed.Name
  extensionMethods:
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Filepath
  commentId: P:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Filepath
  id: Filepath
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: Filepath
  nameWithType: IBdoLogger.Filepath
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Filepath
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Filepath
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 22
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nFile path of this instance.\n"
  example: []
  syntax:
    content: string Filepath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Filepath As String
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Filepath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.FolderPath
  commentId: P:BindOpen.System.Diagnostics.Loggers.IBdoLogger.FolderPath
  id: FolderPath
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: FolderPath
  nameWithType: IBdoLogger.FolderPath
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.FolderPath
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: FolderPath
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 27
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nFolder path of this instance.\n"
  example: []
  syntax:
    content: string FolderPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property FolderPath As String
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.FolderPath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Mode
  commentId: P:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Mode
  id: Mode
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: IBdoLogger.Mode
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Mode
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Mode
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 32
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThe mode of this instance.\n"
  example: []
  syntax:
    content: BdoLoggerMode Mode { get; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.BdoLoggerMode
    content.vb: ReadOnly Property Mode As BdoLoggerMode
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Mode*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.OutputKinds
  commentId: P:BindOpen.System.Diagnostics.Loggers.IBdoLogger.OutputKinds
  id: OutputKinds
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: OutputKinds
  nameWithType: IBdoLogger.OutputKinds
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.OutputKinds
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: OutputKinds
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 37
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThe output kinds of this instance.\n"
  example: []
  syntax:
    content: HashSet<DatasourceKind> OutputKinds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{BindOpen.Data.Items.DatasourceKind}
    content.vb: ReadOnly Property OutputKinds As HashSet(Of DatasourceKind)
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.OutputKinds*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DefaultFormat
  commentId: P:BindOpen.System.Diagnostics.Loggers.IBdoLogger.DefaultFormat
  id: DefaultFormat
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: DefaultFormat
  nameWithType: IBdoLogger.DefaultFormat
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DefaultFormat
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DefaultFormat
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 42
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThe format of this instance.\n"
  example: []
  syntax:
    content: BdoDefaultLoggerFormat DefaultFormat { get; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    content.vb: ReadOnly Property DefaultFormat As BdoDefaultLoggerFormat
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DefaultFormat*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.UICulture
  commentId: P:BindOpen.System.Diagnostics.Loggers.IBdoLogger.UICulture
  id: UICulture
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: UICulture
  nameWithType: IBdoLogger.UICulture
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.UICulture
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: UICulture
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 47
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThe UI culture of this instance.\n"
  example: []
  syntax:
    content: string UICulture { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property UICulture As String
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.UICulture*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Log
  commentId: P:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Log
  id: Log
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: Log
  nameWithType: IBdoLogger.Log
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Log
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Log
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 52
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThe log of this instance.\n"
  example: []
  syntax:
    content: IBdoLog Log { get; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: ReadOnly Property Log As IBdoLog
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Log*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.EventFilter
  commentId: P:BindOpen.System.Diagnostics.Loggers.IBdoLogger.EventFilter
  id: EventFilter
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: EventFilter
  nameWithType: IBdoLogger.EventFilter
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.EventFilter
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: EventFilter
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 57
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nFunction that filters event.\n"
  example: []
  syntax:
    content: Predicate<IBdoLogEvent> EventFilter { get; }
    parameters: []
    return:
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: ReadOnly Property EventFilter As Predicate(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.EventFilter*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteLog(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteLog(BindOpen.System.Diagnostics.IBdoLog)
  id: WriteLog(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: WriteLog(IBdoLog)
  nameWithType: IBdoLogger.WriteLog(IBdoLog)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteLog(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 71
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified log.\n"
  example: []
  syntax:
    content: bool WriteLog(IBdoLog log)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.Boolean
    content.vb: Function WriteLog(log As IBdoLog) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteLog*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteTask(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteTask(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  id: WriteTask(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: WriteTask(IBdoLog, IBdoTaskConfiguration)
  nameWithType: IBdoLogger.WriteTask(IBdoLog, IBdoTaskConfiguration)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteTask(BindOpen.System.Diagnostics.IBdoLog, BindOpen.Extensions.Runtime.IBdoTaskConfiguration)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteTask
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 78
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified task.\n"
  example: []
  syntax:
    content: bool WriteTask(IBdoLog log, IBdoTaskConfiguration task)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: task
      type: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
      description: The task to log.
    return:
      type: System.Boolean
    content.vb: Function WriteTask(log As IBdoLog, task As IBdoTaskConfiguration) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteTask*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  id: WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: WriteEvent(IBdoLogEvent)
  nameWithType: IBdoLogger.WriteEvent(IBdoLogEvent)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteEvent
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 85
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified event.\n"
  example: []
  syntax:
    content: bool WriteEvent(IBdoLogEvent logEvent)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: The log event to consider.
    return:
      type: System.Boolean
    content.vb: Function WriteEvent(logEvent As IBdoLogEvent) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteEvent*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Object)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Object)
  id: WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Object)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: WriteDetailElement(IBdoLog, String, Object)
  nameWithType: IBdoLogger.WriteDetailElement(IBdoLog, String, Object)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteDetailElement(BindOpen.System.Diagnostics.IBdoLog, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteDetailElement
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 93
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified element.\n"
  example: []
  syntax:
    content: bool WriteDetailElement(IBdoLog log, string elementName, object elementValue)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: elementName
      type: System.String
      description: The element name to consider.
    - id: elementValue
      type: System.Object
      description: The element value to consider.
    return:
      type: System.Boolean
    content.vb: Function WriteDetailElement(log As IBdoLog, elementName As String, elementValue As Object) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteDetailElement*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteChildLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteChildLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLog)
  id: WriteChildLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: WriteChildLog(IBdoLog, IBdoLog)
  nameWithType: IBdoLogger.WriteChildLog(IBdoLog, IBdoLog)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteChildLog(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteChildLog
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 103
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified child log.\n"
  example: []
  syntax:
    content: bool WriteChildLog(IBdoLog log, IBdoLog childLog)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log to log.
    return:
      type: System.Boolean
    content.vb: Function WriteChildLog(log As IBdoLog, childLog As IBdoLog) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteChildLog*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Write(System.String)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Write(System.String)
  id: Write(System.String)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: Write(String)
  nameWithType: IBdoLogger.Write(String)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Write(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Write
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 114
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nWrites the specified text to the output kind of this instance.\n"
  example: []
  syntax:
    content: bool Write(string text)
    parameters:
    - id: text
      type: System.String
      description: The text to write.
    return:
      type: System.Boolean
      description: Returns true whether the text has been written.
    content.vb: Function Write(text As String) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Write*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.IsHistoryRequired
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.IsHistoryRequired
  id: IsHistoryRequired
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: IsHistoryRequired()
  nameWithType: IBdoLogger.IsHistoryRequired()
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.IsHistoryRequired()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IsHistoryRequired
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 128
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nIndicates whether this instance requires all the event history to be maintained.\n"
  example: []
  syntax:
    content: bool IsHistoryRequired()
    return:
      type: System.Boolean
      description: Returns True if this instance requires all the event history.
    content.vb: Function IsHistoryRequired As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.IsHistoryRequired*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddFileOutput(System.String,System.String,System.Boolean,System.String)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddFileOutput(System.String,System.String,System.Boolean,System.String)
  id: AddFileOutput(System.String,System.String,System.Boolean,System.String)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: AddFileOutput(String, String, Boolean, String)
  nameWithType: IBdoLogger.AddFileOutput(String, String, Boolean, String)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddFileOutput(System.String, System.String, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddFileOutput
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 145
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nAdds a file output.\n"
  example: []
  syntax:
    content: IBdoLogger AddFileOutput(string folderPath, string fileName = null, bool isFileToBeMoved = false, string id = null)
    parameters:
    - id: folderPath
      type: System.String
      description: The folder path to consider.
    - id: fileName
      type: System.String
      description: The file name to consider.
    - id: isFileToBeMoved
      type: System.Boolean
      description: Indicates whether the current file must be moved.
    - id: id
      type: System.String
      description: The ID to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    content.vb: Function AddFileOutput(folderPath As String, fileName As String = Nothing, isFileToBeMoved As Boolean = False, id As String = Nothing) As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddFileOutput*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddConsoleOutput
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddConsoleOutput
  id: AddConsoleOutput
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: AddConsoleOutput()
  nameWithType: IBdoLogger.AddConsoleOutput()
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddConsoleOutput()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddConsoleOutput
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 150
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nAdds a console output.\n"
  example: []
  syntax:
    content: IBdoLogger AddConsoleOutput()
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    content.vb: Function AddConsoleOutput As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddConsoleOutput*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithUICulture(System.String)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithUICulture(System.String)
  id: WithUICulture(System.String)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: WithUICulture(String)
  nameWithType: IBdoLogger.WithUICulture(String)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithUICulture(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WithUICulture
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 156
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nSets the UI culture.\n"
  example: []
  syntax:
    content: IBdoLogger WithUICulture(string uiCulture)
    parameters:
    - id: uiCulture
      type: System.String
      description: The UI culture to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    content.vb: Function WithUICulture(uiCulture As String) As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithUICulture*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithMode(BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithMode(BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WithMode(BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: WithMode(BdoLoggerMode)
  nameWithType: IBdoLogger.WithMode(BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithMode(BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WithMode
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 162
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nSets the mode.\n"
  example: []
  syntax:
    content: IBdoLogger WithMode(BdoLoggerMode mode)
    parameters:
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    content.vb: Function WithMode(mode As BdoLoggerMode) As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithMode*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter(System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter(System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  id: WithEventFilter(System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: WithEventFilter(Predicate<IBdoLogEvent>)
  nameWithType: IBdoLogger.WithEventFilter(Predicate<IBdoLogEvent>)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter(System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WithEventFilter
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 168
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nSets the event filter.\n"
  example: []
  syntax:
    content: IBdoLogger WithEventFilter(Predicate<IBdoLogEvent> eventFilter)
    parameters:
    - id: eventFilter
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: The event filter to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    content.vb: Function WithEventFilter(eventFilter As Predicate(Of IBdoLogEvent)) As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter*
  nameWithType.vb: IBdoLogger.WithEventFilter(Predicate(Of IBdoLogEvent))
  fullName.vb: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter(System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent))
  name.vb: WithEventFilter(Predicate(Of IBdoLogEvent))
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.SetLog(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.SetLog(BindOpen.System.Diagnostics.IBdoLog)
  id: SetLog(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: SetLog(IBdoLog)
  nameWithType: IBdoLogger.SetLog(IBdoLog)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.SetLog(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetLog
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 174
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nSets the specified log.\n"
  example: []
  syntax:
    content: IBdoLogger SetLog(IBdoLog log)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    content.vb: Function SetLog(log As IBdoLog) As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.SetLog*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DeleteExpiredLogs(System.Int32,System.String)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.DeleteExpiredLogs(System.Int32,System.String)
  id: DeleteExpiredLogs(System.Int32,System.String)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: DeleteExpiredLogs(Int32, String)
  nameWithType: IBdoLogger.DeleteExpiredLogs(Int32, String)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DeleteExpiredLogs(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DeleteExpiredLogs
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 182
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nDelete the logs older than the specified day number.\n"
  remarks: With expiration day number equaling to -1, no files expires. Equaling to 0, all files except the current one expires.
  example: []
  syntax:
    content: IBdoLogger DeleteExpiredLogs(int expirationDayNumber, string fileFormat = null)
    parameters:
    - id: expirationDayNumber
      type: System.Int32
      description: The number of expiration days to consider.
    - id: fileFormat
      type: System.String
      description: The file format to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    content.vb: Function DeleteExpiredLogs(expirationDayNumber As Integer, fileFormat As String = Nothing) As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DeleteExpiredLogs*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLog(System.String,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLog(System.String,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  id: LoadLog(System.String,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: LoadLog(String, IBdoLog, Boolean)
  nameWithType: IBdoLogger.LoadLog(String, IBdoLog, Boolean)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLog(System.String, BindOpen.System.Diagnostics.IBdoLog, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: LoadLog
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 201
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nInstantiates a new instance of Log class from a xml file.\n"
  example: []
  syntax:
    content: IBdoLog LoadLog(string filePath, IBdoLog loadLog = null, bool mustFileExist = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the Xml file to load.
    - id: loadLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The output log of the load task.
    - id: mustFileExist
      type: System.Boolean
      description: Indicates whether the file must exist.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The load log.
    content.vb: Function LoadLog(filePath As String, loadLog As IBdoLog = Nothing, mustFileExist As Boolean = True) As IBdoLog
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLog*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLogFromString(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLogFromString(System.String,BindOpen.System.Diagnostics.IBdoLog)
  id: LoadLogFromString(System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: LoadLogFromString(String, IBdoLog)
  nameWithType: IBdoLogger.LoadLogFromString(String, IBdoLog)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLogFromString(System.String, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: LoadLogFromString
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 212
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nInstantiates a new instance of Log class from a xml string.\n"
  example: []
  syntax:
    content: IBdoLog LoadLogFromString(string xmlString, IBdoLog loadLog = null)
    parameters:
    - id: xmlString
      type: System.String
      description: The Xml string to load.
    - id: loadLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The output log of the load task.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log defined in the Xml file.
    content.vb: Function LoadLogFromString(xmlString As String, loadLog As IBdoLog = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLogFromString*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Boolean)
  id: Save(BindOpen.System.Diagnostics.IBdoLog,System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: Save(IBdoLog, String, Boolean)
  nameWithType: IBdoLogger.Save(IBdoLog, String, Boolean)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save(BindOpen.System.Diagnostics.IBdoLog, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Save
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 225
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nSaves this instance in the specified log file.\n"
  example: []
  syntax:
    content: bool Save(IBdoLog log, string logFilePath, bool isAppended = false)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: logFilePath
      type: System.String
      description: The path of the log file to save.
    - id: isAppended
      type: System.Boolean
      description: Indicates whether the new content is appended if one alreay exists.
    return:
      type: System.Boolean
      description: Returns the saving log.
    content.vb: Function Save(log As IBdoLog, logFilePath As String, isAppended As Boolean = False) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save(System.Boolean)
  id: Save(System.Boolean)
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: Save(Boolean)
  nameWithType: IBdoLogger.Save(Boolean)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Save
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 232
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nSaves this instance in the specified log file.\n"
  example: []
  syntax:
    content: bool Save(bool isAppended = false)
    parameters:
    - id: isAppended
      type: System.Boolean
      description: Indicates whether the new content is appended if one alreay exists.
    return:
      type: System.Boolean
      description: Returns the saving log.
    content.vb: Function Save(isAppended As Boolean = False) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save*
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  id: ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: ToString(IBdoLog, List<String>)
  nameWithType: IBdoLogger.ToString(IBdoLog, List<String>)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLog, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ToString
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 240
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nGets the string representing to the specified log.\n"
  example: []
  syntax:
    content: string ToString(IBdoLog log, List<string> attributeNames = null)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: attributeNames
      type: System.Collections.Generic.List{System.String}
      description: The attribute names to consider.
    return:
      type: System.String
      description: The string representing to the specified log.
    content.vb: Function ToString(log As IBdoLog, attributeNames As List(Of String) = Nothing) As String
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString*
  nameWithType.vb: IBdoLogger.ToString(IBdoLog, List(Of String))
  fullName.vb: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLog, System.Collections.Generic.List(Of System.String))
  name.vb: ToString(IBdoLog, List(Of String))
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent,System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent,System.Collections.Generic.List{System.String})
  id: ToString(BindOpen.System.Diagnostics.IBdoLogEvent,System.Collections.Generic.List{System.String})
  parent: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  langs:
  - csharp
  - vb
  name: ToString(IBdoLogEvent, List<String>)
  nameWithType: IBdoLogger.ToString(IBdoLogEvent, List<String>)
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ToString
    path: ../src/BindOpen.Core/System/Diagnostics/Loggers/Interfaces/IBdoLogger.cs
    startLine: 250
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nGets the string representing to the specified event.\n"
  example: []
  syntax:
    content: string ToString(IBdoLogEvent logEvent, List<string> attributeNames = null)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: The log event to consider.
    - id: attributeNames
      type: System.Collections.Generic.List{System.String}
      description: The attribute names to consider.
    return:
      type: System.String
      description: The string representing to the specified event.
    content.vb: Function ToString(logEvent As IBdoLogEvent, attributeNames As List(Of String) = Nothing) As String
  overload: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString*
  nameWithType.vb: IBdoLogger.ToString(IBdoLogEvent, List(Of String))
  fullName.vb: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent, System.Collections.Generic.List(Of System.String))
  name.vb: ToString(IBdoLogEvent, List(Of String))
references:
- uid: BindOpen.System.Diagnostics.Loggers
  commentId: N:BindOpen.System.Diagnostics.Loggers
  name: BindOpen.System.Diagnostics.Loggers
  nameWithType: BindOpen.System.Diagnostics.Loggers
  fullName: BindOpen.System.Diagnostics.Loggers
- uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: IDataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: IDataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: IDataItem.Check
    fullName: BindOpen.Data.Items.IDataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: IDataItem.Check
    fullName: BindOpen.Data.Items.IDataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: IDataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: IDataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: IDataItem.Check<T>
    fullName: BindOpen.Data.Items.IDataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: IDataItem.Check(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: IDataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: IDataItem.Repair
    fullName: BindOpen.Data.Items.IDataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: IDataItem.Repair
    fullName: BindOpen.Data.Items.IDataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: IDataItem.Repair<T>
    fullName: BindOpen.Data.Items.IDataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: IDataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: IDataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: IDataItem.Update
    fullName: BindOpen.Data.Items.IDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: IDataItem.Update
    fullName: BindOpen.Data.Items.IDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.IDataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IDataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: IDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: IDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.IDataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: IDataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: IDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: IDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Clone``1
  commentId: M:BindOpen.Data.Items.IDataItem.Clone``1
  parent: BindOpen.Data.Items.IDataItem
  name: Clone<T>()
  nameWithType: IDataItem.Clone<T>()
  fullName: BindOpen.Data.Items.IDataItem.Clone<T>()
  nameWithType.vb: IDataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.IDataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Clone``1
    name: Clone<T>
    nameWithType: IDataItem.Clone<T>
    fullName: BindOpen.Data.Items.IDataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Clone``1
    name: Clone(Of T)
    nameWithType: IDataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IIdentified.Id
  commentId: P:BindOpen.Data.Items.IIdentified.Id
  parent: BindOpen.Data.Items.IIdentified
  name: Id
  nameWithType: IIdentified.Id
  fullName: BindOpen.Data.Items.IIdentified.Id
- uid: BindOpen.Data.Items.IReferenced.Key
  commentId: M:BindOpen.Data.Items.IReferenced.Key
  parent: BindOpen.Data.Items.IReferenced
  name: Key()
  nameWithType: IReferenced.Key()
  fullName: BindOpen.Data.Items.IReferenced.Key()
  spec.csharp:
  - uid: BindOpen.Data.Items.IReferenced.Key
    name: Key
    nameWithType: IReferenced.Key
    fullName: BindOpen.Data.Items.IReferenced.Key
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IReferenced.Key
    name: Key
    nameWithType: IReferenced.Key
    fullName: BindOpen.Data.Items.IReferenced.Key
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IStorable.CreationDate
  commentId: P:BindOpen.Data.Items.IStorable.CreationDate
  parent: BindOpen.Data.Items.IStorable
  name: CreationDate
  nameWithType: IStorable.CreationDate
  fullName: BindOpen.Data.Items.IStorable.CreationDate
- uid: BindOpen.Data.Items.IStorable.LastModificationDate
  commentId: P:BindOpen.Data.Items.IStorable.LastModificationDate
  parent: BindOpen.Data.Items.IStorable
  name: LastModificationDate
  nameWithType: IStorable.LastModificationDate
  fullName: BindOpen.Data.Items.IStorable.LastModificationDate
- uid: BindOpen.Data.Items.INamed.Name
  commentId: P:BindOpen.Data.Items.INamed.Name
  parent: BindOpen.Data.Items.INamed
  name: Name
  nameWithType: INamed.Name
  fullName: BindOpen.Data.Items.INamed.Name
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: IDataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: IDataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: IDataItem.Check<T>
    fullName: BindOpen.Data.Items.IDataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: IDataItem.Check(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: IDataItem.Repair<T>
    fullName: BindOpen.Data.Items.IDataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: IDataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  commentId: T:BindOpen.Data.Items.IIdentified
  parent: BindOpen.Data.Items
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  commentId: T:BindOpen.Data.Items.IReferenced
  parent: BindOpen.Data.Items
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Items.IStorable
  commentId: T:BindOpen.Data.Items.IStorable
  parent: BindOpen.Data.Items
  name: IStorable
  nameWithType: IStorable
  fullName: BindOpen.Data.Items.IStorable
- uid: BindOpen.Data.Items.INamed
  commentId: T:BindOpen.Data.Items.INamed
  parent: BindOpen.Data.Items
  name: INamed
  nameWithType: INamed
  fullName: BindOpen.Data.Items.INamed
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Filepath*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Filepath
  name: Filepath
  nameWithType: IBdoLogger.Filepath
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Filepath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.FolderPath*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.FolderPath
  name: FolderPath
  nameWithType: IBdoLogger.FolderPath
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.FolderPath
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Mode*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Mode
  name: Mode
  nameWithType: IBdoLogger.Mode
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Mode
- uid: BindOpen.System.Diagnostics.BdoLoggerMode
  commentId: T:BindOpen.System.Diagnostics.BdoLoggerMode
  parent: BindOpen.System.Diagnostics
  name: BdoLoggerMode
  nameWithType: BdoLoggerMode
  fullName: BindOpen.System.Diagnostics.BdoLoggerMode
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.OutputKinds*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.OutputKinds
  name: OutputKinds
  nameWithType: IBdoLogger.OutputKinds
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.OutputKinds
- uid: System.Collections.Generic.HashSet{BindOpen.Data.Items.DatasourceKind}
  commentId: T:System.Collections.Generic.HashSet{BindOpen.Data.Items.DatasourceKind}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<DatasourceKind>
  nameWithType: HashSet<DatasourceKind>
  fullName: System.Collections.Generic.HashSet<BindOpen.Data.Items.DatasourceKind>
  nameWithType.vb: HashSet(Of DatasourceKind)
  fullName.vb: System.Collections.Generic.HashSet(Of BindOpen.Data.Items.DatasourceKind)
  name.vb: HashSet(Of DatasourceKind)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Items.DatasourceKind
    name: DatasourceKind
    nameWithType: DatasourceKind
    fullName: BindOpen.Data.Items.DatasourceKind
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Items.DatasourceKind
    name: DatasourceKind
    nameWithType: DatasourceKind
    fullName: BindOpen.Data.Items.DatasourceKind
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DefaultFormat*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.DefaultFormat
  name: DefaultFormat
  nameWithType: IBdoLogger.DefaultFormat
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DefaultFormat
- uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  commentId: T:BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  parent: BindOpen.System.Diagnostics.Loggers
  name: BdoDefaultLoggerFormat
  nameWithType: BdoDefaultLoggerFormat
  fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.UICulture*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.UICulture
  name: UICulture
  nameWithType: IBdoLogger.UICulture
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.UICulture
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Log*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Log
  name: Log
  nameWithType: IBdoLogger.Log
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Log
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.EventFilter*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.EventFilter
  name: EventFilter
  nameWithType: IBdoLogger.EventFilter
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.EventFilter
- uid: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  commentId: T:System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  parent: System
  definition: System.Predicate`1
  name: Predicate<IBdoLogEvent>
  nameWithType: Predicate<IBdoLogEvent>
  fullName: System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>
  nameWithType.vb: Predicate(Of IBdoLogEvent)
  fullName.vb: System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent)
  name.vb: Predicate(Of IBdoLogEvent)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteLog*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteLog
  name: WriteLog
  nameWithType: IBdoLogger.WriteLog
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteLog
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteTask*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteTask
  name: WriteTask
  nameWithType: IBdoLogger.WriteTask
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteTask
- uid: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  commentId: T:BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  parent: BindOpen.Extensions.Runtime
  name: IBdoTaskConfiguration
  nameWithType: IBdoTaskConfiguration
  fullName: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
- uid: BindOpen.Extensions.Runtime
  commentId: N:BindOpen.Extensions.Runtime
  name: BindOpen.Extensions.Runtime
  nameWithType: BindOpen.Extensions.Runtime
  fullName: BindOpen.Extensions.Runtime
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteEvent*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteEvent
  name: WriteEvent
  nameWithType: IBdoLogger.WriteEvent
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteEvent
- uid: BindOpen.System.Diagnostics.IBdoLogEvent
  commentId: T:BindOpen.System.Diagnostics.IBdoLogEvent
  parent: BindOpen.System.Diagnostics
  name: IBdoLogEvent
  nameWithType: IBdoLogEvent
  fullName: BindOpen.System.Diagnostics.IBdoLogEvent
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteDetailElement*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteDetailElement
  name: WriteDetailElement
  nameWithType: IBdoLogger.WriteDetailElement
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteDetailElement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteChildLog*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteChildLog
  name: WriteChildLog
  nameWithType: IBdoLogger.WriteChildLog
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WriteChildLog
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Write*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Write
  name: Write
  nameWithType: IBdoLogger.Write
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Write
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.IsHistoryRequired*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.IsHistoryRequired
  name: IsHistoryRequired
  nameWithType: IBdoLogger.IsHistoryRequired
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.IsHistoryRequired
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddFileOutput*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddFileOutput
  name: AddFileOutput
  nameWithType: IBdoLogger.AddFileOutput
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddFileOutput
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  commentId: T:BindOpen.System.Diagnostics.Loggers.IBdoLogger
  parent: BindOpen.System.Diagnostics.Loggers
  name: IBdoLogger
  nameWithType: IBdoLogger
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddConsoleOutput*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddConsoleOutput
  name: AddConsoleOutput
  nameWithType: IBdoLogger.AddConsoleOutput
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.AddConsoleOutput
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithUICulture*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithUICulture
  name: WithUICulture
  nameWithType: IBdoLogger.WithUICulture
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithUICulture
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithMode*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithMode
  name: WithMode
  nameWithType: IBdoLogger.WithMode
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithMode
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter
  name: WithEventFilter
  nameWithType: IBdoLogger.WithEventFilter
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.WithEventFilter
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.SetLog*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.SetLog
  name: SetLog
  nameWithType: IBdoLogger.SetLog
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.SetLog
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DeleteExpiredLogs*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.DeleteExpiredLogs
  name: DeleteExpiredLogs
  nameWithType: IBdoLogger.DeleteExpiredLogs
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.DeleteExpiredLogs
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLog*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLog
  name: LoadLog
  nameWithType: IBdoLogger.LoadLog
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLog
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLogFromString*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLogFromString
  name: LoadLogFromString
  nameWithType: IBdoLogger.LoadLogFromString
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.LoadLogFromString
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save
  name: Save
  nameWithType: IBdoLogger.Save
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.Save
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString
  name: ToString
  nameWithType: IBdoLogger.ToString
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger.ToString
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
