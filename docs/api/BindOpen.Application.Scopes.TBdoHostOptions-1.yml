### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1
  commentId: T:BindOpen.Application.Scopes.TBdoHostOptions`1
  id: TBdoHostOptions`1
  parent: BindOpen.Application.Scopes
  children:
  - BindOpen.Application.Scopes.TBdoHostOptions`1.#ctor
  - BindOpen.Application.Scopes.TBdoHostOptions`1._applicationModule
  - BindOpen.Application.Scopes.TBdoHostOptions`1._dataStore
  - BindOpen.Application.Scopes.TBdoHostOptions`1._defaultLoggerOutputKinds
  - BindOpen.Application.Scopes.TBdoHostOptions`1._environment
  - BindOpen.Application.Scopes.TBdoHostOptions`1._extensionLoadOptions
  - BindOpen.Application.Scopes.TBdoHostOptions`1._hostConfigFilePath
  - BindOpen.Application.Scopes.TBdoHostOptions`1._isHostConfigFileRequired
  - BindOpen.Application.Scopes.TBdoHostOptions`1._loggers
  - BindOpen.Application.Scopes.TBdoHostOptions`1._rootFolderPath
  - BindOpen.Application.Scopes.TBdoHostOptions`1._rootFolderPathDefinitions
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionFailure
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionSucess
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartFailure
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartSuccess
  - BindOpen.Application.Scopes.TBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultConsoleLogger
  - BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultFileLogger(System.String)
  - BindOpen.Application.Scopes.TBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ApplicationModule
  - BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettings
  - BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettingsSpecificationSet
  - BindOpen.Application.Scopes.TBdoHostOptions`1.DataStore
  - BindOpen.Application.Scopes.TBdoHostOptions`1.DefaultLoggerOutputKinds
  - BindOpen.Application.Scopes.TBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Dispose(System.Boolean)
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Environment
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionLoadOptions
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionReferences
  - BindOpen.Application.Scopes.TBdoHostOptions`1.GetSettings``1
  - BindOpen.Application.Scopes.TBdoHostOptions`1.HostConfigFilePath
  - BindOpen.Application.Scopes.TBdoHostOptions`1.HostSettings
  - BindOpen.Application.Scopes.TBdoHostOptions`1.IsHostConfigFileRequired
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Loggers
  - BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPath
  - BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPathDefinitions
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings(System.Action{`0})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetEnvironment(System.String)
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule(System.String)
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
  - BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder(System.String)
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Settings
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnExecutionFailure
  - BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnStartFailure
  - BindOpen.Application.Scopes.TBdoHostOptions`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  langs:
  - csharp
  - vb
  name: TBdoHostOptions<S>
  nameWithType: TBdoHostOptions<S>
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>
  type: Class
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: TBdoHostOptions
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 21
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThis class represents a host options.\n"
  example: []
  syntax:
    content: 'public class TBdoHostOptions<S> : DataItem, ITBdoHostOptions<S>, IBdoHostOptions, IDataItem, ICloneable, IDisposable where S : class, IBdoAppSettings, new()'
    typeParameters:
    - id: S
    content.vb: >-
      Public Class TBdoHostOptions(Of S As {Class, IBdoAppSettings, New})
          Inherits DataItem
          Implements ITBdoHostOptions(Of S), IBdoHostOptions, IDataItem, ICloneable, IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - BindOpen.Data.Items.DataItem
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  - BindOpen.Application.Scopes.IBdoHostOptions
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - BindOpen.Data.Items.DataItem.Clone
  - BindOpen.Data.Items.DataItem.Clone``1
  - BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Dispose
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: TBdoHostOptions(Of S)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)
  name.vb: TBdoHostOptions(Of S)
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._applicationModule
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._applicationModule
  id: _applicationModule
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _applicationModule
  nameWithType: TBdoHostOptions<S>._applicationModule
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._applicationModule
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _applicationModule
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 33
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\n\n"
  example: []
  syntax:
    content: protected IAppModule _applicationModule
    return:
      type: BindOpen.Application.Modules.IAppModule
    content.vb: Protected _applicationModule As IAppModule
  nameWithType.vb: TBdoHostOptions(Of S)._applicationModule
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._applicationModule
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._environment
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._environment
  id: _environment
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _environment
  nameWithType: TBdoHostOptions<S>._environment
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._environment
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _environment
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 38
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\n\n"
  example: []
  syntax:
    content: protected string _environment
    return:
      type: System.String
    content.vb: Protected _environment As String
  nameWithType.vb: TBdoHostOptions(Of S)._environment
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._environment
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._loggers
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._loggers
  id: _loggers
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _loggers
  nameWithType: TBdoHostOptions<S>._loggers
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._loggers
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _loggers
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 43
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\n\n"
  example: []
  syntax:
    content: protected IList<IBdoLogger> _loggers
    return:
      type: System.Collections.Generic.IList{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
    content.vb: Protected _loggers As IList(Of IBdoLogger)
  nameWithType.vb: TBdoHostOptions(Of S)._loggers
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._loggers
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._defaultLoggerOutputKinds
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._defaultLoggerOutputKinds
  id: _defaultLoggerOutputKinds
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _defaultLoggerOutputKinds
  nameWithType: TBdoHostOptions<S>._defaultLoggerOutputKinds
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._defaultLoggerOutputKinds
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _defaultLoggerOutputKinds
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 49
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe output kinds of the default loggers.\n"
  example: []
  syntax:
    content: protected HashSet<DatasourceKind> _defaultLoggerOutputKinds
    return:
      type: System.Collections.Generic.HashSet{BindOpen.Data.Items.DatasourceKind}
    content.vb: Protected _defaultLoggerOutputKinds As HashSet(Of DatasourceKind)
  nameWithType.vb: TBdoHostOptions(Of S)._defaultLoggerOutputKinds
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._defaultLoggerOutputKinds
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._extensionLoadOptions
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._extensionLoadOptions
  id: _extensionLoadOptions
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _extensionLoadOptions
  nameWithType: TBdoHostOptions<S>._extensionLoadOptions
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._extensionLoadOptions
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _extensionLoadOptions
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 54
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\n\n"
  example: []
  syntax:
    content: protected IExtensionLoadOptions _extensionLoadOptions
    return:
      type: BindOpen.Application.Scopes.IExtensionLoadOptions
    content.vb: Protected _extensionLoadOptions As IExtensionLoadOptions
  nameWithType.vb: TBdoHostOptions(Of S)._extensionLoadOptions
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._extensionLoadOptions
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._rootFolderPathDefinitions
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._rootFolderPathDefinitions
  id: _rootFolderPathDefinitions
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _rootFolderPathDefinitions
  nameWithType: TBdoHostOptions<S>._rootFolderPathDefinitions
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._rootFolderPathDefinitions
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _rootFolderPathDefinitions
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 59
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe root folder path.\n"
  example: []
  syntax:
    content: protected List<(Predicate<ITBdoHostOptions<S>> Predicate, string RootFolderPath)> _rootFolderPathDefinitions
    return:
      type: System.Collections.Generic.List{System.ValueTuple{System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}},System.String}}
    content.vb: Protected _rootFolderPathDefinitions As List(Of(Predicate As Predicate(Of ITBdoHostOptions(Of S)), RootFolderPath As String))
  nameWithType.vb: TBdoHostOptions(Of S)._rootFolderPathDefinitions
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._rootFolderPathDefinitions
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._rootFolderPath
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._rootFolderPath
  id: _rootFolderPath
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _rootFolderPath
  nameWithType: TBdoHostOptions<S>._rootFolderPath
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._rootFolderPath
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _rootFolderPath
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 66
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\n\n"
  example: []
  syntax:
    content: protected string _rootFolderPath
    return:
      type: System.String
    content.vb: Protected _rootFolderPath As String
  nameWithType.vb: TBdoHostOptions(Of S)._rootFolderPath
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._rootFolderPath
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._hostConfigFilePath
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._hostConfigFilePath
  id: _hostConfigFilePath
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _hostConfigFilePath
  nameWithType: TBdoHostOptions<S>._hostConfigFilePath
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._hostConfigFilePath
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _hostConfigFilePath
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 71
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\n\n"
  example: []
  syntax:
    content: protected string _hostConfigFilePath
    return:
      type: System.String
    content.vb: Protected _hostConfigFilePath As String
  nameWithType.vb: TBdoHostOptions(Of S)._hostConfigFilePath
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._hostConfigFilePath
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._isHostConfigFileRequired
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._isHostConfigFileRequired
  id: _isHostConfigFileRequired
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _isHostConfigFileRequired
  nameWithType: TBdoHostOptions<S>._isHostConfigFileRequired
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._isHostConfigFileRequired
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _isHostConfigFileRequired
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 77
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nIndicates whether the host settings file is required.\n"
  remarks: If the configuration file does not exist then an exception is thrown if value is true, a warning is thrown if value is false, nothing is thrown if value is null.
  example: []
  syntax:
    content: protected bool? _isHostConfigFileRequired
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Protected _isHostConfigFileRequired As Boolean?
  nameWithType.vb: TBdoHostOptions(Of S)._isHostConfigFileRequired
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._isHostConfigFileRequired
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1._dataStore
  commentId: F:BindOpen.Application.Scopes.TBdoHostOptions`1._dataStore
  id: _dataStore
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: _dataStore
  nameWithType: TBdoHostOptions<S>._dataStore
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>._dataStore
  type: Field
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: _dataStore
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 84
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\n\n"
  example: []
  syntax:
    content: protected IBdoDataStore _dataStore
    return:
      type: BindOpen.Data.Stores.IBdoDataStore
    content.vb: Protected _dataStore As IBdoDataStore
  nameWithType.vb: TBdoHostOptions(Of S)._dataStore
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S)._dataStore
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ApplicationModule
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.ApplicationModule
  id: ApplicationModule
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ApplicationModule
  nameWithType: TBdoHostOptions<S>.ApplicationModule
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ApplicationModule
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ApplicationModule
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 97
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe application module.\n"
  example: []
  syntax:
    content: public IAppModule ApplicationModule { get; }
    parameters: []
    return:
      type: BindOpen.Application.Modules.IAppModule
    content.vb: Public ReadOnly Property ApplicationModule As IAppModule
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ApplicationModule*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.ApplicationModule
  nameWithType.vb: TBdoHostOptions(Of S).ApplicationModule
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ApplicationModule
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Environment
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.Environment
  id: Environment
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Environment
  nameWithType: TBdoHostOptions<S>.Environment
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Environment
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Environment
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 102
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe settings.\n"
  example: []
  syntax:
    content: public string Environment { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Environment As String
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Environment*
  nameWithType.vb: TBdoHostOptions(Of S).Environment
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Environment
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPath
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPath
  id: RootFolderPath
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: RootFolderPath
  nameWithType: TBdoHostOptions<S>.RootFolderPath
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.RootFolderPath
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RootFolderPath
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 109
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe root folder path.\n"
  example: []
  syntax:
    content: public string RootFolderPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property RootFolderPath As String
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPath*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.RootFolderPath
  nameWithType.vb: TBdoHostOptions(Of S).RootFolderPath
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).RootFolderPath
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPathDefinitions
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPathDefinitions
  id: RootFolderPathDefinitions
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: RootFolderPathDefinitions
  nameWithType: TBdoHostOptions<S>.RootFolderPathDefinitions
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.RootFolderPathDefinitions
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RootFolderPathDefinitions
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 114
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe root folder path.\n"
  example: []
  syntax:
    content: public List<(Predicate<ITBdoHostOptions<S>> Predicate, string RootFolderPath)> RootFolderPathDefinitions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.ValueTuple{System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}},System.String}}
    content.vb: Public ReadOnly Property RootFolderPathDefinitions As List(Of(Predicate As Predicate(Of ITBdoHostOptions(Of S)), RootFolderPath As String))
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPathDefinitions*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.RootFolderPathDefinitions
  nameWithType.vb: TBdoHostOptions(Of S).RootFolderPathDefinitions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).RootFolderPathDefinitions
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.HostConfigFilePath
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.HostConfigFilePath
  id: HostConfigFilePath
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: HostConfigFilePath
  nameWithType: TBdoHostOptions<S>.HostConfigFilePath
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.HostConfigFilePath
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HostConfigFilePath
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 119
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe hot configuration file path.\n"
  example: []
  syntax:
    content: public string HostConfigFilePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property HostConfigFilePath As String
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.HostConfigFilePath*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.HostConfigFilePath
  nameWithType.vb: TBdoHostOptions(Of S).HostConfigFilePath
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).HostConfigFilePath
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.IsHostConfigFileRequired
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.IsHostConfigFileRequired
  id: IsHostConfigFileRequired
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: IsHostConfigFileRequired
  nameWithType: TBdoHostOptions<S>.IsHostConfigFileRequired
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.IsHostConfigFileRequired
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IsHostConfigFileRequired
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 125
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nIndicates whether the host settings file must exist.\n"
  remarks: If it does not exist then an exception is thrown.
  example: []
  syntax:
    content: public bool? IsHostConfigFileRequired { get; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public ReadOnly Property IsHostConfigFileRequired As Boolean?
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.IsHostConfigFileRequired*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.IsHostConfigFileRequired
  nameWithType.vb: TBdoHostOptions(Of S).IsHostConfigFileRequired
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).IsHostConfigFileRequired
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionReferences
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionReferences
  id: ExtensionReferences
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ExtensionReferences
  nameWithType: TBdoHostOptions<S>.ExtensionReferences
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExtensionReferences
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ExtensionReferences
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 132
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe extension loading options.\n"
  example: []
  syntax:
    content: public IBdoExtensionReferenceCollection ExtensionReferences { get; }
    parameters: []
    return:
      type: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
    content.vb: Public ReadOnly Property ExtensionReferences As IBdoExtensionReferenceCollection
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionReferences*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.ExtensionReferences
  nameWithType.vb: TBdoHostOptions(Of S).ExtensionReferences
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExtensionReferences
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionLoadOptions
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionLoadOptions
  id: ExtensionLoadOptions
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ExtensionLoadOptions
  nameWithType: TBdoHostOptions<S>.ExtensionLoadOptions
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExtensionLoadOptions
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ExtensionLoadOptions
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 137
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe extension loading options.\n"
  example: []
  syntax:
    content: public IExtensionLoadOptions ExtensionLoadOptions { get; }
    parameters: []
    return:
      type: BindOpen.Application.Scopes.IExtensionLoadOptions
    content.vb: Public ReadOnly Property ExtensionLoadOptions As IExtensionLoadOptions
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionLoadOptions*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.ExtensionLoadOptions
  nameWithType.vb: TBdoHostOptions(Of S).ExtensionLoadOptions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExtensionLoadOptions
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Loggers
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.Loggers
  id: Loggers
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Loggers
  nameWithType: TBdoHostOptions<S>.Loggers
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Loggers
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Loggers
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 144
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe loggers of this instance.\n"
  example: []
  syntax:
    content: public IList<IBdoLogger> Loggers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
    content.vb: Public ReadOnly Property Loggers As IList(Of IBdoLogger)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Loggers*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.Loggers
  nameWithType.vb: TBdoHostOptions(Of S).Loggers
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Loggers
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.DefaultLoggerOutputKinds
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.DefaultLoggerOutputKinds
  id: DefaultLoggerOutputKinds
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: DefaultLoggerOutputKinds
  nameWithType: TBdoHostOptions<S>.DefaultLoggerOutputKinds
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.DefaultLoggerOutputKinds
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DefaultLoggerOutputKinds
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 150
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe output kinds of the default logger.\n"
  remarks: If there is none then we do not have any default logger.
  example: []
  syntax:
    content: public HashSet<DatasourceKind> DefaultLoggerOutputKinds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{BindOpen.Data.Items.DatasourceKind}
    content.vb: Public ReadOnly Property DefaultLoggerOutputKinds As HashSet(Of DatasourceKind)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.DefaultLoggerOutputKinds*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.DefaultLoggerOutputKinds
  nameWithType.vb: TBdoHostOptions(Of S).DefaultLoggerOutputKinds
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).DefaultLoggerOutputKinds
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.HostSettings
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.HostSettings
  id: HostSettings
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: HostSettings
  nameWithType: TBdoHostOptions<S>.HostSettings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.HostSettings
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HostSettings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 157
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe host settings of this instance.\n"
  example: []
  syntax:
    content: public IBdoHostSettings HostSettings { get; }
    parameters: []
    return:
      type: BindOpen.Application.Settings.IBdoHostSettings
    content.vb: Public ReadOnly Property HostSettings As IBdoHostSettings
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.HostSettings*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.HostSettings
  nameWithType.vb: TBdoHostOptions(Of S).HostSettings
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).HostSettings
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettings
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettings
  id: AppSettings
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: AppSettings
  nameWithType: TBdoHostOptions<S>.AppSettings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AppSettings
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AppSettings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 162
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe application settings of this instance.\n"
  example: []
  syntax:
    content: public IBdoAppSettings AppSettings { get; }
    parameters: []
    return:
      type: BindOpen.Application.Settings.IBdoAppSettings
    content.vb: Public ReadOnly Property AppSettings As IBdoAppSettings
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettings*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.AppSettings
  nameWithType.vb: TBdoHostOptions(Of S).AppSettings
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AppSettings
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Settings
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.Settings
  id: Settings
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: TBdoHostOptions<S>.Settings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Settings
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Settings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 167
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe settings of this instance.\n"
  example: []
  syntax:
    content: public S Settings { get; }
    parameters: []
    return:
      type: '{S}'
    content.vb: Public ReadOnly Property Settings As S
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Settings*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.Settings
  nameWithType.vb: TBdoHostOptions(Of S).Settings
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Settings
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettingsSpecificationSet
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettingsSpecificationSet
  id: AppSettingsSpecificationSet
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: AppSettingsSpecificationSet
  nameWithType: TBdoHostOptions<S>.AppSettingsSpecificationSet
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AppSettingsSpecificationSet
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AppSettingsSpecificationSet
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 172
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe specification set for application settings of this instance.\n"
  example: []
  syntax:
    content: public IDataElementSpecSet AppSettingsSpecificationSet { get; }
    parameters: []
    return:
      type: BindOpen.Data.Elements.IDataElementSpecSet
    content.vb: Public ReadOnly Property AppSettingsSpecificationSet As IDataElementSpecSet
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettingsSpecificationSet*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.AppSettingsSpecificationSet
  nameWithType.vb: TBdoHostOptions(Of S).AppSettingsSpecificationSet
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AppSettingsSpecificationSet
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartSuccess
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartSuccess
  id: Action_OnStartSuccess
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Action_OnStartSuccess
  nameWithType: TBdoHostOptions<S>.Action_OnStartSuccess
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Action_OnStartSuccess
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Action_OnStartSuccess
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 179
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe action that the start of this instance completes.\n"
  example: []
  syntax:
    content: public Action<ITBdoService<S>> Action_OnStartSuccess { get; }
    parameters: []
    return:
      type: System.Action{BindOpen.Application.Services.ITBdoService{{S}}}
    content.vb: Public ReadOnly Property Action_OnStartSuccess As Action(Of ITBdoService(Of S))
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartSuccess*
  nameWithType.vb: TBdoHostOptions(Of S).Action_OnStartSuccess
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Action_OnStartSuccess
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartFailure
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartFailure
  id: Action_OnStartFailure
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Action_OnStartFailure
  nameWithType: TBdoHostOptions<S>.Action_OnStartFailure
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Action_OnStartFailure
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Action_OnStartFailure
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 184
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe action that the start of this instance fails.\n"
  example: []
  syntax:
    content: public Action<ITBdoService<S>> Action_OnStartFailure { get; }
    parameters: []
    return:
      type: System.Action{BindOpen.Application.Services.ITBdoService{{S}}}
    content.vb: Public ReadOnly Property Action_OnStartFailure As Action(Of ITBdoService(Of S))
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartFailure*
  nameWithType.vb: TBdoHostOptions(Of S).Action_OnStartFailure
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Action_OnStartFailure
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionSucess
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionSucess
  id: Action_OnExecutionSucess
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Action_OnExecutionSucess
  nameWithType: TBdoHostOptions<S>.Action_OnExecutionSucess
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Action_OnExecutionSucess
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Action_OnExecutionSucess
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 189
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe action that this instance completes.\n"
  example: []
  syntax:
    content: public Action<ITBdoService<S>> Action_OnExecutionSucess { get; }
    parameters: []
    return:
      type: System.Action{BindOpen.Application.Services.ITBdoService{{S}}}
    content.vb: Public ReadOnly Property Action_OnExecutionSucess As Action(Of ITBdoService(Of S))
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionSucess*
  nameWithType.vb: TBdoHostOptions(Of S).Action_OnExecutionSucess
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Action_OnExecutionSucess
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionFailure
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionFailure
  id: Action_OnExecutionFailure
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Action_OnExecutionFailure
  nameWithType: TBdoHostOptions<S>.Action_OnExecutionFailure
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Action_OnExecutionFailure
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Action_OnExecutionFailure
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 194
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe action that is executed when the instance fails.\n"
  example: []
  syntax:
    content: public Action<ITBdoService<S>> Action_OnExecutionFailure { get; }
    parameters: []
    return:
      type: System.Action{BindOpen.Application.Services.ITBdoService{{S}}}
    content.vb: Public ReadOnly Property Action_OnExecutionFailure As Action(Of ITBdoService(Of S))
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionFailure*
  nameWithType.vb: TBdoHostOptions(Of S).Action_OnExecutionFailure
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Action_OnExecutionFailure
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.DataStore
  commentId: P:BindOpen.Application.Scopes.TBdoHostOptions`1.DataStore
  id: DataStore
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: DataStore
  nameWithType: TBdoHostOptions<S>.DataStore
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.DataStore
  type: Property
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DataStore
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 201
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe data store of this instance.\n"
  example: []
  syntax:
    content: public IBdoDataStore DataStore { get; }
    parameters: []
    return:
      type: BindOpen.Data.Stores.IBdoDataStore
    content.vb: Public ReadOnly Property DataStore As IBdoDataStore
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.DataStore*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.DataStore
  nameWithType.vb: TBdoHostOptions(Of S).DataStore
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).DataStore
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.#ctor
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.#ctor
  id: '#ctor'
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: TBdoHostOptions()
  nameWithType: TBdoHostOptions<S>.TBdoHostOptions()
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.TBdoHostOptions()
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 214
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nInstantiates a new instance of the BdoHostOptions class.\n"
  example: []
  syntax:
    content: public TBdoHostOptions()
    content.vb: Public Sub New
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.#ctor*
  nameWithType.vb: TBdoHostOptions(Of S).TBdoHostOptions()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).TBdoHostOptions()
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.GetSettings``1
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.GetSettings``1
  id: GetSettings``1
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: GetSettings<T>()
  nameWithType: TBdoHostOptions<S>.GetSettings<T>()
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.GetSettings<T>()
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetSettings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 233
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nGet the settings as the specified host settings class.\n"
  example: []
  syntax:
    content: >-
      public T GetSettings<T>()
          where T : class, IBdoAppSettings
    typeParameters:
    - id: T
      description: The host settings class to consider.
    return:
      type: '{T}'
    content.vb: Public Function GetSettings(Of T As {Class, IBdoAppSettings}) As T
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.GetSettings*
  implements:
  - BindOpen.Application.Scopes.IBdoHostOptions.GetSettings``1
  nameWithType.vb: TBdoHostOptions(Of S).GetSettings(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).GetSettings(Of T)()
  name.vb: GetSettings(Of T)()
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  id: Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: TBdoHostOptions<S>.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Update
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 252
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nUpdates this instance.\n"
  remarks: Put reference collections as null if you do not want to repair this instance.
  example: []
  syntax:
    content: >-
      public override IBdoLog Update<T>(T item = null, string[] specificationAreas = null, UpdateModes[] updateModes = null)
          where T : IDataItem
    parameters:
    - id: item
      type: '{T}'
      description: The item to consider.
    - id: specificationAreas
      type: System.String[]
      description: The specification areas to consider.
    - id: updateModes
      type: BindOpen.Data.Common.UpdateModes[]
      description: The update modes to consider.
    typeParameters:
    - id: T
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log of the operation.
    content.vb: Public Overrides Function Update(Of T As IDataItem)(item As T = Nothing, specificationAreas As String() = Nothing, updateModes As UpdateModes() = Nothing) As IBdoLog
  overridden: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Update*
  implements:
  - BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: TBdoHostOptions(Of S).Update(Of T)(T, String(), UpdateModes())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
  id: SetModule(BindOpen.Application.Modules.IAppModule)
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetModule(IAppModule)
  nameWithType: TBdoHostOptions<S>.SetModule(IAppModule)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetModule(BindOpen.Application.Modules.IAppModule)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetModule
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 296
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSets the specified module.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetModule(IAppModule module)
    parameters:
    - id: module
      type: BindOpen.Application.Modules.IAppModule
      description: ''
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns this instance.
    content.vb: Public Function SetModule(module As IAppModule) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetModule(BindOpen.Application.Modules.IAppModule)
  nameWithType.vb: TBdoHostOptions(Of S).SetModule(IAppModule)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetModule(BindOpen.Application.Modules.IAppModule)
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule(System.String)
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule(System.String)
  id: SetModule(System.String)
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetModule(String)
  nameWithType: TBdoHostOptions<S>.SetModule(String)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetModule(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetModule
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 307
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSets the specified module.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetModule(string moduleName)
    parameters:
    - id: moduleName
      type: System.String
      description: The name of the module.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns this instance.
    content.vb: Public Function SetModule(moduleName As String) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetModule(System.String)
  nameWithType.vb: TBdoHostOptions(Of S).SetModule(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetModule(System.String)
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetEnvironment(System.String)
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetEnvironment(System.String)
  id: SetEnvironment(System.String)
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetEnvironment(String)
  nameWithType: TBdoHostOptions<S>.SetEnvironment(String)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetEnvironment(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetEnvironment
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 318
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSets the specified environment.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetEnvironment(string environment)
    parameters:
    - id: environment
      type: System.String
      description: The environment to consider.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns this instance.
    content.vb: Public Function SetEnvironment(environment As String) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetEnvironment*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetEnvironment(System.String)
  nameWithType.vb: TBdoHostOptions(Of S).SetEnvironment(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetEnvironment(System.String)
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
  id: SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetRootFolder(Predicate<ITBdoHostOptions<S>>, String)
  nameWithType: TBdoHostOptions<S>.SetRootFolder(Predicate<ITBdoHostOptions<S>>, String)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetRootFolder(System.Predicate<BindOpen.Application.Scopes.ITBdoHostOptions<S>>, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetRootFolder
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 332
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSet the root folder.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetRootFolder(Predicate<ITBdoHostOptions<S>> predicate, string rootFolderPath)
    parameters:
    - id: predicate
      type: System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}}
      description: The condition that must be satisfied.
    - id: rootFolderPath
      type: System.String
      description: The root folder path.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns the host option.
    content.vb: Public Function SetRootFolder(predicate As Predicate(Of ITBdoHostOptions(Of S)), rootFolderPath As String) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}},System.String)
  nameWithType.vb: TBdoHostOptions(Of S).SetRootFolder(Predicate(Of ITBdoHostOptions(Of S)), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetRootFolder(System.Predicate(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of S)), System.String)
  name.vb: SetRootFolder(Predicate(Of ITBdoHostOptions(Of S)), String)
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder(System.String)
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder(System.String)
  id: SetRootFolder(System.String)
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetRootFolder(String)
  nameWithType: TBdoHostOptions<S>.SetRootFolder(String)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetRootFolder(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetRootFolder
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 345
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSets the specified root folder path.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetRootFolder(string path)
    parameters:
    - id: path
      type: System.String
      description: The path to consider.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns this instance.
    content.vb: Public Function SetRootFolder(path As String) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetRootFolder(System.String)
  nameWithType.vb: TBdoHostOptions(Of S).SetRootFolder(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetRootFolder(System.String)
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  id: SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetHostSettingsFile(String, Nullable<Boolean>)
  nameWithType: TBdoHostOptions<S>.SetHostSettingsFile(String, Nullable<Boolean>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetHostSettingsFile(System.String, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetHostSettingsFile
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 358
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSet the specified host settings file path.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetHostSettingsFile(string path, bool? isRequired)
    parameters:
    - id: path
      type: System.String
      description: The settings file path.
    - id: isRequired
      type: System.Nullable{System.Boolean}
      description: Indicates whether the host settings file is required.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns the host option.
    content.vb: Public Function SetHostSettingsFile(path As String, isRequired As Boolean?) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  nameWithType.vb: TBdoHostOptions(Of S).SetHostSettingsFile(String, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetHostSettingsFile(System.String, System.Nullable(Of System.Boolean))
  name.vb: SetHostSettingsFile(String, Nullable(Of Boolean))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
  id: SetHostSettingsFile(System.Nullable{System.Boolean})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetHostSettingsFile(Nullable<Boolean>)
  nameWithType: TBdoHostOptions<S>.SetHostSettingsFile(Nullable<Boolean>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetHostSettingsFile(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetHostSettingsFile
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 370
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSet the specified host settings file path.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetHostSettingsFile(bool? isRequired)
    parameters:
    - id: isRequired
      type: System.Nullable{System.Boolean}
      description: Indicates whether the host settings file is required.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns the host option.
    content.vb: Public Function SetHostSettingsFile(isRequired As Boolean?) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetHostSettingsFile(System.Nullable{System.Boolean})
  nameWithType.vb: TBdoHostOptions(Of S).SetHostSettingsFile(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetHostSettingsFile(System.Nullable(Of System.Boolean))
  name.vb: SetHostSettingsFile(Nullable(Of Boolean))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  id: AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: AddExtensions(Action<IBdoExtensionReferenceCollection>, Action<IExtensionLoadOptions>)
  nameWithType: TBdoHostOptions<S>.AddExtensions(Action<IBdoExtensionReferenceCollection>, Action<IExtensionLoadOptions>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddExtensions(System.Action<BindOpen.Extensions.References.IBdoExtensionReferenceCollection>, System.Action<BindOpen.Application.Scopes.IExtensionLoadOptions>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddExtensions
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 384
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nAdds the extensions.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> AddExtensions(Action<IBdoExtensionReferenceCollection> action = null, Action<IExtensionLoadOptions> loadOptionsAction = null)
    parameters:
    - id: action
      type: System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection}
      description: The action for adding extensions.
    - id: loadOptionsAction
      type: System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions}
      description: The action for loading options.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns the host option.
    content.vb: Public Function AddExtensions(action As Action(Of IBdoExtensionReferenceCollection) = Nothing, loadOptionsAction As Action(Of IExtensionLoadOptions) = Nothing) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.AddExtensions*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  nameWithType.vb: TBdoHostOptions(Of S).AddExtensions(Action(Of IBdoExtensionReferenceCollection), Action(Of IExtensionLoadOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddExtensions(System.Action(Of BindOpen.Extensions.References.IBdoExtensionReferenceCollection), System.Action(Of BindOpen.Application.Scopes.IExtensionLoadOptions))
  name.vb: AddExtensions(Action(Of IBdoExtensionReferenceCollection), Action(Of IExtensionLoadOptions))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  id: SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetHostSettings(Action<IBdoHostSettings>)
  nameWithType: TBdoHostOptions<S>.SetHostSettings(Action<IBdoHostSettings>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetHostSettings(System.Action<BindOpen.Application.Settings.IBdoHostSettings>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetHostSettings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 406
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSets the host settings.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetHostSettings(Action<IBdoHostSettings> action)
    parameters:
    - id: action
      type: System.Action{BindOpen.Application.Settings.IBdoHostSettings}
      description: The action to consider on the settings.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns the host option.
    content.vb: Public Function SetHostSettings(action As Action(Of IBdoHostSettings)) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  nameWithType.vb: TBdoHostOptions(Of S).SetHostSettings(Action(Of IBdoHostSettings))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetHostSettings(System.Action(Of BindOpen.Application.Settings.IBdoHostSettings))
  name.vb: SetHostSettings(Action(Of IBdoHostSettings))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  id: SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetHostSettings(IBdoHostSettings, Action<IBdoHostSettings>)
  nameWithType: TBdoHostOptions<S>.SetHostSettings(IBdoHostSettings, Action<IBdoHostSettings>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings, System.Action<BindOpen.Application.Settings.IBdoHostSettings>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetHostSettings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 416
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSets the host settings applying action on it.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetHostSettings(IBdoHostSettings hostSettings, Action<IBdoHostSettings> action = null)
    parameters:
    - id: hostSettings
      type: BindOpen.Application.Settings.IBdoHostSettings
      description: The host settings to consider.
    - id: action
      type: System.Action{BindOpen.Application.Settings.IBdoHostSettings}
      description: The action to apply on the settings.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function SetHostSettings(hostSettings As IBdoHostSettings, action As Action(Of IBdoHostSettings) = Nothing) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  nameWithType.vb: TBdoHostOptions(Of S).SetHostSettings(IBdoHostSettings, Action(Of IBdoHostSettings))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings, System.Action(Of BindOpen.Application.Settings.IBdoHostSettings))
  name.vb: SetHostSettings(IBdoHostSettings, Action(Of IBdoHostSettings))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings(System.Action{`0})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings(System.Action{`0})
  id: SetAppSettings(System.Action{`0})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetAppSettings(Action<S>)
  nameWithType: TBdoHostOptions<S>.SetAppSettings(Action<S>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetAppSettings(System.Action<S>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetAppSettings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 428
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSets the application settings.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetAppSettings(Action<S> action)
    parameters:
    - id: action
      type: System.Action{{S}}
      description: The action to apply on the settings.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function SetAppSettings(action As Action(Of S)) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetAppSettings(System.Action{{S}})
  nameWithType.vb: TBdoHostOptions(Of S).SetAppSettings(Action(Of S))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetAppSettings(System.Action(Of S))
  name.vb: SetAppSettings(Action(Of S))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
  id: SetAppSettings(`0,System.Action{`0})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: SetAppSettings(S, Action<S>)
  nameWithType: TBdoHostOptions<S>.SetAppSettings(S, Action<S>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetAppSettings(S, System.Action<S>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetAppSettings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 438
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nSets the application settings applying action on it.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> SetAppSettings(S appSettings, Action<S> action = null)
    parameters:
    - id: appSettings
      type: '{S}'
      description: The application settings to consider.
    - id: action
      type: System.Action{{S}}
      description: The action to apply on the settings.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function SetAppSettings(appSettings As S, action As Action(Of S) = Nothing) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetAppSettings({S},System.Action{{S}})
  nameWithType.vb: TBdoHostOptions(Of S).SetAppSettings(S, Action(Of S))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetAppSettings(S, System.Action(Of S))
  name.vb: SetAppSettings(S, Action(Of S))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  id: DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: DefineAppSettings(IDataElementSpecSet)
  nameWithType: TBdoHostOptions<S>.DefineAppSettings(IDataElementSpecSet)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DefineAppSettings
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 451
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nDefines the specified default settings.\n"
  example: []
  syntax:
    content: public virtual ITBdoHostOptions<S> DefineAppSettings(IDataElementSpecSet specificationSet)
    parameters:
    - id: specificationSet
      type: BindOpen.Data.Elements.IDataElementSpecSet
      description: The set of data element specifcations to consider.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns this instance.
    content.vb: Public Overridable Function DefineAppSettings(specificationSet As IDataElementSpecSet) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.DefineAppSettings*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  nameWithType.vb: TBdoHostOptions(Of S).DefineAppSettings(IDataElementSpecSet)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  id: AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: AddLoggers(IBdoLogger[])
  nameWithType: TBdoHostOptions<S>.AddLoggers(IBdoLogger[])
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddLoggers
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 465
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nAdds the specified settings specification.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> AddLoggers(params IBdoLogger[] loggers)
    parameters:
    - id: loggers
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
      description: The loggers to consider.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns this instance.
    content.vb: Public Function AddLoggers(ParamArray loggers As IBdoLogger()) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.AddLoggers*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  nameWithType.vb: TBdoHostOptions(Of S).AddLoggers(IBdoLogger())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: AddLoggers(IBdoLogger())
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultFileLogger(System.String)
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultFileLogger(System.String)
  id: AddDefaultFileLogger(System.String)
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: AddDefaultFileLogger(String)
  nameWithType: TBdoHostOptions<S>.AddDefaultFileLogger(String)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddDefaultFileLogger(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddDefaultFileLogger
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 478
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nAdds the default file logger.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> AddDefaultFileLogger(string logFileName = null)
    parameters:
    - id: logFileName
      type: System.String
      description: The log file name to consider.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns this instance.
    content.vb: Public Function AddDefaultFileLogger(logFileName As String = Nothing) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultFileLogger*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddDefaultFileLogger(System.String)
  nameWithType.vb: TBdoHostOptions(Of S).AddDefaultFileLogger(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddDefaultFileLogger(System.String)
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultConsoleLogger
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultConsoleLogger
  id: AddDefaultConsoleLogger
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: AddDefaultConsoleLogger()
  nameWithType: TBdoHostOptions<S>.AddDefaultConsoleLogger()
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddDefaultConsoleLogger()
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddDefaultConsoleLogger
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 492
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nAdds the default console logger.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> AddDefaultConsoleLogger()
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
      description: Returns this instance.
    content.vb: Public Function AddDefaultConsoleLogger As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultConsoleLogger*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddDefaultConsoleLogger
  nameWithType.vb: TBdoHostOptions(Of S).AddDefaultConsoleLogger()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddDefaultConsoleLogger()
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  id: ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ExecuteOnStartSuccess(Action<ITBdoHost<S>>)
  nameWithType: TBdoHostOptions<S>.ExecuteOnStartSuccess(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExecuteOnStartSuccess(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ExecuteOnStartSuccess
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 505
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe action that is executed when the start of this instance succedes.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> ExecuteOnStartSuccess(Action<ITBdoHost<S>> action)
    parameters:
    - id: action
      type: System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}}
      description: The action to execute.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function ExecuteOnStartSuccess(action As Action(Of ITBdoHost(Of S))) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartSuccess*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}})
  nameWithType.vb: TBdoHostOptions(Of S).ExecuteOnStartSuccess(Action(Of ITBdoHost(Of S)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExecuteOnStartSuccess(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnStartSuccess(Action(Of ITBdoHost(Of S)))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  id: ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ExecuteOnStartFailure(Action<ITBdoHost<S>>)
  nameWithType: TBdoHostOptions<S>.ExecuteOnStartFailure(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExecuteOnStartFailure(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ExecuteOnStartFailure
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 516
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe action that is executed when the start of this instance fails.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> ExecuteOnStartFailure(Action<ITBdoHost<S>> action)
    parameters:
    - id: action
      type: System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}}
      description: The action to execute.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function ExecuteOnStartFailure(action As Action(Of ITBdoHost(Of S))) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartFailure*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}})
  nameWithType.vb: TBdoHostOptions(Of S).ExecuteOnStartFailure(Action(Of ITBdoHost(Of S)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExecuteOnStartFailure(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnStartFailure(Action(Of ITBdoHost(Of S)))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  id: ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ExecuteOnExecutionSuccess(Action<ITBdoHost<S>>)
  nameWithType: TBdoHostOptions<S>.ExecuteOnExecutionSuccess(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExecuteOnExecutionSuccess(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ExecuteOnExecutionSuccess
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 527
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe action that is executed when this instance is successfully completed.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> ExecuteOnExecutionSuccess(Action<ITBdoHost<S>> action)
    parameters:
    - id: action
      type: System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}}
      description: The action to execute.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function ExecuteOnExecutionSuccess(action As Action(Of ITBdoHost(Of S))) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionSuccess*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}})
  nameWithType.vb: TBdoHostOptions(Of S).ExecuteOnExecutionSuccess(Action(Of ITBdoHost(Of S)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExecuteOnExecutionSuccess(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnExecutionSuccess(Action(Of ITBdoHost(Of S)))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  id: ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ExecuteOnExecutionFailure(Action<ITBdoHost<S>>)
  nameWithType: TBdoHostOptions<S>.ExecuteOnExecutionFailure(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExecuteOnExecutionFailure(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ExecuteOnExecutionFailure
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 538
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThe action that is executed when this instance execution fails.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> ExecuteOnExecutionFailure(Action<ITBdoHost<S>> action)
    parameters:
    - id: action
      type: System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}}
      description: The action to execute.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function ExecuteOnExecutionFailure(action As Action(Of ITBdoHost(Of S))) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionFailure*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}})
  nameWithType.vb: TBdoHostOptions(Of S).ExecuteOnExecutionFailure(Action(Of ITBdoHost(Of S)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExecuteOnExecutionFailure(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnExecutionFailure(Action(Of ITBdoHost(Of S)))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnStartFailure
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnStartFailure
  id: ThrowExceptionOnStartFailure
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ThrowExceptionOnStartFailure()
  nameWithType: TBdoHostOptions<S>.ThrowExceptionOnStartFailure()
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ThrowExceptionOnStartFailure()
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ThrowExceptionOnStartFailure
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 548
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThrows an exception when start fails.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> ThrowExceptionOnStartFailure()
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function ThrowExceptionOnStartFailure As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnStartFailure*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ThrowExceptionOnStartFailure
  nameWithType.vb: TBdoHostOptions(Of S).ThrowExceptionOnStartFailure()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ThrowExceptionOnStartFailure()
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnExecutionFailure
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnExecutionFailure
  id: ThrowExceptionOnExecutionFailure
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: ThrowExceptionOnExecutionFailure()
  nameWithType: TBdoHostOptions<S>.ThrowExceptionOnExecutionFailure()
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ThrowExceptionOnExecutionFailure()
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ThrowExceptionOnExecutionFailure
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 558
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nThrows an exception when start fails.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> ThrowExceptionOnExecutionFailure()
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function ThrowExceptionOnExecutionFailure As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnExecutionFailure*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ThrowExceptionOnExecutionFailure
  nameWithType.vb: TBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure()
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  id: AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: AddDataStore(Action<IBdoDataStore>)
  nameWithType: TBdoHostOptions<S>.AddDataStore(Action<IBdoDataStore>)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddDataStore(System.Action<BindOpen.Data.Stores.IBdoDataStore>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddDataStore
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 571
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nAdds the data store executing the specified action.\n"
  example: []
  syntax:
    content: public ITBdoHostOptions<S> AddDataStore(Action<IBdoDataStore> action = null)
    parameters:
    - id: action
      type: System.Action{BindOpen.Data.Stores.IBdoDataStore}
      description: The action to execute on the created data store.
    return:
      type: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
    content.vb: Public Function AddDataStore(action As Action(Of IBdoDataStore) = Nothing) As ITBdoHostOptions(Of S)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDataStore*
  implements:
  - BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  nameWithType.vb: TBdoHostOptions(Of S).AddDataStore(Action(Of IBdoDataStore))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddDataStore(System.Action(Of BindOpen.Data.Stores.IBdoDataStore))
  name.vb: AddDataStore(Action(Of IBdoDataStore))
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Dispose(System.Boolean)
  commentId: M:BindOpen.Application.Scopes.TBdoHostOptions`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: BindOpen.Application.Scopes.TBdoHostOptions`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: TBdoHostOptions<S>.Dispose(Boolean)
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Dispose
    path: ../src/BindOpen.Runtime/Application/Scopes/Hosts/Options/TBdoHostOptions.cs
    startLine: 591
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Scopes
  summary: "\nDisposes this instance. \n"
  example: []
  syntax:
    content: protected override void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(isDisposing As Boolean)
  overridden: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  overload: BindOpen.Application.Scopes.TBdoHostOptions`1.Dispose*
  nameWithType.vb: TBdoHostOptions(Of S).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Dispose(System.Boolean)
references:
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: BindOpen.Data.Items.DataItem
  commentId: T:BindOpen.Data.Items.DataItem
  parent: BindOpen.Data.Items
  name: DataItem
  nameWithType: DataItem
  fullName: BindOpen.Data.Items.DataItem
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  commentId: T:BindOpen.Application.Scopes.ITBdoHostOptions{`0}
  parent: BindOpen.Application.Scopes
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1
  name: ITBdoHostOptions<S>
  nameWithType: ITBdoHostOptions<S>
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>
  nameWithType.vb: ITBdoHostOptions(Of S)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S)
  name.vb: ITBdoHostOptions(Of S)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.IBdoHostOptions
  commentId: T:BindOpen.Application.Scopes.IBdoHostOptions
  parent: BindOpen.Application.Scopes
  name: IBdoHostOptions
  nameWithType: IBdoHostOptions
  fullName: BindOpen.Application.Scopes.IBdoHostOptions
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  commentId: M:BindOpen.Data.Items.DataItem.InitializeLifetimeService
  parent: BindOpen.Data.Items.DataItem
  name: InitializeLifetimeService()
  nameWithType: DataItem.InitializeLifetimeService()
  fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone
  commentId: M:BindOpen.Data.Items.DataItem.Clone
  parent: BindOpen.Data.Items.DataItem
  name: Clone()
  nameWithType: DataItem.Clone()
  fullName: BindOpen.Data.Items.DataItem.Clone()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone
    name: Clone
    nameWithType: DataItem.Clone
    fullName: BindOpen.Data.Items.DataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone
    name: Clone
    nameWithType: DataItem.Clone
    fullName: BindOpen.Data.Items.DataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone``1
  commentId: M:BindOpen.Data.Items.DataItem.Clone``1
  parent: BindOpen.Data.Items.DataItem
  name: Clone<T>()
  nameWithType: DataItem.Clone<T>()
  fullName: BindOpen.Data.Items.DataItem.Clone<T>()
  nameWithType.vb: DataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.DataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone<T>
    nameWithType: DataItem.Clone<T>
    fullName: BindOpen.Data.Items.DataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone(Of T)
    nameWithType: DataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.DataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: DataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: DataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: DataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: DataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: DataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose
  commentId: M:BindOpen.Data.Items.DataItem.Dispose
  parent: BindOpen.Data.Items.DataItem
  name: Dispose()
  nameWithType: DataItem.Dispose()
  fullName: BindOpen.Data.Items.DataItem.Dispose()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
  commentId: T:BindOpen.Application.Scopes.ITBdoHostOptions`1
  parent: BindOpen.Application.Scopes
  name: ITBdoHostOptions<S>
  nameWithType: ITBdoHostOptions<S>
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>
  nameWithType.vb: ITBdoHostOptions(Of S)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S)
  name.vb: ITBdoHostOptions(Of S)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.Application.Modules.IAppModule
  commentId: T:BindOpen.Application.Modules.IAppModule
  parent: BindOpen.Application.Modules
  name: IAppModule
  nameWithType: IAppModule
  fullName: BindOpen.Application.Modules.IAppModule
- uid: BindOpen.Application.Modules
  commentId: N:BindOpen.Application.Modules
  name: BindOpen.Application.Modules
  nameWithType: BindOpen.Application.Modules
  fullName: BindOpen.Application.Modules
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  commentId: T:System.Collections.Generic.IList{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IBdoLogger>
  nameWithType: IList<IBdoLogger>
  fullName: System.Collections.Generic.IList<BindOpen.System.Diagnostics.Loggers.IBdoLogger>
  nameWithType.vb: IList(Of IBdoLogger)
  fullName.vb: System.Collections.Generic.IList(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger)
  name.vb: IList(Of IBdoLogger)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.HashSet{BindOpen.Data.Items.DatasourceKind}
  commentId: T:System.Collections.Generic.HashSet{BindOpen.Data.Items.DatasourceKind}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<DatasourceKind>
  nameWithType: HashSet<DatasourceKind>
  fullName: System.Collections.Generic.HashSet<BindOpen.Data.Items.DatasourceKind>
  nameWithType.vb: HashSet(Of DatasourceKind)
  fullName.vb: System.Collections.Generic.HashSet(Of BindOpen.Data.Items.DatasourceKind)
  name.vb: HashSet(Of DatasourceKind)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Items.DatasourceKind
    name: DatasourceKind
    nameWithType: DatasourceKind
    fullName: BindOpen.Data.Items.DatasourceKind
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Items.DatasourceKind
    name: DatasourceKind
    nameWithType: DatasourceKind
    fullName: BindOpen.Data.Items.DatasourceKind
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.IExtensionLoadOptions
  commentId: T:BindOpen.Application.Scopes.IExtensionLoadOptions
  parent: BindOpen.Application.Scopes
  name: IExtensionLoadOptions
  nameWithType: IExtensionLoadOptions
  fullName: BindOpen.Application.Scopes.IExtensionLoadOptions
- uid: System.Collections.Generic.List{System.ValueTuple{System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}},System.String}}
  commentId: T:System.Collections.Generic.List{System.ValueTuple{System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ValueTuple<Predicate<ITBdoHostOptions<S>>, String>>
  nameWithType: List<ValueTuple<Predicate<ITBdoHostOptions<S>>, String>>
  fullName: System.Collections.Generic.List<System.ValueTuple<System.Predicate<BindOpen.Application.Scopes.ITBdoHostOptions<S>>, System.String>>
  nameWithType.vb: List(Of ValueTuple(Of Predicate(Of ITBdoHostOptions(Of S)), String))
  fullName.vb: System.Collections.Generic.List(Of System.ValueTuple(Of System.Predicate(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of S)), System.String))
  name.vb: List(Of ValueTuple(Of Predicate(Of ITBdoHostOptions(Of S)), String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Stores.IBdoDataStore
  commentId: T:BindOpen.Data.Stores.IBdoDataStore
  parent: BindOpen.Data.Stores
  name: IBdoDataStore
  nameWithType: IBdoDataStore
  fullName: BindOpen.Data.Stores.IBdoDataStore
- uid: BindOpen.Data.Stores
  commentId: N:BindOpen.Data.Stores
  name: BindOpen.Data.Stores
  nameWithType: BindOpen.Data.Stores
  fullName: BindOpen.Data.Stores
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ApplicationModule*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ApplicationModule
  name: ApplicationModule
  nameWithType: TBdoHostOptions<S>.ApplicationModule
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ApplicationModule
  nameWithType.vb: TBdoHostOptions(Of S).ApplicationModule
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ApplicationModule
- uid: BindOpen.Application.Scopes.IBdoHostOptions.ApplicationModule
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.ApplicationModule
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: ApplicationModule
  nameWithType: IBdoHostOptions.ApplicationModule
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.ApplicationModule
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Environment*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Environment
  name: Environment
  nameWithType: TBdoHostOptions<S>.Environment
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Environment
  nameWithType.vb: TBdoHostOptions(Of S).Environment
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Environment
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPath*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPath
  name: RootFolderPath
  nameWithType: TBdoHostOptions<S>.RootFolderPath
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.RootFolderPath
  nameWithType.vb: TBdoHostOptions(Of S).RootFolderPath
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).RootFolderPath
- uid: BindOpen.Application.Scopes.IBdoHostOptions.RootFolderPath
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.RootFolderPath
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: RootFolderPath
  nameWithType: IBdoHostOptions.RootFolderPath
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.RootFolderPath
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPathDefinitions*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.RootFolderPathDefinitions
  name: RootFolderPathDefinitions
  nameWithType: TBdoHostOptions<S>.RootFolderPathDefinitions
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.RootFolderPathDefinitions
  nameWithType.vb: TBdoHostOptions(Of S).RootFolderPathDefinitions
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).RootFolderPathDefinitions
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.RootFolderPathDefinitions
  commentId: P:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.RootFolderPathDefinitions
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.RootFolderPathDefinitions
  name: RootFolderPathDefinitions
  nameWithType: ITBdoHostOptions<S>.RootFolderPathDefinitions
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.RootFolderPathDefinitions
  nameWithType.vb: ITBdoHostOptions(Of S).RootFolderPathDefinitions
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).RootFolderPathDefinitions
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.RootFolderPathDefinitions
  commentId: P:BindOpen.Application.Scopes.ITBdoHostOptions`1.RootFolderPathDefinitions
  name: RootFolderPathDefinitions
  nameWithType: ITBdoHostOptions<S>.RootFolderPathDefinitions
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.RootFolderPathDefinitions
  nameWithType.vb: ITBdoHostOptions(Of S).RootFolderPathDefinitions
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).RootFolderPathDefinitions
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.HostConfigFilePath*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.HostConfigFilePath
  name: HostConfigFilePath
  nameWithType: TBdoHostOptions<S>.HostConfigFilePath
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.HostConfigFilePath
  nameWithType.vb: TBdoHostOptions(Of S).HostConfigFilePath
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).HostConfigFilePath
- uid: BindOpen.Application.Scopes.IBdoHostOptions.HostConfigFilePath
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.HostConfigFilePath
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: HostConfigFilePath
  nameWithType: IBdoHostOptions.HostConfigFilePath
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.HostConfigFilePath
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.IsHostConfigFileRequired*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.IsHostConfigFileRequired
  name: IsHostConfigFileRequired
  nameWithType: TBdoHostOptions<S>.IsHostConfigFileRequired
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.IsHostConfigFileRequired
  nameWithType.vb: TBdoHostOptions(Of S).IsHostConfigFileRequired
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).IsHostConfigFileRequired
- uid: BindOpen.Application.Scopes.IBdoHostOptions.IsHostConfigFileRequired
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.IsHostConfigFileRequired
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: IsHostConfigFileRequired
  nameWithType: IBdoHostOptions.IsHostConfigFileRequired
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.IsHostConfigFileRequired
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionReferences*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionReferences
  name: ExtensionReferences
  nameWithType: TBdoHostOptions<S>.ExtensionReferences
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExtensionReferences
  nameWithType.vb: TBdoHostOptions(Of S).ExtensionReferences
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExtensionReferences
- uid: BindOpen.Application.Scopes.IBdoHostOptions.ExtensionReferences
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.ExtensionReferences
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: ExtensionReferences
  nameWithType: IBdoHostOptions.ExtensionReferences
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.ExtensionReferences
- uid: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  commentId: T:BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  parent: BindOpen.Extensions.References
  name: IBdoExtensionReferenceCollection
  nameWithType: IBdoExtensionReferenceCollection
  fullName: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
- uid: BindOpen.Extensions.References
  commentId: N:BindOpen.Extensions.References
  name: BindOpen.Extensions.References
  nameWithType: BindOpen.Extensions.References
  fullName: BindOpen.Extensions.References
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionLoadOptions*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ExtensionLoadOptions
  name: ExtensionLoadOptions
  nameWithType: TBdoHostOptions<S>.ExtensionLoadOptions
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExtensionLoadOptions
  nameWithType.vb: TBdoHostOptions(Of S).ExtensionLoadOptions
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExtensionLoadOptions
- uid: BindOpen.Application.Scopes.IBdoHostOptions.ExtensionLoadOptions
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.ExtensionLoadOptions
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: ExtensionLoadOptions
  nameWithType: IBdoHostOptions.ExtensionLoadOptions
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.ExtensionLoadOptions
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Loggers*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Loggers
  name: Loggers
  nameWithType: TBdoHostOptions<S>.Loggers
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Loggers
  nameWithType.vb: TBdoHostOptions(Of S).Loggers
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Loggers
- uid: BindOpen.Application.Scopes.IBdoHostOptions.Loggers
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.Loggers
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: Loggers
  nameWithType: IBdoHostOptions.Loggers
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.Loggers
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.DefaultLoggerOutputKinds*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.DefaultLoggerOutputKinds
  name: DefaultLoggerOutputKinds
  nameWithType: TBdoHostOptions<S>.DefaultLoggerOutputKinds
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.DefaultLoggerOutputKinds
  nameWithType.vb: TBdoHostOptions(Of S).DefaultLoggerOutputKinds
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).DefaultLoggerOutputKinds
- uid: BindOpen.Application.Scopes.IBdoHostOptions.DefaultLoggerOutputKinds
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.DefaultLoggerOutputKinds
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: DefaultLoggerOutputKinds
  nameWithType: IBdoHostOptions.DefaultLoggerOutputKinds
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.DefaultLoggerOutputKinds
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.HostSettings*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.HostSettings
  name: HostSettings
  nameWithType: TBdoHostOptions<S>.HostSettings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.HostSettings
  nameWithType.vb: TBdoHostOptions(Of S).HostSettings
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).HostSettings
- uid: BindOpen.Application.Scopes.IBdoHostOptions.HostSettings
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.HostSettings
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: HostSettings
  nameWithType: IBdoHostOptions.HostSettings
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.HostSettings
- uid: BindOpen.Application.Settings.IBdoHostSettings
  commentId: T:BindOpen.Application.Settings.IBdoHostSettings
  parent: BindOpen.Application.Settings
  name: IBdoHostSettings
  nameWithType: IBdoHostSettings
  fullName: BindOpen.Application.Settings.IBdoHostSettings
- uid: BindOpen.Application.Settings
  commentId: N:BindOpen.Application.Settings
  name: BindOpen.Application.Settings
  nameWithType: BindOpen.Application.Settings
  fullName: BindOpen.Application.Settings
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettings*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettings
  name: AppSettings
  nameWithType: TBdoHostOptions<S>.AppSettings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AppSettings
  nameWithType.vb: TBdoHostOptions(Of S).AppSettings
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AppSettings
- uid: BindOpen.Application.Scopes.IBdoHostOptions.AppSettings
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.AppSettings
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: AppSettings
  nameWithType: IBdoHostOptions.AppSettings
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.AppSettings
- uid: BindOpen.Application.Settings.IBdoAppSettings
  commentId: T:BindOpen.Application.Settings.IBdoAppSettings
  parent: BindOpen.Application.Settings
  name: IBdoAppSettings
  nameWithType: IBdoAppSettings
  fullName: BindOpen.Application.Settings.IBdoAppSettings
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Settings*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Settings
  name: Settings
  nameWithType: TBdoHostOptions<S>.Settings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Settings
  nameWithType.vb: TBdoHostOptions(Of S).Settings
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Settings
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.Settings
  commentId: P:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.Settings
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.Settings
  name: Settings
  nameWithType: ITBdoHostOptions<S>.Settings
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.Settings
  nameWithType.vb: ITBdoHostOptions(Of S).Settings
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).Settings
- uid: '{S}'
  commentId: '!:S'
  definition: S
  name: S
  nameWithType: S
  fullName: S
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.Settings
  commentId: P:BindOpen.Application.Scopes.ITBdoHostOptions`1.Settings
  name: Settings
  nameWithType: ITBdoHostOptions<S>.Settings
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.Settings
  nameWithType.vb: ITBdoHostOptions(Of S).Settings
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).Settings
- uid: S
  name: S
  nameWithType: S
  fullName: S
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettingsSpecificationSet*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.AppSettingsSpecificationSet
  name: AppSettingsSpecificationSet
  nameWithType: TBdoHostOptions<S>.AppSettingsSpecificationSet
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AppSettingsSpecificationSet
  nameWithType.vb: TBdoHostOptions(Of S).AppSettingsSpecificationSet
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AppSettingsSpecificationSet
- uid: BindOpen.Application.Scopes.IBdoHostOptions.AppSettingsSpecificationSet
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.AppSettingsSpecificationSet
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: AppSettingsSpecificationSet
  nameWithType: IBdoHostOptions.AppSettingsSpecificationSet
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.AppSettingsSpecificationSet
- uid: BindOpen.Data.Elements.IDataElementSpecSet
  commentId: T:BindOpen.Data.Elements.IDataElementSpecSet
  parent: BindOpen.Data.Elements
  name: IDataElementSpecSet
  nameWithType: IDataElementSpecSet
  fullName: BindOpen.Data.Elements.IDataElementSpecSet
- uid: BindOpen.Data.Elements
  commentId: N:BindOpen.Data.Elements
  name: BindOpen.Data.Elements
  nameWithType: BindOpen.Data.Elements
  fullName: BindOpen.Data.Elements
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartSuccess*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartSuccess
  name: Action_OnStartSuccess
  nameWithType: TBdoHostOptions<S>.Action_OnStartSuccess
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Action_OnStartSuccess
  nameWithType.vb: TBdoHostOptions(Of S).Action_OnStartSuccess
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Action_OnStartSuccess
- uid: System.Action{BindOpen.Application.Services.ITBdoService{{S}}}
  commentId: T:System.Action{BindOpen.Application.Services.ITBdoService{`0}}
  parent: System
  definition: System.Action`1
  name: Action<ITBdoService<S>>
  nameWithType: Action<ITBdoService<S>>
  fullName: System.Action<BindOpen.Application.Services.ITBdoService<S>>
  nameWithType.vb: Action(Of ITBdoService(Of S))
  fullName.vb: System.Action(Of BindOpen.Application.Services.ITBdoService(Of S))
  name.vb: Action(Of ITBdoService(Of S))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Services.ITBdoService`1
    name: ITBdoService
    nameWithType: ITBdoService
    fullName: BindOpen.Application.Services.ITBdoService
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Services.ITBdoService`1
    name: ITBdoService
    nameWithType: ITBdoService
    fullName: BindOpen.Application.Services.ITBdoService
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartFailure*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnStartFailure
  name: Action_OnStartFailure
  nameWithType: TBdoHostOptions<S>.Action_OnStartFailure
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Action_OnStartFailure
  nameWithType.vb: TBdoHostOptions(Of S).Action_OnStartFailure
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Action_OnStartFailure
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionSucess*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionSucess
  name: Action_OnExecutionSucess
  nameWithType: TBdoHostOptions<S>.Action_OnExecutionSucess
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Action_OnExecutionSucess
  nameWithType.vb: TBdoHostOptions(Of S).Action_OnExecutionSucess
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Action_OnExecutionSucess
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionFailure*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Action_OnExecutionFailure
  name: Action_OnExecutionFailure
  nameWithType: TBdoHostOptions<S>.Action_OnExecutionFailure
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Action_OnExecutionFailure
  nameWithType.vb: TBdoHostOptions(Of S).Action_OnExecutionFailure
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Action_OnExecutionFailure
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.DataStore*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.DataStore
  name: DataStore
  nameWithType: TBdoHostOptions<S>.DataStore
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.DataStore
  nameWithType.vb: TBdoHostOptions(Of S).DataStore
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).DataStore
- uid: BindOpen.Application.Scopes.IBdoHostOptions.DataStore
  commentId: P:BindOpen.Application.Scopes.IBdoHostOptions.DataStore
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: DataStore
  nameWithType: IBdoHostOptions.DataStore
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.DataStore
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.#ctor*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.#ctor
  name: TBdoHostOptions
  nameWithType: TBdoHostOptions<S>.TBdoHostOptions
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.TBdoHostOptions
  nameWithType.vb: TBdoHostOptions(Of S).TBdoHostOptions
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).TBdoHostOptions
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.GetSettings*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.GetSettings
  name: GetSettings
  nameWithType: TBdoHostOptions<S>.GetSettings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.GetSettings
  nameWithType.vb: TBdoHostOptions(Of S).GetSettings
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).GetSettings
- uid: BindOpen.Application.Scopes.IBdoHostOptions.GetSettings``1
  commentId: M:BindOpen.Application.Scopes.IBdoHostOptions.GetSettings``1
  parent: BindOpen.Application.Scopes.IBdoHostOptions
  name: GetSettings<T>()
  nameWithType: IBdoHostOptions.GetSettings<T>()
  fullName: BindOpen.Application.Scopes.IBdoHostOptions.GetSettings<T>()
  nameWithType.vb: IBdoHostOptions.GetSettings(Of T)()
  fullName.vb: BindOpen.Application.Scopes.IBdoHostOptions.GetSettings(Of T)()
  name.vb: GetSettings(Of T)()
  spec.csharp:
  - uid: BindOpen.Application.Scopes.IBdoHostOptions.GetSettings``1
    name: GetSettings<T>
    nameWithType: IBdoHostOptions.GetSettings<T>
    fullName: BindOpen.Application.Scopes.IBdoHostOptions.GetSettings<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.IBdoHostOptions.GetSettings``1
    name: GetSettings(Of T)
    nameWithType: IBdoHostOptions.GetSettings(Of T)
    fullName: BindOpen.Application.Scopes.IBdoHostOptions.GetSettings(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Update*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Update
  name: Update
  nameWithType: TBdoHostOptions<S>.Update
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Update
  nameWithType.vb: TBdoHostOptions(Of S).Update
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Update
- uid: BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Common.UpdateModes[]
  isExternal: true
  name: UpdateModes[]
  nameWithType: UpdateModes[]
  fullName: BindOpen.Data.Common.UpdateModes[]
  nameWithType.vb: UpdateModes()
  fullName.vb: BindOpen.Data.Common.UpdateModes()
  name.vb: UpdateModes()
  spec.csharp:
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.SetModule
  name: SetModule
  nameWithType: TBdoHostOptions<S>.SetModule
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetModule
  nameWithType.vb: TBdoHostOptions(Of S).SetModule
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetModule
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetModule(BindOpen.Application.Modules.IAppModule)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetModule(BindOpen.Application.Modules.IAppModule)
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
  name: SetModule(IAppModule)
  nameWithType: ITBdoHostOptions<S>.SetModule(IAppModule)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetModule(BindOpen.Application.Modules.IAppModule)
  nameWithType.vb: ITBdoHostOptions(Of S).SetModule(IAppModule)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetModule(BindOpen.Application.Modules.IAppModule)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
    name: SetModule
    nameWithType: ITBdoHostOptions<S>.SetModule
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Modules.IAppModule
    name: IAppModule
    nameWithType: IAppModule
    fullName: BindOpen.Application.Modules.IAppModule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
    name: SetModule
    nameWithType: ITBdoHostOptions(Of S).SetModule
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Modules.IAppModule
    name: IAppModule
    nameWithType: IAppModule
    fullName: BindOpen.Application.Modules.IAppModule
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
  name: SetModule(IAppModule)
  nameWithType: ITBdoHostOptions<S>.SetModule(IAppModule)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetModule(BindOpen.Application.Modules.IAppModule)
  nameWithType.vb: ITBdoHostOptions(Of S).SetModule(IAppModule)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetModule(BindOpen.Application.Modules.IAppModule)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
    name: SetModule
    nameWithType: ITBdoHostOptions<S>.SetModule
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Modules.IAppModule
    name: IAppModule
    nameWithType: IAppModule
    fullName: BindOpen.Application.Modules.IAppModule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(BindOpen.Application.Modules.IAppModule)
    name: SetModule
    nameWithType: ITBdoHostOptions(Of S).SetModule
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Modules.IAppModule
    name: IAppModule
    nameWithType: IAppModule
    fullName: BindOpen.Application.Modules.IAppModule
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetModule(System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetModule(System.String)
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(System.String)
  name: SetModule(String)
  nameWithType: ITBdoHostOptions<S>.SetModule(String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetModule(System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).SetModule(String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetModule(System.String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(System.String)
    name: SetModule
    nameWithType: ITBdoHostOptions<S>.SetModule
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(System.String)
    name: SetModule
    nameWithType: ITBdoHostOptions(Of S).SetModule
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(System.String)
  isExternal: true
  name: SetModule(String)
  nameWithType: ITBdoHostOptions<S>.SetModule(String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetModule(System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).SetModule(String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetModule(System.String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(System.String)
    name: SetModule
    nameWithType: ITBdoHostOptions<S>.SetModule
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetModule(System.String)
    name: SetModule
    nameWithType: ITBdoHostOptions(Of S).SetModule
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetEnvironment*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.SetEnvironment
  name: SetEnvironment
  nameWithType: TBdoHostOptions<S>.SetEnvironment
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetEnvironment
  nameWithType.vb: TBdoHostOptions(Of S).SetEnvironment
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetEnvironment
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetEnvironment(System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetEnvironment(System.String)
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetEnvironment(System.String)
  name: SetEnvironment(String)
  nameWithType: ITBdoHostOptions<S>.SetEnvironment(String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetEnvironment(System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).SetEnvironment(String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetEnvironment(System.String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetEnvironment(System.String)
    name: SetEnvironment
    nameWithType: ITBdoHostOptions<S>.SetEnvironment
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetEnvironment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetEnvironment(System.String)
    name: SetEnvironment
    nameWithType: ITBdoHostOptions(Of S).SetEnvironment
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetEnvironment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetEnvironment(System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetEnvironment(System.String)
  isExternal: true
  name: SetEnvironment(String)
  nameWithType: ITBdoHostOptions<S>.SetEnvironment(String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetEnvironment(System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).SetEnvironment(String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetEnvironment(System.String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetEnvironment(System.String)
    name: SetEnvironment
    nameWithType: ITBdoHostOptions<S>.SetEnvironment
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetEnvironment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetEnvironment(System.String)
    name: SetEnvironment
    nameWithType: ITBdoHostOptions(Of S).SetEnvironment
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetEnvironment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.SetRootFolder
  name: SetRootFolder
  nameWithType: TBdoHostOptions<S>.SetRootFolder
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetRootFolder
  nameWithType.vb: TBdoHostOptions(Of S).SetRootFolder
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetRootFolder
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}},System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
  name: SetRootFolder(Predicate<ITBdoHostOptions<S>>, String)
  nameWithType: ITBdoHostOptions<S>.SetRootFolder(Predicate<ITBdoHostOptions<S>>, String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetRootFolder(System.Predicate<BindOpen.Application.Scopes.ITBdoHostOptions<S>>, System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).SetRootFolder(Predicate(Of ITBdoHostOptions(Of S)), String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetRootFolder(System.Predicate(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of S)), System.String)
  name.vb: SetRootFolder(Predicate(Of ITBdoHostOptions(Of S)), String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
    name: SetRootFolder
    nameWithType: ITBdoHostOptions<S>.SetRootFolder
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetRootFolder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
    name: SetRootFolder
    nameWithType: ITBdoHostOptions(Of S).SetRootFolder
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetRootFolder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{{S}}}
  commentId: T:System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<ITBdoHostOptions<S>>
  nameWithType: Predicate<ITBdoHostOptions<S>>
  fullName: System.Predicate<BindOpen.Application.Scopes.ITBdoHostOptions<S>>
  nameWithType.vb: Predicate(Of ITBdoHostOptions(Of S))
  fullName.vb: System.Predicate(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of S))
  name.vb: Predicate(Of ITBdoHostOptions(Of S))
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
  isExternal: true
  name: SetRootFolder(Predicate<ITBdoHostOptions<S>>, String)
  nameWithType: ITBdoHostOptions<S>.SetRootFolder(Predicate<ITBdoHostOptions<S>>, String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetRootFolder(System.Predicate<BindOpen.Application.Scopes.ITBdoHostOptions<S>>, System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).SetRootFolder(Predicate(Of ITBdoHostOptions(Of S)), String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetRootFolder(System.Predicate(Of BindOpen.Application.Scopes.ITBdoHostOptions(Of S)), System.String)
  name.vb: SetRootFolder(Predicate(Of ITBdoHostOptions(Of S)), String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
    name: SetRootFolder
    nameWithType: ITBdoHostOptions<S>.SetRootFolder
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetRootFolder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.Predicate{BindOpen.Application.Scopes.ITBdoHostOptions{`0}},System.String)
    name: SetRootFolder
    nameWithType: ITBdoHostOptions(Of S).SetRootFolder
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetRootFolder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1
    name: ITBdoHostOptions
    nameWithType: ITBdoHostOptions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetRootFolder(System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetRootFolder(System.String)
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.String)
  name: SetRootFolder(String)
  nameWithType: ITBdoHostOptions<S>.SetRootFolder(String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetRootFolder(System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).SetRootFolder(String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetRootFolder(System.String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.String)
    name: SetRootFolder
    nameWithType: ITBdoHostOptions<S>.SetRootFolder
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetRootFolder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.String)
    name: SetRootFolder
    nameWithType: ITBdoHostOptions(Of S).SetRootFolder
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetRootFolder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.String)
  isExternal: true
  name: SetRootFolder(String)
  nameWithType: ITBdoHostOptions<S>.SetRootFolder(String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetRootFolder(System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).SetRootFolder(String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetRootFolder(System.String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.String)
    name: SetRootFolder
    nameWithType: ITBdoHostOptions<S>.SetRootFolder
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetRootFolder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetRootFolder(System.String)
    name: SetRootFolder
    nameWithType: ITBdoHostOptions(Of S).SetRootFolder
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetRootFolder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettingsFile
  name: SetHostSettingsFile
  nameWithType: TBdoHostOptions<S>.SetHostSettingsFile
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetHostSettingsFile
  nameWithType.vb: TBdoHostOptions(Of S).SetHostSettingsFile
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetHostSettingsFile
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  name: SetHostSettingsFile(String, Nullable<Boolean>)
  nameWithType: ITBdoHostOptions<S>.SetHostSettingsFile(String, Nullable<Boolean>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettingsFile(System.String, System.Nullable<System.Boolean>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetHostSettingsFile(String, Nullable(Of Boolean))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettingsFile(System.String, System.Nullable(Of System.Boolean))
  name.vb: SetHostSettingsFile(String, Nullable(Of Boolean))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
    name: SetHostSettingsFile
    nameWithType: ITBdoHostOptions<S>.SetHostSettingsFile
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettingsFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
    name: SetHostSettingsFile
    nameWithType: ITBdoHostOptions(Of S).SetHostSettingsFile
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettingsFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
  isExternal: true
  name: SetHostSettingsFile(String, Nullable<Boolean>)
  nameWithType: ITBdoHostOptions<S>.SetHostSettingsFile(String, Nullable<Boolean>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettingsFile(System.String, System.Nullable<System.Boolean>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetHostSettingsFile(String, Nullable(Of Boolean))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettingsFile(System.String, System.Nullable(Of System.Boolean))
  name.vb: SetHostSettingsFile(String, Nullable(Of Boolean))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
    name: SetHostSettingsFile
    nameWithType: ITBdoHostOptions<S>.SetHostSettingsFile
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettingsFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.String,System.Nullable{System.Boolean})
    name: SetHostSettingsFile
    nameWithType: ITBdoHostOptions(Of S).SetHostSettingsFile
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettingsFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetHostSettingsFile(System.Nullable{System.Boolean})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetHostSettingsFile(System.Nullable{System.Boolean})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
  name: SetHostSettingsFile(Nullable<Boolean>)
  nameWithType: ITBdoHostOptions<S>.SetHostSettingsFile(Nullable<Boolean>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettingsFile(System.Nullable<System.Boolean>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetHostSettingsFile(Nullable(Of Boolean))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettingsFile(System.Nullable(Of System.Boolean))
  name.vb: SetHostSettingsFile(Nullable(Of Boolean))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
    name: SetHostSettingsFile
    nameWithType: ITBdoHostOptions<S>.SetHostSettingsFile
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettingsFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
    name: SetHostSettingsFile
    nameWithType: ITBdoHostOptions(Of S).SetHostSettingsFile
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettingsFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
  isExternal: true
  name: SetHostSettingsFile(Nullable<Boolean>)
  nameWithType: ITBdoHostOptions<S>.SetHostSettingsFile(Nullable<Boolean>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettingsFile(System.Nullable<System.Boolean>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetHostSettingsFile(Nullable(Of Boolean))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettingsFile(System.Nullable(Of System.Boolean))
  name.vb: SetHostSettingsFile(Nullable(Of Boolean))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
    name: SetHostSettingsFile
    nameWithType: ITBdoHostOptions<S>.SetHostSettingsFile
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettingsFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettingsFile(System.Nullable{System.Boolean})
    name: SetHostSettingsFile
    nameWithType: ITBdoHostOptions(Of S).SetHostSettingsFile
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettingsFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddExtensions*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.AddExtensions
  name: AddExtensions
  nameWithType: TBdoHostOptions<S>.AddExtensions
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddExtensions
  nameWithType.vb: TBdoHostOptions(Of S).AddExtensions
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddExtensions
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  name: AddExtensions(Action<IBdoExtensionReferenceCollection>, Action<IExtensionLoadOptions>)
  nameWithType: ITBdoHostOptions<S>.AddExtensions(Action<IBdoExtensionReferenceCollection>, Action<IExtensionLoadOptions>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddExtensions(System.Action<BindOpen.Extensions.References.IBdoExtensionReferenceCollection>, System.Action<BindOpen.Application.Scopes.IExtensionLoadOptions>)
  nameWithType.vb: ITBdoHostOptions(Of S).AddExtensions(Action(Of IBdoExtensionReferenceCollection), Action(Of IExtensionLoadOptions))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddExtensions(System.Action(Of BindOpen.Extensions.References.IBdoExtensionReferenceCollection), System.Action(Of BindOpen.Application.Scopes.IExtensionLoadOptions))
  name.vb: AddExtensions(Action(Of IBdoExtensionReferenceCollection), Action(Of IExtensionLoadOptions))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
    name: AddExtensions
    nameWithType: ITBdoHostOptions<S>.AddExtensions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddExtensions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
    name: IBdoExtensionReferenceCollection
    nameWithType: IBdoExtensionReferenceCollection
    fullName: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.IExtensionLoadOptions
    name: IExtensionLoadOptions
    nameWithType: IExtensionLoadOptions
    fullName: BindOpen.Application.Scopes.IExtensionLoadOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
    name: AddExtensions
    nameWithType: ITBdoHostOptions(Of S).AddExtensions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddExtensions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
    name: IBdoExtensionReferenceCollection
    nameWithType: IBdoExtensionReferenceCollection
    fullName: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.IExtensionLoadOptions
    name: IExtensionLoadOptions
    nameWithType: IExtensionLoadOptions
    fullName: BindOpen.Application.Scopes.IExtensionLoadOptions
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection}
  commentId: T:System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection}
  parent: System
  definition: System.Action`1
  name: Action<IBdoExtensionReferenceCollection>
  nameWithType: Action<IBdoExtensionReferenceCollection>
  fullName: System.Action<BindOpen.Extensions.References.IBdoExtensionReferenceCollection>
  nameWithType.vb: Action(Of IBdoExtensionReferenceCollection)
  fullName.vb: System.Action(Of BindOpen.Extensions.References.IBdoExtensionReferenceCollection)
  name.vb: Action(Of IBdoExtensionReferenceCollection)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
    name: IBdoExtensionReferenceCollection
    nameWithType: IBdoExtensionReferenceCollection
    fullName: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
    name: IBdoExtensionReferenceCollection
    nameWithType: IBdoExtensionReferenceCollection
    fullName: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions}
  commentId: T:System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions}
  parent: System
  definition: System.Action`1
  name: Action<IExtensionLoadOptions>
  nameWithType: Action<IExtensionLoadOptions>
  fullName: System.Action<BindOpen.Application.Scopes.IExtensionLoadOptions>
  nameWithType.vb: Action(Of IExtensionLoadOptions)
  fullName.vb: System.Action(Of BindOpen.Application.Scopes.IExtensionLoadOptions)
  name.vb: Action(Of IExtensionLoadOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.IExtensionLoadOptions
    name: IExtensionLoadOptions
    nameWithType: IExtensionLoadOptions
    fullName: BindOpen.Application.Scopes.IExtensionLoadOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.IExtensionLoadOptions
    name: IExtensionLoadOptions
    nameWithType: IExtensionLoadOptions
    fullName: BindOpen.Application.Scopes.IExtensionLoadOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
  isExternal: true
  name: AddExtensions(Action<IBdoExtensionReferenceCollection>, Action<IExtensionLoadOptions>)
  nameWithType: ITBdoHostOptions<S>.AddExtensions(Action<IBdoExtensionReferenceCollection>, Action<IExtensionLoadOptions>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddExtensions(System.Action<BindOpen.Extensions.References.IBdoExtensionReferenceCollection>, System.Action<BindOpen.Application.Scopes.IExtensionLoadOptions>)
  nameWithType.vb: ITBdoHostOptions(Of S).AddExtensions(Action(Of IBdoExtensionReferenceCollection), Action(Of IExtensionLoadOptions))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddExtensions(System.Action(Of BindOpen.Extensions.References.IBdoExtensionReferenceCollection), System.Action(Of BindOpen.Application.Scopes.IExtensionLoadOptions))
  name.vb: AddExtensions(Action(Of IBdoExtensionReferenceCollection), Action(Of IExtensionLoadOptions))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
    name: AddExtensions
    nameWithType: ITBdoHostOptions<S>.AddExtensions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddExtensions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
    name: IBdoExtensionReferenceCollection
    nameWithType: IBdoExtensionReferenceCollection
    fullName: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.IExtensionLoadOptions
    name: IExtensionLoadOptions
    nameWithType: IExtensionLoadOptions
    fullName: BindOpen.Application.Scopes.IExtensionLoadOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddExtensions(System.Action{BindOpen.Extensions.References.IBdoExtensionReferenceCollection},System.Action{BindOpen.Application.Scopes.IExtensionLoadOptions})
    name: AddExtensions
    nameWithType: ITBdoHostOptions(Of S).AddExtensions
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddExtensions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
    name: IBdoExtensionReferenceCollection
    nameWithType: IBdoExtensionReferenceCollection
    fullName: BindOpen.Extensions.References.IBdoExtensionReferenceCollection
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.IExtensionLoadOptions
    name: IExtensionLoadOptions
    nameWithType: IExtensionLoadOptions
    fullName: BindOpen.Application.Scopes.IExtensionLoadOptions
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.SetHostSettings
  name: SetHostSettings
  nameWithType: TBdoHostOptions<S>.SetHostSettings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetHostSettings
  nameWithType.vb: TBdoHostOptions(Of S).SetHostSettings
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetHostSettings
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  name: SetHostSettings(Action<IBdoHostSettings>)
  nameWithType: ITBdoHostOptions<S>.SetHostSettings(Action<IBdoHostSettings>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettings(System.Action<BindOpen.Application.Settings.IBdoHostSettings>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetHostSettings(Action(Of IBdoHostSettings))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettings(System.Action(Of BindOpen.Application.Settings.IBdoHostSettings))
  name.vb: SetHostSettings(Action(Of IBdoHostSettings))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
    name: SetHostSettings
    nameWithType: ITBdoHostOptions<S>.SetHostSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
    name: SetHostSettings
    nameWithType: ITBdoHostOptions(Of S).SetHostSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{BindOpen.Application.Settings.IBdoHostSettings}
  commentId: T:System.Action{BindOpen.Application.Settings.IBdoHostSettings}
  parent: System
  definition: System.Action`1
  name: Action<IBdoHostSettings>
  nameWithType: Action<IBdoHostSettings>
  fullName: System.Action<BindOpen.Application.Settings.IBdoHostSettings>
  nameWithType.vb: Action(Of IBdoHostSettings)
  fullName.vb: System.Action(Of BindOpen.Application.Settings.IBdoHostSettings)
  name.vb: Action(Of IBdoHostSettings)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  isExternal: true
  name: SetHostSettings(Action<IBdoHostSettings>)
  nameWithType: ITBdoHostOptions<S>.SetHostSettings(Action<IBdoHostSettings>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettings(System.Action<BindOpen.Application.Settings.IBdoHostSettings>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetHostSettings(Action(Of IBdoHostSettings))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettings(System.Action(Of BindOpen.Application.Settings.IBdoHostSettings))
  name.vb: SetHostSettings(Action(Of IBdoHostSettings))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
    name: SetHostSettings
    nameWithType: ITBdoHostOptions<S>.SetHostSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(System.Action{BindOpen.Application.Settings.IBdoHostSettings})
    name: SetHostSettings
    nameWithType: ITBdoHostOptions(Of S).SetHostSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  name: SetHostSettings(IBdoHostSettings, Action<IBdoHostSettings>)
  nameWithType: ITBdoHostOptions<S>.SetHostSettings(IBdoHostSettings, Action<IBdoHostSettings>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings, System.Action<BindOpen.Application.Settings.IBdoHostSettings>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetHostSettings(IBdoHostSettings, Action(Of IBdoHostSettings))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings, System.Action(Of BindOpen.Application.Settings.IBdoHostSettings))
  name.vb: SetHostSettings(IBdoHostSettings, Action(Of IBdoHostSettings))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
    name: SetHostSettings
    nameWithType: ITBdoHostOptions<S>.SetHostSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
    name: SetHostSettings
    nameWithType: ITBdoHostOptions(Of S).SetHostSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
  isExternal: true
  name: SetHostSettings(IBdoHostSettings, Action<IBdoHostSettings>)
  nameWithType: ITBdoHostOptions<S>.SetHostSettings(IBdoHostSettings, Action<IBdoHostSettings>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings, System.Action<BindOpen.Application.Settings.IBdoHostSettings>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetHostSettings(IBdoHostSettings, Action(Of IBdoHostSettings))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings, System.Action(Of BindOpen.Application.Settings.IBdoHostSettings))
  name.vb: SetHostSettings(IBdoHostSettings, Action(Of IBdoHostSettings))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
    name: SetHostSettings
    nameWithType: ITBdoHostOptions<S>.SetHostSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetHostSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetHostSettings(BindOpen.Application.Settings.IBdoHostSettings,System.Action{BindOpen.Application.Settings.IBdoHostSettings})
    name: SetHostSettings
    nameWithType: ITBdoHostOptions(Of S).SetHostSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetHostSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Settings.IBdoHostSettings
    name: IBdoHostSettings
    nameWithType: IBdoHostSettings
    fullName: BindOpen.Application.Settings.IBdoHostSettings
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.SetAppSettings
  name: SetAppSettings
  nameWithType: TBdoHostOptions<S>.SetAppSettings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.SetAppSettings
  nameWithType.vb: TBdoHostOptions(Of S).SetAppSettings
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).SetAppSettings
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetAppSettings(System.Action{{S}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetAppSettings(System.Action{`0})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(System.Action{`0})
  name: SetAppSettings(Action<S>)
  nameWithType: ITBdoHostOptions<S>.SetAppSettings(Action<S>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetAppSettings(System.Action<S>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetAppSettings(Action(Of S))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetAppSettings(System.Action(Of S))
  name.vb: SetAppSettings(Action(Of S))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(System.Action{`0})
    name: SetAppSettings
    nameWithType: ITBdoHostOptions<S>.SetAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(System.Action{`0})
    name: SetAppSettings
    nameWithType: ITBdoHostOptions(Of S).SetAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{S}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<S>
  nameWithType: Action<S>
  fullName: System.Action<S>
  nameWithType.vb: Action(Of S)
  fullName.vb: System.Action(Of S)
  name.vb: Action(Of S)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(System.Action{`0})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(System.Action{`0})
  isExternal: true
  name: SetAppSettings(Action<S>)
  nameWithType: ITBdoHostOptions<S>.SetAppSettings(Action<S>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetAppSettings(System.Action<S>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetAppSettings(Action(Of S))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetAppSettings(System.Action(Of S))
  name.vb: SetAppSettings(Action(Of S))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(System.Action{`0})
    name: SetAppSettings
    nameWithType: ITBdoHostOptions<S>.SetAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(System.Action{`0})
    name: SetAppSettings
    nameWithType: ITBdoHostOptions(Of S).SetAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.SetAppSettings({S},System.Action{{S}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.SetAppSettings(`0,System.Action{`0})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
  name: SetAppSettings(S, Action<S>)
  nameWithType: ITBdoHostOptions<S>.SetAppSettings(S, Action<S>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetAppSettings(S, System.Action<S>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetAppSettings(S, Action(Of S))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetAppSettings(S, System.Action(Of S))
  name.vb: SetAppSettings(S, Action(Of S))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
    name: SetAppSettings
    nameWithType: ITBdoHostOptions<S>.SetAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
    name: SetAppSettings
    nameWithType: ITBdoHostOptions(Of S).SetAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
  isExternal: true
  name: SetAppSettings(S, Action<S>)
  nameWithType: ITBdoHostOptions<S>.SetAppSettings(S, Action<S>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetAppSettings(S, System.Action<S>)
  nameWithType.vb: ITBdoHostOptions(Of S).SetAppSettings(S, Action(Of S))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetAppSettings(S, System.Action(Of S))
  name.vb: SetAppSettings(S, Action(Of S))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
    name: SetAppSettings
    nameWithType: ITBdoHostOptions<S>.SetAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.SetAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.SetAppSettings(`0,System.Action{`0})
    name: SetAppSettings
    nameWithType: ITBdoHostOptions(Of S).SetAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).SetAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.DefineAppSettings*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.DefineAppSettings
  name: DefineAppSettings
  nameWithType: TBdoHostOptions<S>.DefineAppSettings
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.DefineAppSettings
  nameWithType.vb: TBdoHostOptions(Of S).DefineAppSettings
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).DefineAppSettings
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  name: DefineAppSettings(IDataElementSpecSet)
  nameWithType: ITBdoHostOptions<S>.DefineAppSettings(IDataElementSpecSet)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  nameWithType.vb: ITBdoHostOptions(Of S).DefineAppSettings(IDataElementSpecSet)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
    name: DefineAppSettings
    nameWithType: ITBdoHostOptions<S>.DefineAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.DefineAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpecSet
    name: IDataElementSpecSet
    nameWithType: IDataElementSpecSet
    fullName: BindOpen.Data.Elements.IDataElementSpecSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
    name: DefineAppSettings
    nameWithType: ITBdoHostOptions(Of S).DefineAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).DefineAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpecSet
    name: IDataElementSpecSet
    nameWithType: IDataElementSpecSet
    fullName: BindOpen.Data.Elements.IDataElementSpecSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  name: DefineAppSettings(IDataElementSpecSet)
  nameWithType: ITBdoHostOptions<S>.DefineAppSettings(IDataElementSpecSet)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  nameWithType.vb: ITBdoHostOptions(Of S).DefineAppSettings(IDataElementSpecSet)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
    name: DefineAppSettings
    nameWithType: ITBdoHostOptions<S>.DefineAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.DefineAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpecSet
    name: IDataElementSpecSet
    nameWithType: IDataElementSpecSet
    fullName: BindOpen.Data.Elements.IDataElementSpecSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.DefineAppSettings(BindOpen.Data.Elements.IDataElementSpecSet)
    name: DefineAppSettings
    nameWithType: ITBdoHostOptions(Of S).DefineAppSettings
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).DefineAppSettings
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpecSet
    name: IDataElementSpecSet
    nameWithType: IDataElementSpecSet
    fullName: BindOpen.Data.Elements.IDataElementSpecSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddLoggers*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.AddLoggers
  name: AddLoggers
  nameWithType: TBdoHostOptions<S>.AddLoggers
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddLoggers
  nameWithType.vb: TBdoHostOptions(Of S).AddLoggers
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddLoggers
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  name: AddLoggers(IBdoLogger[])
  nameWithType: ITBdoHostOptions<S>.AddLoggers(IBdoLogger[])
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  nameWithType.vb: ITBdoHostOptions(Of S).AddLoggers(IBdoLogger())
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: AddLoggers(IBdoLogger())
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
    name: AddLoggers
    nameWithType: ITBdoHostOptions<S>.AddLoggers
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
    name: AddLoggers
    nameWithType: ITBdoHostOptions(Of S).AddLoggers
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
  isExternal: true
  name: IBdoLogger[]
  nameWithType: IBdoLogger[]
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
  nameWithType.vb: IBdoLogger()
  fullName.vb: BindOpen.System.Diagnostics.Loggers.IBdoLogger()
  name.vb: IBdoLogger()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  name: AddLoggers(IBdoLogger[])
  nameWithType: ITBdoHostOptions<S>.AddLoggers(IBdoLogger[])
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  nameWithType.vb: ITBdoHostOptions(Of S).AddLoggers(IBdoLogger())
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: AddLoggers(IBdoLogger())
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
    name: AddLoggers
    nameWithType: ITBdoHostOptions<S>.AddLoggers
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
    name: AddLoggers
    nameWithType: ITBdoHostOptions(Of S).AddLoggers
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultFileLogger*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultFileLogger
  name: AddDefaultFileLogger
  nameWithType: TBdoHostOptions<S>.AddDefaultFileLogger
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddDefaultFileLogger
  nameWithType.vb: TBdoHostOptions(Of S).AddDefaultFileLogger
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddDefaultFileLogger
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddDefaultFileLogger(System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.AddDefaultFileLogger(System.String)
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultFileLogger(System.String)
  name: AddDefaultFileLogger(String)
  nameWithType: ITBdoHostOptions<S>.AddDefaultFileLogger(String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDefaultFileLogger(System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).AddDefaultFileLogger(String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDefaultFileLogger(System.String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultFileLogger(System.String)
    name: AddDefaultFileLogger
    nameWithType: ITBdoHostOptions<S>.AddDefaultFileLogger
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDefaultFileLogger
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultFileLogger(System.String)
    name: AddDefaultFileLogger
    nameWithType: ITBdoHostOptions(Of S).AddDefaultFileLogger
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDefaultFileLogger
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultFileLogger(System.String)
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultFileLogger(System.String)
  isExternal: true
  name: AddDefaultFileLogger(String)
  nameWithType: ITBdoHostOptions<S>.AddDefaultFileLogger(String)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDefaultFileLogger(System.String)
  nameWithType.vb: ITBdoHostOptions(Of S).AddDefaultFileLogger(String)
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDefaultFileLogger(System.String)
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultFileLogger(System.String)
    name: AddDefaultFileLogger
    nameWithType: ITBdoHostOptions<S>.AddDefaultFileLogger
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDefaultFileLogger
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultFileLogger(System.String)
    name: AddDefaultFileLogger
    nameWithType: ITBdoHostOptions(Of S).AddDefaultFileLogger
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDefaultFileLogger
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultConsoleLogger*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.AddDefaultConsoleLogger
  name: AddDefaultConsoleLogger
  nameWithType: TBdoHostOptions<S>.AddDefaultConsoleLogger
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddDefaultConsoleLogger
  nameWithType.vb: TBdoHostOptions(Of S).AddDefaultConsoleLogger
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddDefaultConsoleLogger
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddDefaultConsoleLogger
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.AddDefaultConsoleLogger
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultConsoleLogger
  name: AddDefaultConsoleLogger()
  nameWithType: ITBdoHostOptions<S>.AddDefaultConsoleLogger()
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDefaultConsoleLogger()
  nameWithType.vb: ITBdoHostOptions(Of S).AddDefaultConsoleLogger()
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDefaultConsoleLogger()
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultConsoleLogger
    name: AddDefaultConsoleLogger
    nameWithType: ITBdoHostOptions<S>.AddDefaultConsoleLogger
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDefaultConsoleLogger
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultConsoleLogger
    name: AddDefaultConsoleLogger
    nameWithType: ITBdoHostOptions(Of S).AddDefaultConsoleLogger
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDefaultConsoleLogger
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultConsoleLogger
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultConsoleLogger
  name: AddDefaultConsoleLogger()
  nameWithType: ITBdoHostOptions<S>.AddDefaultConsoleLogger()
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDefaultConsoleLogger()
  nameWithType.vb: ITBdoHostOptions(Of S).AddDefaultConsoleLogger()
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDefaultConsoleLogger()
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultConsoleLogger
    name: AddDefaultConsoleLogger
    nameWithType: ITBdoHostOptions<S>.AddDefaultConsoleLogger
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDefaultConsoleLogger
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDefaultConsoleLogger
    name: AddDefaultConsoleLogger
    nameWithType: ITBdoHostOptions(Of S).AddDefaultConsoleLogger
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDefaultConsoleLogger
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartSuccess*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartSuccess
  name: ExecuteOnStartSuccess
  nameWithType: TBdoHostOptions<S>.ExecuteOnStartSuccess
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExecuteOnStartSuccess
  nameWithType.vb: TBdoHostOptions(Of S).ExecuteOnStartSuccess
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExecuteOnStartSuccess
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  name: ExecuteOnStartSuccess(Action<ITBdoHost<S>>)
  nameWithType: ITBdoHostOptions<S>.ExecuteOnStartSuccess(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnStartSuccess(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  nameWithType.vb: ITBdoHostOptions(Of S).ExecuteOnStartSuccess(Action(Of ITBdoHost(Of S)))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnStartSuccess(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnStartSuccess(Action(Of ITBdoHost(Of S)))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnStartSuccess
    nameWithType: ITBdoHostOptions<S>.ExecuteOnStartSuccess
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnStartSuccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnStartSuccess
    nameWithType: ITBdoHostOptions(Of S).ExecuteOnStartSuccess
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnStartSuccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}}
  commentId: T:System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}}
  parent: System
  definition: System.Action`1
  name: Action<ITBdoHost<S>>
  nameWithType: Action<ITBdoHost<S>>
  fullName: System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>
  nameWithType.vb: Action(Of ITBdoHost(Of S))
  fullName.vb: System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S))
  name.vb: Action(Of ITBdoHost(Of S))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  isExternal: true
  name: ExecuteOnStartSuccess(Action<ITBdoHost<S>>)
  nameWithType: ITBdoHostOptions<S>.ExecuteOnStartSuccess(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnStartSuccess(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  nameWithType.vb: ITBdoHostOptions(Of S).ExecuteOnStartSuccess(Action(Of ITBdoHost(Of S)))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnStartSuccess(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnStartSuccess(Action(Of ITBdoHost(Of S)))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnStartSuccess
    nameWithType: ITBdoHostOptions<S>.ExecuteOnStartSuccess
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnStartSuccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnStartSuccess
    nameWithType: ITBdoHostOptions(Of S).ExecuteOnStartSuccess
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnStartSuccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartFailure*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnStartFailure
  name: ExecuteOnStartFailure
  nameWithType: TBdoHostOptions<S>.ExecuteOnStartFailure
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExecuteOnStartFailure
  nameWithType.vb: TBdoHostOptions(Of S).ExecuteOnStartFailure
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExecuteOnStartFailure
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  name: ExecuteOnStartFailure(Action<ITBdoHost<S>>)
  nameWithType: ITBdoHostOptions<S>.ExecuteOnStartFailure(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnStartFailure(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  nameWithType.vb: ITBdoHostOptions(Of S).ExecuteOnStartFailure(Action(Of ITBdoHost(Of S)))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnStartFailure(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnStartFailure(Action(Of ITBdoHost(Of S)))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnStartFailure
    nameWithType: ITBdoHostOptions<S>.ExecuteOnStartFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnStartFailure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnStartFailure
    nameWithType: ITBdoHostOptions(Of S).ExecuteOnStartFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnStartFailure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  isExternal: true
  name: ExecuteOnStartFailure(Action<ITBdoHost<S>>)
  nameWithType: ITBdoHostOptions<S>.ExecuteOnStartFailure(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnStartFailure(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  nameWithType.vb: ITBdoHostOptions(Of S).ExecuteOnStartFailure(Action(Of ITBdoHost(Of S)))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnStartFailure(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnStartFailure(Action(Of ITBdoHost(Of S)))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnStartFailure
    nameWithType: ITBdoHostOptions<S>.ExecuteOnStartFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnStartFailure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnStartFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnStartFailure
    nameWithType: ITBdoHostOptions(Of S).ExecuteOnStartFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnStartFailure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionSuccess*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionSuccess
  name: ExecuteOnExecutionSuccess
  nameWithType: TBdoHostOptions<S>.ExecuteOnExecutionSuccess
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExecuteOnExecutionSuccess
  nameWithType.vb: TBdoHostOptions(Of S).ExecuteOnExecutionSuccess
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExecuteOnExecutionSuccess
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  name: ExecuteOnExecutionSuccess(Action<ITBdoHost<S>>)
  nameWithType: ITBdoHostOptions<S>.ExecuteOnExecutionSuccess(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnExecutionSuccess(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  nameWithType.vb: ITBdoHostOptions(Of S).ExecuteOnExecutionSuccess(Action(Of ITBdoHost(Of S)))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnExecutionSuccess(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnExecutionSuccess(Action(Of ITBdoHost(Of S)))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnExecutionSuccess
    nameWithType: ITBdoHostOptions<S>.ExecuteOnExecutionSuccess
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnExecutionSuccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnExecutionSuccess
    nameWithType: ITBdoHostOptions(Of S).ExecuteOnExecutionSuccess
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnExecutionSuccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  isExternal: true
  name: ExecuteOnExecutionSuccess(Action<ITBdoHost<S>>)
  nameWithType: ITBdoHostOptions<S>.ExecuteOnExecutionSuccess(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnExecutionSuccess(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  nameWithType.vb: ITBdoHostOptions(Of S).ExecuteOnExecutionSuccess(Action(Of ITBdoHost(Of S)))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnExecutionSuccess(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnExecutionSuccess(Action(Of ITBdoHost(Of S)))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnExecutionSuccess
    nameWithType: ITBdoHostOptions<S>.ExecuteOnExecutionSuccess
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnExecutionSuccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionSuccess(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnExecutionSuccess
    nameWithType: ITBdoHostOptions(Of S).ExecuteOnExecutionSuccess
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnExecutionSuccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionFailure*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ExecuteOnExecutionFailure
  name: ExecuteOnExecutionFailure
  nameWithType: TBdoHostOptions<S>.ExecuteOnExecutionFailure
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ExecuteOnExecutionFailure
  nameWithType.vb: TBdoHostOptions(Of S).ExecuteOnExecutionFailure
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ExecuteOnExecutionFailure
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{{S}}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  name: ExecuteOnExecutionFailure(Action<ITBdoHost<S>>)
  nameWithType: ITBdoHostOptions<S>.ExecuteOnExecutionFailure(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnExecutionFailure(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  nameWithType.vb: ITBdoHostOptions(Of S).ExecuteOnExecutionFailure(Action(Of ITBdoHost(Of S)))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnExecutionFailure(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnExecutionFailure(Action(Of ITBdoHost(Of S)))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnExecutionFailure
    nameWithType: ITBdoHostOptions<S>.ExecuteOnExecutionFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnExecutionFailure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnExecutionFailure
    nameWithType: ITBdoHostOptions(Of S).ExecuteOnExecutionFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnExecutionFailure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
  isExternal: true
  name: ExecuteOnExecutionFailure(Action<ITBdoHost<S>>)
  nameWithType: ITBdoHostOptions<S>.ExecuteOnExecutionFailure(Action<ITBdoHost<S>>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnExecutionFailure(System.Action<BindOpen.Application.Scopes.ITBdoHost<S>>)
  nameWithType.vb: ITBdoHostOptions(Of S).ExecuteOnExecutionFailure(Action(Of ITBdoHost(Of S)))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnExecutionFailure(System.Action(Of BindOpen.Application.Scopes.ITBdoHost(Of S)))
  name.vb: ExecuteOnExecutionFailure(Action(Of ITBdoHost(Of S)))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnExecutionFailure
    nameWithType: ITBdoHostOptions<S>.ExecuteOnExecutionFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ExecuteOnExecutionFailure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ExecuteOnExecutionFailure(System.Action{BindOpen.Application.Scopes.ITBdoHost{`0}})
    name: ExecuteOnExecutionFailure
    nameWithType: ITBdoHostOptions(Of S).ExecuteOnExecutionFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ExecuteOnExecutionFailure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Application.Scopes.ITBdoHost`1
    name: ITBdoHost
    nameWithType: ITBdoHost
    fullName: BindOpen.Application.Scopes.ITBdoHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnStartFailure*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnStartFailure
  name: ThrowExceptionOnStartFailure
  nameWithType: TBdoHostOptions<S>.ThrowExceptionOnStartFailure
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ThrowExceptionOnStartFailure
  nameWithType.vb: TBdoHostOptions(Of S).ThrowExceptionOnStartFailure
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ThrowExceptionOnStartFailure
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ThrowExceptionOnStartFailure
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.ThrowExceptionOnStartFailure
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnStartFailure
  name: ThrowExceptionOnStartFailure()
  nameWithType: ITBdoHostOptions<S>.ThrowExceptionOnStartFailure()
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ThrowExceptionOnStartFailure()
  nameWithType.vb: ITBdoHostOptions(Of S).ThrowExceptionOnStartFailure()
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ThrowExceptionOnStartFailure()
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnStartFailure
    name: ThrowExceptionOnStartFailure
    nameWithType: ITBdoHostOptions<S>.ThrowExceptionOnStartFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ThrowExceptionOnStartFailure
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnStartFailure
    name: ThrowExceptionOnStartFailure
    nameWithType: ITBdoHostOptions(Of S).ThrowExceptionOnStartFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ThrowExceptionOnStartFailure
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnStartFailure
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnStartFailure
  name: ThrowExceptionOnStartFailure()
  nameWithType: ITBdoHostOptions<S>.ThrowExceptionOnStartFailure()
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ThrowExceptionOnStartFailure()
  nameWithType.vb: ITBdoHostOptions(Of S).ThrowExceptionOnStartFailure()
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ThrowExceptionOnStartFailure()
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnStartFailure
    name: ThrowExceptionOnStartFailure
    nameWithType: ITBdoHostOptions<S>.ThrowExceptionOnStartFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ThrowExceptionOnStartFailure
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnStartFailure
    name: ThrowExceptionOnStartFailure
    nameWithType: ITBdoHostOptions(Of S).ThrowExceptionOnStartFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ThrowExceptionOnStartFailure
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnExecutionFailure*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.ThrowExceptionOnExecutionFailure
  name: ThrowExceptionOnExecutionFailure
  nameWithType: TBdoHostOptions<S>.ThrowExceptionOnExecutionFailure
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.ThrowExceptionOnExecutionFailure
  nameWithType.vb: TBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.ThrowExceptionOnExecutionFailure
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.ThrowExceptionOnExecutionFailure
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnExecutionFailure
  name: ThrowExceptionOnExecutionFailure()
  nameWithType: ITBdoHostOptions<S>.ThrowExceptionOnExecutionFailure()
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ThrowExceptionOnExecutionFailure()
  nameWithType.vb: ITBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure()
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure()
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnExecutionFailure
    name: ThrowExceptionOnExecutionFailure
    nameWithType: ITBdoHostOptions<S>.ThrowExceptionOnExecutionFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ThrowExceptionOnExecutionFailure
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnExecutionFailure
    name: ThrowExceptionOnExecutionFailure
    nameWithType: ITBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnExecutionFailure
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnExecutionFailure
  name: ThrowExceptionOnExecutionFailure()
  nameWithType: ITBdoHostOptions<S>.ThrowExceptionOnExecutionFailure()
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ThrowExceptionOnExecutionFailure()
  nameWithType.vb: ITBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure()
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure()
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnExecutionFailure
    name: ThrowExceptionOnExecutionFailure
    nameWithType: ITBdoHostOptions<S>.ThrowExceptionOnExecutionFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.ThrowExceptionOnExecutionFailure
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.ThrowExceptionOnExecutionFailure
    name: ThrowExceptionOnExecutionFailure
    nameWithType: ITBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).ThrowExceptionOnExecutionFailure
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.AddDataStore*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.AddDataStore
  name: AddDataStore
  nameWithType: TBdoHostOptions<S>.AddDataStore
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.AddDataStore
  nameWithType.vb: TBdoHostOptions(Of S).AddDataStore
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).AddDataStore
- uid: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions{`0}.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  parent: BindOpen.Application.Scopes.ITBdoHostOptions{{S}}
  definition: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  name: AddDataStore(Action<IBdoDataStore>)
  nameWithType: ITBdoHostOptions<S>.AddDataStore(Action<IBdoDataStore>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDataStore(System.Action<BindOpen.Data.Stores.IBdoDataStore>)
  nameWithType.vb: ITBdoHostOptions(Of S).AddDataStore(Action(Of IBdoDataStore))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDataStore(System.Action(Of BindOpen.Data.Stores.IBdoDataStore))
  name.vb: AddDataStore(Action(Of IBdoDataStore))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
    name: AddDataStore
    nameWithType: ITBdoHostOptions<S>.AddDataStore
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDataStore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Stores.IBdoDataStore
    name: IBdoDataStore
    nameWithType: IBdoDataStore
    fullName: BindOpen.Data.Stores.IBdoDataStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
    name: AddDataStore
    nameWithType: ITBdoHostOptions(Of S).AddDataStore
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDataStore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Stores.IBdoDataStore
    name: IBdoDataStore
    nameWithType: IBdoDataStore
    fullName: BindOpen.Data.Stores.IBdoDataStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{BindOpen.Data.Stores.IBdoDataStore}
  commentId: T:System.Action{BindOpen.Data.Stores.IBdoDataStore}
  parent: System
  definition: System.Action`1
  name: Action<IBdoDataStore>
  nameWithType: Action<IBdoDataStore>
  fullName: System.Action<BindOpen.Data.Stores.IBdoDataStore>
  nameWithType.vb: Action(Of IBdoDataStore)
  fullName.vb: System.Action(Of BindOpen.Data.Stores.IBdoDataStore)
  name.vb: Action(Of IBdoDataStore)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Stores.IBdoDataStore
    name: IBdoDataStore
    nameWithType: IBdoDataStore
    fullName: BindOpen.Data.Stores.IBdoDataStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Stores.IBdoDataStore
    name: IBdoDataStore
    nameWithType: IBdoDataStore
    fullName: BindOpen.Data.Stores.IBdoDataStore
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  commentId: M:BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
  isExternal: true
  name: AddDataStore(Action<IBdoDataStore>)
  nameWithType: ITBdoHostOptions<S>.AddDataStore(Action<IBdoDataStore>)
  fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDataStore(System.Action<BindOpen.Data.Stores.IBdoDataStore>)
  nameWithType.vb: ITBdoHostOptions(Of S).AddDataStore(Action(Of IBdoDataStore))
  fullName.vb: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDataStore(System.Action(Of BindOpen.Data.Stores.IBdoDataStore))
  name.vb: AddDataStore(Action(Of IBdoDataStore))
  spec.csharp:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
    name: AddDataStore
    nameWithType: ITBdoHostOptions<S>.AddDataStore
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions<S>.AddDataStore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Stores.IBdoDataStore
    name: IBdoDataStore
    nameWithType: IBdoDataStore
    fullName: BindOpen.Data.Stores.IBdoDataStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Scopes.ITBdoHostOptions`1.AddDataStore(System.Action{BindOpen.Data.Stores.IBdoDataStore})
    name: AddDataStore
    nameWithType: ITBdoHostOptions(Of S).AddDataStore
    fullName: BindOpen.Application.Scopes.ITBdoHostOptions(Of S).AddDataStore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Stores.IBdoDataStore
    name: IBdoDataStore
    nameWithType: IBdoDataStore
    fullName: BindOpen.Data.Stores.IBdoDataStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DataItem.Dispose(Boolean)
  fullName: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.TBdoHostOptions`1.Dispose*
  commentId: Overload:BindOpen.Application.Scopes.TBdoHostOptions`1.Dispose
  name: Dispose
  nameWithType: TBdoHostOptions<S>.Dispose
  fullName: BindOpen.Application.Scopes.TBdoHostOptions<S>.Dispose
  nameWithType.vb: TBdoHostOptions(Of S).Dispose
  fullName.vb: BindOpen.Application.Scopes.TBdoHostOptions(Of S).Dispose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
shouldSkipMarkup: true
