### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.IDbSingleQuery
  commentId: T:BindOpen.Data.Queries.IDbSingleQuery
  id: IDbSingleQuery
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.IDbSingleQuery.AddField(BindOpen.Extensions.Carriers.DbField)
  - BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean,BindOpen.Extensions.Carriers.DbField)
  - BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  - BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  - BindOpen.Data.Queries.IDbSingleQuery.AddIdField(BindOpen.Extensions.Carriers.DbField)
  - BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean,BindOpen.Extensions.Carriers.DbField)
  - BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  - BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  - BindOpen.Data.Queries.IDbSingleQuery.AsDistinct
  - BindOpen.Data.Queries.IDbSingleQuery.Fields
  - BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Data.Expression.IDataExpression)
  - BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Extensions.Carriers.DbTable[])
  - BindOpen.Data.Queries.IDbSingleQuery.From(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  - BindOpen.Data.Queries.IDbSingleQuery.FromClause
  - BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName(System.String)
  - BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName(System.String)
  - BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName(System.String)
  - BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Data.Expression.IDataExpression)
  - BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Extensions.Carriers.DbField[])
  - BindOpen.Data.Queries.IDbSingleQuery.GroupBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  - BindOpen.Data.Queries.IDbSingleQuery.GroupByClause
  - BindOpen.Data.Queries.IDbSingleQuery.Having(BindOpen.Data.Expression.IDataExpression)
  - BindOpen.Data.Queries.IDbSingleQuery.Having(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  - BindOpen.Data.Queries.IDbSingleQuery.HavingClause
  - BindOpen.Data.Queries.IDbSingleQuery.IsDistinct
  - BindOpen.Data.Queries.IDbSingleQuery.Limit
  - BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Expression.IDataExpression)
  - BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Queries.IDbQueryOrderByStatement[])
  - BindOpen.Data.Queries.IDbSingleQuery.OrderBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  - BindOpen.Data.Queries.IDbSingleQuery.OrderByClause
  - BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields
  - BindOpen.Data.Queries.IDbSingleQuery.Union(BindOpen.Data.Queries.DbQueryUnionKind,BindOpen.Data.Queries.IDbSingleQuery)
  - BindOpen.Data.Queries.IDbSingleQuery.UnionClauses
  - BindOpen.Data.Queries.IDbSingleQuery.Where(BindOpen.Data.Expression.IDataExpression)
  - BindOpen.Data.Queries.IDbSingleQuery.Where(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  - BindOpen.Data.Queries.IDbSingleQuery.WhereClause
  - BindOpen.Data.Queries.IDbSingleQuery.WithFields(BindOpen.Extensions.Carriers.DbField[])
  - BindOpen.Data.Queries.IDbSingleQuery.WithFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})
  - BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(BindOpen.Extensions.Carriers.DbField[])
  - BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})
  - BindOpen.Data.Queries.IDbSingleQuery.WithLimit(System.Int32)
  - BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields(BindOpen.Extensions.Carriers.DbField[])
  langs:
  - csharp
  - vb
  name: IDbSingleQuery
  nameWithType: IDbSingleQuery
  fullName: BindOpen.Data.Queries.IDbSingleQuery
  type: Interface
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: 'public interface IDbSingleQuery : IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem'
    content.vb: >-
      Public Interface IDbSingleQuery
          Inherits IDbQuery, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed, IDbQueryItem
  inheritedMembers:
  - BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  - BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  - BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  - BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  - BindOpen.Data.Queries.IDbQuery.GetName
  - BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  - BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  - BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  - BindOpen.Data.Queries.IDbQuery.DataModule
  - BindOpen.Data.Queries.IDbQuery.DataTable
  - BindOpen.Data.Queries.IDbQuery.DataTableAlias
  - BindOpen.Data.Queries.IDbQuery.Kind
  - BindOpen.Data.Queries.IDbQuery.Schema
  - BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  - BindOpen.Data.Queries.IDbQuery.ParameterSet
  - BindOpen.Data.Queries.IDbQuery.CTETables
  - BindOpen.Data.Queries.IDbQueryItem.Expression
  extensionMethods:
  - BindOpen.Data.Queries.IDbSingleQuery.BindOpen.Data.Queries.DbQueryExtension.Filter(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  - BindOpen.Data.Queries.IDbSingleQuery.BindOpen.Data.Queries.DbQueryExtension.Sort(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  - BindOpen.Data.Queries.IDbSingleQuery.BindOpen.Data.Queries.DbQueryExtension.Paginate(System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName(System.String)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName(System.String)
  id: GetFieldWithName(System.String)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: GetFieldWithName(String)
  nameWithType: IDbSingleQuery.GetFieldWithName(String)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: DbField GetFieldWithName(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: BindOpen.Extensions.Carriers.DbField
    content.vb: Function GetFieldWithName(name As String) As DbField
  overload: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName*
- uid: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName(System.String)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName(System.String)
  id: GetFieldWithBoundFieldName(System.String)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: GetFieldWithBoundFieldName(String)
  nameWithType: IDbSingleQuery.GetFieldWithBoundFieldName(String)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: DbField GetFieldWithBoundFieldName(string boundFieldName)
    parameters:
    - id: boundFieldName
      type: System.String
    return:
      type: BindOpen.Extensions.Carriers.DbField
    content.vb: Function GetFieldWithBoundFieldName(boundFieldName As String) As DbField
  overload: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName*
- uid: BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName(System.String)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName(System.String)
  id: GetIdFieldWithBoundFieldName(System.String)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: GetIdFieldWithBoundFieldName(String)
  nameWithType: IDbSingleQuery.GetIdFieldWithBoundFieldName(String)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: DbField GetIdFieldWithBoundFieldName(string boundFieldName)
    parameters:
    - id: boundFieldName
      type: System.String
    return:
      type: BindOpen.Extensions.Carriers.DbField
    content.vb: Function GetIdFieldWithBoundFieldName(boundFieldName As String) As DbField
  overload: BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName*
- uid: BindOpen.Data.Queries.IDbSingleQuery.AsDistinct
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AsDistinct
  id: AsDistinct
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AsDistinct()
  nameWithType: IDbSingleQuery.AsDistinct()
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AsDistinct()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery AsDistinct()
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function AsDistinct As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AsDistinct*
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithLimit(System.Int32)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.WithLimit(System.Int32)
  id: WithLimit(System.Int32)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: WithLimit(Int32)
  nameWithType: IDbSingleQuery.WithLimit(Int32)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithLimit(System.Int32)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery WithLimit(int limit)
    parameters:
    - id: limit
      type: System.Int32
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function WithLimit(limit As Integer) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.WithLimit*
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithFields(BindOpen.Extensions.Carriers.DbField[])
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.WithFields(BindOpen.Extensions.Carriers.DbField[])
  id: WithFields(BindOpen.Extensions.Carriers.DbField[])
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: WithFields(DbField[])
  nameWithType: IDbSingleQuery.WithFields(DbField[])
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithFields(BindOpen.Extensions.Carriers.DbField[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the specified fields.\n"
  syntax:
    content: IDbSingleQuery WithFields(params DbField[] fields)
    parameters:
    - id: fields
      type: BindOpen.Extensions.Carriers.DbField[]
      description: The fields to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function WithFields(ParamArray fields As DbField()) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.WithFields*
  nameWithType.vb: IDbSingleQuery.WithFields(DbField())
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.WithFields(BindOpen.Extensions.Carriers.DbField())
  name.vb: WithFields(DbField())
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields(BindOpen.Extensions.Carriers.DbField[])
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields(BindOpen.Extensions.Carriers.DbField[])
  id: WithReturnedIdFields(BindOpen.Extensions.Carriers.DbField[])
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: WithReturnedIdFields(DbField[])
  nameWithType: IDbSingleQuery.WithReturnedIdFields(DbField[])
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields(BindOpen.Extensions.Carriers.DbField[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the specified returned ID fields.\n"
  syntax:
    content: IDbSingleQuery WithReturnedIdFields(params DbField[] fields)
    parameters:
    - id: fields
      type: BindOpen.Extensions.Carriers.DbField[]
      description: The fields to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function WithReturnedIdFields(ParamArray fields As DbField()) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields*
  nameWithType.vb: IDbSingleQuery.WithReturnedIdFields(DbField())
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields(BindOpen.Extensions.Carriers.DbField())
  name.vb: WithReturnedIdFields(DbField())
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.WithFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})
  id: WithFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: WithFields(Func<IDbSingleQuery, DbField[]>)
  nameWithType: IDbSingleQuery.WithFields(Func<IDbSingleQuery, DbField[]>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithFields(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField[]>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the fields using an initialization function.\n"
  syntax:
    content: IDbSingleQuery WithFields(Func<IDbSingleQuery, DbField[]> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]}
      description: The initiliazation function to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function WithFields(initializer As Func(Of IDbSingleQuery, DbField())) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.WithFields*
  nameWithType.vb: IDbSingleQuery.WithFields(Func(Of IDbSingleQuery, DbField()))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.WithFields(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField()))
  name.vb: WithFields(Func(Of IDbSingleQuery, DbField()))
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddField(BindOpen.Extensions.Carriers.DbField)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AddField(BindOpen.Extensions.Carriers.DbField)
  id: AddField(BindOpen.Extensions.Carriers.DbField)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AddField(DbField)
  nameWithType: IDbSingleQuery.AddField(DbField)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddField(BindOpen.Extensions.Carriers.DbField)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds the specified field.\n"
  syntax:
    content: IDbSingleQuery AddField(DbField field)
    parameters:
    - id: field
      type: BindOpen.Extensions.Carriers.DbField
      description: The field to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function AddField(field As DbField) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AddField*
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean,BindOpen.Extensions.Carriers.DbField)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean,BindOpen.Extensions.Carriers.DbField)
  id: AddField(System.Boolean,BindOpen.Extensions.Carriers.DbField)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AddField(Boolean, DbField)
  nameWithType: IDbSingleQuery.AddField(Boolean, DbField)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean, BindOpen.Extensions.Carriers.DbField)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds the specified field.\n"
  syntax:
    content: IDbSingleQuery AddField(bool canBeAdded, DbField field)
    parameters:
    - id: canBeAdded
      type: System.Boolean
      description: Indicates whether the field can be added.
    - id: field
      type: BindOpen.Extensions.Carriers.DbField
      description: The field to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function AddField(canBeAdded As Boolean, field As DbField) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AddField*
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  id: AddField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AddField(Func<IDbSingleQuery, DbField>)
  nameWithType: IDbSingleQuery.AddField(Func<IDbSingleQuery, DbField>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the field using an initialization function.\n"
  syntax:
    content: IDbSingleQuery AddField(Func<IDbSingleQuery, DbField> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField}
      description: The initiliazation function to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function AddField(initializer As Func(Of IDbSingleQuery, DbField)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AddField*
  nameWithType.vb: IDbSingleQuery.AddField(Func(Of IDbSingleQuery, DbField))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField))
  name.vb: AddField(Func(Of IDbSingleQuery, DbField))
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  id: AddField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AddField(Boolean, Func<IDbSingleQuery, DbField>)
  nameWithType: IDbSingleQuery.AddField(Boolean, Func<IDbSingleQuery, DbField>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean, System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the field using an initialization function.\n"
  syntax:
    content: IDbSingleQuery AddField(bool canBeAdded, Func<IDbSingleQuery, DbField> initializer)
    parameters:
    - id: canBeAdded
      type: System.Boolean
      description: Indicates whether the field can be added.
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField}
      description: The initiliazation function to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function AddField(canBeAdded As Boolean, initializer As Func(Of IDbSingleQuery, DbField)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AddField*
  nameWithType.vb: IDbSingleQuery.AddField(Boolean, Func(Of IDbSingleQuery, DbField))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean, System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField))
  name.vb: AddField(Boolean, Func(Of IDbSingleQuery, DbField))
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(BindOpen.Extensions.Carriers.DbField[])
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(BindOpen.Extensions.Carriers.DbField[])
  id: WithIdFields(BindOpen.Extensions.Carriers.DbField[])
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: WithIdFields(DbField[])
  nameWithType: IDbSingleQuery.WithIdFields(DbField[])
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(BindOpen.Extensions.Carriers.DbField[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the specified ID fields.\n"
  syntax:
    content: IDbSingleQuery WithIdFields(params DbField[] fields)
    parameters:
    - id: fields
      type: BindOpen.Extensions.Carriers.DbField[]
      description: The ID fields to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function WithIdFields(ParamArray fields As DbField()) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields*
  nameWithType.vb: IDbSingleQuery.WithIdFields(DbField())
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(BindOpen.Extensions.Carriers.DbField())
  name.vb: WithIdFields(DbField())
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})
  id: WithIdFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: WithIdFields(Func<IDbSingleQuery, DbField[]>)
  nameWithType: IDbSingleQuery.WithIdFields(Func<IDbSingleQuery, DbField[]>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField[]>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSets the ID fields using an initialization function.\n"
  syntax:
    content: IDbSingleQuery WithIdFields(Func<IDbSingleQuery, DbField[]> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]}
      description: The initiliazation function to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function WithIdFields(initializer As Func(Of IDbSingleQuery, DbField())) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields*
  nameWithType.vb: IDbSingleQuery.WithIdFields(Func(Of IDbSingleQuery, DbField()))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField()))
  name.vb: WithIdFields(Func(Of IDbSingleQuery, DbField()))
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(BindOpen.Extensions.Carriers.DbField)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AddIdField(BindOpen.Extensions.Carriers.DbField)
  id: AddIdField(BindOpen.Extensions.Carriers.DbField)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AddIdField(DbField)
  nameWithType: IDbSingleQuery.AddIdField(DbField)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(BindOpen.Extensions.Carriers.DbField)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds the specified ID field.\n"
  syntax:
    content: IDbSingleQuery AddIdField(DbField field)
    parameters:
    - id: field
      type: BindOpen.Extensions.Carriers.DbField
      description: The ID field to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function AddIdField(field As DbField) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AddIdField*
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean,BindOpen.Extensions.Carriers.DbField)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean,BindOpen.Extensions.Carriers.DbField)
  id: AddIdField(System.Boolean,BindOpen.Extensions.Carriers.DbField)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AddIdField(Boolean, DbField)
  nameWithType: IDbSingleQuery.AddIdField(Boolean, DbField)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean, BindOpen.Extensions.Carriers.DbField)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds the specified ID field.\n"
  syntax:
    content: IDbSingleQuery AddIdField(bool canBeAdded, DbField field)
    parameters:
    - id: canBeAdded
      type: System.Boolean
      description: Indicates whether the field can be added.
    - id: field
      type: BindOpen.Extensions.Carriers.DbField
      description: The ID field to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function AddIdField(canBeAdded As Boolean, field As DbField) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AddIdField*
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  id: AddIdField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AddIdField(Func<IDbSingleQuery, DbField>)
  nameWithType: IDbSingleQuery.AddIdField(Func<IDbSingleQuery, DbField>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds the ID field using an initialization function.\n"
  syntax:
    content: IDbSingleQuery AddIdField(Func<IDbSingleQuery, DbField> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField}
      description: The initiliazation function to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function AddIdField(initializer As Func(Of IDbSingleQuery, DbField)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AddIdField*
  nameWithType.vb: IDbSingleQuery.AddIdField(Func(Of IDbSingleQuery, DbField))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField))
  name.vb: AddIdField(Func(Of IDbSingleQuery, DbField))
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  id: AddIdField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: AddIdField(Boolean, Func<IDbSingleQuery, DbField>)
  nameWithType: IDbSingleQuery.AddIdField(Boolean, Func<IDbSingleQuery, DbField>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean, System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds the ID field using an initialization function.\n"
  syntax:
    content: IDbSingleQuery AddIdField(bool canBeAdded, Func<IDbSingleQuery, DbField> initializer)
    parameters:
    - id: canBeAdded
      type: System.Boolean
      description: Indicates whether the field can be added.
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField}
      description: The initiliazation function to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: Returns this instance.
    content.vb: Function AddIdField(canBeAdded As Boolean, initializer As Func(Of IDbSingleQuery, DbField)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.AddIdField*
  nameWithType.vb: IDbSingleQuery.AddIdField(Boolean, Func(Of IDbSingleQuery, DbField))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean, System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField))
  name.vb: AddIdField(Boolean, Func(Of IDbSingleQuery, DbField))
- uid: BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Extensions.Carriers.DbTable[])
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Extensions.Carriers.DbTable[])
  id: From(BindOpen.Extensions.Carriers.DbTable[])
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: From(DbTable[])
  nameWithType: IDbSingleQuery.From(DbTable[])
  fullName: BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Extensions.Carriers.DbTable[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery From(params DbTable[] tables)
    parameters:
    - id: tables
      type: BindOpen.Extensions.Carriers.DbTable[]
      description: The tables to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function From(ParamArray tables As DbTable()) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.From*
  nameWithType.vb: IDbSingleQuery.From(DbTable())
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Extensions.Carriers.DbTable())
  name.vb: From(DbTable())
- uid: BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Data.Expression.IDataExpression)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Data.Expression.IDataExpression)
  id: From(BindOpen.Data.Expression.IDataExpression)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: From(IDataExpression)
  nameWithType: IDbSingleQuery.From(IDataExpression)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Data.Expression.IDataExpression)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery From(IDataExpression expression)
    parameters:
    - id: expression
      type: BindOpen.Data.Expression.IDataExpression
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function From(expression As IDataExpression) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.From*
- uid: BindOpen.Data.Queries.IDbSingleQuery.From(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.From(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  id: From(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: From(Func<IDbSingleQuery, IDataExpression>)
  nameWithType: IDbSingleQuery.From(Func<IDbSingleQuery, IDataExpression>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.From(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery From(Func<IDbSingleQuery, IDataExpression> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression}
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function From(initializer As Func(Of IDbSingleQuery, IDataExpression)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.From*
  nameWithType.vb: IDbSingleQuery.From(Func(Of IDbSingleQuery, IDataExpression))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.From(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression))
  name.vb: From(Func(Of IDbSingleQuery, IDataExpression))
- uid: BindOpen.Data.Queries.IDbSingleQuery.Union(BindOpen.Data.Queries.DbQueryUnionKind,BindOpen.Data.Queries.IDbSingleQuery)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.Union(BindOpen.Data.Queries.DbQueryUnionKind,BindOpen.Data.Queries.IDbSingleQuery)
  id: Union(BindOpen.Data.Queries.DbQueryUnionKind,BindOpen.Data.Queries.IDbSingleQuery)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: Union(DbQueryUnionKind, IDbSingleQuery)
  nameWithType: IDbSingleQuery.Union(DbQueryUnionKind, IDbSingleQuery)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Union(BindOpen.Data.Queries.DbQueryUnionKind, BindOpen.Data.Queries.IDbSingleQuery)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery Union(DbQueryUnionKind kind, IDbSingleQuery query)
    parameters:
    - id: kind
      type: BindOpen.Data.Queries.DbQueryUnionKind
    - id: query
      type: BindOpen.Data.Queries.IDbSingleQuery
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function Union(kind As DbQueryUnionKind, query As IDbSingleQuery) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.Union*
- uid: BindOpen.Data.Queries.IDbSingleQuery.Where(BindOpen.Data.Expression.IDataExpression)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.Where(BindOpen.Data.Expression.IDataExpression)
  id: Where(BindOpen.Data.Expression.IDataExpression)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: Where(IDataExpression)
  nameWithType: IDbSingleQuery.Where(IDataExpression)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Where(BindOpen.Data.Expression.IDataExpression)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery Where(IDataExpression expression)
    parameters:
    - id: expression
      type: BindOpen.Data.Expression.IDataExpression
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function Where(expression As IDataExpression) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.Where*
- uid: BindOpen.Data.Queries.IDbSingleQuery.Where(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.Where(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  id: Where(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: Where(Func<IDbSingleQuery, IDataExpression>)
  nameWithType: IDbSingleQuery.Where(Func<IDbSingleQuery, IDataExpression>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Where(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery Where(Func<IDbSingleQuery, IDataExpression> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression}
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function Where(initializer As Func(Of IDbSingleQuery, IDataExpression)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.Where*
  nameWithType.vb: IDbSingleQuery.Where(Func(Of IDbSingleQuery, IDataExpression))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.Where(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression))
  name.vb: Where(Func(Of IDbSingleQuery, IDataExpression))
- uid: BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Queries.IDbQueryOrderByStatement[])
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Queries.IDbQueryOrderByStatement[])
  id: OrderBy(BindOpen.Data.Queries.IDbQueryOrderByStatement[])
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: OrderBy(IDbQueryOrderByStatement[])
  nameWithType: IDbSingleQuery.OrderBy(IDbQueryOrderByStatement[])
  fullName: BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Queries.IDbQueryOrderByStatement[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery OrderBy(params IDbQueryOrderByStatement[] statements)
    parameters:
    - id: statements
      type: BindOpen.Data.Queries.IDbQueryOrderByStatement[]
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function OrderBy(ParamArray statements As IDbQueryOrderByStatement()) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.OrderBy*
  nameWithType.vb: IDbSingleQuery.OrderBy(IDbQueryOrderByStatement())
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Queries.IDbQueryOrderByStatement())
  name.vb: OrderBy(IDbQueryOrderByStatement())
- uid: BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Expression.IDataExpression)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Expression.IDataExpression)
  id: OrderBy(BindOpen.Data.Expression.IDataExpression)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: OrderBy(IDataExpression)
  nameWithType: IDbSingleQuery.OrderBy(IDataExpression)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Expression.IDataExpression)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery OrderBy(IDataExpression expression)
    parameters:
    - id: expression
      type: BindOpen.Data.Expression.IDataExpression
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function OrderBy(expression As IDataExpression) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.OrderBy*
- uid: BindOpen.Data.Queries.IDbSingleQuery.OrderBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.OrderBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  id: OrderBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: OrderBy(Func<IDbSingleQuery, IDataExpression>)
  nameWithType: IDbSingleQuery.OrderBy(Func<IDbSingleQuery, IDataExpression>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.OrderBy(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery OrderBy(Func<IDbSingleQuery, IDataExpression> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression}
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function OrderBy(initializer As Func(Of IDbSingleQuery, IDataExpression)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.OrderBy*
  nameWithType.vb: IDbSingleQuery.OrderBy(Func(Of IDbSingleQuery, IDataExpression))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.OrderBy(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression))
  name.vb: OrderBy(Func(Of IDbSingleQuery, IDataExpression))
- uid: BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Extensions.Carriers.DbField[])
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Extensions.Carriers.DbField[])
  id: GroupBy(BindOpen.Extensions.Carriers.DbField[])
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: GroupBy(DbField[])
  nameWithType: IDbSingleQuery.GroupBy(DbField[])
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Extensions.Carriers.DbField[])
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery GroupBy(params DbField[] fields)
    parameters:
    - id: fields
      type: BindOpen.Extensions.Carriers.DbField[]
      description: The tables to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function GroupBy(ParamArray fields As DbField()) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.GroupBy*
  nameWithType.vb: IDbSingleQuery.GroupBy(DbField())
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Extensions.Carriers.DbField())
  name.vb: GroupBy(DbField())
- uid: BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Data.Expression.IDataExpression)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Data.Expression.IDataExpression)
  id: GroupBy(BindOpen.Data.Expression.IDataExpression)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: GroupBy(IDataExpression)
  nameWithType: IDbSingleQuery.GroupBy(IDataExpression)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Data.Expression.IDataExpression)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery GroupBy(IDataExpression expression)
    parameters:
    - id: expression
      type: BindOpen.Data.Expression.IDataExpression
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function GroupBy(expression As IDataExpression) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.GroupBy*
- uid: BindOpen.Data.Queries.IDbSingleQuery.GroupBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.GroupBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  id: GroupBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: GroupBy(Func<IDbSingleQuery, IDataExpression>)
  nameWithType: IDbSingleQuery.GroupBy(Func<IDbSingleQuery, IDataExpression>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GroupBy(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery GroupBy(Func<IDbSingleQuery, IDataExpression> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression}
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function GroupBy(initializer As Func(Of IDbSingleQuery, IDataExpression)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.GroupBy*
  nameWithType.vb: IDbSingleQuery.GroupBy(Func(Of IDbSingleQuery, IDataExpression))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.GroupBy(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression))
  name.vb: GroupBy(Func(Of IDbSingleQuery, IDataExpression))
- uid: BindOpen.Data.Queries.IDbSingleQuery.Having(BindOpen.Data.Expression.IDataExpression)
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.Having(BindOpen.Data.Expression.IDataExpression)
  id: Having(BindOpen.Data.Expression.IDataExpression)
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: Having(IDataExpression)
  nameWithType: IDbSingleQuery.Having(IDataExpression)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Having(BindOpen.Data.Expression.IDataExpression)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery Having(IDataExpression expression)
    parameters:
    - id: expression
      type: BindOpen.Data.Expression.IDataExpression
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function Having(expression As IDataExpression) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.Having*
- uid: BindOpen.Data.Queries.IDbSingleQuery.Having(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  commentId: M:BindOpen.Data.Queries.IDbSingleQuery.Having(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  id: Having(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: Having(Func<IDbSingleQuery, IDataExpression>)
  nameWithType: IDbSingleQuery.Having(Func<IDbSingleQuery, IDataExpression>)
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Having(System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression>)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: IDbSingleQuery Having(Func<IDbSingleQuery, IDataExpression> initializer)
    parameters:
    - id: initializer
      type: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression}
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
    content.vb: Function Having(initializer As Func(Of IDbSingleQuery, IDataExpression)) As IDbSingleQuery
  overload: BindOpen.Data.Queries.IDbSingleQuery.Having*
  nameWithType.vb: IDbSingleQuery.Having(Func(Of IDbSingleQuery, IDataExpression))
  fullName.vb: BindOpen.Data.Queries.IDbSingleQuery.Having(System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression))
  name.vb: Having(Func(Of IDbSingleQuery, IDataExpression))
- uid: BindOpen.Data.Queries.IDbSingleQuery.IsDistinct
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.IsDistinct
  id: IsDistinct
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: IsDistinct
  nameWithType: IDbSingleQuery.IsDistinct
  fullName: BindOpen.Data.Queries.IDbSingleQuery.IsDistinct
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: bool IsDistinct { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsDistinct As Boolean
  overload: BindOpen.Data.Queries.IDbSingleQuery.IsDistinct*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.Limit
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.Limit
  id: Limit
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: Limit
  nameWithType: IDbSingleQuery.Limit
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Limit
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: int Limit { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Property Limit As Integer
  overload: BindOpen.Data.Queries.IDbSingleQuery.Limit*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.Fields
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.Fields
  id: Fields
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: IDbSingleQuery.Fields
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Fields
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe fields of this instance.\n"
  syntax:
    content: List<DbField> Fields { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbField}
    content.vb: Property Fields As List(Of DbField)
  overload: BindOpen.Data.Queries.IDbSingleQuery.Fields*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields
  id: ReturnedIdFields
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: ReturnedIdFields
  nameWithType: IDbSingleQuery.ReturnedIdFields
  fullName: BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe returned IDs of this instance.\n"
  remarks: This string is split with a comma.
  syntax:
    content: List<DbField> ReturnedIdFields { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbField}
    content.vb: Property ReturnedIdFields As List(Of DbField)
  overload: BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.UnionClauses
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.UnionClauses
  id: UnionClauses
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: UnionClauses
  nameWithType: IDbSingleQuery.UnionClauses
  fullName: BindOpen.Data.Queries.IDbSingleQuery.UnionClauses
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe union clauses of this instance.\n"
  syntax:
    content: List<DbQueryUnionClause> UnionClauses { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Queries.DbQueryUnionClause}
    content.vb: Property UnionClauses As List(Of DbQueryUnionClause)
  overload: BindOpen.Data.Queries.IDbSingleQuery.UnionClauses*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.FromClause
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.FromClause
  id: FromClause
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: FromClause
  nameWithType: IDbSingleQuery.FromClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.FromClause
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: DbQueryFromClause FromClause { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.DbQueryFromClause
    content.vb: Property FromClause As DbQueryFromClause
  overload: BindOpen.Data.Queries.IDbSingleQuery.FromClause*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.WhereClause
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.WhereClause
  id: WhereClause
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: WhereClause
  nameWithType: IDbSingleQuery.WhereClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WhereClause
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: DbQueryWhereClause WhereClause { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.DbQueryWhereClause
    content.vb: Property WhereClause As DbQueryWhereClause
  overload: BindOpen.Data.Queries.IDbSingleQuery.WhereClause*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.GroupByClause
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.GroupByClause
  id: GroupByClause
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: GroupByClause
  nameWithType: IDbSingleQuery.GroupByClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GroupByClause
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: DbQueryGroupByClause GroupByClause { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.DbQueryGroupByClause
    content.vb: Property GroupByClause As DbQueryGroupByClause
  overload: BindOpen.Data.Queries.IDbSingleQuery.GroupByClause*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.HavingClause
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.HavingClause
  id: HavingClause
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: HavingClause
  nameWithType: IDbSingleQuery.HavingClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.HavingClause
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: DbQueryHavingClause HavingClause { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.DbQueryHavingClause
    content.vb: Property HavingClause As DbQueryHavingClause
  overload: BindOpen.Data.Queries.IDbSingleQuery.HavingClause*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Queries.IDbSingleQuery.OrderByClause
  commentId: P:BindOpen.Data.Queries.IDbSingleQuery.OrderByClause
  id: OrderByClause
  parent: BindOpen.Data.Queries.IDbSingleQuery
  langs:
  - csharp
  - vb
  name: OrderByClause
  nameWithType: IDbSingleQuery.OrderByClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.OrderByClause
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: DbQueryOrderByClause OrderByClause { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.DbQueryOrderByClause
    content.vb: Property OrderByClause As DbQueryOrderByClause
  overload: BindOpen.Data.Queries.IDbSingleQuery.OrderByClause*
  modifiers.csharp:
  - get
  - set
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  isExternal: true
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  commentId: M:BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: CheckExistence(Boolean)
  nameWithType: IDbQuery.CheckExistence(Boolean)
  fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: IDbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)
    name: CheckExistence
    nameWithType: IDbQuery.CheckExistence
    fullName: BindOpen.Data.Queries.IDbQuery.CheckExistence
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: WithParameters(IDataElement[])
  nameWithType: IDbQuery.WithParameters(IDataElement[])
  fullName: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
  nameWithType.vb: IDbQuery.WithParameters(IDataElement())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement())
  name.vb: WithParameters(IDataElement())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: IDbQuery.WithParameters
    fullName: BindOpen.Data.Queries.IDbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])
    name: WithParameters
    nameWithType: IDbQuery.WithParameters
    fullName: BindOpen.Data.Queries.IDbQuery.WithParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  commentId: M:BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: AddParameter(ScalarElement)
  nameWithType: IDbQuery.AddParameter(ScalarElement)
  fullName: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: IDbQuery.AddParameter
    fullName: BindOpen.Data.Queries.IDbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)
    name: AddParameter
    nameWithType: IDbQuery.AddParameter
    fullName: BindOpen.Data.Queries.IDbQuery.AddParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.ScalarElement
    name: ScalarElement
    nameWithType: ScalarElement
    fullName: BindOpen.Data.Elements.ScalarElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UsingParameters(IDataElementSpec[])
  nameWithType: IDbQuery.UsingParameters(IDataElementSpec[])
  fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
  nameWithType.vb: IDbQuery.UsingParameters(IDataElementSpec())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec())
  name.vb: UsingParameters(IDataElementSpec())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: IDbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])
    name: UsingParameters
    nameWithType: IDbQuery.UsingParameters
    fullName: BindOpen.Data.Queries.IDbQuery.UsingParameters
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSpec
    name: IDataElementSpec
    nameWithType: IDataElementSpec
    fullName: BindOpen.Data.Elements.IDataElementSpec
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.GetName
  commentId: M:BindOpen.Data.Queries.IDbQuery.GetName
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: GetName()
  nameWithType: IDbQuery.GetName()
  fullName: BindOpen.Data.Queries.IDbQuery.GetName()
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.GetName
    name: GetName
    nameWithType: IDbQuery.GetName
    fullName: BindOpen.Data.Queries.IDbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.GetName
    name: GetName
    nameWithType: IDbQuery.GetName
    fullName: BindOpen.Data.Queries.IDbQuery.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  commentId: M:BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UseParameter(String, Object)
  nameWithType: IDbQuery.UseParameter(String, Object)
  fullName: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  commentId: M:BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: UseParameter(String, DataValueType, Object)
  nameWithType: IDbQuery.UseParameter(String, DataValueType, Object)
  fullName: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String, BindOpen.Data.Common.DataValueType, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)
    name: UseParameter
    nameWithType: IDbQuery.UseParameter
    fullName: BindOpen.Data.Queries.IDbQuery.UseParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  commentId: M:BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: WithCTE(DbTable[])
  nameWithType: IDbQuery.WithCTE(DbTable[])
  fullName: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
  nameWithType.vb: IDbQuery.WithCTE(DbTable())
  fullName.vb: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable())
  name.vb: WithCTE(DbTable())
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: IDbQuery.WithCTE
    fullName: BindOpen.Data.Queries.IDbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])
    name: WithCTE
    nameWithType: IDbQuery.WithCTE
    fullName: BindOpen.Data.Queries.IDbQuery.WithCTE
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery.DataModule
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataModule
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataModule
  nameWithType: IDbQuery.DataModule
  fullName: BindOpen.Data.Queries.IDbQuery.DataModule
- uid: BindOpen.Data.Queries.IDbQuery.DataTable
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataTable
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataTable
  nameWithType: IDbQuery.DataTable
  fullName: BindOpen.Data.Queries.IDbQuery.DataTable
- uid: BindOpen.Data.Queries.IDbQuery.DataTableAlias
  commentId: P:BindOpen.Data.Queries.IDbQuery.DataTableAlias
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: DataTableAlias
  nameWithType: IDbQuery.DataTableAlias
  fullName: BindOpen.Data.Queries.IDbQuery.DataTableAlias
- uid: BindOpen.Data.Queries.IDbQuery.Kind
  commentId: P:BindOpen.Data.Queries.IDbQuery.Kind
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: Kind
  nameWithType: IDbQuery.Kind
  fullName: BindOpen.Data.Queries.IDbQuery.Kind
- uid: BindOpen.Data.Queries.IDbQuery.Schema
  commentId: P:BindOpen.Data.Queries.IDbQuery.Schema
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: Schema
  nameWithType: IDbQuery.Schema
  fullName: BindOpen.Data.Queries.IDbQuery.Schema
- uid: BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  commentId: P:BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: ParameterSpecSet
  nameWithType: IDbQuery.ParameterSpecSet
  fullName: BindOpen.Data.Queries.IDbQuery.ParameterSpecSet
- uid: BindOpen.Data.Queries.IDbQuery.ParameterSet
  commentId: P:BindOpen.Data.Queries.IDbQuery.ParameterSet
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: ParameterSet
  nameWithType: IDbQuery.ParameterSet
  fullName: BindOpen.Data.Queries.IDbQuery.ParameterSet
- uid: BindOpen.Data.Queries.IDbQuery.CTETables
  commentId: P:BindOpen.Data.Queries.IDbQuery.CTETables
  parent: BindOpen.Data.Queries.IDbQuery
  isExternal: true
  name: CTETables
  nameWithType: IDbQuery.CTETables
  fullName: BindOpen.Data.Queries.IDbQuery.CTETables
- uid: BindOpen.Data.Queries.IDbQueryItem.Expression
  commentId: P:BindOpen.Data.Queries.IDbQueryItem.Expression
  parent: BindOpen.Data.Queries.IDbQueryItem
  isExternal: true
  name: Expression
  nameWithType: IDbQueryItem.Expression
  fullName: BindOpen.Data.Queries.IDbQueryItem.Expression
- uid: BindOpen.Data.Queries.IDbSingleQuery.BindOpen.Data.Queries.DbQueryExtension.Filter(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  parent: BindOpen.Data.Queries.DbQueryExtension
  definition: BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  name: Filter(String, IBdoLog, ApiScriptFilteringDefinition)
  nameWithType: DbQueryExtension.Filter(String, IBdoLog, ApiScriptFilteringDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Filter(System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Filter(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
    name: Filter
    nameWithType: DbQueryExtension.Filter
    fullName: BindOpen.Data.Queries.DbQueryExtension.Filter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptFilteringDefinition
    name: ApiScriptFilteringDefinition
    nameWithType: ApiScriptFilteringDefinition
    fullName: BindOpen.Data.Queries.ApiScriptFilteringDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Filter(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
    name: Filter
    nameWithType: DbQueryExtension.Filter
    fullName: BindOpen.Data.Queries.DbQueryExtension.Filter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptFilteringDefinition
    name: ApiScriptFilteringDefinition
    nameWithType: ApiScriptFilteringDefinition
    fullName: BindOpen.Data.Queries.ApiScriptFilteringDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbSingleQuery.BindOpen.Data.Queries.DbQueryExtension.Sort(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  parent: BindOpen.Data.Queries.DbQueryExtension
  definition: BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  name: Sort(String, IBdoLog, ApiScriptSortingDefinition)
  nameWithType: DbQueryExtension.Sort(String, IBdoLog, ApiScriptSortingDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Sort(System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Sort(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
    name: Sort
    nameWithType: DbQueryExtension.Sort
    fullName: BindOpen.Data.Queries.DbQueryExtension.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
    name: ApiScriptSortingDefinition
    nameWithType: ApiScriptSortingDefinition
    fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Sort(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
    name: Sort
    nameWithType: DbQueryExtension.Sort
    fullName: BindOpen.Data.Queries.DbQueryExtension.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
    name: ApiScriptSortingDefinition
    nameWithType: ApiScriptSortingDefinition
    fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbSingleQuery.BindOpen.Data.Queries.DbQueryExtension.Paginate(System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  parent: BindOpen.Data.Queries.DbQueryExtension
  definition: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  name: Paginate(Nullable<Int32>, String, IBdoLog, ApiScriptSortingDefinition)
  nameWithType: DbQueryExtension.Paginate(Nullable<Int32>, String, IBdoLog, ApiScriptSortingDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Paginate(System.Nullable<System.Int32>, System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  nameWithType.vb: DbQueryExtension.Paginate(Nullable(Of Int32), String, IBdoLog, ApiScriptSortingDefinition)
  fullName.vb: BindOpen.Data.Queries.DbQueryExtension.Paginate(System.Nullable(Of System.Int32), System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  name.vb: Paginate(Nullable(Of Int32), String, IBdoLog, ApiScriptSortingDefinition)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Paginate(System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
    name: Paginate
    nameWithType: DbQueryExtension.Paginate
    fullName: BindOpen.Data.Queries.DbQueryExtension.Paginate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
    name: ApiScriptSortingDefinition
    nameWithType: ApiScriptSortingDefinition
    fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Paginate(System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
    name: Paginate
    nameWithType: DbQueryExtension.Paginate
    fullName: BindOpen.Data.Queries.DbQueryExtension.Paginate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
    name: ApiScriptSortingDefinition
    nameWithType: ApiScriptSortingDefinition
    fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbQuery
  commentId: T:BindOpen.Data.Queries.IDbQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQuery
  nameWithType: IDbQuery
  fullName: BindOpen.Data.Queries.IDbQuery
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  isExternal: true
  name: Filter(IDbSingleQuery, String, IBdoLog, ApiScriptFilteringDefinition)
  nameWithType: DbQueryExtension.Filter(IDbSingleQuery, String, IBdoLog, ApiScriptFilteringDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery, System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
    name: Filter
    nameWithType: DbQueryExtension.Filter
    fullName: BindOpen.Data.Queries.DbQueryExtension.Filter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptFilteringDefinition
    name: ApiScriptFilteringDefinition
    nameWithType: ApiScriptFilteringDefinition
    fullName: BindOpen.Data.Queries.ApiScriptFilteringDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
    name: Filter
    nameWithType: DbQueryExtension.Filter
    fullName: BindOpen.Data.Queries.DbQueryExtension.Filter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptFilteringDefinition
    name: ApiScriptFilteringDefinition
    nameWithType: ApiScriptFilteringDefinition
    fullName: BindOpen.Data.Queries.ApiScriptFilteringDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQueryExtension
  commentId: T:BindOpen.Data.Queries.DbQueryExtension
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryExtension
  nameWithType: DbQueryExtension
  fullName: BindOpen.Data.Queries.DbQueryExtension
- uid: BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  isExternal: true
  name: Sort(IDbSingleQuery, String, IBdoLog, ApiScriptSortingDefinition)
  nameWithType: DbQueryExtension.Sort(IDbSingleQuery, String, IBdoLog, ApiScriptSortingDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery, System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
    name: Sort
    nameWithType: DbQueryExtension.Sort
    fullName: BindOpen.Data.Queries.DbQueryExtension.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
    name: ApiScriptSortingDefinition
    nameWithType: ApiScriptSortingDefinition
    fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
    name: Sort
    nameWithType: DbQueryExtension.Sort
    fullName: BindOpen.Data.Queries.DbQueryExtension.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
    name: ApiScriptSortingDefinition
    nameWithType: ApiScriptSortingDefinition
    fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  isExternal: true
  name: Paginate(IDbSingleQuery, Nullable<Int32>, String, IBdoLog, ApiScriptSortingDefinition)
  nameWithType: DbQueryExtension.Paginate(IDbSingleQuery, Nullable<Int32>, String, IBdoLog, ApiScriptSortingDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery, System.Nullable<System.Int32>, System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  nameWithType.vb: DbQueryExtension.Paginate(IDbSingleQuery, Nullable(Of Int32), String, IBdoLog, ApiScriptSortingDefinition)
  fullName.vb: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery, System.Nullable(Of System.Int32), System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  name.vb: Paginate(IDbSingleQuery, Nullable(Of Int32), String, IBdoLog, ApiScriptSortingDefinition)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
    name: Paginate
    nameWithType: DbQueryExtension.Paginate
    fullName: BindOpen.Data.Queries.DbQueryExtension.Paginate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
    name: ApiScriptSortingDefinition
    nameWithType: ApiScriptSortingDefinition
    fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
    name: Paginate
    nameWithType: DbQueryExtension.Paginate
    fullName: BindOpen.Data.Queries.DbQueryExtension.Paginate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
    name: ApiScriptSortingDefinition
    nameWithType: ApiScriptSortingDefinition
    fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName
  isExternal: true
  name: GetFieldWithName
  nameWithType: IDbSingleQuery.GetFieldWithName
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Extensions.Carriers.DbField
  commentId: T:BindOpen.Extensions.Carriers.DbField
  parent: BindOpen.Extensions.Carriers
  isExternal: true
  name: DbField
  nameWithType: DbField
  fullName: BindOpen.Extensions.Carriers.DbField
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Extensions.Carriers
  commentId: N:BindOpen.Extensions.Carriers
  isExternal: true
  name: BindOpen.Extensions.Carriers
  nameWithType: BindOpen.Extensions.Carriers
  fullName: BindOpen.Extensions.Carriers
- uid: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName
  isExternal: true
  name: GetFieldWithBoundFieldName
  nameWithType: IDbSingleQuery.GetFieldWithBoundFieldName
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName
- uid: BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName
  isExternal: true
  name: GetIdFieldWithBoundFieldName
  nameWithType: IDbSingleQuery.GetIdFieldWithBoundFieldName
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName
- uid: BindOpen.Data.Queries.IDbSingleQuery.AsDistinct*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.AsDistinct
  isExternal: true
  name: AsDistinct
  nameWithType: IDbSingleQuery.AsDistinct
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AsDistinct
- uid: BindOpen.Data.Queries.IDbSingleQuery
  commentId: T:BindOpen.Data.Queries.IDbSingleQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbSingleQuery
  nameWithType: IDbSingleQuery
  fullName: BindOpen.Data.Queries.IDbSingleQuery
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithLimit*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.WithLimit
  isExternal: true
  name: WithLimit
  nameWithType: IDbSingleQuery.WithLimit
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithLimit
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithFields*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.WithFields
  isExternal: true
  name: WithFields
  nameWithType: IDbSingleQuery.WithFields
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithFields
- uid: BindOpen.Extensions.Carriers.DbField[]
  isExternal: true
  name: DbField[]
  nameWithType: DbField[]
  fullName: BindOpen.Extensions.Carriers.DbField[]
  nameWithType.vb: DbField()
  fullName.vb: BindOpen.Extensions.Carriers.DbField()
  name.vb: DbField()
  spec.csharp:
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields
  isExternal: true
  name: WithReturnedIdFields
  nameWithType: IDbSingleQuery.WithReturnedIdFields
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields
- uid: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]}
  commentId: '!:System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]}'
  definition: System.Func`2
  name: Func<IDbSingleQuery, DbField[]>
  nameWithType: Func<IDbSingleQuery, DbField[]>
  fullName: System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField[]>
  nameWithType.vb: Func(Of IDbSingleQuery, DbField())
  fullName.vb: System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField())
  name.vb: Func(Of IDbSingleQuery, DbField())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddField*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.AddField
  isExternal: true
  name: AddField
  nameWithType: IDbSingleQuery.AddField
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddField
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField}
  commentId: '!:System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField}'
  definition: System.Func`2
  name: Func<IDbSingleQuery, DbField>
  nameWithType: Func<IDbSingleQuery, DbField>
  fullName: System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField>
  nameWithType.vb: Func(Of IDbSingleQuery, DbField)
  fullName.vb: System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Extensions.Carriers.DbField)
  name.vb: Func(Of IDbSingleQuery, DbField)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.WithIdFields
  isExternal: true
  name: WithIdFields
  nameWithType: IDbSingleQuery.WithIdFields
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WithIdFields
- uid: BindOpen.Data.Queries.IDbSingleQuery.AddIdField*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.AddIdField
  isExternal: true
  name: AddIdField
  nameWithType: IDbSingleQuery.AddIdField
  fullName: BindOpen.Data.Queries.IDbSingleQuery.AddIdField
- uid: BindOpen.Data.Queries.IDbSingleQuery.From*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.From
  isExternal: true
  name: From
  nameWithType: IDbSingleQuery.From
  fullName: BindOpen.Data.Queries.IDbSingleQuery.From
- uid: BindOpen.Extensions.Carriers.DbTable[]
  isExternal: true
  name: DbTable[]
  nameWithType: DbTable[]
  fullName: BindOpen.Extensions.Carriers.DbTable[]
  nameWithType.vb: DbTable()
  fullName.vb: BindOpen.Extensions.Carriers.DbTable()
  name.vb: DbTable()
  spec.csharp:
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Extensions.Carriers.DbTable
    name: DbTable
    nameWithType: DbTable
    fullName: BindOpen.Extensions.Carriers.DbTable
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Expression.IDataExpression
  isExternal: true
  name: IDataExpression
  nameWithType: IDataExpression
  fullName: BindOpen.Data.Expression.IDataExpression
- uid: System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression}
  commentId: '!:System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression}'
  definition: System.Func`2
  name: Func<IDbSingleQuery, IDataExpression>
  nameWithType: Func<IDbSingleQuery, IDataExpression>
  fullName: System.Func<BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression>
  nameWithType.vb: Func(Of IDbSingleQuery, IDataExpression)
  fullName.vb: System.Func(Of BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Expression.IDataExpression)
  name.vb: Func(Of IDbSingleQuery, IDataExpression)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Expression.IDataExpression
    name: IDataExpression
    nameWithType: IDataExpression
    fullName: BindOpen.Data.Expression.IDataExpression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Queries.IDbSingleQuery
    name: IDbSingleQuery
    nameWithType: IDbSingleQuery
    fullName: BindOpen.Data.Queries.IDbSingleQuery
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Expression.IDataExpression
    name: IDataExpression
    nameWithType: IDataExpression
    fullName: BindOpen.Data.Expression.IDataExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbSingleQuery.Union*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.Union
  isExternal: true
  name: Union
  nameWithType: IDbSingleQuery.Union
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Union
- uid: BindOpen.Data.Queries.DbQueryUnionKind
  commentId: T:BindOpen.Data.Queries.DbQueryUnionKind
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryUnionKind
  nameWithType: DbQueryUnionKind
  fullName: BindOpen.Data.Queries.DbQueryUnionKind
- uid: BindOpen.Data.Queries.IDbSingleQuery.Where*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.Where
  isExternal: true
  name: Where
  nameWithType: IDbSingleQuery.Where
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Where
- uid: BindOpen.Data.Queries.IDbSingleQuery.OrderBy*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.OrderBy
  isExternal: true
  name: OrderBy
  nameWithType: IDbSingleQuery.OrderBy
  fullName: BindOpen.Data.Queries.IDbSingleQuery.OrderBy
- uid: BindOpen.Data.Queries.IDbQueryOrderByStatement[]
  isExternal: true
  name: IDbQueryOrderByStatement[]
  nameWithType: IDbQueryOrderByStatement[]
  fullName: BindOpen.Data.Queries.IDbQueryOrderByStatement[]
  nameWithType.vb: IDbQueryOrderByStatement()
  fullName.vb: BindOpen.Data.Queries.IDbQueryOrderByStatement()
  name.vb: IDbQueryOrderByStatement()
  spec.csharp:
  - uid: BindOpen.Data.Queries.IDbQueryOrderByStatement
    name: IDbQueryOrderByStatement
    nameWithType: IDbQueryOrderByStatement
    fullName: BindOpen.Data.Queries.IDbQueryOrderByStatement
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Queries.IDbQueryOrderByStatement
    name: IDbQueryOrderByStatement
    nameWithType: IDbQueryOrderByStatement
    fullName: BindOpen.Data.Queries.IDbQueryOrderByStatement
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Queries.IDbSingleQuery.GroupBy*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.GroupBy
  isExternal: true
  name: GroupBy
  nameWithType: IDbSingleQuery.GroupBy
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GroupBy
- uid: BindOpen.Data.Queries.IDbSingleQuery.Having*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.Having
  isExternal: true
  name: Having
  nameWithType: IDbSingleQuery.Having
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Having
- uid: BindOpen.Data.Queries.IDbSingleQuery.IsDistinct*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.IsDistinct
  isExternal: true
  name: IsDistinct
  nameWithType: IDbSingleQuery.IsDistinct
  fullName: BindOpen.Data.Queries.IDbSingleQuery.IsDistinct
- uid: BindOpen.Data.Queries.IDbSingleQuery.Limit*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.Limit
  isExternal: true
  name: Limit
  nameWithType: IDbSingleQuery.Limit
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Limit
- uid: BindOpen.Data.Queries.IDbSingleQuery.Fields*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.Fields
  isExternal: true
  name: Fields
  nameWithType: IDbSingleQuery.Fields
  fullName: BindOpen.Data.Queries.IDbSingleQuery.Fields
- uid: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbField}
  commentId: '!:System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbField}'
  definition: System.Collections.Generic.List`1
  name: List<DbField>
  nameWithType: List<DbField>
  fullName: System.Collections.Generic.List<BindOpen.Extensions.Carriers.DbField>
  nameWithType.vb: List(Of DbField)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Extensions.Carriers.DbField)
  name.vb: List(Of DbField)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields
  isExternal: true
  name: ReturnedIdFields
  nameWithType: IDbSingleQuery.ReturnedIdFields
  fullName: BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields
- uid: BindOpen.Data.Queries.IDbSingleQuery.UnionClauses*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.UnionClauses
  isExternal: true
  name: UnionClauses
  nameWithType: IDbSingleQuery.UnionClauses
  fullName: BindOpen.Data.Queries.IDbSingleQuery.UnionClauses
- uid: System.Collections.Generic.List{BindOpen.Data.Queries.DbQueryUnionClause}
  commentId: '!:System.Collections.Generic.List{BindOpen.Data.Queries.DbQueryUnionClause}'
  definition: System.Collections.Generic.List`1
  name: List<DbQueryUnionClause>
  nameWithType: List<DbQueryUnionClause>
  fullName: System.Collections.Generic.List<BindOpen.Data.Queries.DbQueryUnionClause>
  nameWithType.vb: List(Of DbQueryUnionClause)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Data.Queries.DbQueryUnionClause)
  name.vb: List(Of DbQueryUnionClause)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Queries.DbQueryUnionClause
    name: DbQueryUnionClause
    nameWithType: DbQueryUnionClause
    fullName: BindOpen.Data.Queries.DbQueryUnionClause
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Queries.DbQueryUnionClause
    name: DbQueryUnionClause
    nameWithType: DbQueryUnionClause
    fullName: BindOpen.Data.Queries.DbQueryUnionClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.IDbSingleQuery.FromClause*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.FromClause
  isExternal: true
  name: FromClause
  nameWithType: IDbSingleQuery.FromClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.FromClause
- uid: BindOpen.Data.Queries.DbQueryFromClause
  commentId: T:BindOpen.Data.Queries.DbQueryFromClause
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryFromClause
  nameWithType: DbQueryFromClause
  fullName: BindOpen.Data.Queries.DbQueryFromClause
- uid: BindOpen.Data.Queries.IDbSingleQuery.WhereClause*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.WhereClause
  isExternal: true
  name: WhereClause
  nameWithType: IDbSingleQuery.WhereClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.WhereClause
- uid: BindOpen.Data.Queries.DbQueryWhereClause
  commentId: T:BindOpen.Data.Queries.DbQueryWhereClause
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryWhereClause
  nameWithType: DbQueryWhereClause
  fullName: BindOpen.Data.Queries.DbQueryWhereClause
- uid: BindOpen.Data.Queries.IDbSingleQuery.GroupByClause*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.GroupByClause
  isExternal: true
  name: GroupByClause
  nameWithType: IDbSingleQuery.GroupByClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.GroupByClause
- uid: BindOpen.Data.Queries.DbQueryGroupByClause
  commentId: T:BindOpen.Data.Queries.DbQueryGroupByClause
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryGroupByClause
  nameWithType: DbQueryGroupByClause
  fullName: BindOpen.Data.Queries.DbQueryGroupByClause
- uid: BindOpen.Data.Queries.IDbSingleQuery.HavingClause*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.HavingClause
  isExternal: true
  name: HavingClause
  nameWithType: IDbSingleQuery.HavingClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.HavingClause
- uid: BindOpen.Data.Queries.DbQueryHavingClause
  commentId: T:BindOpen.Data.Queries.DbQueryHavingClause
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryHavingClause
  nameWithType: DbQueryHavingClause
  fullName: BindOpen.Data.Queries.DbQueryHavingClause
- uid: BindOpen.Data.Queries.IDbSingleQuery.OrderByClause*
  commentId: Overload:BindOpen.Data.Queries.IDbSingleQuery.OrderByClause
  isExternal: true
  name: OrderByClause
  nameWithType: IDbSingleQuery.OrderByClause
  fullName: BindOpen.Data.Queries.IDbSingleQuery.OrderByClause
- uid: BindOpen.Data.Queries.DbQueryOrderByClause
  commentId: T:BindOpen.Data.Queries.DbQueryOrderByClause
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQueryOrderByClause
  nameWithType: DbQueryOrderByClause
  fullName: BindOpen.Data.Queries.DbQueryOrderByClause
shouldSkipMarkup: true
