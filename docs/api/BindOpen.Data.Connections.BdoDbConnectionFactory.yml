### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Connections.BdoDbConnectionFactory
  commentId: T:BindOpen.Data.Connections.BdoDbConnectionFactory
  id: BdoDbConnectionFactory
  parent: BindOpen.Data.Connections
  children:
  - BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  langs:
  - csharp
  - vb
  name: BdoDbConnectionFactory
  nameWithType: BdoDbConnectionFactory
  fullName: BindOpen.Data.Connections.BdoDbConnectionFactory
  type: Class
  source:
    remote:
      path: src/BindOpen.Databases/Data/Connections/Factories/BdoDbConnectionFactory.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: BdoDbConnectionFactory
    path: ../src/BindOpen.Databases/Data/Connections/Factories/BdoDbConnectionFactory.cs
    startLine: 9
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Connections
  summary: "\nThis class represents a connection service.\n"
  example: []
  syntax:
    content: public static class BdoDbConnectionFactory
    content.vb: Public Module BdoDbConnectionFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  id: Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: BindOpen.Data.Connections.BdoDbConnectionFactory
  langs:
  - csharp
  - vb
  name: Open<T>(IBdoScope, IBdoDatasourceDepot, String, String, IBdoLog)
  nameWithType: BdoDbConnectionFactory.Open<T>(IBdoScope, IBdoDatasourceDepot, String, String, IBdoLog)
  fullName: BindOpen.Data.Connections.BdoDbConnectionFactory.Open<T>(BindOpen.Application.Scopes.IBdoScope, BindOpen.Data.Stores.IBdoDatasourceDepot, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Connections/Factories/BdoDbConnectionFactory.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Open
    path: ../src/BindOpen.Databases/Data/Connections/Factories/BdoDbConnectionFactory.cs
    startLine: 22
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Connections
  summary: "\nCreates a connector.\n"
  example: []
  syntax:
    content: >-
      public static T Open<T>(this IBdoScope scope, IBdoDatasourceDepot depot, string dataSourceName, string connectorDefinitionUniqueId, IBdoLog log = null)
          where T : class, IBdoConnection
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: depot
      type: BindOpen.Data.Stores.IBdoDatasourceDepot
      description: The data source depot to consider.
    - id: dataSourceName
      type: System.String
      description: The data source name to consider.
    - id: connectorDefinitionUniqueId
      type: System.String
      description: The connector definition name to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log of execution to consider.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns True if the connector has been opened. False otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Open(Of T As {Class, IBdoConnection})(scope As IBdoScope, depot As IBdoDatasourceDepot, dataSourceName As String, connectorDefinitionUniqueId As String, log As IBdoLog = Nothing) As T
  overload: BindOpen.Data.Connections.BdoDbConnectionFactory.Open*
  nameWithType.vb: BdoDbConnectionFactory.Open(Of T)(IBdoScope, IBdoDatasourceDepot, String, String, IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Connections.BdoDbConnectionFactory.Open(Of T)(BindOpen.Application.Scopes.IBdoScope, BindOpen.Data.Stores.IBdoDatasourceDepot, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Open(Of T)(IBdoScope, IBdoDatasourceDepot, String, String, IBdoLog)
- uid: BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  id: Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExtensionMethod: true
  parent: BindOpen.Data.Connections.BdoDbConnectionFactory
  langs:
  - csharp
  - vb
  name: Open<T>(IBdoScope, String, String, IBdoLog)
  nameWithType: BdoDbConnectionFactory.Open<T>(IBdoScope, String, String, IBdoLog)
  fullName: BindOpen.Data.Connections.BdoDbConnectionFactory.Open<T>(BindOpen.Application.Scopes.IBdoScope, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Connections/Factories/BdoDbConnectionFactory.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Open
    path: ../src/BindOpen.Databases/Data/Connections/Factories/BdoDbConnectionFactory.cs
    startLine: 53
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Connections
  summary: "\nCreates a connector.\n"
  example: []
  syntax:
    content: >-
      public static T Open<T>(this IBdoScope scope, string dataSourceName, string connectorDefinitionUniqueId, IBdoLog log = null)
          where T : class, IBdoConnection
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: dataSourceName
      type: System.String
      description: The data source name to consider.
    - id: connectorDefinitionUniqueId
      type: System.String
      description: The connector definition name to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log of execution to consider.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns True if the connector has been opened. False otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Open(Of T As {Class, IBdoConnection})(scope As IBdoScope, dataSourceName As String, connectorDefinitionUniqueId As String, log As IBdoLog = Nothing) As T
  overload: BindOpen.Data.Connections.BdoDbConnectionFactory.Open*
  nameWithType.vb: BdoDbConnectionFactory.Open(Of T)(IBdoScope, String, String, IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Connections.BdoDbConnectionFactory.Open(Of T)(BindOpen.Application.Scopes.IBdoScope, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Open(Of T)(IBdoScope, String, String, IBdoLog)
references:
- uid: BindOpen.Data.Connections
  commentId: N:BindOpen.Data.Connections
  name: BindOpen.Data.Connections
  nameWithType: BindOpen.Data.Connections
  fullName: BindOpen.Data.Connections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Connections.BdoDbConnectionFactory.Open*
  commentId: Overload:BindOpen.Data.Connections.BdoDbConnectionFactory.Open
  name: Open
  nameWithType: BdoDbConnectionFactory.Open
  fullName: BindOpen.Data.Connections.BdoDbConnectionFactory.Open
- uid: BindOpen.Application.Scopes.IBdoScope
  commentId: T:BindOpen.Application.Scopes.IBdoScope
  parent: BindOpen.Application.Scopes
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.Data.Stores.IBdoDatasourceDepot
  commentId: T:BindOpen.Data.Stores.IBdoDatasourceDepot
  parent: BindOpen.Data.Stores
  isExternal: true
  name: IBdoDatasourceDepot
  nameWithType: IBdoDatasourceDepot
  fullName: BindOpen.Data.Stores.IBdoDatasourceDepot
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: BindOpen.Data.Stores
  commentId: N:BindOpen.Data.Stores
  name: BindOpen.Data.Stores
  nameWithType: BindOpen.Data.Stores
  fullName: BindOpen.Data.Stores
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  isExternal: true
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: T
  name: T
  nameWithType: T
  fullName: T
shouldSkipMarkup: true
