### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Services.BdoService
  commentId: T:BindOpen.Application.Services.BdoService
  id: BdoService
  parent: BindOpen.Application.Services
  children:
  - BindOpen.Application.Services.BdoService.#ctor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  - BindOpen.Application.Services.BdoService._isLoaded
  - BindOpen.Application.Services.BdoService._scope
  - BindOpen.Application.Services.BdoService.AppDomainPool
  - BindOpen.Application.Services.BdoService.Dispose(System.Boolean)
  - BindOpen.Application.Services.BdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  - BindOpen.Application.Services.BdoService.ExecutionState
  - BindOpen.Application.Services.BdoService.ExecutionStatus
  - BindOpen.Application.Services.BdoService.Initialize(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Application.Services.BdoService.IsLoaded
  - BindOpen.Application.Services.BdoService.Log
  - BindOpen.Application.Services.BdoService.Loggers
  - BindOpen.Application.Services.BdoService.Process(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Application.Services.BdoService.Start
  langs:
  - csharp
  - vb
  name: BdoService
  nameWithType: BdoService
  fullName: BindOpen.Application.Services.BdoService
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThis class represents an bot.\n"
  syntax:
    content: 'public abstract class BdoService : IdentifiedDataItem, IBdoService, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced'
    content.vb: >-
      Public MustInherit Class BdoService
          Inherits IdentifiedDataItem
          Implements IBdoService, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced
  inheritance:
  - System.Object
  derivedClasses:
  - BindOpen.Application.Services.BdoHostedService
  - BindOpen.Application.Services.TBdoService`1
  implements:
  - BindOpen.Application.Services.IBdoService
  - BindOpen.Data.Items.IIdentifiedDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  - BindOpen.Data.Items.IIdentified
  - BindOpen.Data.Items.IReferenced
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: BindOpen.Application.Services.BdoService._isLoaded
  commentId: F:BindOpen.Application.Services.BdoService._isLoaded
  id: _isLoaded
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: _isLoaded
  nameWithType: BdoService._isLoaded
  fullName: BindOpen.Application.Services.BdoService._isLoaded
  type: Field
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nIndicates whether this instance is loaded.\n"
  remarks: The value can be assigned.
  syntax:
    content: protected bool _isLoaded
    return:
      type: System.Boolean
    content.vb: Protected _isLoaded As Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: BindOpen.Application.Services.BdoService._scope
  commentId: F:BindOpen.Application.Services.BdoService._scope
  id: _scope
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: _scope
  nameWithType: BdoService._scope
  fullName: BindOpen.Application.Services.BdoService._scope
  type: Field
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe scope of this instance.\n"
  syntax:
    content: protected IBdoScope _scope
    return:
      type: BindOpen.Application.Scopes.IBdoScope
    content.vb: Protected _scope As IBdoScope
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: BindOpen.Application.Services.BdoService.#ctor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.Application.Services.BdoService.#ctor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  id: '#ctor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.Loggers.IBdoLogger[])'
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: BdoService(IBdoScope, IBdoLogger[])
  nameWithType: BdoService.BdoService(IBdoScope, IBdoLogger[])
  fullName: BindOpen.Application.Services.BdoService.BdoService(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nInstantiates a new instance of the BdoService class.\n"
  syntax:
    content: protected BdoService(IBdoScope scope, params IBdoLogger[] loggers)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
    - id: loggers
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
    content.vb: Protected Sub New(scope As IBdoScope, ParamArray loggers As IBdoLogger())
  overload: BindOpen.Application.Services.BdoService.#ctor*
  nameWithType.vb: BdoService.BdoService(IBdoScope, IBdoLogger())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BindOpen.Application.Services.BdoService.BdoService(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: BdoService(IBdoScope, IBdoLogger())
- uid: BindOpen.Application.Services.BdoService.Start
  commentId: M:BindOpen.Application.Services.BdoService.Start
  id: Start
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: BdoService.Start()
  fullName: BindOpen.Application.Services.BdoService.Start()
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nStarts the application.\n"
  syntax:
    content: public virtual IBdoService Start()
    return:
      type: BindOpen.Application.Services.IBdoService
      description: Returns true if this instance is started.
    content.vb: Public Overridable Function Start As IBdoService
  overload: BindOpen.Application.Services.BdoService.Start*
  implements:
  - BindOpen.Application.Services.IBdoService.Start
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Application.Services.BdoService.Process(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Application.Services.BdoService.Process(BindOpen.System.Diagnostics.IBdoLog)
  id: Process(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: Process(IBdoLog)
  nameWithType: BdoService.Process(IBdoLog)
  fullName: BindOpen.Application.Services.BdoService.Process(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nProcesses the application.\n"
  syntax:
    content: protected virtual IBdoService Process(IBdoLog log)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: BindOpen.Application.Services.IBdoService
      description: Returns true if this instance is started.
    content.vb: Protected Overridable Function Process(log As IBdoLog) As IBdoService
  overload: BindOpen.Application.Services.BdoService.Process*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BindOpen.Application.Services.BdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  commentId: M:BindOpen.Application.Services.BdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  id: End(BindOpen.System.Processing.ProcessExecutionStatus)
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: End(ProcessExecutionStatus)
  nameWithType: BdoService.End(ProcessExecutionStatus)
  fullName: BindOpen.Application.Services.BdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nIndicates the application ends.\n"
  syntax:
    content: public virtual IBdoService End(ProcessExecutionStatus executionStatus)
    parameters:
    - id: executionStatus
      type: BindOpen.System.Processing.ProcessExecutionStatus
      description: The execution status to consider.
    return:
      type: BindOpen.Application.Services.IBdoService
    content.vb: Public Overridable Function End(executionStatus As ProcessExecutionStatus) As IBdoService
  overload: BindOpen.Application.Services.BdoService.End*
  implements:
  - BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Application.Services.BdoService.Initialize(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Application.Services.BdoService.Initialize(BindOpen.System.Diagnostics.IBdoLog)
  id: Initialize(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: Initialize(IBdoLog)
  nameWithType: BdoService.Initialize(IBdoLog)
  fullName: BindOpen.Application.Services.BdoService.Initialize(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nInitializes information.\n"
  syntax:
    content: protected virtual void Initialize(IBdoLog log)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to populate.
    content.vb: Protected Overridable Sub Initialize(log As IBdoLog)
  overload: BindOpen.Application.Services.BdoService.Initialize*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BindOpen.Application.Services.BdoService.Dispose(System.Boolean)
  commentId: M:BindOpen.Application.Services.BdoService.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: BdoService.Dispose(Boolean)
  fullName: BindOpen.Application.Services.BdoService.Dispose(System.Boolean)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nDisposes this instance. \n"
  syntax:
    content: protected override void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(isDisposing As Boolean)
  overload: BindOpen.Application.Services.BdoService.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: BindOpen.Application.Services.BdoService.IsLoaded
  commentId: P:BindOpen.Application.Services.BdoService.IsLoaded
  id: IsLoaded
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: IsLoaded
  nameWithType: BdoService.IsLoaded
  fullName: BindOpen.Application.Services.BdoService.IsLoaded
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nIndicates whether the platform information is loaded.\n"
  syntax:
    content: public bool IsLoaded { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsLoaded As Boolean
  overload: BindOpen.Application.Services.BdoService.IsLoaded*
  implements:
  - BindOpen.Application.Services.IBdoService.IsLoaded
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Application.Services.BdoService.Loggers
  commentId: P:BindOpen.Application.Services.BdoService.Loggers
  id: Loggers
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: Loggers
  nameWithType: BdoService.Loggers
  fullName: BindOpen.Application.Services.BdoService.Loggers
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe runtime folder path.\n"
  syntax:
    content: public List<IBdoLogger> Loggers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
    content.vb: Public Property Loggers As List(Of IBdoLogger)
  overload: BindOpen.Application.Services.BdoService.Loggers*
  implements:
  - BindOpen.Application.Services.IBdoService.Loggers
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Services.BdoService.ExecutionState
  commentId: P:BindOpen.Application.Services.BdoService.ExecutionState
  id: ExecutionState
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: ExecutionState
  nameWithType: BdoService.ExecutionState
  fullName: BindOpen.Application.Services.BdoService.ExecutionState
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe current execution state of this instance.\n"
  syntax:
    content: public ProcessExecutionState ExecutionState { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Processing.ProcessExecutionState
    content.vb: Public Property ExecutionState As ProcessExecutionState
  overload: BindOpen.Application.Services.BdoService.ExecutionState*
  implements:
  - BindOpen.Application.Services.IBdoService.ExecutionState
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Services.BdoService.ExecutionStatus
  commentId: P:BindOpen.Application.Services.BdoService.ExecutionStatus
  id: ExecutionStatus
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: ExecutionStatus
  nameWithType: BdoService.ExecutionStatus
  fullName: BindOpen.Application.Services.BdoService.ExecutionStatus
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nThe current execution status of this instance.\n"
  syntax:
    content: public ProcessExecutionStatus ExecutionStatus { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Processing.ProcessExecutionStatus
    content.vb: Public Property ExecutionStatus As ProcessExecutionStatus
  overload: BindOpen.Application.Services.BdoService.ExecutionStatus*
  implements:
  - BindOpen.Application.Services.IBdoService.ExecutionStatus
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Services.BdoService.AppDomainPool
  commentId: P:BindOpen.Application.Services.BdoService.AppDomainPool
  id: AppDomainPool
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: AppDomainPool
  nameWithType: BdoService.AppDomainPool
  fullName: BindOpen.Application.Services.BdoService.AppDomainPool
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nApplication domain pool of this instance.\n"
  syntax:
    content: public AppDomainPool AppDomainPool { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Assemblies.AppDomainPool
    content.vb: Public Property AppDomainPool As AppDomainPool
  overload: BindOpen.Application.Services.BdoService.AppDomainPool*
  implements:
  - BindOpen.Application.Services.IBdoService.AppDomainPool
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Application.Services.BdoService.Log
  commentId: P:BindOpen.Application.Services.BdoService.Log
  id: Log
  parent: BindOpen.Application.Services.BdoService
  langs:
  - csharp
  - vb
  name: Log
  nameWithType: BdoService.Log
  fullName: BindOpen.Application.Services.BdoService.Log
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Services
  summary: "\nILog of this instance.\n"
  syntax:
    content: public IBdoLog Log { get; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Public ReadOnly Property Log As IBdoLog
  overload: BindOpen.Application.Services.BdoService.Log*
  implements:
  - BindOpen.Application.Services.IBdoService.Log
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: BindOpen.Application.Services
  commentId: N:BindOpen.Application.Services
  isExternal: true
  name: BindOpen.Application.Services
  nameWithType: BindOpen.Application.Services
  fullName: BindOpen.Application.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.Application.Services.IBdoService
  commentId: T:BindOpen.Application.Services.IBdoService
  parent: BindOpen.Application.Services
  isExternal: true
  name: IBdoService
  nameWithType: IBdoService
  fullName: BindOpen.Application.Services.IBdoService
- uid: BindOpen.Data.Items.IIdentifiedDataItem
  isExternal: true
  name: IIdentifiedDataItem
  nameWithType: IIdentifiedDataItem
  fullName: BindOpen.Data.Items.IIdentifiedDataItem
- uid: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  isExternal: true
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  isExternal: true
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Application.Scopes.IBdoScope
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.Application.Services.BdoService.#ctor*
  commentId: Overload:BindOpen.Application.Services.BdoService.#ctor
  isExternal: true
  name: BdoService
  nameWithType: BdoService.BdoService
  fullName: BindOpen.Application.Services.BdoService.BdoService
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
  isExternal: true
  name: IBdoLogger[]
  nameWithType: IBdoLogger[]
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
  nameWithType.vb: IBdoLogger()
  fullName.vb: BindOpen.System.Diagnostics.Loggers.IBdoLogger()
  name.vb: IBdoLogger()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Application.Services.BdoService.Start*
  commentId: Overload:BindOpen.Application.Services.BdoService.Start
  isExternal: true
  name: Start
  nameWithType: BdoService.Start
  fullName: BindOpen.Application.Services.BdoService.Start
- uid: BindOpen.Application.Services.IBdoService.Start
  commentId: M:BindOpen.Application.Services.IBdoService.Start
  parent: BindOpen.Application.Services.IBdoService
  isExternal: true
  name: Start()
  nameWithType: IBdoService.Start()
  fullName: BindOpen.Application.Services.IBdoService.Start()
  spec.csharp:
  - uid: BindOpen.Application.Services.IBdoService.Start
    name: Start
    nameWithType: IBdoService.Start
    fullName: BindOpen.Application.Services.IBdoService.Start
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Services.IBdoService.Start
    name: Start
    nameWithType: IBdoService.Start
    fullName: BindOpen.Application.Services.IBdoService.Start
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Services.BdoService.Process*
  commentId: Overload:BindOpen.Application.Services.BdoService.Process
  isExternal: true
  name: Process
  nameWithType: BdoService.Process
  fullName: BindOpen.Application.Services.BdoService.Process
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Application.Services.BdoService.End*
  commentId: Overload:BindOpen.Application.Services.BdoService.End
  isExternal: true
  name: End
  nameWithType: BdoService.End
  fullName: BindOpen.Application.Services.BdoService.End
- uid: BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  commentId: M:BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  parent: BindOpen.Application.Services.IBdoService
  isExternal: true
  name: End(ProcessExecutionStatus)
  nameWithType: IBdoService.End(ProcessExecutionStatus)
  fullName: BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
  spec.csharp:
  - uid: BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
    name: End
    nameWithType: IBdoService.End
    fullName: BindOpen.Application.Services.IBdoService.End
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Processing.ProcessExecutionStatus
    name: ProcessExecutionStatus
    nameWithType: ProcessExecutionStatus
    fullName: BindOpen.System.Processing.ProcessExecutionStatus
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Services.IBdoService.End(BindOpen.System.Processing.ProcessExecutionStatus)
    name: End
    nameWithType: IBdoService.End
    fullName: BindOpen.Application.Services.IBdoService.End
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Processing.ProcessExecutionStatus
    name: ProcessExecutionStatus
    nameWithType: ProcessExecutionStatus
    fullName: BindOpen.System.Processing.ProcessExecutionStatus
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Processing.ProcessExecutionStatus
  isExternal: true
  name: ProcessExecutionStatus
  nameWithType: ProcessExecutionStatus
  fullName: BindOpen.System.Processing.ProcessExecutionStatus
- uid: BindOpen.Application.Services.BdoService.Initialize*
  commentId: Overload:BindOpen.Application.Services.BdoService.Initialize
  isExternal: true
  name: Initialize
  nameWithType: BdoService.Initialize
  fullName: BindOpen.Application.Services.BdoService.Initialize
- uid: BindOpen.Application.Services.BdoService.Dispose*
  commentId: Overload:BindOpen.Application.Services.BdoService.Dispose
  isExternal: true
  name: Dispose
  nameWithType: BdoService.Dispose
  fullName: BindOpen.Application.Services.BdoService.Dispose
- uid: BindOpen.Application.Services.BdoService.IsLoaded*
  commentId: Overload:BindOpen.Application.Services.BdoService.IsLoaded
  isExternal: true
  name: IsLoaded
  nameWithType: BdoService.IsLoaded
  fullName: BindOpen.Application.Services.BdoService.IsLoaded
- uid: BindOpen.Application.Services.IBdoService.IsLoaded
  commentId: P:BindOpen.Application.Services.IBdoService.IsLoaded
  parent: BindOpen.Application.Services.IBdoService
  isExternal: true
  name: IsLoaded
  nameWithType: IBdoService.IsLoaded
  fullName: BindOpen.Application.Services.IBdoService.IsLoaded
- uid: BindOpen.Application.Services.BdoService.Loggers*
  commentId: Overload:BindOpen.Application.Services.BdoService.Loggers
  isExternal: true
  name: Loggers
  nameWithType: BdoService.Loggers
  fullName: BindOpen.Application.Services.BdoService.Loggers
- uid: BindOpen.Application.Services.IBdoService.Loggers
  commentId: P:BindOpen.Application.Services.IBdoService.Loggers
  parent: BindOpen.Application.Services.IBdoService
  isExternal: true
  name: Loggers
  nameWithType: IBdoService.Loggers
  fullName: BindOpen.Application.Services.IBdoService.Loggers
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  commentId: '!:System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}'
  definition: System.Collections.Generic.List`1
  name: List<IBdoLogger>
  nameWithType: List<IBdoLogger>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.Loggers.IBdoLogger>
  nameWithType.vb: List(Of IBdoLogger)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger)
  name.vb: List(Of IBdoLogger)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Services.BdoService.ExecutionState*
  commentId: Overload:BindOpen.Application.Services.BdoService.ExecutionState
  isExternal: true
  name: ExecutionState
  nameWithType: BdoService.ExecutionState
  fullName: BindOpen.Application.Services.BdoService.ExecutionState
- uid: BindOpen.Application.Services.IBdoService.ExecutionState
  commentId: P:BindOpen.Application.Services.IBdoService.ExecutionState
  parent: BindOpen.Application.Services.IBdoService
  isExternal: true
  name: ExecutionState
  nameWithType: IBdoService.ExecutionState
  fullName: BindOpen.Application.Services.IBdoService.ExecutionState
- uid: BindOpen.System.Processing.ProcessExecutionState
  isExternal: true
  name: ProcessExecutionState
  nameWithType: ProcessExecutionState
  fullName: BindOpen.System.Processing.ProcessExecutionState
- uid: BindOpen.Application.Services.BdoService.ExecutionStatus*
  commentId: Overload:BindOpen.Application.Services.BdoService.ExecutionStatus
  isExternal: true
  name: ExecutionStatus
  nameWithType: BdoService.ExecutionStatus
  fullName: BindOpen.Application.Services.BdoService.ExecutionStatus
- uid: BindOpen.Application.Services.IBdoService.ExecutionStatus
  commentId: P:BindOpen.Application.Services.IBdoService.ExecutionStatus
  parent: BindOpen.Application.Services.IBdoService
  isExternal: true
  name: ExecutionStatus
  nameWithType: IBdoService.ExecutionStatus
  fullName: BindOpen.Application.Services.IBdoService.ExecutionStatus
- uid: BindOpen.Application.Services.BdoService.AppDomainPool*
  commentId: Overload:BindOpen.Application.Services.BdoService.AppDomainPool
  isExternal: true
  name: AppDomainPool
  nameWithType: BdoService.AppDomainPool
  fullName: BindOpen.Application.Services.BdoService.AppDomainPool
- uid: BindOpen.Application.Services.IBdoService.AppDomainPool
  commentId: P:BindOpen.Application.Services.IBdoService.AppDomainPool
  parent: BindOpen.Application.Services.IBdoService
  isExternal: true
  name: AppDomainPool
  nameWithType: IBdoService.AppDomainPool
  fullName: BindOpen.Application.Services.IBdoService.AppDomainPool
- uid: BindOpen.System.Assemblies.AppDomainPool
  isExternal: true
  name: AppDomainPool
  nameWithType: AppDomainPool
  fullName: BindOpen.System.Assemblies.AppDomainPool
- uid: BindOpen.Application.Services.BdoService.Log*
  commentId: Overload:BindOpen.Application.Services.BdoService.Log
  isExternal: true
  name: Log
  nameWithType: BdoService.Log
  fullName: BindOpen.Application.Services.BdoService.Log
- uid: BindOpen.Application.Services.IBdoService.Log
  commentId: P:BindOpen.Application.Services.IBdoService.Log
  parent: BindOpen.Application.Services.IBdoService
  isExternal: true
  name: Log
  nameWithType: IBdoService.Log
  fullName: BindOpen.Application.Services.IBdoService.Log
shouldSkipMarkup: true
