### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Context.BdoDataContext
  commentId: T:BindOpen.Data.Context.BdoDataContext
  id: BdoDataContext
  parent: BindOpen.Data.Context
  children:
  - BindOpen.Data.Context.BdoDataContext.#ctor
  - BindOpen.Data.Context.BdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
  - BindOpen.Data.Context.BdoDataContext.AddScopedItem(System.String,System.Object,System.String)
  - BindOpen.Data.Context.BdoDataContext.AddSingletonItem(System.String,System.Object,System.String)
  - BindOpen.Data.Context.BdoDataContext.AddSystemItem(System.String,System.Object)
  - BindOpen.Data.Context.BdoDataContext.AddTransientItem(System.String,System.Object,System.String)
  - BindOpen.Data.Context.BdoDataContext.Clear
  - BindOpen.Data.Context.BdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
  - BindOpen.Data.Context.BdoDataContext.GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
  - BindOpen.Data.Context.BdoDataContext.GetScopedItem(System.String,System.String)
  - BindOpen.Data.Context.BdoDataContext.GetSingletonItem(System.String,System.String)
  - BindOpen.Data.Context.BdoDataContext.GetSystemItem(System.String)
  - BindOpen.Data.Context.BdoDataContext.GetTransientItem(System.String,System.String)
  - BindOpen.Data.Context.BdoDataContext.Id
  - BindOpen.Data.Context.BdoDataContext.InitializeLifetimeService
  - BindOpen.Data.Context.BdoDataContext.Load(System.String,BindOpen.System.Diagnostics.BdoLog@)
  - BindOpen.Data.Context.BdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
  - BindOpen.Data.Context.BdoDataContext.RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
  - BindOpen.Data.Context.BdoDataContext.Save(System.String)
  - BindOpen.Data.Context.BdoDataContext.ScopedItems
  - BindOpen.Data.Context.BdoDataContext.SingletonItems
  - BindOpen.Data.Context.BdoDataContext.TransientItems
  langs:
  - csharp
  - vb
  name: BdoDataContext
  nameWithType: BdoDataContext
  fullName: BindOpen.Data.Context.BdoDataContext
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: BdoDataContext
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 14
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nThis class represents a data context. A data context contains all the data related to a user session.\n"
  example: []
  syntax:
    content: 'public class BdoDataContext : DataItem, IBdoDataContext, IDataItem, ICloneable, IDisposable'
    content.vb: >-
      Public Class BdoDataContext
          Inherits DataItem
          Implements IBdoDataContext, IDataItem, ICloneable, IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - BindOpen.Data.Items.DataItem
  implements:
  - BindOpen.Data.Context.IBdoDataContext
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - BindOpen.Data.Items.DataItem.Clone
  - BindOpen.Data.Items.DataItem.Clone``1
  - BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Dispose
  - BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - BindOpen.Data.Context.BdoDataContext.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.Data.Context.BdoDataContext})
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Data.Context.BdoDataContext.SingletonItems
  commentId: P:BindOpen.Data.Context.BdoDataContext.SingletonItems
  id: SingletonItems
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: SingletonItems
  nameWithType: BdoDataContext.SingletonItems
  fullName: BindOpen.Data.Context.BdoDataContext.SingletonItems
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SingletonItems
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 25
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nSingletons.\n"
  example: []
  syntax:
    content: public Dictionary<string, object> SingletonItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    content.vb: Public ReadOnly Property SingletonItems As Dictionary(Of String, Object)
  overload: BindOpen.Data.Context.BdoDataContext.SingletonItems*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.SingletonItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Data.Context.BdoDataContext.ScopedItems
  commentId: P:BindOpen.Data.Context.BdoDataContext.ScopedItems
  id: ScopedItems
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: ScopedItems
  nameWithType: BdoDataContext.ScopedItems
  fullName: BindOpen.Data.Context.BdoDataContext.ScopedItems
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ScopedItems
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 30
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nScoped items.\n"
  example: []
  syntax:
    content: public Dictionary<string, object> ScopedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    content.vb: Public ReadOnly Property ScopedItems As Dictionary(Of String, Object)
  overload: BindOpen.Data.Context.BdoDataContext.ScopedItems*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.ScopedItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Data.Context.BdoDataContext.TransientItems
  commentId: P:BindOpen.Data.Context.BdoDataContext.TransientItems
  id: TransientItems
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: TransientItems
  nameWithType: BdoDataContext.TransientItems
  fullName: BindOpen.Data.Context.BdoDataContext.TransientItems
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: TransientItems
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 35
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nTransient items.\n"
  example: []
  syntax:
    content: public Dictionary<string, object> TransientItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    content.vb: Public ReadOnly Property TransientItems As Dictionary(Of String, Object)
  overload: BindOpen.Data.Context.BdoDataContext.TransientItems*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.TransientItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Data.Context.BdoDataContext.Id
  commentId: P:BindOpen.Data.Context.BdoDataContext.Id
  id: Id
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: BdoDataContext.Id
  fullName: BindOpen.Data.Context.BdoDataContext.Id
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Id
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 40
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nID of this instance.\n"
  example: []
  syntax:
    content: public string Id { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Id As String
  overload: BindOpen.Data.Context.BdoDataContext.Id*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.Id
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.#ctor
  commentId: M:BindOpen.Data.Context.BdoDataContext.#ctor
  id: '#ctor'
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: BdoDataContext()
  nameWithType: BdoDataContext.BdoDataContext()
  fullName: BindOpen.Data.Context.BdoDataContext.BdoDataContext()
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 53
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nInstantiates a new instance of DataContext class.\n"
  example: []
  syntax:
    content: public BdoDataContext()
    content.vb: Public Sub New
  overload: BindOpen.Data.Context.BdoDataContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.InitializeLifetimeService
  commentId: M:BindOpen.Data.Context.BdoDataContext.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: InitializeLifetimeService()
  nameWithType: BdoDataContext.InitializeLifetimeService()
  fullName: BindOpen.Data.Context.BdoDataContext.InitializeLifetimeService()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: InitializeLifetimeService
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 72
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nInitializes the life time service.\n"
  example: []
  syntax:
    content: public override object InitializeLifetimeService()
    return:
      type: System.Object
      description: Null to remain the object&apos;s life forever.
    content.vb: Public Overrides Function InitializeLifetimeService As Object
  overridden: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  overload: BindOpen.Data.Context.BdoDataContext.InitializeLifetimeService*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.Data.Context.BdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
  commentId: M:BindOpen.Data.Context.BdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
  id: Merge(BindOpen.Data.Context.IBdoDataContext)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: Merge(IBdoDataContext)
  nameWithType: BdoDataContext.Merge(IBdoDataContext)
  fullName: BindOpen.Data.Context.BdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Merge
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 83
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nMerges this instance with the specified data context.\n"
  example: []
  syntax:
    content: public void Merge(IBdoDataContext dataContext)
    parameters:
    - id: dataContext
      type: BindOpen.Data.Context.IBdoDataContext
      description: The data context to consider.
    content.vb: Public Sub Merge(dataContext As IBdoDataContext)
  overload: BindOpen.Data.Context.BdoDataContext.Merge*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.Clear
  commentId: M:BindOpen.Data.Context.BdoDataContext.Clear
  id: Clear
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: BdoDataContext.Clear()
  fullName: BindOpen.Data.Context.BdoDataContext.Clear()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clear
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 116
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nClears all the data of this instance.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: BindOpen.Data.Context.BdoDataContext.Clear*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
  commentId: M:BindOpen.Data.Context.BdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
  id: AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: AddItem(String, Object, String, PersistenceLevel)
  nameWithType: BdoDataContext.AddItem(String, Object, String, PersistenceLevel)
  fullName: BindOpen.Data.Context.BdoDataContext.AddItem(System.String, System.Object, System.String, BindOpen.Data.Common.PersistenceLevel)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 132
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nAdds a new item to this instance.\n"
  example: []
  syntax:
    content: public void AddItem(string name, object item, string contextSectionName = null, PersistenceLevel persistenceLevel = PersistenceLevel.Singleton)
    parameters:
    - id: name
      type: System.String
      description: Name of the item to add.
    - id: item
      type: System.Object
      description: Item to add.
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    - id: persistenceLevel
      type: BindOpen.Data.Common.PersistenceLevel
      description: Persistence level of the item to add.
    content.vb: Public Sub AddItem(name As String, item As Object, contextSectionName As String = Nothing, persistenceLevel As PersistenceLevel = PersistenceLevel.Singleton)
  overload: BindOpen.Data.Context.BdoDataContext.AddItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.AddSystemItem(System.String,System.Object)
  commentId: M:BindOpen.Data.Context.BdoDataContext.AddSystemItem(System.String,System.Object)
  id: AddSystemItem(System.String,System.Object)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: AddSystemItem(String, Object)
  nameWithType: BdoDataContext.AddSystemItem(String, Object)
  fullName: BindOpen.Data.Context.BdoDataContext.AddSystemItem(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddSystemItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 157
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nAdds a new system item to this instance.\n"
  example: []
  syntax:
    content: public void AddSystemItem(string name, object item)
    parameters:
    - id: name
      type: System.String
      description: Name of the item to add.
    - id: item
      type: System.Object
      description: The item to consider.
    content.vb: Public Sub AddSystemItem(name As String, item As Object)
  overload: BindOpen.Data.Context.BdoDataContext.AddSystemItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.AddSystemItem(System.String,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.AddSingletonItem(System.String,System.Object,System.String)
  commentId: M:BindOpen.Data.Context.BdoDataContext.AddSingletonItem(System.String,System.Object,System.String)
  id: AddSingletonItem(System.String,System.Object,System.String)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: AddSingletonItem(String, Object, String)
  nameWithType: BdoDataContext.AddSingletonItem(String, Object, String)
  fullName: BindOpen.Data.Context.BdoDataContext.AddSingletonItem(System.String, System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddSingletonItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 170
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nAdds a new singleton item to this instance.\n"
  example: []
  syntax:
    content: public void AddSingletonItem(string name, object item, string contextSectionName = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the item to add.
    - id: item
      type: System.Object
      description: The item to consider.
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    content.vb: Public Sub AddSingletonItem(name As String, item As Object, contextSectionName As String = Nothing)
  overload: BindOpen.Data.Context.BdoDataContext.AddSingletonItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.AddSingletonItem(System.String,System.Object,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.AddScopedItem(System.String,System.Object,System.String)
  commentId: M:BindOpen.Data.Context.BdoDataContext.AddScopedItem(System.String,System.Object,System.String)
  id: AddScopedItem(System.String,System.Object,System.String)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: AddScopedItem(String, Object, String)
  nameWithType: BdoDataContext.AddScopedItem(String, Object, String)
  fullName: BindOpen.Data.Context.BdoDataContext.AddScopedItem(System.String, System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddScopedItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 187
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nAdds a new scoped item to this instance.\n"
  example: []
  syntax:
    content: public void AddScopedItem(string name, object item, string contextSectionName = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the item to add.
    - id: item
      type: System.Object
      description: The item to consider.
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    content.vb: Public Sub AddScopedItem(name As String, item As Object, contextSectionName As String = Nothing)
  overload: BindOpen.Data.Context.BdoDataContext.AddScopedItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.AddScopedItem(System.String,System.Object,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.AddTransientItem(System.String,System.Object,System.String)
  commentId: M:BindOpen.Data.Context.BdoDataContext.AddTransientItem(System.String,System.Object,System.String)
  id: AddTransientItem(System.String,System.Object,System.String)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: AddTransientItem(String, Object, String)
  nameWithType: BdoDataContext.AddTransientItem(String, Object, String)
  fullName: BindOpen.Data.Context.BdoDataContext.AddTransientItem(System.String, System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddTransientItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 204
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nAdds a new transient item to this instance.\n"
  example: []
  syntax:
    content: public void AddTransientItem(string name, object item, string contextSectionName = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the item to add.
    - id: item
      type: System.Object
      description: The item to consider.
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    content.vb: Public Sub AddTransientItem(name As String, item As Object, contextSectionName As String = Nothing)
  overload: BindOpen.Data.Context.BdoDataContext.AddTransientItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.AddTransientItem(System.String,System.Object,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
  commentId: M:BindOpen.Data.Context.BdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
  id: ClearItems(BindOpen.Data.Common.PersistenceLevel)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: ClearItems(PersistenceLevel)
  nameWithType: BdoDataContext.ClearItems(PersistenceLevel)
  fullName: BindOpen.Data.Context.BdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ClearItems
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 219
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nClears the specified items of this instance.\n"
  example: []
  syntax:
    content: public void ClearItems(PersistenceLevel persistenceLevel = PersistenceLevel.Singleton)
    parameters:
    - id: persistenceLevel
      type: BindOpen.Data.Common.PersistenceLevel
      description: Persistence level of the item to add.
    content.vb: Public Sub ClearItems(persistenceLevel As PersistenceLevel = PersistenceLevel.Singleton)
  overload: BindOpen.Data.Context.BdoDataContext.ClearItems*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
  commentId: M:BindOpen.Data.Context.BdoDataContext.RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
  id: RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: RemoveItems(String, PersistenceLevel)
  nameWithType: BdoDataContext.RemoveItems(String, PersistenceLevel)
  fullName: BindOpen.Data.Context.BdoDataContext.RemoveItems(System.String, BindOpen.Data.Common.PersistenceLevel)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveItems
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 245
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nRemoves the singleton items of a specific type.\n"
  example: []
  syntax:
    content: public void RemoveItems(string contextSectionName = null, PersistenceLevel persistenceLevel = PersistenceLevel.Singleton)
    parameters:
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    - id: persistenceLevel
      type: BindOpen.Data.Common.PersistenceLevel
      description: The persistence level to consider.
    content.vb: Public Sub RemoveItems(contextSectionName As String = Nothing, persistenceLevel As PersistenceLevel = PersistenceLevel.Singleton)
  overload: BindOpen.Data.Context.BdoDataContext.RemoveItems*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.GetSystemItem(System.String)
  commentId: M:BindOpen.Data.Context.BdoDataContext.GetSystemItem(System.String)
  id: GetSystemItem(System.String)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: GetSystemItem(String)
  nameWithType: BdoDataContext.GetSystemItem(String)
  fullName: BindOpen.Data.Context.BdoDataContext.GetSystemItem(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetSystemItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 301
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nReturns a specific system item.\n"
  example: []
  syntax:
    content: public object GetSystemItem(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the dynamic item to return.
    return:
      type: System.Object
      description: The dynamic item with specified name and type.
    content.vb: Public Function GetSystemItem(name As String) As Object
  overload: BindOpen.Data.Context.BdoDataContext.GetSystemItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.GetSystemItem(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.GetSingletonItem(System.String,System.String)
  commentId: M:BindOpen.Data.Context.BdoDataContext.GetSingletonItem(System.String,System.String)
  id: GetSingletonItem(System.String,System.String)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: GetSingletonItem(String, String)
  nameWithType: BdoDataContext.GetSingletonItem(String, String)
  fullName: BindOpen.Data.Context.BdoDataContext.GetSingletonItem(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetSingletonItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 312
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nReturns a specific singleton item.\n"
  example: []
  syntax:
    content: public object GetSingletonItem(string name, string contextSectionName = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the dynamic item to return.
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    return:
      type: System.Object
      description: The dynamic item with specified name and type.
    content.vb: Public Function GetSingletonItem(name As String, contextSectionName As String = Nothing) As Object
  overload: BindOpen.Data.Context.BdoDataContext.GetSingletonItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.GetSingletonItem(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.GetScopedItem(System.String,System.String)
  commentId: M:BindOpen.Data.Context.BdoDataContext.GetScopedItem(System.String,System.String)
  id: GetScopedItem(System.String,System.String)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: GetScopedItem(String, String)
  nameWithType: BdoDataContext.GetScopedItem(String, String)
  fullName: BindOpen.Data.Context.BdoDataContext.GetScopedItem(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetScopedItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 324
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nReturns a specific scoped item.\n"
  example: []
  syntax:
    content: public object GetScopedItem(string name, string contextSectionName = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the dynamic item to return.
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    return:
      type: System.Object
      description: The dynamic item with specified name and type.
    content.vb: Public Function GetScopedItem(name As String, contextSectionName As String = Nothing) As Object
  overload: BindOpen.Data.Context.BdoDataContext.GetScopedItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.GetScopedItem(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.GetTransientItem(System.String,System.String)
  commentId: M:BindOpen.Data.Context.BdoDataContext.GetTransientItem(System.String,System.String)
  id: GetTransientItem(System.String,System.String)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: GetTransientItem(String, String)
  nameWithType: BdoDataContext.GetTransientItem(String, String)
  fullName: BindOpen.Data.Context.BdoDataContext.GetTransientItem(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetTransientItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 336
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nReturns a specific transient item.\n"
  example: []
  syntax:
    content: public object GetTransientItem(string name, string contextSectionName = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the dynamic item to return.
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    return:
      type: System.Object
      description: The dynamic item with specified name and type.
    content.vb: Public Function GetTransientItem(name As String, contextSectionName As String = Nothing) As Object
  overload: BindOpen.Data.Context.BdoDataContext.GetTransientItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.GetTransientItem(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
  commentId: M:BindOpen.Data.Context.BdoDataContext.GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
  id: GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: GetItem(String, String, PersistenceLevel)
  nameWithType: BdoDataContext.GetItem(String, String, PersistenceLevel)
  fullName: BindOpen.Data.Context.BdoDataContext.GetItem(System.String, System.String, BindOpen.Data.Common.PersistenceLevel)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetItem
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 349
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nReturns a specific item.\n"
  example: []
  syntax:
    content: public object GetItem(string name, string contextSectionName = null, PersistenceLevel persistenceLevel = PersistenceLevel.Any)
    parameters:
    - id: name
      type: System.String
      description: Name of the dynamic item to return.
    - id: contextSectionName
      type: System.String
      description: Name of the context section to consider.
    - id: persistenceLevel
      type: BindOpen.Data.Common.PersistenceLevel
      description: The persistence level to consider.
    return:
      type: System.Object
      description: The dynamic item with specified name and type.
    content.vb: Public Function GetItem(name As String, contextSectionName As String = Nothing, persistenceLevel As PersistenceLevel = PersistenceLevel.Any) As Object
  overload: BindOpen.Data.Context.BdoDataContext.GetItem*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.Save(System.String)
  commentId: M:BindOpen.Data.Context.BdoDataContext.Save(System.String)
  id: Save(System.String)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: Save(String)
  nameWithType: BdoDataContext.Save(String)
  fullName: BindOpen.Data.Context.BdoDataContext.Save(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Save
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 388
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nSaves this instance to a file.\n"
  example: []
  syntax:
    content: public bool Save(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: Path of the file to save.
    return:
      type: System.Boolean
      description: true if the file has been well saved. false otherwise.
    content.vb: Public Function Save(filePath As String) As Boolean
  overload: BindOpen.Data.Context.BdoDataContext.Save*
  implements:
  - BindOpen.Data.Context.IBdoDataContext.Save(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Context.BdoDataContext.Load(System.String,BindOpen.System.Diagnostics.BdoLog@)
  commentId: M:BindOpen.Data.Context.BdoDataContext.Load(System.String,BindOpen.System.Diagnostics.BdoLog@)
  id: Load(System.String,BindOpen.System.Diagnostics.BdoLog@)
  parent: BindOpen.Data.Context.BdoDataContext
  langs:
  - csharp
  - vb
  name: Load(String, ref BdoLog)
  nameWithType: BdoDataContext.Load(String, ref BdoLog)
  fullName: BindOpen.Data.Context.BdoDataContext.Load(System.String, ref BindOpen.System.Diagnostics.BdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Context/BdoDataContext.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Load
    path: ../src/BindOpen.Core/Data/Context/BdoDataContext.cs
    startLine: 417
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Context
  summary: "\nLoads a data context from file.\n"
  example: []
  syntax:
    content: public static BdoDataContext Load(string filePath, ref BdoLog log)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the file to load.
    - id: log
      type: BindOpen.System.Diagnostics.BdoLog
      description: The log that receives the log of this loading task.
    return:
      type: BindOpen.Data.Context.BdoDataContext
      description: Returns the data context loaded from the specified file.
    content.vb: Public Shared Function Load(filePath As String, ByRef log As BdoLog) As BdoDataContext
  overload: BindOpen.Data.Context.BdoDataContext.Load*
  nameWithType.vb: BdoDataContext.Load(String, ByRef BdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Context.BdoDataContext.Load(System.String, ByRef BindOpen.System.Diagnostics.BdoLog)
  name.vb: Load(String, ByRef BdoLog)
references:
- uid: BindOpen.Data.Context
  commentId: N:BindOpen.Data.Context
  name: BindOpen.Data.Context
  nameWithType: BindOpen.Data.Context
  fullName: BindOpen.Data.Context
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: BindOpen.Data.Items.DataItem
  commentId: T:BindOpen.Data.Items.DataItem
  parent: BindOpen.Data.Items
  name: DataItem
  nameWithType: DataItem
  fullName: BindOpen.Data.Items.DataItem
- uid: BindOpen.Data.Context.IBdoDataContext
  commentId: T:BindOpen.Data.Context.IBdoDataContext
  parent: BindOpen.Data.Context
  name: IBdoDataContext
  nameWithType: IBdoDataContext
  fullName: BindOpen.Data.Context.IBdoDataContext
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.DataItem.Clone
  commentId: M:BindOpen.Data.Items.DataItem.Clone
  parent: BindOpen.Data.Items.DataItem
  name: Clone()
  nameWithType: DataItem.Clone()
  fullName: BindOpen.Data.Items.DataItem.Clone()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone
    name: Clone
    nameWithType: DataItem.Clone
    fullName: BindOpen.Data.Items.DataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone
    name: Clone
    nameWithType: DataItem.Clone
    fullName: BindOpen.Data.Items.DataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone``1
  commentId: M:BindOpen.Data.Items.DataItem.Clone``1
  parent: BindOpen.Data.Items.DataItem
  name: Clone<T>()
  nameWithType: DataItem.Clone<T>()
  fullName: BindOpen.Data.Items.DataItem.Clone<T>()
  nameWithType.vb: DataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.DataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone<T>
    nameWithType: DataItem.Clone<T>
    fullName: BindOpen.Data.Items.DataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone(Of T)
    nameWithType: DataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.DataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: DataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: DataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: DataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: DataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: DataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose
  commentId: M:BindOpen.Data.Items.DataItem.Dispose
  parent: BindOpen.Data.Items.DataItem
  name: Dispose()
  nameWithType: DataItem.Dispose()
  fullName: BindOpen.Data.Items.DataItem.Dispose()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DataItem.Dispose(Boolean)
  fullName: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.Data.Context.BdoDataContext})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  name: Using<BdoDataContext>(Action<BdoDataContext>)
  nameWithType: ObjectHelper.Using<BdoDataContext>(Action<BdoDataContext>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.Data.Context.BdoDataContext>(System.Action<BindOpen.Data.Context.BdoDataContext>)
  nameWithType.vb: ObjectHelper.Using(Of BdoDataContext)(Action(Of BdoDataContext))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.Data.Context.BdoDataContext)(System.Action(Of BindOpen.Data.Context.BdoDataContext))
  name.vb: Using(Of BdoDataContext)(Action(Of BdoDataContext))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using<BdoDataContext>
    nameWithType: ObjectHelper.Using<BdoDataContext>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.Data.Context.BdoDataContext>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Context.BdoDataContext
    name: BdoDataContext
    nameWithType: BdoDataContext
    fullName: BindOpen.Data.Context.BdoDataContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using(Of BdoDataContext)
    nameWithType: ObjectHelper.Using(Of BdoDataContext)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.Data.Context.BdoDataContext)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Context.BdoDataContext
    name: BdoDataContext
    nameWithType: BdoDataContext
    fullName: BindOpen.Data.Context.BdoDataContext
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  isExternal: true
  name: Using<T>(T, Action<T>)
  nameWithType: ObjectHelper.Using<T>(T, Action<T>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>(T, System.Action<T>)
  nameWithType.vb: ObjectHelper.Using(Of T)(T, Action(Of T))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)(T, System.Action(Of T))
  name.vb: Using(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using<T>
    nameWithType: ObjectHelper.Using<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using(Of T)
    nameWithType: ObjectHelper.Using(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.Data.Context.BdoDataContext.SingletonItems*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.SingletonItems
  name: SingletonItems
  nameWithType: BdoDataContext.SingletonItems
  fullName: BindOpen.Data.Context.BdoDataContext.SingletonItems
- uid: BindOpen.Data.Context.IBdoDataContext.SingletonItems
  commentId: P:BindOpen.Data.Context.IBdoDataContext.SingletonItems
  parent: BindOpen.Data.Context.IBdoDataContext
  name: SingletonItems
  nameWithType: IBdoDataContext.SingletonItems
  fullName: BindOpen.Data.Context.IBdoDataContext.SingletonItems
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.Data.Context.BdoDataContext.ScopedItems*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.ScopedItems
  name: ScopedItems
  nameWithType: BdoDataContext.ScopedItems
  fullName: BindOpen.Data.Context.BdoDataContext.ScopedItems
- uid: BindOpen.Data.Context.IBdoDataContext.ScopedItems
  commentId: P:BindOpen.Data.Context.IBdoDataContext.ScopedItems
  parent: BindOpen.Data.Context.IBdoDataContext
  name: ScopedItems
  nameWithType: IBdoDataContext.ScopedItems
  fullName: BindOpen.Data.Context.IBdoDataContext.ScopedItems
- uid: BindOpen.Data.Context.BdoDataContext.TransientItems*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.TransientItems
  name: TransientItems
  nameWithType: BdoDataContext.TransientItems
  fullName: BindOpen.Data.Context.BdoDataContext.TransientItems
- uid: BindOpen.Data.Context.IBdoDataContext.TransientItems
  commentId: P:BindOpen.Data.Context.IBdoDataContext.TransientItems
  parent: BindOpen.Data.Context.IBdoDataContext
  name: TransientItems
  nameWithType: IBdoDataContext.TransientItems
  fullName: BindOpen.Data.Context.IBdoDataContext.TransientItems
- uid: BindOpen.Data.Context.BdoDataContext.Id*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.Id
  name: Id
  nameWithType: BdoDataContext.Id
  fullName: BindOpen.Data.Context.BdoDataContext.Id
- uid: BindOpen.Data.Context.IBdoDataContext.Id
  commentId: P:BindOpen.Data.Context.IBdoDataContext.Id
  parent: BindOpen.Data.Context.IBdoDataContext
  name: Id
  nameWithType: IBdoDataContext.Id
  fullName: BindOpen.Data.Context.IBdoDataContext.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Context.BdoDataContext.#ctor*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.#ctor
  name: BdoDataContext
  nameWithType: BdoDataContext.BdoDataContext
  fullName: BindOpen.Data.Context.BdoDataContext.BdoDataContext
- uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  commentId: M:BindOpen.Data.Items.DataItem.InitializeLifetimeService
  parent: BindOpen.Data.Items.DataItem
  name: InitializeLifetimeService()
  nameWithType: DataItem.InitializeLifetimeService()
  fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.InitializeLifetimeService*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.InitializeLifetimeService
  name: InitializeLifetimeService
  nameWithType: BdoDataContext.InitializeLifetimeService
  fullName: BindOpen.Data.Context.BdoDataContext.InitializeLifetimeService
- uid: BindOpen.Data.Context.BdoDataContext.Merge*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.Merge
  name: Merge
  nameWithType: BdoDataContext.Merge
  fullName: BindOpen.Data.Context.BdoDataContext.Merge
- uid: BindOpen.Data.Context.IBdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
  parent: BindOpen.Data.Context.IBdoDataContext
  name: Merge(IBdoDataContext)
  nameWithType: IBdoDataContext.Merge(IBdoDataContext)
  fullName: BindOpen.Data.Context.IBdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
    name: Merge
    nameWithType: IBdoDataContext.Merge
    fullName: BindOpen.Data.Context.IBdoDataContext.Merge
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Context.IBdoDataContext
    name: IBdoDataContext
    nameWithType: IBdoDataContext
    fullName: BindOpen.Data.Context.IBdoDataContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)
    name: Merge
    nameWithType: IBdoDataContext.Merge
    fullName: BindOpen.Data.Context.IBdoDataContext.Merge
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Context.IBdoDataContext
    name: IBdoDataContext
    nameWithType: IBdoDataContext
    fullName: BindOpen.Data.Context.IBdoDataContext
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.Clear*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.Clear
  name: Clear
  nameWithType: BdoDataContext.Clear
  fullName: BindOpen.Data.Context.BdoDataContext.Clear
- uid: BindOpen.Data.Context.IBdoDataContext.Clear
  commentId: M:BindOpen.Data.Context.IBdoDataContext.Clear
  parent: BindOpen.Data.Context.IBdoDataContext
  name: Clear()
  nameWithType: IBdoDataContext.Clear()
  fullName: BindOpen.Data.Context.IBdoDataContext.Clear()
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.Clear
    name: Clear
    nameWithType: IBdoDataContext.Clear
    fullName: BindOpen.Data.Context.IBdoDataContext.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.Clear
    name: Clear
    nameWithType: IBdoDataContext.Clear
    fullName: BindOpen.Data.Context.IBdoDataContext.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.AddItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.AddItem
  name: AddItem
  nameWithType: BdoDataContext.AddItem
  fullName: BindOpen.Data.Context.BdoDataContext.AddItem
- uid: BindOpen.Data.Context.IBdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: AddItem(String, Object, String, PersistenceLevel)
  nameWithType: IBdoDataContext.AddItem(String, Object, String, PersistenceLevel)
  fullName: BindOpen.Data.Context.IBdoDataContext.AddItem(System.String, System.Object, System.String, BindOpen.Data.Common.PersistenceLevel)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
    name: AddItem
    nameWithType: IBdoDataContext.AddItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.PersistenceLevel
    name: PersistenceLevel
    nameWithType: PersistenceLevel
    fullName: BindOpen.Data.Common.PersistenceLevel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.Common.PersistenceLevel)
    name: AddItem
    nameWithType: IBdoDataContext.AddItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.PersistenceLevel
    name: PersistenceLevel
    nameWithType: PersistenceLevel
    fullName: BindOpen.Data.Common.PersistenceLevel
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.PersistenceLevel
  commentId: T:BindOpen.Data.Common.PersistenceLevel
  parent: BindOpen.Data.Common
  name: PersistenceLevel
  nameWithType: PersistenceLevel
  fullName: BindOpen.Data.Common.PersistenceLevel
- uid: BindOpen.Data.Context.BdoDataContext.AddSystemItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.AddSystemItem
  name: AddSystemItem
  nameWithType: BdoDataContext.AddSystemItem
  fullName: BindOpen.Data.Context.BdoDataContext.AddSystemItem
- uid: BindOpen.Data.Context.IBdoDataContext.AddSystemItem(System.String,System.Object)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.AddSystemItem(System.String,System.Object)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: AddSystemItem(String, Object)
  nameWithType: IBdoDataContext.AddSystemItem(String, Object)
  fullName: BindOpen.Data.Context.IBdoDataContext.AddSystemItem(System.String, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddSystemItem(System.String,System.Object)
    name: AddSystemItem
    nameWithType: IBdoDataContext.AddSystemItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddSystemItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddSystemItem(System.String,System.Object)
    name: AddSystemItem
    nameWithType: IBdoDataContext.AddSystemItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddSystemItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.AddSingletonItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.AddSingletonItem
  name: AddSingletonItem
  nameWithType: BdoDataContext.AddSingletonItem
  fullName: BindOpen.Data.Context.BdoDataContext.AddSingletonItem
- uid: BindOpen.Data.Context.IBdoDataContext.AddSingletonItem(System.String,System.Object,System.String)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.AddSingletonItem(System.String,System.Object,System.String)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: AddSingletonItem(String, Object, String)
  nameWithType: IBdoDataContext.AddSingletonItem(String, Object, String)
  fullName: BindOpen.Data.Context.IBdoDataContext.AddSingletonItem(System.String, System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddSingletonItem(System.String,System.Object,System.String)
    name: AddSingletonItem
    nameWithType: IBdoDataContext.AddSingletonItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddSingletonItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddSingletonItem(System.String,System.Object,System.String)
    name: AddSingletonItem
    nameWithType: IBdoDataContext.AddSingletonItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddSingletonItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.AddScopedItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.AddScopedItem
  name: AddScopedItem
  nameWithType: BdoDataContext.AddScopedItem
  fullName: BindOpen.Data.Context.BdoDataContext.AddScopedItem
- uid: BindOpen.Data.Context.IBdoDataContext.AddScopedItem(System.String,System.Object,System.String)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.AddScopedItem(System.String,System.Object,System.String)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: AddScopedItem(String, Object, String)
  nameWithType: IBdoDataContext.AddScopedItem(String, Object, String)
  fullName: BindOpen.Data.Context.IBdoDataContext.AddScopedItem(System.String, System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddScopedItem(System.String,System.Object,System.String)
    name: AddScopedItem
    nameWithType: IBdoDataContext.AddScopedItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddScopedItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddScopedItem(System.String,System.Object,System.String)
    name: AddScopedItem
    nameWithType: IBdoDataContext.AddScopedItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddScopedItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.AddTransientItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.AddTransientItem
  name: AddTransientItem
  nameWithType: BdoDataContext.AddTransientItem
  fullName: BindOpen.Data.Context.BdoDataContext.AddTransientItem
- uid: BindOpen.Data.Context.IBdoDataContext.AddTransientItem(System.String,System.Object,System.String)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.AddTransientItem(System.String,System.Object,System.String)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: AddTransientItem(String, Object, String)
  nameWithType: IBdoDataContext.AddTransientItem(String, Object, String)
  fullName: BindOpen.Data.Context.IBdoDataContext.AddTransientItem(System.String, System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddTransientItem(System.String,System.Object,System.String)
    name: AddTransientItem
    nameWithType: IBdoDataContext.AddTransientItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddTransientItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.AddTransientItem(System.String,System.Object,System.String)
    name: AddTransientItem
    nameWithType: IBdoDataContext.AddTransientItem
    fullName: BindOpen.Data.Context.IBdoDataContext.AddTransientItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.ClearItems*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.ClearItems
  name: ClearItems
  nameWithType: BdoDataContext.ClearItems
  fullName: BindOpen.Data.Context.BdoDataContext.ClearItems
- uid: BindOpen.Data.Context.IBdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
  parent: BindOpen.Data.Context.IBdoDataContext
  name: ClearItems(PersistenceLevel)
  nameWithType: IBdoDataContext.ClearItems(PersistenceLevel)
  fullName: BindOpen.Data.Context.IBdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
    name: ClearItems
    nameWithType: IBdoDataContext.ClearItems
    fullName: BindOpen.Data.Context.IBdoDataContext.ClearItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.PersistenceLevel
    name: PersistenceLevel
    nameWithType: PersistenceLevel
    fullName: BindOpen.Data.Common.PersistenceLevel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.ClearItems(BindOpen.Data.Common.PersistenceLevel)
    name: ClearItems
    nameWithType: IBdoDataContext.ClearItems
    fullName: BindOpen.Data.Context.IBdoDataContext.ClearItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.PersistenceLevel
    name: PersistenceLevel
    nameWithType: PersistenceLevel
    fullName: BindOpen.Data.Common.PersistenceLevel
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.RemoveItems*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.RemoveItems
  name: RemoveItems
  nameWithType: BdoDataContext.RemoveItems
  fullName: BindOpen.Data.Context.BdoDataContext.RemoveItems
- uid: BindOpen.Data.Context.IBdoDataContext.RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: RemoveItems(String, PersistenceLevel)
  nameWithType: IBdoDataContext.RemoveItems(String, PersistenceLevel)
  fullName: BindOpen.Data.Context.IBdoDataContext.RemoveItems(System.String, BindOpen.Data.Common.PersistenceLevel)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
    name: RemoveItems
    nameWithType: IBdoDataContext.RemoveItems
    fullName: BindOpen.Data.Context.IBdoDataContext.RemoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.PersistenceLevel
    name: PersistenceLevel
    nameWithType: PersistenceLevel
    fullName: BindOpen.Data.Common.PersistenceLevel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.RemoveItems(System.String,BindOpen.Data.Common.PersistenceLevel)
    name: RemoveItems
    nameWithType: IBdoDataContext.RemoveItems
    fullName: BindOpen.Data.Context.IBdoDataContext.RemoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.PersistenceLevel
    name: PersistenceLevel
    nameWithType: PersistenceLevel
    fullName: BindOpen.Data.Common.PersistenceLevel
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.GetSystemItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.GetSystemItem
  name: GetSystemItem
  nameWithType: BdoDataContext.GetSystemItem
  fullName: BindOpen.Data.Context.BdoDataContext.GetSystemItem
- uid: BindOpen.Data.Context.IBdoDataContext.GetSystemItem(System.String)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.GetSystemItem(System.String)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: GetSystemItem(String)
  nameWithType: IBdoDataContext.GetSystemItem(String)
  fullName: BindOpen.Data.Context.IBdoDataContext.GetSystemItem(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetSystemItem(System.String)
    name: GetSystemItem
    nameWithType: IBdoDataContext.GetSystemItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetSystemItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetSystemItem(System.String)
    name: GetSystemItem
    nameWithType: IBdoDataContext.GetSystemItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetSystemItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.GetSingletonItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.GetSingletonItem
  name: GetSingletonItem
  nameWithType: BdoDataContext.GetSingletonItem
  fullName: BindOpen.Data.Context.BdoDataContext.GetSingletonItem
- uid: BindOpen.Data.Context.IBdoDataContext.GetSingletonItem(System.String,System.String)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.GetSingletonItem(System.String,System.String)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: GetSingletonItem(String, String)
  nameWithType: IBdoDataContext.GetSingletonItem(String, String)
  fullName: BindOpen.Data.Context.IBdoDataContext.GetSingletonItem(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetSingletonItem(System.String,System.String)
    name: GetSingletonItem
    nameWithType: IBdoDataContext.GetSingletonItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetSingletonItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetSingletonItem(System.String,System.String)
    name: GetSingletonItem
    nameWithType: IBdoDataContext.GetSingletonItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetSingletonItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.GetScopedItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.GetScopedItem
  name: GetScopedItem
  nameWithType: BdoDataContext.GetScopedItem
  fullName: BindOpen.Data.Context.BdoDataContext.GetScopedItem
- uid: BindOpen.Data.Context.IBdoDataContext.GetScopedItem(System.String,System.String)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.GetScopedItem(System.String,System.String)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: GetScopedItem(String, String)
  nameWithType: IBdoDataContext.GetScopedItem(String, String)
  fullName: BindOpen.Data.Context.IBdoDataContext.GetScopedItem(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetScopedItem(System.String,System.String)
    name: GetScopedItem
    nameWithType: IBdoDataContext.GetScopedItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetScopedItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetScopedItem(System.String,System.String)
    name: GetScopedItem
    nameWithType: IBdoDataContext.GetScopedItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetScopedItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.GetTransientItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.GetTransientItem
  name: GetTransientItem
  nameWithType: BdoDataContext.GetTransientItem
  fullName: BindOpen.Data.Context.BdoDataContext.GetTransientItem
- uid: BindOpen.Data.Context.IBdoDataContext.GetTransientItem(System.String,System.String)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.GetTransientItem(System.String,System.String)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: GetTransientItem(String, String)
  nameWithType: IBdoDataContext.GetTransientItem(String, String)
  fullName: BindOpen.Data.Context.IBdoDataContext.GetTransientItem(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetTransientItem(System.String,System.String)
    name: GetTransientItem
    nameWithType: IBdoDataContext.GetTransientItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetTransientItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetTransientItem(System.String,System.String)
    name: GetTransientItem
    nameWithType: IBdoDataContext.GetTransientItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetTransientItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.GetItem*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.GetItem
  name: GetItem
  nameWithType: BdoDataContext.GetItem
  fullName: BindOpen.Data.Context.BdoDataContext.GetItem
- uid: BindOpen.Data.Context.IBdoDataContext.GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: GetItem(String, String, PersistenceLevel)
  nameWithType: IBdoDataContext.GetItem(String, String, PersistenceLevel)
  fullName: BindOpen.Data.Context.IBdoDataContext.GetItem(System.String, System.String, BindOpen.Data.Common.PersistenceLevel)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
    name: GetItem
    nameWithType: IBdoDataContext.GetItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.PersistenceLevel
    name: PersistenceLevel
    nameWithType: PersistenceLevel
    fullName: BindOpen.Data.Common.PersistenceLevel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.GetItem(System.String,System.String,BindOpen.Data.Common.PersistenceLevel)
    name: GetItem
    nameWithType: IBdoDataContext.GetItem
    fullName: BindOpen.Data.Context.IBdoDataContext.GetItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.PersistenceLevel
    name: PersistenceLevel
    nameWithType: PersistenceLevel
    fullName: BindOpen.Data.Common.PersistenceLevel
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Context.BdoDataContext.Save*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.Save
  name: Save
  nameWithType: BdoDataContext.Save
  fullName: BindOpen.Data.Context.BdoDataContext.Save
- uid: BindOpen.Data.Context.IBdoDataContext.Save(System.String)
  commentId: M:BindOpen.Data.Context.IBdoDataContext.Save(System.String)
  parent: BindOpen.Data.Context.IBdoDataContext
  isExternal: true
  name: Save(String)
  nameWithType: IBdoDataContext.Save(String)
  fullName: BindOpen.Data.Context.IBdoDataContext.Save(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Context.IBdoDataContext.Save(System.String)
    name: Save
    nameWithType: IBdoDataContext.Save
    fullName: BindOpen.Data.Context.IBdoDataContext.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Context.IBdoDataContext.Save(System.String)
    name: Save
    nameWithType: IBdoDataContext.Save
    fullName: BindOpen.Data.Context.IBdoDataContext.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Context.BdoDataContext.Load*
  commentId: Overload:BindOpen.Data.Context.BdoDataContext.Load
  name: Load
  nameWithType: BdoDataContext.Load
  fullName: BindOpen.Data.Context.BdoDataContext.Load
- uid: BindOpen.System.Diagnostics.BdoLog
  commentId: T:BindOpen.System.Diagnostics.BdoLog
  parent: BindOpen.System.Diagnostics
  name: BdoLog
  nameWithType: BdoLog
  fullName: BindOpen.System.Diagnostics.BdoLog
- uid: BindOpen.Data.Context.BdoDataContext
  commentId: T:BindOpen.Data.Context.BdoDataContext
  parent: BindOpen.Data.Context
  name: BdoDataContext
  nameWithType: BdoDataContext
  fullName: BindOpen.Data.Context.BdoDataContext
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
shouldSkipMarkup: true
