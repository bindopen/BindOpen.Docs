### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.IDbQueryGroupByClause
  commentId: T:BindOpen.Data.Queries.IDbQueryGroupByClause
  id: IDbQueryGroupByClause
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.IDbQueryGroupByClause.Fields
  langs:
  - csharp
  - vb
  name: IDbQueryGroupByClause
  nameWithType: IDbQueryGroupByClause
  fullName: BindOpen.Data.Queries.IDbQueryGroupByClause
  type: Interface
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: 'public interface IDbQueryGroupByClause : IDbQueryItem'
    content.vb: >-
      Public Interface IDbQueryGroupByClause
          Inherits IDbQueryItem
  inheritedMembers:
  - BindOpen.Data.Queries.IDbQueryItem.Expression
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.Data.Queries.IDbQueryGroupByClause.Fields
  commentId: P:BindOpen.Data.Queries.IDbQueryGroupByClause.Fields
  id: Fields
  parent: BindOpen.Data.Queries.IDbQueryGroupByClause
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: IDbQueryGroupByClause.Fields
  fullName: BindOpen.Data.Queries.IDbQueryGroupByClause.Fields
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\n\n"
  syntax:
    content: List<DbField> Fields { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbField}
    content.vb: Property Fields As List(Of DbField)
  overload: BindOpen.Data.Queries.IDbQueryGroupByClause.Fields*
  modifiers.csharp:
  - get
  - set
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  isExternal: true
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: BindOpen.Data.Queries.IDbQueryItem.Expression
  commentId: P:BindOpen.Data.Queries.IDbQueryItem.Expression
  parent: BindOpen.Data.Queries.IDbQueryItem
  isExternal: true
  name: Expression
  nameWithType: IDbQueryItem.Expression
  fullName: BindOpen.Data.Queries.IDbQueryItem.Expression
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: BindOpen.Data.Queries.IDbQueryGroupByClause.Fields*
  commentId: Overload:BindOpen.Data.Queries.IDbQueryGroupByClause.Fields
  isExternal: true
  name: Fields
  nameWithType: IDbQueryGroupByClause.Fields
  fullName: BindOpen.Data.Queries.IDbQueryGroupByClause.Fields
- uid: System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbField}
  commentId: '!:System.Collections.Generic.List{BindOpen.Extensions.Carriers.DbField}'
  definition: System.Collections.Generic.List`1
  name: List<DbField>
  nameWithType: List<DbField>
  fullName: System.Collections.Generic.List<BindOpen.Extensions.Carriers.DbField>
  nameWithType.vb: List(Of DbField)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Extensions.Carriers.DbField)
  name.vb: List(Of DbField)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
