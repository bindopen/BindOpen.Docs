### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Items.DictionaryFactory
  commentId: T:BindOpen.Data.Items.DictionaryFactory
  id: DictionaryFactory
  parent: BindOpen.Data.Items
  children:
  - BindOpen.Data.Items.DictionaryFactory.Create(BindOpen.Data.Items.IDataKeyValue[])
  - BindOpen.Data.Items.DictionaryFactory.Create(System.Data.DataRow,System.String[])
  - BindOpen.Data.Items.DictionaryFactory.Create(System.Object,System.ValueTuple{System.String,System.String}[])
  - BindOpen.Data.Items.DictionaryFactory.Create(System.ValueTuple{System.String,System.String}[])
  langs:
  - csharp
  - vb
  name: DictionaryFactory
  nameWithType: DictionaryFactory
  fullName: BindOpen.Data.Items.DictionaryFactory
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DictionaryFactory
    path: ../src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
    startLine: 10
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nThis class represents a dictionary data factory.\n"
  example:
  - Titles, Descriptions.
  syntax:
    content: public static class DictionaryFactory
    content.vb: Public Module DictionaryFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Items.DictionaryFactory.Create(System.ValueTuple{System.String,System.String}[])
  commentId: M:BindOpen.Data.Items.DictionaryFactory.Create(System.ValueTuple{System.String,System.String}[])
  id: Create(System.ValueTuple{System.String,System.String}[])
  parent: BindOpen.Data.Items.DictionaryFactory
  langs:
  - csharp
  - vb
  name: Create((String name, String value)[])
  nameWithType: DictionaryFactory.Create((String name, String value)[])
  fullName: BindOpen.Data.Items.DictionaryFactory.Create(System.ValueTuple<System.String, System.String>[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
    startLine: 16
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nInstantiates a new instance of the DictionaryDataItem class specifying the values.\n"
  example: []
  syntax:
    content: public static DictionaryDataItem Create(params (string name, string value)[] items)
    parameters:
    - id: items
      type: System.ValueTuple{System.String,System.String}[]
      description: The items to consider.
    return:
      type: BindOpen.Data.Items.DictionaryDataItem
    content.vb: Public Shared Function Create(ParamArray items As(name As String, value As String)()) As DictionaryDataItem
  overload: BindOpen.Data.Items.DictionaryFactory.Create*
  nameWithType.vb: DictionaryFactory.Create((name As String, value As String)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Items.DictionaryFactory.Create(System.ValueTuple(Of System.String, System.String)())
  name.vb: Create((name As String, value As String)())
- uid: BindOpen.Data.Items.DictionaryFactory.Create(BindOpen.Data.Items.IDataKeyValue[])
  commentId: M:BindOpen.Data.Items.DictionaryFactory.Create(BindOpen.Data.Items.IDataKeyValue[])
  id: Create(BindOpen.Data.Items.IDataKeyValue[])
  parent: BindOpen.Data.Items.DictionaryFactory
  langs:
  - csharp
  - vb
  name: Create(IDataKeyValue[])
  nameWithType: DictionaryFactory.Create(IDataKeyValue[])
  fullName: BindOpen.Data.Items.DictionaryFactory.Create(BindOpen.Data.Items.IDataKeyValue[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
    startLine: 31
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nInstantiates a new instance of the DictionaryDataItem class specifying the values.\n"
  example: []
  syntax:
    content: public static DictionaryDataItem Create(params IDataKeyValue[] values)
    parameters:
    - id: values
      type: BindOpen.Data.Items.IDataKeyValue[]
      description: The values to consider.
    return:
      type: BindOpen.Data.Items.DictionaryDataItem
    content.vb: Public Shared Function Create(ParamArray values As IDataKeyValue()) As DictionaryDataItem
  overload: BindOpen.Data.Items.DictionaryFactory.Create*
  nameWithType.vb: DictionaryFactory.Create(IDataKeyValue())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Items.DictionaryFactory.Create(BindOpen.Data.Items.IDataKeyValue())
  name.vb: Create(IDataKeyValue())
- uid: BindOpen.Data.Items.DictionaryFactory.Create(System.Data.DataRow,System.String[])
  commentId: M:BindOpen.Data.Items.DictionaryFactory.Create(System.Data.DataRow,System.String[])
  id: Create(System.Data.DataRow,System.String[])
  parent: BindOpen.Data.Items.DictionaryFactory
  langs:
  - csharp
  - vb
  name: Create(DataRow, String[])
  nameWithType: DictionaryFactory.Create(DataRow, String[])
  fullName: BindOpen.Data.Items.DictionaryFactory.Create(System.Data.DataRow, System.String[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
    startLine: 51
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nInstantiates a new instance of the DictionaryDataItem class\nfrom a global object/text data row.\n"
  example: []
  syntax:
    content: public static DictionaryDataItem Create(DataRow dataRow, string[] uiCultureNames)
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: The global object/text row to consider.
    - id: uiCultureNames
      type: System.String[]
      description: The UI culture names to consider.
    return:
      type: BindOpen.Data.Items.DictionaryDataItem
    content.vb: Public Shared Function Create(dataRow As DataRow, uiCultureNames As String()) As DictionaryDataItem
  overload: BindOpen.Data.Items.DictionaryFactory.Create*
  nameWithType.vb: DictionaryFactory.Create(DataRow, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Items.DictionaryFactory.Create(System.Data.DataRow, System.String())
  name.vb: Create(DataRow, String())
- uid: BindOpen.Data.Items.DictionaryFactory.Create(System.Object,System.ValueTuple{System.String,System.String}[])
  commentId: M:BindOpen.Data.Items.DictionaryFactory.Create(System.Object,System.ValueTuple{System.String,System.String}[])
  id: Create(System.Object,System.ValueTuple{System.String,System.String}[])
  parent: BindOpen.Data.Items.DictionaryFactory
  langs:
  - csharp
  - vb
  name: Create(Object, (String from, String to)[])
  nameWithType: DictionaryFactory.Create(Object, (String from, String to)[])
  fullName: BindOpen.Data.Items.DictionaryFactory.Create(System.Object, System.ValueTuple<System.String, System.String>[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Core/Data/Items/Factories/DictionaryFactory.cs
    startLine: 74
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\nInstantiates a new instance of the DictionaryDataItem class\nfrom an object.\n"
  example: []
  syntax:
    content: public static DictionaryDataItem Create(object aObject, (string from, string to)[] mappings)
    parameters:
    - id: aObject
      type: System.Object
      description: The object to consider.
    - id: mappings
      type: System.ValueTuple{System.String,System.String}[]
      description: The mappings to consider.
    return:
      type: BindOpen.Data.Items.DictionaryDataItem
    content.vb: Public Shared Function Create(aObject As Object, mappings As(from As String, to As String)()) As DictionaryDataItem
  overload: BindOpen.Data.Items.DictionaryFactory.Create*
  nameWithType.vb: DictionaryFactory.Create(Object, (from As String, to As String)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Items.DictionaryFactory.Create(System.Object, System.ValueTuple(Of System.String, System.String)())
  name.vb: Create(Object, (from As String, to As String)())
references:
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Items.DictionaryFactory.Create*
  commentId: Overload:BindOpen.Data.Items.DictionaryFactory.Create
  name: Create
  nameWithType: DictionaryFactory.Create
  fullName: BindOpen.Data.Items.DictionaryFactory.Create
- uid: System.ValueTuple{System.String,System.String}[]
  isExternal: true
  name: ValueTuple<String, String>[]
  nameWithType: ValueTuple<String, String>[]
  fullName: System.ValueTuple<System.String, System.String>[]
  nameWithType.vb: ValueTuple(Of String, String)()
  fullName.vb: System.ValueTuple(Of System.String, System.String)()
  name.vb: ValueTuple(Of String, String)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Items.DictionaryDataItem
  commentId: T:BindOpen.Data.Items.DictionaryDataItem
  parent: BindOpen.Data.Items
  name: DictionaryDataItem
  nameWithType: DictionaryDataItem
  fullName: BindOpen.Data.Items.DictionaryDataItem
- uid: BindOpen.Data.Items.IDataKeyValue[]
  isExternal: true
  name: IDataKeyValue[]
  nameWithType: IDataKeyValue[]
  fullName: BindOpen.Data.Items.IDataKeyValue[]
  nameWithType.vb: IDataKeyValue()
  fullName.vb: BindOpen.Data.Items.IDataKeyValue()
  name.vb: IDataKeyValue()
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataKeyValue
    name: IDataKeyValue
    nameWithType: IDataKeyValue
    fullName: BindOpen.Data.Items.IDataKeyValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Items.IDataKeyValue
    name: IDataKeyValue
    nameWithType: IDataKeyValue
    fullName: BindOpen.Data.Items.IDataKeyValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Data.DataRow
  commentId: T:System.Data.DataRow
  parent: System.Data
  isExternal: true
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
shouldSkipMarkup: true
