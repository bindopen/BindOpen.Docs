### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Assemblies.AssemblyHelper
  commentId: T:BindOpen.System.Assemblies.AssemblyHelper
  id: AssemblyHelper
  parent: BindOpen.System.Assemblies
  children:
  - BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.String,System.Object@,System.Object[])
  - BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.Type,System.Object@,System.Object[])
  - BindOpen.System.Assemblies.AssemblyHelper.GetAsssembly(System.AppDomain,System.String)
  - BindOpen.System.Assemblies.AssemblyHelper.GetClassNameWithoutAssembly(System.String)
  langs:
  - csharp
  - vb
  name: AssemblyHelper
  nameWithType: AssemblyHelper
  fullName: BindOpen.System.Assemblies.AssemblyHelper
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AssemblyHelper
    path: ../src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
    startLine: 9
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Assemblies
  summary: "\nThis structure represents a string manager.\n"
  example: []
  syntax:
    content: public static class AssemblyHelper
    content.vb: Public Module AssemblyHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.System.Assemblies.AssemblyHelper.GetAsssembly(System.AppDomain,System.String)
  commentId: M:BindOpen.System.Assemblies.AssemblyHelper.GetAsssembly(System.AppDomain,System.String)
  id: GetAsssembly(System.AppDomain,System.String)
  isExtensionMethod: true
  parent: BindOpen.System.Assemblies.AssemblyHelper
  langs:
  - csharp
  - vb
  name: GetAsssembly(AppDomain, String)
  nameWithType: AssemblyHelper.GetAsssembly(AppDomain, String)
  fullName: BindOpen.System.Assemblies.AssemblyHelper.GetAsssembly(System.AppDomain, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetAsssembly
    path: ../src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
    startLine: 49
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Assemblies
  summary: "\nGets the specified assembly.\n"
  example: []
  syntax:
    content: public static Assembly GetAsssembly(this AppDomain appDomain, string assemblyName)
    parameters:
    - id: appDomain
      type: System.AppDomain
      description: The application domain to consider.
    - id: assemblyName
      type: System.String
      description: The name of the assembly to consider.
    return:
      type: System.Reflection.Assembly
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAsssembly(appDomain As AppDomain, assemblyName As String) As Assembly
  overload: BindOpen.System.Assemblies.AssemblyHelper.GetAsssembly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.Type,System.Object@,System.Object[])
  commentId: M:BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.Type,System.Object@,System.Object[])
  id: CreateInstance(System.Type,System.Object@,System.Object[])
  parent: BindOpen.System.Assemblies.AssemblyHelper
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, out Object, Object[])
  nameWithType: AssemblyHelper.CreateInstance(Type, out Object, Object[])
  fullName: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.Type, out System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateInstance
    path: ../src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
    startLine: 70
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Assemblies
  summary: "\nCreates the instance of the specified extension object instance type.\n"
  example: []
  syntax:
    content: public static IBdoLog CreateInstance(Type type, out object object1, params object[] attributes)
    parameters:
    - id: type
      type: System.Type
      description: The type to consider.
    - id: object1
      type: System.Object
      description: The object to consider.
    - id: attributes
      type: System.Object[]
      description: The attributes to consider.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Public Shared Function CreateInstance(type As Type, ByRef object1 As Object, ParamArray attributes As Object()) As IBdoLog
  overload: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance*
  nameWithType.vb: AssemblyHelper.CreateInstance(Type, ByRef Object, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.Type, ByRef System.Object, System.Object())
  name.vb: CreateInstance(Type, ByRef Object, Object())
- uid: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.String,System.Object@,System.Object[])
  commentId: M:BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.String,System.Object@,System.Object[])
  id: CreateInstance(System.String,System.Object@,System.Object[])
  parent: BindOpen.System.Assemblies.AssemblyHelper
  langs:
  - csharp
  - vb
  name: CreateInstance(String, out Object, Object[])
  nameWithType: AssemblyHelper.CreateInstance(String, out Object, Object[])
  fullName: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.String, out System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: CreateInstance
    path: ../src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
    startLine: 96
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Assemblies
  summary: "\nCreates the instance of the specified extension object instance type.\n"
  example: []
  syntax:
    content: public static IBdoLog CreateInstance(string fullyQualifiedName, out object object1, params object[] attributes)
    parameters:
    - id: fullyQualifiedName
      type: System.String
      description: The type fully qualified name to consider.
    - id: object1
      type: System.Object
      description: The object to consider.
    - id: attributes
      type: System.Object[]
      description: The attributes to consider.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Public Shared Function CreateInstance(fullyQualifiedName As String, ByRef object1 As Object, ParamArray attributes As Object()) As IBdoLog
  overload: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance*
  nameWithType.vb: AssemblyHelper.CreateInstance(String, ByRef Object, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance(System.String, ByRef System.Object, System.Object())
  name.vb: CreateInstance(String, ByRef Object, Object())
- uid: BindOpen.System.Assemblies.AssemblyHelper.GetClassNameWithoutAssembly(System.String)
  commentId: M:BindOpen.System.Assemblies.AssemblyHelper.GetClassNameWithoutAssembly(System.String)
  id: GetClassNameWithoutAssembly(System.String)
  isExtensionMethod: true
  parent: BindOpen.System.Assemblies.AssemblyHelper
  langs:
  - csharp
  - vb
  name: GetClassNameWithoutAssembly(String)
  nameWithType: AssemblyHelper.GetClassNameWithoutAssembly(String)
  fullName: BindOpen.System.Assemblies.AssemblyHelper.GetClassNameWithoutAssembly(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetClassNameWithoutAssembly
    path: ../src/BindOpen.Core/System/Assemblies/AssemblyHelper.cs
    startLine: 129
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Assemblies
  summary: "\nGets the root namespace.\n"
  example: []
  syntax:
    content: public static string GetClassNameWithoutAssembly(this string className)
    parameters:
    - id: className
      type: System.String
      description: The class name to consider.
    return:
      type: System.String
      description: Returns the root namspace.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetClassNameWithoutAssembly(className As String) As String
  overload: BindOpen.System.Assemblies.AssemblyHelper.GetClassNameWithoutAssembly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BindOpen.System.Assemblies
  commentId: N:BindOpen.System.Assemblies
  name: BindOpen.System.Assemblies
  nameWithType: BindOpen.System.Assemblies
  fullName: BindOpen.System.Assemblies
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.System.Assemblies.AssemblyHelper.GetAsssembly*
  commentId: Overload:BindOpen.System.Assemblies.AssemblyHelper.GetAsssembly
  name: GetAsssembly
  nameWithType: AssemblyHelper.GetAsssembly
  fullName: BindOpen.System.Assemblies.AssemblyHelper.GetAsssembly
- uid: System.AppDomain
  commentId: T:System.AppDomain
  parent: System
  isExternal: true
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance*
  commentId: Overload:BindOpen.System.Assemblies.AssemblyHelper.CreateInstance
  name: CreateInstance
  nameWithType: AssemblyHelper.CreateInstance
  fullName: BindOpen.System.Assemblies.AssemblyHelper.CreateInstance
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.System.Assemblies.AssemblyHelper.GetClassNameWithoutAssembly*
  commentId: Overload:BindOpen.System.Assemblies.AssemblyHelper.GetClassNameWithoutAssembly
  name: GetClassNameWithoutAssembly
  nameWithType: AssemblyHelper.GetClassNameWithoutAssembly
  fullName: BindOpen.System.Assemblies.AssemblyHelper.GetClassNameWithoutAssembly
shouldSkipMarkup: true
