### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory
  commentId: T:BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory
  id: BdoLoggerFactory
  parent: BindOpen.System.Diagnostics.Loggers
  children:
  - BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create``1(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  langs:
  - csharp
  - vb
  name: BdoLoggerFactory
  nameWithType: BdoLoggerFactory
  fullName: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory
  type: Class
  source:
    remote:
      path: src/BindOpen.Runtime/System/Diagnostics/Loggers/Factories/BdoLoggerFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: BdoLoggerFactory
    path: ../src/BindOpen.Runtime/System/Diagnostics/Loggers/Factories/BdoLoggerFactory.cs
    startLine: 10
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThis class represents a logger.\n"
  remarks: The output format is YAML.
  example: []
  syntax:
    content: public static class BdoLoggerFactory
    content.vb: Public Module BdoLoggerFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create``1(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create``1(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  id: Create``1(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  parent: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory
  langs:
  - csharp
  - vb
  name: Create<T>(String, BdoLoggerMode, Predicate<IBdoLogEvent>)
  nameWithType: BdoLoggerFactory.Create<T>(String, BdoLoggerMode, Predicate<IBdoLogEvent>)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create<T>(System.String, BindOpen.System.Diagnostics.BdoLoggerMode, System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Runtime/System/Diagnostics/Loggers/Factories/BdoLoggerFactory.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Create
    path: ../src/BindOpen.Runtime/System/Diagnostics/Loggers/Factories/BdoLoggerFactory.cs
    startLine: 26
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nCreates the specified logger.\n"
  example: []
  syntax:
    content: >-
      public static IBdoLogger Create<T>(string name, BdoLoggerMode mode, Predicate<IBdoLogEvent> eventFilter = null)
          where T : IBdoLogger, new()
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to consider.
    - id: eventFilter
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: The function that filters events.
    typeParameters:
    - id: T
      description: The logger class to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
      description: Returns the specified logger.
    content.vb: Public Shared Function Create(Of T As {IBdoLogger, New})(name As String, mode As BdoLoggerMode, eventFilter As Predicate(Of IBdoLogEvent) = Nothing) As IBdoLogger
  overload: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create*
  nameWithType.vb: BdoLoggerFactory.Create(Of T)(String, BdoLoggerMode, Predicate(Of IBdoLogEvent))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create(Of T)(System.String, BindOpen.System.Diagnostics.BdoLoggerMode, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent))
  name.vb: Create(Of T)(String, BdoLoggerMode, Predicate(Of IBdoLogEvent))
references:
- uid: BindOpen.System.Diagnostics.Loggers
  commentId: N:BindOpen.System.Diagnostics.Loggers
  name: BindOpen.System.Diagnostics.Loggers
  nameWithType: BindOpen.System.Diagnostics.Loggers
  fullName: BindOpen.System.Diagnostics.Loggers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create
  name: Create
  nameWithType: BdoLoggerFactory.Create
  fullName: BindOpen.System.Diagnostics.Loggers.BdoLoggerFactory.Create
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.BdoLoggerMode
  commentId: T:BindOpen.System.Diagnostics.BdoLoggerMode
  parent: BindOpen.System.Diagnostics
  name: BdoLoggerMode
  nameWithType: BdoLoggerMode
  fullName: BindOpen.System.Diagnostics.BdoLoggerMode
- uid: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  commentId: T:System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  parent: System
  definition: System.Predicate`1
  name: Predicate<IBdoLogEvent>
  nameWithType: Predicate<IBdoLogEvent>
  fullName: System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>
  nameWithType.vb: Predicate(Of IBdoLogEvent)
  fullName.vb: System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent)
  name.vb: Predicate(Of IBdoLogEvent)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  commentId: T:BindOpen.System.Diagnostics.Loggers.IBdoLogger
  parent: BindOpen.System.Diagnostics.Loggers
  name: IBdoLogger
  nameWithType: IBdoLogger
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
