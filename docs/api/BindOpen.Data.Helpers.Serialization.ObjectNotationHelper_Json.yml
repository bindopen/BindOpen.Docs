### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  id: ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  children:
  - BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet,System.String,System.Collections.Generic.List{System.String},System.Boolean)
  - BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet,System.String,System.String,System.Boolean)
  - BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.GetJsonNodeValue(System.String,System.String)
  - BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Data.DataTable,System.Boolean)
  - BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  langs:
  - csharp
  - vb
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ObjectNotationHelper_Json
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
    startLine: 15
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nThis class represents a helper for object notation.\n"
  example: []
  syntax:
    content: public static class ObjectNotationHelper_Json
    content.vb: Public Module ObjectNotationHelper_Json
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  id: ToJson(System.Object,System.String)
  isExtensionMethod: true
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  langs:
  - csharp
  - vb
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ToJson
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
    startLine: 35
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nGets the result of the serialization of the specified object.\n"
  example: []
  syntax:
    content: public static string ToJson(this object object1, string objectName)
    parameters:
    - id: object1
      type: System.Object
      description: The object to serialize.
    - id: objectName
      type: System.String
      description: The name of the output tag to use.
    return:
      type: System.String
      description: The Json string serializing the specified object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToJson(object1 As Object, objectName As String) As String
  overload: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Data.DataTable,System.Boolean)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Data.DataTable,System.Boolean)
  id: ToJson(System.Data.DataTable,System.Boolean)
  isExtensionMethod: true
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  langs:
  - csharp
  - vb
  name: ToJson(DataTable, Boolean)
  nameWithType: ObjectNotationHelper_Json.ToJson(DataTable, Boolean)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Data.DataTable, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ToJson
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
    startLine: 61
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nGets the result of the serialization of the specified data table.\n"
  example: []
  syntax:
    content: public static string ToJson(this DataTable dataTable, bool isFiltered = false)
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: The data table to serialize.
    - id: isFiltered
      type: System.Boolean
      description: Indicates whether only relevant information is put in the xml string.
    return:
      type: System.String
      description: The Json string serializing the specified data table.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToJson(dataTable As DataTable, isFiltered As Boolean = False) As String
  overload: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet,System.String,System.String,System.Boolean)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet,System.String,System.String,System.Boolean)
  id: FromJson(System.Data.DataSet,System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  langs:
  - csharp
  - vb
  name: FromJson(DataSet, String, String, Boolean)
  nameWithType: ObjectNotationHelper_Json.FromJson(DataSet, String, String, Boolean)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: FromJson
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
    startLine: 182
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nUpdates table of the specified data set from JSON string.\n"
  example: []
  syntax:
    content: public static void FromJson(this DataSet dataSet, string jsonString, string tableName, bool isAppend = false)
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: The data set to update.
    - id: jsonString
      type: System.String
      description: The xml string.
    - id: tableName
      type: System.String
      description: The name of the output data table.
    - id: isAppend
      type: System.Boolean
      description: Indicates whether the update consists in inserting a new row.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub FromJson(dataSet As DataSet, jsonString As String, tableName As String, isAppend As Boolean = False)
  overload: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet,System.String,System.Collections.Generic.List{System.String},System.Boolean)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet,System.String,System.Collections.Generic.List{System.String},System.Boolean)
  id: FromJson(System.Data.DataSet,System.String,System.Collections.Generic.List{System.String},System.Boolean)
  isExtensionMethod: true
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  langs:
  - csharp
  - vb
  name: FromJson(DataSet, String, List<String>, Boolean)
  nameWithType: ObjectNotationHelper_Json.FromJson(DataSet, String, List<String>, Boolean)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet, System.String, System.Collections.Generic.List<System.String>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: FromJson
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
    startLine: 303
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nUpdates table of the specified data set from JSON string.\n"
  example: []
  syntax:
    content: public static void FromJson(this DataSet dataSet, string jsonString, List<string> tableNames, bool isAppend = false)
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: The data set to update.
    - id: jsonString
      type: System.String
      description: The xml string.
    - id: tableNames
      type: System.Collections.Generic.List{System.String}
      description: The names of the output data table.
    - id: isAppend
      type: System.Boolean
      description: Indicates whether the update consists in inserting a new row.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub FromJson(dataSet As DataSet, jsonString As String, tableNames As List(Of String), isAppend As Boolean = False)
  overload: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson*
  nameWithType.vb: ObjectNotationHelper_Json.FromJson(DataSet, String, List(Of String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson(System.Data.DataSet, System.String, System.Collections.Generic.List(Of System.String), System.Boolean)
  name.vb: FromJson(DataSet, String, List(Of String), Boolean)
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.GetJsonNodeValue(System.String,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.GetJsonNodeValue(System.String,System.String)
  id: GetJsonNodeValue(System.String,System.String)
  isExtensionMethod: true
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  langs:
  - csharp
  - vb
  name: GetJsonNodeValue(String, String)
  nameWithType: ObjectNotationHelper_Json.GetJsonNodeValue(String, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.GetJsonNodeValue(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetJsonNodeValue
    path: ../src/BindOpen.Core/Data/Helpers/Serialization/ObjectNotationHelper_Json.cs
    startLine: 319
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Helpers.Serialization
  summary: "\nGets the value of the specified Json node in the specified xml string.\n"
  example: []
  syntax:
    content: public static string GetJsonNodeValue(this string jsonString, string nodeName)
    parameters:
    - id: jsonString
      type: System.String
      description: The xml string to parse.
    - id: nodeName
      type: System.String
      description: Name of the node.
    return:
      type: System.String
      description: The value of the specified Json node in the specified xml string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetJsonNodeValue(jsonString As String, nodeName As String) As String
  overload: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.GetJsonNodeValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson*
  commentId: Overload:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  name: ToJson
  nameWithType: ObjectNotationHelper_Json.ToJson
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson*
  commentId: Overload:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson
  name: FromJson
  nameWithType: ObjectNotationHelper_Json.FromJson
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.FromJson
- uid: System.Data.DataSet
  commentId: T:System.Data.DataSet
  parent: System.Data
  isExternal: true
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.GetJsonNodeValue*
  commentId: Overload:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.GetJsonNodeValue
  name: GetJsonNodeValue
  nameWithType: ObjectNotationHelper_Json.GetJsonNodeValue
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.GetJsonNodeValue
shouldSkipMarkup: true
