<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BindOpen.Databases</name>
    </assembly>
    <members>
        <member name="T:BindOpen.Application.Scopes.BdoScopeExtension_DbConnectors">
            <summary>
            This class represents a BindOpen scope extension.
            </summary>
        </member>
        <member name="M:BindOpen.Application.Scopes.BdoScopeExtension_DbConnectors.CreateDbConnector``1(BindOpen.Application.Scopes.IBdoScope,System.String)">
            <summary>
            Creates the instance of the specified definition.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="name">The name to consider.</param>
            <typeparam name="T">The connector class to return.</typeparam>
            <returns>Returns the created connector.</returns>
        </member>
        <member name="M:BindOpen.Application.Scopes.BdoScopeExtension_DbConnectors.CreateDbConnector``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Scripting.IBdoScriptVariableSet)">
            <summary>
            Creates the instance of the specified definition.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="configuration">The configuration to consider.</param>
            <param name="name">The name to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="scriptVariableSet">The script variable set to use.</param>
            <typeparam name="T">The connector class to return.</typeparam>
            <returns>Returns the created connector.</returns>
        </member>
        <member name="M:BindOpen.Application.Scopes.BdoScopeExtension_DbConnectors.CreateDbConnector(BindOpen.Application.Scopes.IBdoScope,BindOpen.Extensions.Runtime.IBdoConnectorConfiguration,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Scripting.IBdoScriptVariableSet)">
            <summary>
            Creates the instance of the specified definition.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="configuration">The configuration to consider.</param>
            <param name="name">The name to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="scriptVariableSet">The script variable set to use.</param>
            <returns>Returns the created connector.</returns>
        </member>
        <member name="T:BindOpen.Application.Services.BdoDbService">
            <summary>
            This class represents a database service.
            </summary>
        </member>
        <member name="P:BindOpen.Application.Services.BdoDbService.Connector">
            <summary>
            The connector of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Application.Services.BdoDbService.#ctor">
            <summary>
            Initializes a new instance of the BdoDbService class.
            </summary>
        </member>
        <member name="M:BindOpen.Application.Services.BdoDbService.#ctor(BindOpen.Extensions.Runtime.IBdoConnector)">
            <summary>
            Initializes a new instance of the BdoDbService class.
            </summary>
            <param name="connector">The connector to consider.</param>
        </member>
        <member name="T:BindOpen.Application.Services.BdoDbServiceFactory">
            <summary>
            This class represents a repository factory.
            </summary>
        </member>
        <member name="M:BindOpen.Application.Services.BdoDbServiceFactory.Create``1(BindOpen.Application.Scopes.IBdoScope,System.Func{BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoConnector},BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Creates a new database service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scope"></param>
            <param name="initializer"></param>
            <param name="log"></param>
            <returns>Returns the log of the operation.</returns>
        </member>
        <member name="T:BindOpen.Application.Services.IBdoDbService">
            <summary>
            This interfaces represents a database service.
            </summary>
        </member>
        <member name="P:BindOpen.Application.Services.IBdoDbService.Connector">
            <summary>
            The connector of the service.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Connections.BdoDbConnection">
            <summary>
            This class represents a database connection.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Connections.BdoDbConnection.Connector">
            <summary>
            The connector of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Connections.BdoDbConnection.Native">
            <summary>
            Gets the .NET database connection of this instance.
            </summary>
            <returns>Returns the connection of this instance.</returns>
        </member>
        <member name="P:BindOpen.Data.Connections.BdoDbConnection.Database">
            <summary>
            The name of the database of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnection.#ctor(BindOpen.Extensions.Connectors.BdoDbConnector,System.Data.IDbConnection)">
            <summary>
            Instantiates a new instance of the BdoDbConnection class.
            </summary>
            <param name="connector">The connector to consider.</param>
            <param name="nativeConnection">The native connection to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database .
            </summary>
            <param name="databaseName">The name of the database to consider.</param>
            <returns>Returns the log of process.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnection.Dispose(System.Boolean)">
            <summary>
            Disposes this instance. 
            </summary>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnection.Connect">
            <summary>
            Connects this instance.
            </summary>
            <returns>Returns the log of process.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnection.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
            <returns>Returns the log of process.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnection.BeginTransaction">
            <summary>
            Begins transaction.
            </summary>
            <returns>Returns the created transaction.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins transaction.
            </summary>
            <param name="il">The isolation level to cosnider.</param>
            <returns>Returns the created transaction.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnection.System#Data#IDbConnection#ChangeDatabase(System.String)">
            <summary>
            Changes database.
            </summary>
            <param name="databaseName">The name of the database to consider.</param>
        </member>
        <member name="T:BindOpen.Data.Connections.BdoDbConnectionExtensions">
            <summary>
            This class proposes extensions for database connection.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionExtensions.CreateCommand(BindOpen.Data.Connections.IBdoDbConnection,System.String)">
            <summary>
            Gets the SQL text of the specified query.
            </summary>
            <param name="connection">The connection to consider.</param>
            <param name="commandText">The command text to consider.</param>
            <returns>Returns the SQL text of the specified query.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionExtensions.CreateCommand(BindOpen.Data.Connections.IBdoDbConnection,BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the SQL text of the specified query.
            </summary>
            <param name="connection">The connection to consider.</param>
            <param name="query">The query to consider.</param>
            <param name="parameterMode">Indicates whether parameters are replaced.</param>
            <param name="parameterSet">The parameter elements to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the SQL text of the specified query.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionExtensions.CreateCommand``1(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the SQL text of the specified query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="parameterMode">Indicates whether parameters are replaced.</param>
            <param name="parameterSet">The parameter elements to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the SQL text of the specified query.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionExtensions.CreateCommand``1(System.Data.IDbConnection,BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the SQL text of the specified query.
            </summary>
            <param name="connection">The connection to consider.</param>
            <param name="query">The query to consider.</param>
            <param name="parameterMode">Indicates whether parameters are replaced.</param>
            <param name="parameterSet">The parameter elements to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the SQL text of the specified query.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionExtensions.CreateCommand``1(System.Data.IDbTransaction,BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the SQL text of the specified query.
            </summary>
            <param name="transaction">The transaction to consider.</param>
            <param name="query">The query to consider.</param>
            <param name="parameterMode">Indicates whether parameters are replaced.</param>
            <param name="parameterSet">The parameter elements to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the SQL text of the specified query.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionExtensions.BeginTransaction(BindOpen.Data.Connections.IBdoDbConnection)">
            <summary>
            Begins a transaction.
            </summary>
            <param name="connection">The connection to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionExtensions.BeginTransaction(BindOpen.Data.Connections.IBdoDbConnection,System.Data.IsolationLevel)">
            <summary>
            Begins a transaction.
            </summary>
            <param name="connection">The connection to consider.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionExtensions.GetIdentity(BindOpen.Data.Connections.IBdoDbConnection,System.Int64@,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the identity of the last inserted item
            </summary>
            <param name="connection">The connection to consider.</param>
            <param name="id">The long identifier to populate.</param>
            <param name="log">The log to consider.</param>
        </member>
        <member name="T:BindOpen.Data.Connections.BdoDbConnectionFactory">
            <summary>
            This class represents a connection service.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,BindOpen.Data.Stores.IBdoDatasourceDepot,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Creates a connector.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="depot">The data source depot to consider.</param>
            <param name="dataSourceName">The data source name to consider.</param>
            <param name="connectorDefinitionUniqueId">The connector definition name to consider.</param>
            <param name="log">The log of execution to consider.</param>
            <returns>Returns True if the connector has been opened. False otherwise.</returns>
        </member>
        <member name="M:BindOpen.Data.Connections.BdoDbConnectionFactory.Open``1(BindOpen.Application.Scopes.IBdoScope,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Creates a connector.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="dataSourceName">The data source name to consider.</param>
            <param name="connectorDefinitionUniqueId">The connector definition name to consider.</param>
            <param name="log">The log of execution to consider.</param>
            <returns>Returns True if the connector has been opened. False otherwise.</returns>
        </member>
        <member name="T:BindOpen.Data.Connections.IBdoDbConnection">
            <summary>
            This interfaces represents a connection.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Connections.IBdoDbConnection.Native">
            <summary>
            Gets the .NET database connection of this instance.
            </summary>
            <returns>Returns the connection of this instance.</returns>
        </member>
        <member name="P:BindOpen.Data.Connections.IBdoDbConnection.Connector">
            <summary>
            Connector of the connection.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Models.BdoDbModel">
            <summary>
            This class represents a database context.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModel.OnCreating(BindOpen.Data.Models.IBdoDbModelBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModel.Table(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModel.JoinCondition(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="aliases"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModel.Tuple(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModel.Tuple(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="aliases"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModel.Query(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Models.BdoDbModelBuilder">
            <summary>
            This class represents a database model.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelBuilder.#ctor(BindOpen.Data.Models.IBdoDbModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelBuilder.AddTable(BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelBuilder.AddTable(System.String,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelBuilder.AddTable``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelBuilder.AddJoinCondition(System.String,BindOpen.Data.Expression.DataExpression)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelBuilder.AddTuple(System.String,BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelBuilder.AddQuery(BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Adds the specified query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelBuilder.AddQuery(System.String,BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Adds the specified query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Models.BdoDbModelExtension">
            <summary>
            This class represents a database context.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Models.BdoDbModelExtension.UseQuery(BindOpen.Data.Models.BdoDbModel,System.String,System.Func{BindOpen.Data.Models.IBdoDbModel,BindOpen.Data.Queries.IDbQuery})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="intializer"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Models.IBdoDbModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Models.IBdoDbModel.OnCreating(BindOpen.Data.Models.IBdoDbModelBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:BindOpen.Data.Models.IBdoDbModel.Table(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.IBdoDbModel.JoinCondition(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="aliases"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.IBdoDbModel.Tuple(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.IBdoDbModel.Tuple(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Models.IBdoDbModel.Query(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Queries.ApiScriptClause">
            <summary>
            This class represents a Api script clause.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.ApiScriptClause.Operators">
            <summary>
            The operators of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.ApiScriptClause.ValueDefinition">
            <summary>
            The value definition of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptClause.#ctor">
            <summary>
            Creates a new instance of the ApiScriptClause class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptClause.#ctor(System.String,BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Common.DataOperator[])">
            <summary>
            Creates a new instance of the ApiScriptClause class.
            </summary>
            <param name="fieldAlias">The field alias to consider.</param>
            <param name="field">The field to consider.</param>
            <param name="operators">The operators to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptClause.#ctor(System.String,BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Common.DataOperator,BindOpen.Data.Queries.ApiScriptFilteringDefinition)">
            <summary>
            Creates a new instance of the DbQueryScriptItem class.
            </summary>
            <param name="fieldAlias">The field alias to consider.</param>
            <param name="field">The field to consider.</param>
            <param name="aOperator">The operator to consider.</param>
            <param name="valueFilteringDefinition">The value filter definition to consider.</param>
        </member>
        <member name="T:BindOpen.Data.Queries.ApiScriptField">
            <summary>
            This class represents a Api script expression.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.ApiScriptField.FieldAlias">
            <summary>
            The field alias of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.ApiScriptField.Field">
            <summary>
            The field of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptField.#ctor">
            <summary>
            Creates a new instance of the ApiScriptExpression class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptField.#ctor(System.String,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the ApiScriptExpression class.
            </summary>
            <param name="fieldAlias">The field alias to consider.</param>
            <param name="field">The field to consider.</param>
        </member>
        <member name="T:BindOpen.Data.Queries.ApiScriptFilteringDefinition">
            <summary>
            This class represents a Api script filtering definition.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptFilteringDefinition.#ctor">
            <summary>
            Creates a new instance of the ApiScriptFilteringDefinition class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptFilteringDefinition.#ctor(BindOpen.Data.Queries.ApiScriptClause[])">
            <summary>
            Creates a new instance of the ApiScriptFilteringDefinition class.
            </summary>
            <param name="clauses">The clauses to consider.</param>
        </member>
        <member name="T:BindOpen.Data.Queries.ApiScriptSortingDefinition">
            <summary>
            This class represents a Api script sorting definition.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptSortingDefinition.#ctor">
            <summary>
            Creates a new instance of the ApiScriptSortingDefinition class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.ApiScriptSortingDefinition.#ctor(BindOpen.Data.Queries.ApiScriptField[])">
            <summary>
            Creates a new instance of the ApiScriptSortingDefinition class.
            </summary>
            <param name="clauses">The clauses to consider.</param>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryExtension">
            <summary>
            This class represents the database data query extension.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition,System.Int32)">
            <summary>
            Converts the specifed search query into an extension script.
            </summary>
            <param name="searchQuery">The search query to consider.</param>
            <param name="log">The </param>
            <param name="definition">The clause statement to consider.</param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)">
            <summary>
            Adds filters to the specified database query considering the specified filter query string.
            </summary>
            <param name="dbQuery">The database query to consider.</param>
            <param name="filterQuery">The filter query string to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="definition">The clause statement to consider.</param>
            <returns>The built query.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)">
            <summary>
            Sorts the specified query considering the specified query script.
            </summary>
            <param name="query">The database query to consider.</param>
            <param name="sortQuery">The sort query text to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="definition">The definition to consider.</param>
            <returns>The built query.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)">
            <summary>
            Builds the following query: Get the server instances.
            </summary>
            <param name="query">The database query to consider.</param>
            <param name="pageSize">The page size to consider.</param>
            <param name="pageToken">The page token text to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="clauseStatement">The clause statement to consider.</param>
            <returns>The built query.</returns>
        </member>
        <member name="T:BindOpen.Data.Queries.DbFieldViewMode">
            <summary>
            This enumerates the possible modes of database field.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbFieldViewMode.OnlyName">
            <summary>
            Only name.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbFieldViewMode.CompleteName">
            <summary>
            Complete name.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbFieldViewMode.CompleteNameOrValue">
            <summary>
            Complete name or value.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbFieldViewMode.NameEqualsValue">
            <summary>
            Name equals value.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbFieldViewMode.OnlyValue">
            <summary>
            Only value.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbFieldViewMode.CompleteNameAsAlias">
            <summary>
            Complete name as alias.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbFieldViewMode.OnlyNameAsAlias">
            <summary>
            Only name as alias.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryBuilder">
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryBuilder._scope">
            <summary>
            The application scope of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.#ctor(BindOpen.Application.Scopes.IBdoScope)">
            <summary>
            Instantiates a new instance of the DbQueryBuilder class.
            </summary>
            <param name="scope">The scope to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName(System.String)">
            <summary>
            Gets the database name corresponding to the specified data module name.
            </summary>
            <param name="dataModuleName">The data module name to consider.</param>
            <remarks>If not found, it returns the specified data module name.</remarks>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet(BindOpen.Data.Elements.IDataElementSet,BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Updates the specified parameter set with the specified query.
            </summary>
            <param name="parameterSet">The parameter set to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.BuildQuery(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Builds the SQL text from the specified database query.
            </summary>
            <param name="query">The database data query to build.</param>
            <param name="parameterMode">The display mode of parameters to consider.</param>
            <param name="parameterSet">The parameter set to consider.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the built query text.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Builds the SQL text of the specified basic query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="parameterSet">The parameter set to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the built query text.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbCompositeQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Builds the SQL text of the specified merge query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="parameterSet">The parameter set to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <returns>Returns the built query text.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value(System.String,BindOpen.Data.Common.DataValueType)">
            <summary>
            Gets the Sql string corresponding to the specified value.
            </summary>
            <param name="value">The value to consider.</param>
            <param name="valueType">The value type to consider.</param>
            <returns>Returns the Sql string.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.Dispose(System.Boolean)">
            <summary>
            Disposes specifying whether this instance is disposing.
            </summary>
            <param name="isDisposing">Indicates whether this instance is disposing</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count(System.Object[])">
            <summary>
            Evaluates the script word $SQLCOUNT.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount(System.Object[])">
            <summary>
            Evaluates the script word $SQLCOUNT.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum(System.Object[])">
            <summary>
            Evaluates the script word $SQLSUM.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average(System.Object[])">
            <summary>
            Evaluates the script word $SQLAVG.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In(System.Object[])">
            <summary>
            Evaluates the script word $SQLIN.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLEQ.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLDIFF.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLGT.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLGTE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLLT.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLLTE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull(System.String)">
            <summary>
            Evaluates the script word $SQLISNULL.
            </summary>
            <param name="value1"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText(System.String)">
            <summary>
            Evaluates the script word $SQLCONVERTTOTEXT.
            </summary>
            <param name="value1"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate(System.Object[])">
            <summary>
            Evaluates the script word $SQLGETCURRENTDATE.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If(System.String,System.String,System.String)">
            <summary>
            Evaluates the script word $SQLIF.
            </summary>
            <param name="condition"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not(System.String)">
            <summary>
            Evaluates the script word $SQLNOT.
            </summary>
            <param name="value1">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or(System.Object[])">
            <summary>
            Evaluates the script word $SQLOR.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And(System.Object[])">
            <summary>
            Evaluates the script word $SQLAND.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor(System.Object[])">
            <summary>
            Evaluates the script word $SQLXOR.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Gets the BindOpen script corresponding to the specified field.
            </summary>
            <param name="field">The field to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Gets the BindOpen script corresponding to the specified table.
            </summary>
            <param name="table">The table to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text(System.String)">
            <summary>
            Evaluates the script word $SQLTEXT.
            </summary>
            <param name="value1"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLLIKE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace(System.String,System.String,System.String)">
            <summary>
            Evaluates the script word $SQLREPLACE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate(System.Object[])">
            <summary>
            Evaluates the script word $SQLCONCATENATE.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null">
            <summary>
            Evaluates the script word $SQLNULL.
            </summary>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True">
            <summary>
            Evaluates the script word $SQLTRUE.
            </summary>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database(System.String)">
            <summary>
            Evaluates the script word %SQLDATABASE.
            </summary>
            <param name="name"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema(System.String,System.String)">
            <summary>
            Evaluates the script word %SQLSCHEMA.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table(System.String,System.String)">
            <summary>
            Evaluates the script word [%DATABASE->]%TABLE.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field(System.String,System.String)">
            <summary>
            Evaluates the script word [[%DATABASE->]%TABLE->]%FIELD.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List(System.Object[])">
            <summary>
            Evaluates the script word $SQLLIST.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid">
            <summary>
            Evaluates the script word $SQLNEWGUID.
            </summary>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random">
            <summary>
            Evaluates the script word $SQLRANDOM.
            </summary>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryParameterModes">
            <summary>
            This enumeration lists the possible modes of parameters.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryParameterModes.Scripted">
            <summary>
            Mode when parameters are scripted.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryParameterModes.ValueInjected">
            <summary>
            Mode when values of parameters are injected.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryParameterModes.SimplyShowed">
            <summary>
            Mode when parameters are simply showed.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryFromClause">
            <summary>
            This class represents the From clause of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryFromClause.Statements">
            <summary>
            The statements of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryFromClause.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryFromClause.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryFromClause class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryFromStatement">
            <summary>
            This class represents the From clause of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryFromStatement.Tables">
            <summary>
            The tables of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryFromStatement.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryFromStatement.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryFromStatement class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryGroupByClause">
            <summary>
            This class represents the GroupBy clause of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryGroupByClause.Fields">
            <summary>
            Fields of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryGroupByClause.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryGroupByClause.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryGroupByClause class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryHavingClause">
            <summary>
            This class represents the Having clause of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryHavingClause.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryHavingClause.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryHavingClause class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryJoinKind">
            <summary>
            This enumeration lists all the kinds of data query joins.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryJoinKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryJoinKind.Inner">
            <summary>
            Inner.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryJoinKind.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryJoinKind.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryOrderByClause">
            <summary>
            This class represents the Order-By clause of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryOrderByClause.Statements">
            <summary>
            The statements of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryOrderByClause.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryOrderByClause.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryOrderByClause class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryOrderByStatement">
            <summary>
            This class represents the Order-By clause of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryOrderByStatement.Sorting">
            <summary>
            The sorting order of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryOrderByStatement.Field">
            <summary>
            The field of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryOrderByStatement.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryOrderByStatement class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryUnionClause">
            <summary>
            This class represents a union clause of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryUnionClause.Kind">
            <summary>p
            Type of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryUnionClause.Query">
            <summary>
            Data query of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryUnionClause.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryUnionClause class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryUnionKind">
            <summary>
            This enumeration lists all the kinds of data query unions.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryUnionKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryUnionKind.Union">
            <summary>
            Union.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryWhereClause">
            <summary>
            This class represents the Where clause of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryWhereClause.IdFields">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQueryWhereClause.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQueryWhereClause.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryWhereClause class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryCondition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryCondition.Field1">
            <summary>
            The field 1 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryCondition.Field2">
            <summary>
            The field 2 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryCondition.Operator">
            <summary>
            The operator of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryCondition.ParameterSet">
            <summary>
            The set of parameters of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryFromClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryFromClause.Statements">
            <summary>
            The statements of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryFromStatement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryFromStatement.Tables">
            <summary>
            The tables of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryGroupByClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryGroupByClause.Fields">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryHavingClause">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryOrderByClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryOrderByClause.Statements">
            <summary>
            The statements of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryOrderByStatement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryOrderByStatement.Field">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryOrderByStatement.Sorting">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryWhereClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryWhereClause.IdFields">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbCompositeQuery">
            <summary>
            This class represents a merge data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbCompositeQuery.Queries">
            <summary>
            The queries of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbCompositeQuery.#ctor">
            <summary>
            Instantiates a new instance of the DbCTEQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbCompositeQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Instantiates a new instance of the DbCTEQuery class.
            </summary>
            <param name="kind">The kind to consider.</param>
            <param name="table">The table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbCompositeQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Instantiates a new instance of the DbCTEQuery class.
            </summary>
            <param name="name">The name of the query to consider.</param>
            <param name="kind">The kind to consider.</param>
            <param name="table">The table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbCompositeQuery.Key">
            <summary>
            Gets the key of the item.
            </summary>
            <returns>Returns the key of the item.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])">
            <summary>
            Sets the specified queries.
            </summary>
            <param name="queries">The queries to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQuery">
            <summary>
            This class represents a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.Name">
            <summary>
            Name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.DataModule">
            <summary>
            Name of the data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.DataTable">
            <summary>
            Name of the data table of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.DataTableAlias">
            <summary>
            Name of the data table alias of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.Schema">
            <summary>
            Schema of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.Kind">
            <summary>
            The kind of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.IsExistenceChecked">
            <summary>
            Indicates whether existence is checked.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.ParameterSpecSet">
            <summary>
            The parameter specification set of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.ParameterSet">
            <summary>
            The parameters of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.CTETables">
            <summary>
            The CTE tables of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbQuery.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.#ctor">
            <summary>
            Instantiates a new instance of the DbQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Instantiates a new instance of the DbQuery class.
            </summary>
            <param name="kind">Type of database data query.</param>
            <param name="table">The table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Instantiates a new instance of the DbQuery class.
            </summary>
            <param name="name">Name of the query.</param>
            <param name="kind">Type of database data query.</param>
            <param name="table">The table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.GetName">
            <summary>
            Gets the name of this instance.
            </summary>
            <returns>Returns the name of this instance.</returns>
            <remarks>If the name of this instance is empty or null then the returned name is determined from this instance's properties.</remarks>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.CheckExistence(System.Boolean)">
            <summary>
            Indicates that this instance checks the existence of table or data according to the kind of queries.
            </summary>
            <param name="isExistenceChecked">Indicates whether this instance checks the existence of table or data.</param>
            <returns>Return this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])">
            <summary>
            Defines the parameter specifications of this instance.
            </summary>
            <param name="parameters">The set of parameters to consider.</param>
            <returns>Return this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])">
            <summary>
            Defines the parameter specifications of this instance.
            </summary>
            <param name="parameterSpecs">The set of parameter specifications to consider.</param>
            <returns>Return this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)">
            <summary>
            Add the specified parameter to this instance.
            </summary>
            <param name="parameter">The parameter to consider.</param>
            <returns>Return this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.UseParameter(System.String,System.Object)">
            <summary>
            Adds the specified parameter to this instance.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="value">The data table to consider.</param>
            <returns>Return this added parameter.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)">
            <summary>
            Adds the specified parameter to this instance.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="valueType">The data value type to consider.</param>
            <param name="value">The data table to consider.</param>
            <returns>Return this added parameter.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])">
            <summary>
            Sets the specified CTE tables.
            </summary>
            <param name="tables">The CTE tables to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbQuery.Dispose(System.Boolean)">
            <summary>
            Disposes this instance. 
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryKind">
            <summary>
            This enumeration lists the possible kinds of database data queries.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryKind.Create">
            <summary>
            Create.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryKind.Select">
            <summary>
            Select.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryKind.Update">
            <summary>
            Update.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryKind.Delete">
            <summary>
            Delete.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryKind.Insert">
            <summary>
            Insert.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryKind.Upsert">
            <summary>
            Upsert.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryKind.Drop">
            <summary>
            Drop.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbQueryParameterMode">
            <summary>
            This enumeration lists all the possible modes of query parameter.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryParameterMode.Symboled">
            <summary>
            Symboled.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryParameterMode.Scripted">
            <summary>
            Scripted.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Queries.DbQueryParameterMode.ValueInjected">
            <summary>
            ValueInjected.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbSingleQuery">
            <summary>
            This class represents an advanced database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.IsDistinct">
            <summary>
            Indicates whether this instance is distinct. When distinct an advanced Select 
            database data query only returns distinct records.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.Limit">
            <summary>
            Number of top items of this instance. Top items are the items a advanced Select 
            database data query will return.
            </summary>
            <remarks>By default it is -1 meaning no limit.</remarks>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.Fields">
            <summary>
            Fields of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.UnionClauses">
            <summary>
            The union tables of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.FromClause">
            <summary>
            From clause of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.WhereClause">
            <summary>
            Where clause of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.GroupByClause">
            <summary>
            Group by statement of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.HavingClause">
            <summary>
            Having statement of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.OrderByClause">
            <summary>
            Order by clause of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbSingleQuery.ReturnedIdFields">
            <summary>
            The returned IDs to consider.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.#ctor">
            <summary>
            Instantiates a new instance of the AdvancedDbQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.#ctor(BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Instantiates a new instance of the AdvancedDbQuery class.
            </summary>
            <param name="kind">Type of database data query.</param>
            <param name="table">The table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.#ctor(System.String,BindOpen.Data.Queries.DbQueryKind,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Instantiates a new instance of the AdvancedDbQuery class.
            </summary>
            <param name="name">Name of the query.</param>
            <param name="kind">Type of database data query.</param>
            <param name="table">The table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.GetName">
            <summary>
            Gets the name of this instance.
            </summary>
            <returns>Returns the name of this instance.</returns>
            <remarks>If the name of this instance is empty or null then the returned name is determined from this instance's properties.</remarks>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.GetFieldWithBoundFieldName(System.String)">
            <summary>
            Gets the data field with the specified bound data field name.
            </summary>
            <param name="boundFieldName">Name of the bound data field.</param>
            <returns>The data field with the specified bound data field name.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.GetFieldWithName(System.String)">
            <summary>
            Gets the data field with the specified data field name.
            </summary>
            <param name="name">Name of the field.</param>
            <returns>The data field with the specified data field name.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.GetIdFieldWithBoundFieldName(System.String)">
            <summary>
            Gets the data field with the specified bound data field name.
            </summary>
            <param name="boundFieldName">Name of the bound data field.</param>
            <returns>The data field with the specified bound data field name.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AsDistinct">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.WithLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.WithFields(BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified fields.
            </summary>
            <param name="fields">The fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.WithReturnedIdFields(BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified returned ID fields.
            </summary>
            <param name="fields">The fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.WithFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})">
            <summary>
            Sets the fields using an initialization function.
            </summary>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AddField(BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AddField(System.Boolean,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="canBeAdded">Indicates whether the field can be added.</param>
            <param name="field">The field to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AddField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})">
            <summary>
            Sets the field using an initialization function.
            </summary>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AddField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})">
            <summary>
            Sets the field using an initialization function.
            </summary>
            <param name="canBeAdded">Indicates whether the field can be added.</param>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.Union(BindOpen.Data.Queries.DbQueryUnionKind,BindOpen.Data.Queries.IDbSingleQuery)">
            <summary>
            
            </summary>
            <param name="unionClause">The union clause to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.From(BindOpen.Extensions.Carriers.DbTable[])">
            <summary>
            
            </summary>
            <param name="tables">The tables to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.From(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.From(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.Where(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.Where(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.WithIdFields(BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified ID fields.
            </summary>
            <param name="fields">The ID fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.WithIdFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})">
            <summary>
            Sets the ID fields using an initialization function.
            </summary>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AddIdField(BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Adds the specified ID field.
            </summary>
            <param name="field">The ID field to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AddIdField(System.Boolean,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Adds the specified ID field.
            </summary>
            <param name="canBeAdded">Indicates whether the field can be added.</param>
            <param name="field">The ID field to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AddIdField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})">
            <summary>
            Adds the ID field using an initialization function.
            </summary>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.AddIdField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})">
            <summary>
            Adds the ID field using an initialization function.
            </summary>
            <param name="canBeAdded">Indicates whether the field can be added.</param>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.OrderBy(BindOpen.Data.Queries.IDbQueryOrderByStatement[])">
            <summary>
            
            </summary>
            <param name="statements"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.OrderBy(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.OrderBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.GroupBy(BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            
            </summary>
            <param name="fields">The tables to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.GroupBy(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.GroupBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.Having(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbSingleQuery.Having(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbStoredQuery">
            <summary>
            This class represents a stored data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbStoredQuery.Query">
            <summary>
            The query of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbStoredQuery.QueryTexts">
            <summary>
            The SQL query text of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbStoredQuery.#ctor">
            <summary>
            Instantiates a new instance of the StoredDbQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbStoredQuery.#ctor(BindOpen.Data.Queries.IDbQuery,System.String)">
            <summary>
            Instantiates a new instance of the StoredDbQuery class.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="name">The name of the query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbStoredQuery.Key">
            <summary>
            Gets the key of the item.
            </summary>
            <returns>Returns the key of the item.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbStoredQuery.GetName">
            <summary>
            Gets the name of this instance.
            </summary>
            <returns>Returns the name of this instance.</returns>
            <remarks>If the name of this instance is empty or null then the returned name is determined from this instance's properties.</remarks>
        </member>
        <member name="T:BindOpen.Data.Queries.DbFluent">
            <summary>
            This static class represents a factory of data field.
            </summary>
            <summary>
            This class represents a fluent factory of database query.
            </summary>
            <summary>
            This static class represents a factory of data query parameter.
            </summary>
            <summary>
            This class represents a fluent factory of database query.
            </summary>
            <summary>
            This static class represents a factory of data query parameter.
            </summary>
            <summary>
            This static class represents a factory of data query parameter.
            </summary>
            <summary>
            This static class represents a factory of data query parameter.
            </summary>
            <summary>
            This static class represents a factory of data table.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Field(System.String,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="table">The data table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Field``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="table">The data table to consider.</param>
            <typeparam name="T">The class to consider.</typeparam>
            <typeparam name="TProperty">The class property to consider.</typeparam>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.AsLiteral(BindOpen.Extensions.Carriers.DbField,System.Object,BindOpen.Data.Common.DataValueType)">
            <summary>
            Updates the specified field as literal.
            </summary>
            <param name="field">The field to consider.</param>
            <param name="value">The value to consider.</param>
            <param name="valueType">The value type to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsLiteral(System.String,System.Object,BindOpen.Data.Common.DataValueType)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="value">The value to consider.</param>
            <param name="valueType">The value type to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsLiteral(System.String,BindOpen.Extensions.Carriers.DbTable,System.Object,BindOpen.Data.Common.DataValueType)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="value">The value to consider.</param>
            <param name="valueType">The value type to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsLiteral``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="value">The value to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsLiteral``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbTable,System.Object)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="value">The value to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Extensions.Carriers.DbField,System.String)">
            <summary>
            Updates the specified field as script.
            </summary>
            <param name="field">The field to consider.</param>
            <param name="script">The script to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsScript(System.String,System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="script">The script to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsScript(System.String,BindOpen.Extensions.Carriers.DbTable,System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="script">The script to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsScript``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="script">The script to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsScript``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbTable,System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="script">The script to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Updates the specified field as query.
            </summary>
            <param name="field">The field to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsQuery(System.String,BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsQuery(System.String,BindOpen.Extensions.Carriers.DbTable,BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsQuery``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsQuery``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbTable,BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Updates the specified field as other.
            </summary>
            <param name="field">The field to consider.</param>
            <param name="otherField">The other field to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsOther(System.String,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="otherField">The other field to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsOther(System.String,BindOpen.Extensions.Carriers.DbTable,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="otherField">The other field to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsOther``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="otherField">The other field to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsOther``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbTable,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="otherField">The other field to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsAll(BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="table">The data table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.String)">
            <summary>
            Updates the specified field as parameter.
            </summary>
            <param name="field">The field to consider.</param>
            <param name="parameterName">The parameter element to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter(System.String,System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="parameterName">The parameter element to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter(System.String,BindOpen.Extensions.Carriers.DbTable,System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="parameterName">The parameter element to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="parameterName">The parameter element to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbTable,System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="parameterName">The parameter element to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.Byte)">
            <summary>
            Updates the specified field as parameter.
            </summary>
            <param name="field">The field to consider.</param>
            <param name="parameterIndex">The parameter index to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter(System.String,System.Byte)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="parameterIndex">The parameter index to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter(System.String,BindOpen.Extensions.Carriers.DbTable,System.Byte)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="parameterIndex">The parameter index to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Byte)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="parameterIndex">The parameter index to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbTable,System.Byte)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="parameterIndex">The parameter index to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Elements.IDataElement)">
            <summary>
            Updates the specified field as parameter.
            </summary>
            <param name="field">The field to consider.</param>
            <param name="parameter">The parameter to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter(System.String,BindOpen.Data.Elements.IDataElement)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="parameter">The parameter to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter(System.String,BindOpen.Extensions.Carriers.DbTable,BindOpen.Data.Elements.IDataElement)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="parameter">The parameter to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Data.Elements.IDataElement)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="parameter">The parameter to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.FieldAsParameter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},BindOpen.Extensions.Carriers.DbTable,BindOpen.Data.Elements.IDataElement)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="expr">The expression to consider.</param>
            <param name="table">The data table to consider.</param>
            <param name="parameter">The parameter to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Upsert(System.String,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Upsert basic database query.
            </summary>
            <param name="name">The name of the query to consider.</param>
            <param name="table">The table to consider.</param>
            <returns>Returns a new Upsert basic database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Upsert(BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Upsert basic database query.
            </summary>
            <param name="table">The table to consider.</param>
            <param name="selectQuery">The select query to consider.</param>
            <returns>Returns a new Upsert basic database query</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BindOpen.Data.Queries.DbFluent.Parameter(System.String,System.Object)" -->
        <member name="M:BindOpen.Data.Queries.DbFluent.Parameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)">
            <summary>
            Creates a new instance of the DataElement class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="valueType">The data value type to consider.</param>
            <param name="value">The data table to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Data.Elements.ScalarElement)">
            <summary>
            Creates a new instance of the DataElement class.
            </summary>
            <param name="element">The element to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.CreateParameterWildString(BindOpen.Data.Elements.IDataElement)">
            <summary>
            Creates a parameter wild string from the specified parameter.
            </summary>
            <param name="parameter">The parameter to consider.</param>
            <returns>Returns the string corresponding to the specified parameter.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BindOpen.Data.Queries.DbFluent.CreateParameterString(BindOpen.Data.Elements.IDataElement)" -->
        <member name="M:BindOpen.Data.Queries.DbFluent.DeleteQuery(System.String,BindOpen.Extensions.Carriers.DbTable,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Delete advanced database query.
            </summary>
            <returns>Returns a new Delete advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.DeleteQuery(BindOpen.Extensions.Carriers.DbTable,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Delete advanced database query.
            </summary>
            <returns>Returns a new Delete advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.CreateQuery(System.String,BindOpen.Extensions.Carriers.DbTable,System.Boolean,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Create advanced database query.
            </summary>
            <returns>Returns a new Create basic database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.CreateQuery(BindOpen.Extensions.Carriers.DbTable,System.Boolean,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Create advanced database query.
            </summary>
            <returns>Returns a new Create basic database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.DropQuery(System.String,BindOpen.Extensions.Carriers.DbTable,System.Boolean,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Drop advanced database query.
            </summary>
            <returns>Returns a new Drop advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.DropQuery(BindOpen.Extensions.Carriers.DbTable,System.Boolean,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Drop advanced database query.
            </summary>
            <returns>Returns a new Drop advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.InsertQuery(System.String,BindOpen.Extensions.Carriers.DbTable,System.Boolean,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Insert advanced database query.
            </summary>
            <returns>Returns a new Insert advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.InsertQuery(BindOpen.Extensions.Carriers.DbTable,System.Boolean,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Insert advanced database query.
            </summary>
            <returns>Returns a new Insert advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.SelectQuery(System.String,BindOpen.Extensions.Carriers.DbTable,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Select advanced database query.
            </summary>
            <returns>Returns a new Select advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.SelectQuery(BindOpen.Extensions.Carriers.DbTable,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Select advanced database query.
            </summary>
            <returns>Returns a new Select advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.UpdateQuery(System.String,BindOpen.Extensions.Carriers.DbTable,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Update advanced database query.
            </summary>
            <returns>Returns a new Update advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.UpdateQuery(BindOpen.Extensions.Carriers.DbTable,System.Action{BindOpen.Data.Queries.IDbSingleQuery})">
            <summary>
            Creates a new Update advanced database query.
            </summary>
            <returns>Returns a new Update advanced database query</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.CurrentDate">
            <summary>
            Creates a BDO script representing the current date in SQL.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Text(System.String)">
            <summary>
            Creates a BDO script representing a text.
            </summary>
            <param name="param1">The parameter to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Value(System.Object)">
            <summary>
            Creates a BDO script representing a value.
            </summary>
            <param name="param1">The parameter to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Eq(System.Object,System.Object)">
            <summary>
            Evaluates the script word $SQLEQ.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted object value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Diff(System.Object,System.Object)">
            <summary>
            Evaluates the script word $SQLDIFF.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted object value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Gt(System.Object,System.Object)">
            <summary>
            Evaluates the script word $SQLGT.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted object value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Gte(System.Object,System.Object)">
            <summary>
            Evaluates the script word $SQLGTE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted object value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Lt(System.Object,System.Object)">
            <summary>
            Evaluates the script word $SQLLT.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted object value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Lte(System.Object,System.Object)">
            <summary>
            Evaluates the script word $SQLLTE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted object value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.IsNull(System.Object)">
            <summary>
            Evaluates the script word $SQLISNULL.
            </summary>
            <param name="value1"></param>
            <returns>The interpreted object value.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.And(System.Object[])">
            <summary>
            Creates a BDO script representing and Sql And condition including the specified condition strings.
            </summary>
            <param name="conditions">The conditions to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Or(System.Object[])">
            <summary>
            Creates a BDO script representing and Sql Or condition including the specified condition strings.
            </summary>
            <param name="conditions">The conditions to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Xor(System.Object[])">
            <summary>
            Creates a BDO script representing and Sql Xor condition including the specified condition strings.
            </summary>
            <param name="conditions">The conditions to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Not(System.String)">
            <summary>
            Creates a BDO script representing and Sql Not condition including the specified condition strings.
            </summary>
            <param name="condition">The condition to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Like(System.String,System.String)">
            <summary>
            Creates a BDO script representing and Sql Xor condition including the specified condition strings.
            </summary>
            <param name="conditions">The conditions to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Table(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the DbTable class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModuleName">The name of the data module to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Table(BindOpen.Data.Queries.IDbQuery)">
            <summary>
            Creates a new instance of the DbDerivedTable class.
            </summary>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Table(BindOpen.Data.Queries.IDbTuple[])">
            <summary>
            Creates a new instance of the DbTupledTable class.
            </summary>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Table(BindOpen.Data.Queries.DbQueryJoinKind,BindOpen.Extensions.Carriers.DbTable,System.String)">
            <summary>
            Creates a new joined table.
            </summary>
            <param name="kind">The kind to consider.</param>
            <param name="table">The table to consider.</param>
            <param name="conditionScript">The condition script to consider.</param>
            <returns>Returns a new From statement.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbFluent.Table(BindOpen.Extensions.Carriers.DbTable,System.String)">
            <summary>
            Creates a new joined table.
            </summary>
            <param name="table">The table to consider.</param>
            <param name="conditionScript">The condition script to consider.</param>
            <returns>Returns a new From statement.</returns>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbCompositeQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbCompositeQuery.Queries">
            <summary>
            The queries of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbCompositeQuery.WithQueries(BindOpen.Data.Queries.IDbQuery[])">
            <summary>
            Sets the specified queries.
            </summary>
            <param name="queries">The queries to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQuery.DataModule">
            <summary>
            The name of data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQuery.DataTable">
            <summary>
            The table name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQuery.DataTableAlias">
            <summary>
            The data table alias of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQuery.Kind">
            <summary>
            The kind of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQuery.Schema">
            <summary>
            The schema of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQuery.ParameterSpecSet">
            <summary>
            The parameter specification set of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQuery.ParameterSet">
            <summary>
            The parameter set of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQuery.CTETables">
            <summary>
            The select join statement of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbQuery.CheckExistence(System.Boolean)">
            <summary>
            Indicates that this instance checks the existence of table or data according to the kind of queries.
            </summary>
            <param name="isExistenceChecked">Indicates whether this instance checks the existence of table or data.</param>
            <returns>Return this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbQuery.WithParameters(BindOpen.Data.Elements.IDataElement[])">
            <summary>
            Defines the parameters of this instance.
            </summary>
            <param name="parameters">The set of parameters to consider.</param>
            <returns>Return this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbQuery.AddParameter(BindOpen.Data.Elements.ScalarElement)">
            <summary>
            Add the specified parameter to this instance.
            </summary>
            <param name="parameter">The parameter to consider.</param>
            <returns>Return this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbQuery.UsingParameters(BindOpen.Data.Elements.IDataElementSpec[])">
            <summary>
            Defines the parameter specifications of this instance.
            </summary>
            <param name="parameters">The set of parameter specifications to consider.</param>
            <returns>Return this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbQuery.GetName">
            <summary>
            Gets the name of this instance.
            </summary>
            <returns>Returns the name of this instance.</returns>
            <remarks>If the name of this instance is empty or null then the returned name is determined from this instance's properties.</remarks>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,System.Object)">
            <summary>
            Adds the specified parameter to this instance.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="value">The data table to consider.</param>
            <returns>Return this added parameter.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbQuery.UseParameter(System.String,BindOpen.Data.Common.DataValueType,System.Object)">
            <summary>
            Adds the specified parameter to this instance.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="valueType">The data value type to consider.</param>
            <param name="value">The data table to consider.</param>
            <returns>Return this added parameter.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbQuery.WithCTE(BindOpen.Extensions.Carriers.DbTable[])">
            <summary>
            Sets the specified CTE tables.
            </summary>
            <param name="tables">The CTE tables to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbQueryItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbQueryItem.Expression">
            <summary>
            The value to consider.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbSingleQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.IsDistinct">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.Limit">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.Fields">
            <summary>
            The fields of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.ReturnedIdFields">
            <summary>
            The returned IDs of this instance.
            </summary>
            <remarks>This string is split with a comma.</remarks>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.UnionClauses">
            <summary>
            The union clauses of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.FromClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.WhereClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.GroupByClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.HavingClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbSingleQuery.OrderByClause">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.GetFieldWithBoundFieldName(System.String)">
            <summary>
            
            </summary>
            <param name="boundFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.GetIdFieldWithBoundFieldName(System.String)">
            <summary>
            
            </summary>
            <param name="boundFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AsDistinct">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.WithLimit(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.WithFields(BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified fields.
            </summary>
            <param name="fields">The fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.WithReturnedIdFields(BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified returned ID fields.
            </summary>
            <param name="fields">The fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.WithFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})">
            <summary>
            Sets the fields using an initialization function.
            </summary>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AddField(BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="canBeAdded">Indicates whether the field can be added.</param>
            <param name="field">The field to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})">
            <summary>
            Sets the field using an initialization function.
            </summary>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AddField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})">
            <summary>
            Sets the field using an initialization function.
            </summary>
            <param name="canBeAdded">Indicates whether the field can be added.</param>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified ID fields.
            </summary>
            <param name="fields">The ID fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.WithIdFields(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField[]})">
            <summary>
            Sets the ID fields using an initialization function.
            </summary>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AddIdField(BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Adds the specified ID field.
            </summary>
            <param name="field">The ID field to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean,BindOpen.Extensions.Carriers.DbField)">
            <summary>
            Adds the specified ID field.
            </summary>
            <param name="canBeAdded">Indicates whether the field can be added.</param>
            <param name="field">The ID field to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})">
            <summary>
            Adds the ID field using an initialization function.
            </summary>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.AddIdField(System.Boolean,System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Extensions.Carriers.DbField})">
            <summary>
            Adds the ID field using an initialization function.
            </summary>
            <param name="canBeAdded">Indicates whether the field can be added.</param>
            <param name="initializer">The initiliazation function to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Extensions.Carriers.DbTable[])">
            <summary>
            
            </summary>
            <param name="tables">The tables to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.From(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.From(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.Union(BindOpen.Data.Queries.DbQueryUnionKind,BindOpen.Data.Queries.IDbSingleQuery)">
            <summary>
            
            </summary>
            <param name="unionClause">The union clause to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.Where(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.Where(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Queries.IDbQueryOrderByStatement[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.OrderBy(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.OrderBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Extensions.Carriers.DbField[])">
            <summary>
            
            </summary>
            <param name="fields">The tables to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.GroupBy(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.GroupBy(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.Having(BindOpen.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.IDbSingleQuery.Having(System.Func{BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Expression.IDataExpression})">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbStoredQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbStoredQuery.Query">
            <summary>
            The query of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbStoredQuery.QueryTexts">
            <summary>
            The SQL query texts of this instance depending on connector unique.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.StoredProcedureDbQuery">
            <summary>
            This class represents an simple database data query.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.StoredProcedureDbQuery.#ctor">
            <summary>
            Instantiates a new instance of the StoredProcedureDbQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.StoredProcedureDbQuery.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiates a new instance of the StoredProcedureDbQuery class.
            </summary>
            <param name="dataModule">Name of the data module.</param>
            <param name="schema">Schema of the data module.</param>
            <param name="storedProcedureName">Name of stored procedure.</param>
        </member>
        <member name="T:BindOpen.Data.Queries.DbDerivedTable">
            <summary>
            This class represents the Join table of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbDerivedTable.Query">
            <summary>
            The query of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbDerivedTable.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryDerivedTable class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.DbJoinedTable">
            <summary>
            This class represents the Join table of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbJoinedTable.Kind">
            <summary>
            The kind of join of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbJoinedTable.Table">
            <summary>
            The table of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbJoinedTable.Condition">
            <summary>
            The condition of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbJoinedTable.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryJoinedTable class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbJoinedTable.#ctor(BindOpen.Data.Queries.DbQueryJoinKind,BindOpen.Extensions.Carriers.DbTable)">
            <summary>
            Instantiates a new instance of the DbQueryJoinedTable class.
            </summary>
            <param name="kind">The kind to consider.</param>
            <param name="table">The table to consider.</param>
            <returns>Returns a new From statement.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbJoinedTable.WithCondition(BindOpen.Data.Expression.DataExpression)">
            <summary>
            Sets the specified condition.
            </summary>
            <param name="condition">The condition to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Queries.DbJoinedTable.WithCondition(System.String)">
            <summary>
            Sets the specified condition.
            </summary>
            <param name="condition">The condition to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Data.Queries.DbTupledTable">
            <summary>
            This class represents the tupled table.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbTupledTable.Tuples">
            <summary>
            The tuples of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbTupledTable.#ctor(BindOpen.Data.Queries.DbTuple[])">
            <summary>
            Instantiates a new instance of the DbTupledTable class.
            </summary>
            <param name="tuples">The tuples to consider.</param>
        </member>
        <member name="T:BindOpen.Data.Queries.DbTuple">
            <summary>
            This class represents the database tuple.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.DbTuple.Fields">
            <summary>
            The fields of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Queries.DbTuple.#ctor">
            <summary>
            Instantiates a new instance of the DbTuple class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Queries.IDbTuple">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Queries.IDbTuple.Fields">
            <summary>
            The fields of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Stores.BdoDataStoreExtensions">
            <summary>
            This class represents an data queries factory.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore)">
            <summary>
            Add a database queries depot into the specified data store executing the specified action.
            </summary>
            <param name="dataStore">The data store to consider.</param>
            <returns>Returns the data store to update.</returns>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot})">
            <summary>
            Add a database queries depot into the specified data store executing the specified action.
            </summary>
            <param name="dataStore">The data store to consider.</param>
            <param name="action">The action to execute on the created depot.</param>
            <returns>Returns the data store to update.</returns>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDataStoreExtensions.RegisterDbModels(BindOpen.Data.Stores.IBdoDataStore,System.Action{BindOpen.Data.Stores.IBdoDbModelDepot,BindOpen.System.Diagnostics.IBdoLog})">
            <summary>
            Add a database queries depot into the specified data store executing the specified action.
            </summary>
            <param name="dataStore">The data store to consider.</param>
            <param name="action">The action to execute on the created depot.</param>
            <returns>Returns the data store to update.</returns>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Data.Stores.IBdoDataStore)">
            <summary>
            Gets the database queries depot of the specified data store.
            </summary>
            <param name="dataStore">The data store to consider.</param>
            <returns>Returns the database model depot of the specified data store.</returns>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDataStoreExtensions.GetDbModelDepot(BindOpen.Application.Scopes.IBdoScope)">
            <summary>
            Gets the database model depot of the specified scope.
            </summary>
            <param name="scope">The data store to consider.</param>
            <returns>Returns the database model depot of the specified scope.</returns>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDataStoreExtensions.GetModel``1(BindOpen.Application.Scopes.IBdoScope)">
            <summary>
            Gets the database model with the specified name.
            </summary>
            <param name="scope">The data store to consider.</param>
            <returns>Returns the database query with the specified name.</returns>
        </member>
        <member name="T:BindOpen.Data.Stores.BdoDbModelDepot">
            <summary>
            This class represents a database model depot.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Stores.BdoDbModelDepot.Models">
            <summary>
            Queries of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDbModelDepot.#ctor">
            <summary>
            Instantiates a new instance of the BdoDbModelDepot class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDbModelDepot.#ctor(BindOpen.Data.Models.BdoDbModel[])">
            <summary>
            Instantiates a new instance of the BdoDbModelDepot class.
            </summary>
            <param name="queries">The queries to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDbModelDepot.Add(BindOpen.Data.Models.BdoDbModel,BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Models.BdoDbModel})">
            <summary>
            Adds a new item.
            </summary>
            <param name="item">The new item to add.</param>
            <param name="referenceCollection">The reference collection to consider.</param>
            <returns>Returns the new item that has been added.
            Returns null if the new item is null or else its name is null.</returns>
            <remarks>The new item must have a name.</remarks>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDbModelDepot.AddFromAssembly(System.String,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Add the items from the specified assembly.
            </summary>
            <param name="assemblyName">The name of the assembly.</param>
            <param name="log">The log to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDbModelDepot.GetModel``1">
            <summary>
            Gets the database model of the specified type and with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Stores.BdoDbModelDepot.GetModel(System.String)">
            <summary>
            Gets the database model with the specified name.
            </summary>
            <param name="name">The name to consider.</param>
            <returns>Returns the database model with the specified name.</returns>
        </member>
        <member name="T:BindOpen.Data.Stores.IBdoDbModelDepot">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Stores.IBdoDbModelDepot.Models">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDbModelDepot.GetModel(System.String)">
            <summary>
            Gets the database model with the specified name.
            </summary>
            <param name="name">The name to consider.</param>
            <returns>Returns the database query with the specified name.</returns>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDbModelDepot.GetModel``1">
            <summary>
            Gets the database model with the specified name.
            </summary>
            <returns>Returns the database query with the specified name.</returns>
        </member>
        <member name="T:BindOpen.Extensions.Carriers.BdoDbFieldAttribute">
            <summary>
            This class represents a field attribute.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.BdoDbFieldAttribute.Name">
            <summary>
            The name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.BdoDbFieldAttribute.ValueType">
            <summary>
            The value type of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.BdoDbFieldAttribute.ConstraintStatement">
            <summary>
            The constraint statement of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.BdoDbFieldAttribute.#ctor(BindOpen.Data.Common.DataValueType,BindOpen.Data.Specification.DataConstraintStatement)">
            <summary>
            Instantiates a new instance of the DbFieldAttribute class.
            </summary>
            <param name="valueType">The value type to consider.</param>
            <param name="constraintStatement">The constraint statement to consider.</param>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.BdoDbFieldAttribute.#ctor(System.String,BindOpen.Data.Common.DataValueType,BindOpen.Data.Specification.DataConstraintStatement)">
            <summary>
            Instantiates a new instance of the DbFieldAttribute class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="valueType">The value type to consider.</param>
            <param name="constraintStatement">The constraint statement to consider.</param>
        </member>
        <member name="T:BindOpen.Extensions.Carriers.BdoDbTableAttribute">
            <summary>
            This class represents a field attribute.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.BdoDbTableAttribute.Name">
            <summary>
            The name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.BdoDbTableAttribute.Schema">
            <summary>
            The schema of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.BdoDbTableAttribute.DataModule">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.BdoDbTableAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiates a new instance of the DbTableAttribute class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModuleName">The name of the data module to consider.</param>
        </member>
        <member name="T:BindOpen.Extensions.Carriers.BdoDbCarrierKind">
            <summary>
            This enumeration lists all the possible kinds of database carriers.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Carriers.BdoDbCarrierKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Carriers.BdoDbCarrierKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Carriers.BdoDbCarrierKind.DbField">
            <summary>
            Database field.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Carriers.BdoDbCarrierKind.DbTable">
            <summary>
            Database table.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Carriers.DatabaseCarrierKindExtension">
            <summary>
            This class represents an extension of the DatabaseCarrierKind enumeration.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DatabaseCarrierKindExtension.GetUniqueName(BindOpen.Extensions.Carriers.BdoDbCarrierKind)">
            <summary>
            Gets the unique name corresponding to the specified carrier kind.
            </summary>
            <param name="aDatabaseCarrierKind">The carrier kind to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="T:BindOpen.Extensions.Carriers.DbField">
            <summary>
            This class represents a database data field.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.IsAll">
            <summary>
            Indicates wheteher this instance represents all the fields.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.DataModule">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.Schema">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.DataTable">
            <summary>
            Data table of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.DataTableAlias">
            <summary>
            Alias of the data table of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.Alias">
            <summary>
            Alias of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.Size">
            <summary>
            Size of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.Query">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.IsKey">
            <summary>
            Indicates wheteher this instance is a key.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.IsForeignKey">
            <summary>
            Indicates wheteher this instance is a foreign key.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.IsNameAsScript">
            <summary>
            Indicates wheteher the name of this instance can be defined by a script.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbField.ValueType">
            <summary>
            Type of value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.#ctor">
            <summary>
            Instantiates a new instance of the DbField class.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.GetName">
            <summary>
            Get the name of this instance that is the alias if there is or the name otherwise.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.SetValue(BindOpen.Data.Expression.DataExpression)">
            <summary>
            Sets the expression value of this instance.
            </summary>
            <param name="expression">Data expression value of the instance.</param>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.SetLiteralValue(System.String)">
            <summary>
            Sets the literal value of this instance.
            </summary>
            <param name="text">The literal value.</param>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.SetScriptValue(System.String)">
            <summary>
            Sets the script value of this instance.
            </summary>
            <param name="text">The script value.</param>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.WithDataModule(System.String)">
            <summary>
            Sets the specified data module.
            </summary>
            <param name="dataModule">The data module to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.WithDataTable(System.String)">
            <summary>
            Sets the specified data table.
            </summary>
            <param name="dataTable">The data table to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.WithSchema(System.String)">
            <summary>
            Sets the specified schema.
            </summary>
            <param name="schema">The schema to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.WithAlias(System.String)">
            <summary>
            Sets the specified alias.
            </summary>
            <param name="alias">The alias to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.WithSize(System.Int32)">
            <summary>
            Sets the specified size.
            </summary>
            <param name="size">The size to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.AsAll">
            <summary>
            Indicates that this instance represents all fields.
            </summary>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.AsKey">
            <summary>
            Indicates that this instance represents a key.
            </summary>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.WithNameAsScript">
            <summary>
            Indicates that the name of this instance is as script.
            </summary>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.WithValueType(BindOpen.Data.Common.DataValueType)">
            <summary>
            Specifies the value type of this instance.
            </summary>
            <param name="valueType">The value type to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbField.op_Implicit(BindOpen.Extensions.Carriers.DbField)~System.String">
            <summary>
            Returns the data expression string corresponding to this instance.
            </summary>
            <param name="field">The field to consider.</param>
        </member>
        <member name="T:BindOpen.Extensions.Carriers.DbTable">
            <summary>
            This class represents a database data table.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbTable.DataModule">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbTable.Schema">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbTable.Alias">
            <summary>
            Alias of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Carriers.DbTable.Expression">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbTable.#ctor">
            <summary>
            Instantiates a new instance of the DbDataTable class.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbTable.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbTable.WithDataModule(System.String)">
            <summary>
            Sets the specified data module.
            </summary>
            <param name="dataModule">The data module to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbTable.WithSchema(System.String)">
            <summary>
            Sets the specified schema.
            </summary>
            <param name="schema">The schema to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbTable.WithAlias(System.String)">
            <summary>
            Sets the specified alias.
            </summary>
            <param name="alias">The alias to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Carriers.DbTable.op_Implicit(BindOpen.Extensions.Carriers.DbTable)~System.String">
            <summary>
            Returns the data expression string corresponding to this instance.
            </summary>
            <param name="table">The table to consider.</param>
        </member>
        <member name="T:BindOpen.Extensions.Connectors.BdoDbConnector">
            <summary>
            This class defines a database connector.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Connectors.BdoDbConnector._queryBuilder">
            <summary>
            The query builder of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.BdoDbConnector.QueryBuilder">
            <summary>
            The provider of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.BdoDbConnector.Provider">
            <summary>
            The provider of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.BdoDbConnector.ServerAddress">
            <summary>
            The server address of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.BdoDbConnector.InitialCatalog">
            <summary>
            The initial catalog of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.BdoDbConnector.IntegratedSecurity">
            <summary>
            The integrated security of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.BdoDbConnector.UserName">
            <summary>
            The user name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.BdoDbConnector.Password">
            <summary>
            The password of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.BdoDbConnector.DatabaseConnectorKind">
            <summary>
            The database kind of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.BdoDbConnector.#ctor">
            <summary>
            Instantiates a new instance of the DatabaseConnector class.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.BdoDbConnector.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new instance of the DatabaseConnector class.
            </summary>
            <param name="name">The name of this instance.</param>
            <param name="connectionString">The connection string to consider.</param>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.BdoDbConnector.WithConnectionString(System.String)">
            <summary>
            Updates the connection string with the specified string.
            </summary>
            <param name="connectionString">The connection string to consider.</param>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.BdoDbConnector.WithScope(BindOpen.Application.Scopes.IBdoScope)">
            <summary>
            Updates the instance considering the specified scope.
            </summary>
            <param name="scope">The scope to consider.</param>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.BdoDbConnector.CreateCommandText(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the SQL text of the specified query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="parameterMode">Indicates whether parameters are replaced.</param>
            <param name="parameterSet">The parameter set to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the SQL text of the specified query.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.BdoDbConnector.CreateCommand(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Creates a command from the specified query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="parameterMode">Indicates whether parameters are replaced.</param>
            <param name="parameterSet">The parameter elements to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the database command.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.BdoDbConnector.EstimateDbConnectorKind(System.String)">
            <summary>
            Estimates the database connector kind from the specified connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The database provider  of the specified connection string.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.BdoDbConnector.EstimateDbConnectorKind">
            <summary>
            Estimates the database connector kind of this instance.
            </summary>
            <returns>The database connector kind of this instance.</returns>
        </member>
        <member name="T:BindOpen.Extensions.Connectors.BdoDbConnectorKind">
            <summary>
            This enumeration lists all the possible kinds of database connectors.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Connectors.BdoDbConnectorKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Connectors.BdoDbConnectorKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Connectors.BdoDbConnectorKind.MSSqlServer">
            <summary>
            Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Connectors.BdoDbConnectorKind.Oracle">
            <summary>
            Oracle.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Connectors.BdoDbConnectorKind.MySQL">
            <summary>
            MySQL.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Connectors.BdoDbConnectorKind.PostgreSql">
            <summary>
            Postgre SQL.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Connectors.ConnectorKind_databaseExtension">
            <summary>
            This class represents an extension of the ConnectorKind_database enumeration.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.ConnectorKind_databaseExtension.GetUniqueName(BindOpen.Extensions.Connectors.BdoDbConnectorKind)">
            <summary>
            Gets the unique name corresponding to the specified connector kind.
            </summary>
            <param name="connectorKind_database">The connector kind to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="T:BindOpen.Extensions.Connectors.IBdoDbConnector">
            <summary>
            This class defines a database connector.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.IBdoDbConnector.Provider">
            <summary>
            The provider of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.IBdoDbConnector.ServerAddress">
            <summary>
            The server address of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.IBdoDbConnector.InitialCatalog">
            <summary>
            The initial catalog of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.IBdoDbConnector.IntegratedSecurity">
            <summary>
            The integrated security of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.IBdoDbConnector.UserName">
            <summary>
            The user name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.IBdoDbConnector.Password">
            <summary>
            The password of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connectors.IBdoDbConnector.DatabaseConnectorKind">
            <summary>
            The database kind of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.IBdoDbConnector.CreateCommandText(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the SQL text of the specified query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="parameterMode">Indicates whether parameters are replaced.</param>
            <param name="parameterSet">The parameter set to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the SQL text of the specified query.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Connectors.IBdoDbConnector.EstimateDbConnectorKind">
            <summary>
            Estimates the kind of the database connector of this instance.
            </summary>
            <returns>The database connector kind of this instance.</returns>
        </member>
        <member name="T:BindOpen.Extensions.Scriptwords.ScriptHelper_Database">
            <summary>
            This class represents a script helper concerning database.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptHelper_Database.GetSqlNumberFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that filters number values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptHelper_Database.GetSqlNumberAndFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that AND filters number values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptHelper_Database.GetSqlNumberOrFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that AND filters number values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptHelper_Database.GetSqlTextFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that filters text values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptHelper_Database.GetSqlTextAndFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that AND filters text values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptHelper_Database.GetSqlTextOrFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that AND filters text values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="T:BindOpen.Extensions.Scriptwords.ScriptVariableKey_Database">
            <summary>
            This class represents the database script variable key.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scriptwords.ScriptVariableKey_Database.DbBuilder">
            <summary>
            database builder
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database">
            <summary>
            This class represents a 'Database' script word definition.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLCOUNT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLSUM.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLAVG.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLGETCURRENTDATE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLTRUE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLIF.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLNOT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">The set of variables that can be used for interpretation.</param>
            <param name="scriptWord">The script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLOR.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLAND.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLXOR.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLEQ.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLDIFF.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLGT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLGTE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLLT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLLTE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLISNULL.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLCONVERTTOTEXT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLTEXT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLLIKE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLREPLACE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLCONCATENATE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLNULL.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word %SQLDATABASE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word [%DATABASE->]%SCHEMA.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word [%DATABASE->]%TABLE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word [[%DATABASE->]%TABLE->]%FIELD.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLNEWGUID.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLRANDOM.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLIN.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLLIST.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="T:BindOpen.Databases.Extensions.Extension_database">
            <summary>
            This class represents the database extension.
            </summary>
        </member>
        <member name="M:BindOpen.Databases.Extensions.Extension_database.GetUniqueName_database(System.String)">
            <summary>
            Gets the database unique name.
            </summary>
            <param name="uniqueName">The unique name to consider.</param>
            <returns>The result object.</returns>
        </member>
    </members>
</doc>
