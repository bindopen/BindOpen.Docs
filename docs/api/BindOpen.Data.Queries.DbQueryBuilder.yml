### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.DbQueryBuilder
  commentId: T:BindOpen.Data.Queries.DbQueryBuilder
  id: DbQueryBuilder
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.DbQueryBuilder.#ctor(BindOpen.Application.Scopes.IBdoScope)
  - BindOpen.Data.Queries.DbQueryBuilder._scope
  - BindOpen.Data.Queries.DbQueryBuilder.BuildQuery(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Queries.DbQueryBuilder.Dispose(System.Boolean)
  - BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbField)
  - BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbTable)
  - BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName(System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText(System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database(System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If(System.String,System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull(System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not(System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbCompositeQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace(System.String,System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table(System.String,System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text(System.String)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value(System.String,BindOpen.Data.Common.DataValueType)
  - BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor(System.Object[])
  - BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet(BindOpen.Data.Elements.IDataElementSet,BindOpen.Data.Queries.IDbQuery)
  langs:
  - csharp
  - vb
  name: DbQueryBuilder
  nameWithType: DbQueryBuilder
  fullName: BindOpen.Data.Queries.DbQueryBuilder
  type: Class
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_System.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: DbQueryBuilder
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_System.cs
    startLine: 5
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThis class represents a builder of database query.\n"
  example: []
  syntax:
    content: 'public abstract class DbQueryBuilder : IdentifiedDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced'
    content.vb: >-
      Public MustInherit Class DbQueryBuilder
          Inherits IdentifiedDataItem
          Implements IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - BindOpen.Data.Items.DataItem
  - BindOpen.Data.Items.IdentifiedDataItem
  implements:
  - BindOpen.Data.Items.IIdentifiedDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  - BindOpen.Data.Items.IIdentified
  - BindOpen.Data.Items.IReferenced
  inheritedMembers:
  - BindOpen.Data.Items.IdentifiedDataItem.Key
  - BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  - BindOpen.Data.Items.IdentifiedDataItem.Clone
  - BindOpen.Data.Items.IdentifiedDataItem.Id
  - BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  - BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - BindOpen.Data.Items.DataItem.Clone``1
  - BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Dispose
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: BindOpen.Data.Queries.DbQueryBuilder._scope
  commentId: F:BindOpen.Data.Queries.DbQueryBuilder._scope
  id: _scope
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: _scope
  nameWithType: DbQueryBuilder._scope
  fullName: BindOpen.Data.Queries.DbQueryBuilder._scope
  type: Field
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: _scope
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 27
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThe application scope of this instance.\n"
  example: []
  syntax:
    content: protected readonly IBdoScope _scope
    return:
      type: BindOpen.Application.Scopes.IBdoScope
    content.vb: Protected ReadOnly _scope As IBdoScope
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: BindOpen.Data.Queries.DbQueryBuilder.#ctor(BindOpen.Application.Scopes.IBdoScope)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.#ctor(BindOpen.Application.Scopes.IBdoScope)
  id: '#ctor(BindOpen.Application.Scopes.IBdoScope)'
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: DbQueryBuilder(IBdoScope)
  nameWithType: DbQueryBuilder.DbQueryBuilder(IBdoScope)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.DbQueryBuilder(BindOpen.Application.Scopes.IBdoScope)
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: .ctor
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 41
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nInstantiates a new instance of the DbQueryBuilder class.\n"
  example: []
  syntax:
    content: public DbQueryBuilder(IBdoScope scope = null)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    content.vb: Public Sub New(scope As IBdoScope = Nothing)
  overload: BindOpen.Data.Queries.DbQueryBuilder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName(System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName(System.String)
  id: GetDatabaseName(System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetDatabaseName(String)
  nameWithType: DbQueryBuilder.GetDatabaseName(String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetDatabaseName
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 59
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nGets the database name corresponding to the specified data module name.\n"
  remarks: If not found, it returns the specified data module name.
  example: []
  syntax:
    content: protected string GetDatabaseName(string dataModuleName)
    parameters:
    - id: dataModuleName
      type: System.String
      description: The data module name to consider.
    return:
      type: System.String
    content.vb: Protected Function GetDatabaseName(dataModuleName As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet(BindOpen.Data.Elements.IDataElementSet,BindOpen.Data.Queries.IDbQuery)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet(BindOpen.Data.Elements.IDataElementSet,BindOpen.Data.Queries.IDbQuery)
  id: UpdateParameterSet(BindOpen.Data.Elements.IDataElementSet,BindOpen.Data.Queries.IDbQuery)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: UpdateParameterSet(IDataElementSet, IDbQuery)
  nameWithType: DbQueryBuilder.UpdateParameterSet(IDataElementSet, IDbQuery)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet(BindOpen.Data.Elements.IDataElementSet, BindOpen.Data.Queries.IDbQuery)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: UpdateParameterSet
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 80
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nUpdates the specified parameter set with the specified query.\n"
  example: []
  syntax:
    content: protected void UpdateParameterSet(IDataElementSet parameterSet, IDbQuery query)
    parameters:
    - id: parameterSet
      type: BindOpen.Data.Elements.IDataElementSet
      description: The parameter set to consider.
    - id: query
      type: BindOpen.Data.Queries.IDbQuery
      description: The query to consider.
    content.vb: Protected Sub UpdateParameterSet(parameterSet As IDataElementSet, query As IDbQuery)
  overload: BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: BindOpen.Data.Queries.DbQueryBuilder.BuildQuery(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.BuildQuery(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: BuildQuery(BindOpen.Data.Queries.IDbQuery,BindOpen.Data.Queries.DbQueryParameterMode,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: BuildQuery(IDbQuery, DbQueryParameterMode, IDataElementSet, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DbQueryBuilder.BuildQuery(IDbQuery, DbQueryParameterMode, IDataElementSet, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.BuildQuery(BindOpen.Data.Queries.IDbQuery, BindOpen.Data.Queries.DbQueryParameterMode, BindOpen.Data.Elements.IDataElementSet, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: BuildQuery
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 95
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nBuilds the SQL text from the specified database query.\n"
  example: []
  syntax:
    content: public string BuildQuery(IDbQuery query, DbQueryParameterMode parameterMode = DbQueryParameterMode.ValueInjected, IDataElementSet parameterSet = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: query
      type: BindOpen.Data.Queries.IDbQuery
      description: The database data query to build.
    - id: parameterMode
      type: BindOpen.Data.Queries.DbQueryParameterMode
      description: The display mode of parameters to consider.
    - id: parameterSet
      type: BindOpen.Data.Elements.IDataElementSet
      description: The parameter set to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The interpretation variables to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.String
      description: Returns the built query text.
    content.vb: Public Function BuildQuery(query As IDbQuery, parameterMode As DbQueryParameterMode = DbQueryParameterMode.ValueInjected, parameterSet As IDataElementSet = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.BuildQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: GetSqlText_Query(BindOpen.Data.Queries.IDbSingleQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Query(IDbSingleQuery, IDataElementSet, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DbQueryBuilder.GetSqlText_Query(IDbSingleQuery, IDataElementSet, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbSingleQuery, BindOpen.Data.Elements.IDataElementSet, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Query
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 176
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nBuilds the SQL text of the specified basic query.\n"
  example: []
  syntax:
    content: protected virtual string GetSqlText_Query(IDbSingleQuery query, IDataElementSet parameterSet = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: query
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: The query to consider.
    - id: parameterSet
      type: BindOpen.Data.Elements.IDataElementSet
      description: The parameter set to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.String
      description: Returns the built query text.
    content.vb: Protected Overridable Function GetSqlText_Query(query As IDbSingleQuery, parameterSet As IDataElementSet = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbCompositeQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbCompositeQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: GetSqlText_Query(BindOpen.Data.Queries.IDbCompositeQuery,BindOpen.Data.Elements.IDataElementSet,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Query(IDbCompositeQuery, IDataElementSet, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DbQueryBuilder.GetSqlText_Query(IDbCompositeQuery, IDataElementSet, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query(BindOpen.Data.Queries.IDbCompositeQuery, BindOpen.Data.Elements.IDataElementSet, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Query
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 195
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nBuilds the SQL text of the specified merge query.\n"
  example: []
  syntax:
    content: protected virtual string GetSqlText_Query(IDbCompositeQuery query, IDataElementSet parameterSet = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: query
      type: BindOpen.Data.Queries.IDbCompositeQuery
      description: The query to consider.
    - id: parameterSet
      type: BindOpen.Data.Elements.IDataElementSet
      description: The parameter set to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    return:
      type: System.String
      description: Returns the built query text.
    content.vb: Protected Overridable Function GetSqlText_Query(query As IDbCompositeQuery, parameterSet As IDataElementSet = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value(System.String,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value(System.String,BindOpen.Data.Common.DataValueType)
  id: GetSqlText_Value(System.String,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Value(String, DataValueType)
  nameWithType: DbQueryBuilder.GetSqlText_Value(String, DataValueType)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value(System.String, BindOpen.Data.Common.DataValueType)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Value
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 212
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nGets the Sql string corresponding to the specified value.\n"
  example: []
  syntax:
    content: protected virtual string GetSqlText_Value(string value, DataValueType valueType = DataValueType.Text)
    parameters:
    - id: value
      type: System.String
      description: The value to consider.
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    return:
      type: System.String
      description: Returns the Sql string.
    content.vb: Protected Overridable Function GetSqlText_Value(value As String, valueType As DataValueType = DataValueType.Text) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: DbQueryBuilder.Dispose(Boolean)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Dispose
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder.cs
    startLine: 238
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nDisposes specifying whether this instance is disposing.\n"
  example: []
  syntax:
    content: protected override void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
      description: Indicates whether this instance is disposing
    content.vb: Protected Overrides Sub Dispose(isDisposing As Boolean)
  overridden: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  overload: BindOpen.Data.Queries.DbQueryBuilder.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count(System.Object[])
  id: GetSqlText_Count(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Count(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_Count(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Count
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
    startLine: 16
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLCOUNT.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Count(object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Overridable Function GetSqlText_Count(parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count*
  nameWithType.vb: DbQueryBuilder.GetSqlText_Count(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count(System.Object())
  name.vb: GetSqlText_Count(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount(System.Object[])
  id: GetSqlText_TextCount(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_TextCount(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_TextCount(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_TextCount
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
    startLine: 26
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLCOUNT.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_TextCount(params object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_TextCount(ParamArray parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount*
  nameWithType.vb: DbQueryBuilder.GetSqlText_TextCount(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount(System.Object())
  name.vb: GetSqlText_TextCount(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum(System.Object[])
  id: GetSqlText_Sum(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Sum(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_Sum(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Sum
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
    startLine: 36
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLSUM.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Sum(params object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Sum(ParamArray parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum*
  nameWithType.vb: DbQueryBuilder.GetSqlText_Sum(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum(System.Object())
  name.vb: GetSqlText_Sum(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average(System.Object[])
  id: GetSqlText_Average(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Average(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_Average(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Average
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
    startLine: 46
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLAVG.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Average(params object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Average(ParamArray parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average*
  nameWithType.vb: DbQueryBuilder.GetSqlText_Average(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average(System.Object())
  name.vb: GetSqlText_Average(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In(System.Object[])
  id: GetSqlText_In(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_In(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_In(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_In
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Aggregate.cs
    startLine: 56
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLIN.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_In(params object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_In(ParamArray parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In*
  nameWithType.vb: DbQueryBuilder.GetSqlText_In(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In(System.Object())
  name.vb: GetSqlText_In(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq(System.String,System.String)
  id: GetSqlText_Eq(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Eq(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Eq(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Eq
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
    startLine: 15
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLEQ.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Eq(string value1, string value2)
    parameters:
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Eq(value1 As String, value2 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff(System.String,System.String)
  id: GetSqlText_Diff(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Diff(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Diff(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Diff
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
    startLine: 26
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLDIFF.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Diff(string value1, string value2)
    parameters:
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Diff(value1 As String, value2 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt(System.String,System.String)
  id: GetSqlText_Gt(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Gt(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Gt(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Gt
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
    startLine: 37
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLGT.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Gt(string value1, string value2)
    parameters:
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Gt(value1 As String, value2 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte(System.String,System.String)
  id: GetSqlText_Gte(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Gte(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Gte(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Gte
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
    startLine: 48
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLGTE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Gte(string value1, string value2)
    parameters:
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Gte(value1 As String, value2 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt(System.String,System.String)
  id: GetSqlText_Lt(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Lt(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Lt(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Lt
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
    startLine: 59
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLLT.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Lt(string value1, string value2)
    parameters:
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Lt(value1 As String, value2 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte(System.String,System.String)
  id: GetSqlText_Lte(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Lte(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Lte(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Lte
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
    startLine: 70
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLLTE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Lte(string value1, string value2)
    parameters:
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Lte(value1 As String, value2 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull(System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull(System.String)
  id: GetSqlText_IsNull(System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_IsNull(String)
  nameWithType: DbQueryBuilder.GetSqlText_IsNull(String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_IsNull
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Comparison.cs
    startLine: 80
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLISNULL.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_IsNull(string value1)
    parameters:
    - id: value1
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_IsNull(value1 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText(System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText(System.String)
  id: GetSqlText_ConvertToText(System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_ConvertToText(String)
  nameWithType: DbQueryBuilder.GetSqlText_ConvertToText(String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Conversion.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_ConvertToText
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Conversion.cs
    startLine: 16
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLCONVERTTOTEXT.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_ConvertToText(string value1)
    parameters:
    - id: value1
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_ConvertToText(value1 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate(System.Object[])
  id: GetSqlText_CurrentDate(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_CurrentDate(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_CurrentDate(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_DateAndTime.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_CurrentDate
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_DateAndTime.cs
    startLine: 16
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLGETCURRENTDATE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_CurrentDate(object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_CurrentDate(parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate*
  nameWithType.vb: DbQueryBuilder.GetSqlText_CurrentDate(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate(System.Object())
  name.vb: GetSqlText_CurrentDate(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If(System.String,System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If(System.String,System.String,System.String)
  id: GetSqlText_If(System.String,System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_If(String, String, String)
  nameWithType: DbQueryBuilder.GetSqlText_If(String, String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_If
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
    startLine: 18
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLIF.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_If(string condition, string value1, string value2)
    parameters:
    - id: condition
      type: System.String
      description: ''
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_If(condition As String, value1 As String, value2 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not(System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not(System.String)
  id: GetSqlText_Not(System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Not(String)
  nameWithType: DbQueryBuilder.GetSqlText_Not(String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Not
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
    startLine: 28
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLNOT.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Not(string value1)
    parameters:
    - id: value1
      type: System.String
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Not(value1 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or(System.Object[])
  id: GetSqlText_Or(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Or(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_Or(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Or
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
    startLine: 38
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLOR.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Or(object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Or(parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or*
  nameWithType.vb: DbQueryBuilder.GetSqlText_Or(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or(System.Object())
  name.vb: GetSqlText_Or(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And(System.Object[])
  id: GetSqlText_And(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_And(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_And(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_And
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
    startLine: 48
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLAND.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_And(object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_And(parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And*
  nameWithType.vb: DbQueryBuilder.GetSqlText_And(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And(System.Object())
  name.vb: GetSqlText_And(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor(System.Object[])
  id: GetSqlText_Xor(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Xor(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_Xor(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Xor
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Logical.cs
    startLine: 58
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLXOR.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Xor(object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Xor(parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor*
  nameWithType.vb: DbQueryBuilder.GetSqlText_Xor(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor(System.Object())
  name.vb: GetSqlText_Xor(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbField)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbField)
  id: GetBdoScript(BindOpen.Extensions.Carriers.DbField)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetBdoScript(DbField)
  nameWithType: DbQueryBuilder.GetBdoScript(DbField)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbField)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Static_Script.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetBdoScript
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Static_Script.cs
    startLine: 15
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nGets the BindOpen script corresponding to the specified field.\n"
  example: []
  syntax:
    content: public static string GetBdoScript(DbField field)
    parameters:
    - id: field
      type: BindOpen.Extensions.Carriers.DbField
      description: The field to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Shared Function GetBdoScript(field As DbField) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbTable)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbTable)
  id: GetBdoScript(BindOpen.Extensions.Carriers.DbTable)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetBdoScript(DbTable)
  nameWithType: DbQueryBuilder.GetBdoScript(DbTable)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript(BindOpen.Extensions.Carriers.DbTable)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Static_Script.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetBdoScript
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Static_Script.cs
    startLine: 51
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nGets the BindOpen script corresponding to the specified table.\n"
  example: []
  syntax:
    content: public static string GetBdoScript(DbTable table)
    parameters:
    - id: table
      type: BindOpen.Extensions.Carriers.DbTable
      description: The table to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Shared Function GetBdoScript(table As DbTable) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text(System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text(System.String)
  id: GetSqlText_Text(System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Text(String)
  nameWithType: DbQueryBuilder.GetSqlText_Text(String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_String.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Text
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_String.cs
    startLine: 14
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLTEXT.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Text(string value1)
    parameters:
    - id: value1
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Text(value1 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like(System.String,System.String)
  id: GetSqlText_Like(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Like(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Like(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_String.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Like
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_String.cs
    startLine: 25
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLLIKE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Like(string value1, string value2)
    parameters:
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Like(value1 As String, value2 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace(System.String,System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace(System.String,System.String,System.String)
  id: GetSqlText_Replace(System.String,System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Replace(String, String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Replace(String, String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_String.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Replace
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_String.cs
    startLine: 37
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLREPLACE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Replace(string value1, string value2, string value3)
    parameters:
    - id: value1
      type: System.String
      description: ''
    - id: value2
      type: System.String
      description: ''
    - id: value3
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Replace(value1 As String, value2 As String, value3 As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate(System.Object[])
  id: GetSqlText_Concatenate(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Concatenate(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_Concatenate(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_String.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Concatenate
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_String.cs
    startLine: 47
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLCONCATENATE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Concatenate(object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Concatenate(parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate*
  nameWithType.vb: DbQueryBuilder.GetSqlText_Concatenate(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate(System.Object())
  name.vb: GetSqlText_Concatenate(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null
  id: GetSqlText_Null
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Null()
  nameWithType: DbQueryBuilder.GetSqlText_Null()
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null()
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Null
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
    startLine: 13
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLNULL.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Null()
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Null As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True
  id: GetSqlText_True
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_True()
  nameWithType: DbQueryBuilder.GetSqlText_True()
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True()
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_True
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
    startLine: 22
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLTRUE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_True()
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_True As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database(System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database(System.String)
  id: GetSqlText_Database(System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Database(String)
  nameWithType: DbQueryBuilder.GetSqlText_Database(String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Database
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
    startLine: 32
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word %SQLDATABASE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Database(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Database(name As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema(System.String,System.String)
  id: GetSqlText_Schema(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Schema(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Schema(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Schema
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
    startLine: 43
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word %SQLSCHEMA.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Schema(string name, string location = null)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: location
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Schema(name As String, location As String = Nothing) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table(System.String,System.String)
  id: GetSqlText_Table(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Table(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Table(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Table
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
    startLine: 56
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word [%DATABASE->]%TABLE.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Table(string name, string location = null)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: location
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Table(name As String, location As String = Nothing) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field(System.String,System.String)
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field(System.String,System.String)
  id: GetSqlText_Field(System.String,System.String)
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Field(String, String)
  nameWithType: DbQueryBuilder.GetSqlText_Field(String, String)
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Field
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
    startLine: 69
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word [[%DATABASE->]%TABLE->]%FIELD.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Field(string name, string location)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: location
      type: System.String
      description: ''
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Field(name As String, location As String) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List(System.Object[])
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List(System.Object[])
  id: GetSqlText_List(System.Object[])
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_List(Object[])
  nameWithType: DbQueryBuilder.GetSqlText_List(Object[])
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List(System.Object[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_List
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_Syntax.cs
    startLine: 79
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLLIST.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_List(params object[] parameters)
    parameters:
    - id: parameters
      type: System.Object[]
      description: The parameters to consider.
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_List(ParamArray parameters As Object()) As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List*
  nameWithType.vb: DbQueryBuilder.GetSqlText_List(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List(System.Object())
  name.vb: GetSqlText_List(Object())
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid
  id: GetSqlText_NewGuid
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_NewGuid()
  nameWithType: DbQueryBuilder.GetSqlText_NewGuid()
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid()
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_System.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_NewGuid
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_System.cs
    startLine: 13
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLNEWGUID.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_NewGuid()
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_NewGuid As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random
  commentId: M:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random
  id: GetSqlText_Random
  parent: BindOpen.Data.Queries.DbQueryBuilder
  langs:
  - csharp
  - vb
  name: GetSqlText_Random()
  nameWithType: DbQueryBuilder.GetSqlText_Random()
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random()
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_System.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: GetSqlText_Random
    path: ../src/BindOpen.Databases/Data/Queries/Builders/DbQueryBuilder_System.cs
    startLine: 22
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nEvaluates the script word $SQLRANDOM.\n"
  example: []
  syntax:
    content: public virtual string GetSqlText_Random()
    return:
      type: System.String
      description: The interpreted string value.
    content.vb: Public Overridable Function GetSqlText_Random As String
  overload: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: BindOpen.Data.Items.DataItem
  commentId: T:BindOpen.Data.Items.DataItem
  parent: BindOpen.Data.Items
  isExternal: true
  name: DataItem
  nameWithType: DataItem
  fullName: BindOpen.Data.Items.DataItem
- uid: BindOpen.Data.Items.IdentifiedDataItem
  commentId: T:BindOpen.Data.Items.IdentifiedDataItem
  parent: BindOpen.Data.Items
  isExternal: true
  name: IdentifiedDataItem
  nameWithType: IdentifiedDataItem
  fullName: BindOpen.Data.Items.IdentifiedDataItem
- uid: BindOpen.Data.Items.IIdentifiedDataItem
  commentId: T:BindOpen.Data.Items.IIdentifiedDataItem
  parent: BindOpen.Data.Items
  isExternal: true
  name: IIdentifiedDataItem
  nameWithType: IIdentifiedDataItem
  fullName: BindOpen.Data.Items.IIdentifiedDataItem
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  isExternal: true
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  commentId: T:BindOpen.Data.Items.IIdentified
  parent: BindOpen.Data.Items
  isExternal: true
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  commentId: T:BindOpen.Data.Items.IReferenced
  parent: BindOpen.Data.Items
  isExternal: true
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Items.IdentifiedDataItem.Key
  commentId: M:BindOpen.Data.Items.IdentifiedDataItem.Key
  parent: BindOpen.Data.Items.IdentifiedDataItem
  isExternal: true
  name: Key()
  nameWithType: IdentifiedDataItem.Key()
  fullName: BindOpen.Data.Items.IdentifiedDataItem.Key()
  spec.csharp:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.Key
    name: Key
    nameWithType: IdentifiedDataItem.Key
    fullName: BindOpen.Data.Items.IdentifiedDataItem.Key
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.Key
    name: Key
    nameWithType: IdentifiedDataItem.Key
    fullName: BindOpen.Data.Items.IdentifiedDataItem.Key
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  commentId: M:BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  parent: BindOpen.Data.Items.IdentifiedDataItem
  isExternal: true
  name: NewGuid()
  nameWithType: IdentifiedDataItem.NewGuid()
  fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid()
  spec.csharp:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
    name: NewGuid
    nameWithType: IdentifiedDataItem.NewGuid
    fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
    name: NewGuid
    nameWithType: IdentifiedDataItem.NewGuid
    fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IdentifiedDataItem.Clone
  commentId: M:BindOpen.Data.Items.IdentifiedDataItem.Clone
  parent: BindOpen.Data.Items.IdentifiedDataItem
  isExternal: true
  name: Clone()
  nameWithType: IdentifiedDataItem.Clone()
  fullName: BindOpen.Data.Items.IdentifiedDataItem.Clone()
  spec.csharp:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.Clone
    name: Clone
    nameWithType: IdentifiedDataItem.Clone
    fullName: BindOpen.Data.Items.IdentifiedDataItem.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.Clone
    name: Clone
    nameWithType: IdentifiedDataItem.Clone
    fullName: BindOpen.Data.Items.IdentifiedDataItem.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IdentifiedDataItem.Id
  commentId: P:BindOpen.Data.Items.IdentifiedDataItem.Id
  parent: BindOpen.Data.Items.IdentifiedDataItem
  isExternal: true
  name: Id
  nameWithType: IdentifiedDataItem.Id
  fullName: BindOpen.Data.Items.IdentifiedDataItem.Id
- uid: BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  commentId: P:BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  parent: BindOpen.Data.Items.IdentifiedDataItem
  isExternal: true
  name: IdSpecified
  nameWithType: IdentifiedDataItem.IdSpecified
  fullName: BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
- uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  commentId: M:BindOpen.Data.Items.DataItem.InitializeLifetimeService
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: InitializeLifetimeService()
  nameWithType: DataItem.InitializeLifetimeService()
  fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone``1
  commentId: M:BindOpen.Data.Items.DataItem.Clone``1
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Clone<T>()
  nameWithType: DataItem.Clone<T>()
  fullName: BindOpen.Data.Items.DataItem.Clone<T>()
  nameWithType.vb: DataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.DataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone<T>
    nameWithType: DataItem.Clone<T>
    fullName: BindOpen.Data.Items.DataItem.Clone<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone(Of T)
    nameWithType: DataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.DataItem.Clone(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: DataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateStorageInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItem.UpdateRuntimeInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: DataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: DataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: DataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: DataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose
  commentId: M:BindOpen.Data.Items.DataItem.Dispose
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Dispose()
  nameWithType: DataItem.Dispose()
  fullName: BindOpen.Data.Items.DataItem.Dispose()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  isExternal: true
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.IBdoScope
  commentId: T:BindOpen.Application.Scopes.IBdoScope
  parent: BindOpen.Application.Scopes
  isExternal: true
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: BindOpen.Data.Queries.DbQueryBuilder.#ctor*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.#ctor
  name: DbQueryBuilder
  nameWithType: DbQueryBuilder.DbQueryBuilder
  fullName: BindOpen.Data.Queries.DbQueryBuilder.DbQueryBuilder
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName
  name: GetDatabaseName
  nameWithType: DbQueryBuilder.GetDatabaseName
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetDatabaseName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet
  name: UpdateParameterSet
  nameWithType: DbQueryBuilder.UpdateParameterSet
  fullName: BindOpen.Data.Queries.DbQueryBuilder.UpdateParameterSet
- uid: BindOpen.Data.Elements.IDataElementSet
  commentId: T:BindOpen.Data.Elements.IDataElementSet
  parent: BindOpen.Data.Elements
  isExternal: true
  name: IDataElementSet
  nameWithType: IDataElementSet
  fullName: BindOpen.Data.Elements.IDataElementSet
- uid: BindOpen.Data.Queries.IDbQuery
  commentId: T:BindOpen.Data.Queries.IDbQuery
  parent: BindOpen.Data.Queries
  name: IDbQuery
  nameWithType: IDbQuery
  fullName: BindOpen.Data.Queries.IDbQuery
- uid: BindOpen.Data.Elements
  commentId: N:BindOpen.Data.Elements
  isExternal: true
  name: BindOpen.Data.Elements
  nameWithType: BindOpen.Data.Elements
  fullName: BindOpen.Data.Elements
- uid: BindOpen.Data.Queries.DbQueryBuilder.BuildQuery*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.BuildQuery
  name: BuildQuery
  nameWithType: DbQueryBuilder.BuildQuery
  fullName: BindOpen.Data.Queries.DbQueryBuilder.BuildQuery
- uid: BindOpen.Data.Queries.DbQueryParameterMode
  commentId: T:BindOpen.Data.Queries.DbQueryParameterMode
  parent: BindOpen.Data.Queries
  name: DbQueryParameterMode
  nameWithType: DbQueryParameterMode
  fullName: BindOpen.Data.Queries.DbQueryParameterMode
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  commentId: T:BindOpen.System.Scripting.IBdoScriptVariableSet
  parent: BindOpen.System.Scripting
  isExternal: true
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.System.Scripting
  commentId: N:BindOpen.System.Scripting
  isExternal: true
  name: BindOpen.System.Scripting
  nameWithType: BindOpen.System.Scripting
  fullName: BindOpen.System.Scripting
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  isExternal: true
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query
  name: GetSqlText_Query
  nameWithType: DbQueryBuilder.GetSqlText_Query
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Query
- uid: BindOpen.Data.Queries.IDbSingleQuery
  commentId: T:BindOpen.Data.Queries.IDbSingleQuery
  parent: BindOpen.Data.Queries
  name: IDbSingleQuery
  nameWithType: IDbSingleQuery
  fullName: BindOpen.Data.Queries.IDbSingleQuery
- uid: BindOpen.Data.Queries.IDbCompositeQuery
  commentId: T:BindOpen.Data.Queries.IDbCompositeQuery
  parent: BindOpen.Data.Queries
  name: IDbCompositeQuery
  nameWithType: IDbCompositeQuery
  fullName: BindOpen.Data.Queries.IDbCompositeQuery
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value
  name: GetSqlText_Value
  nameWithType: DbQueryBuilder.GetSqlText_Value
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Value
- uid: BindOpen.Data.Common.DataValueType
  commentId: T:BindOpen.Data.Common.DataValueType
  parent: BindOpen.Data.Common
  isExternal: true
  name: DataValueType
  nameWithType: DataValueType
  fullName: BindOpen.Data.Common.DataValueType
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  isExternal: true
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DataItem.Dispose(Boolean)
  fullName: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbQueryBuilder.Dispose*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.Dispose
  name: Dispose
  nameWithType: DbQueryBuilder.Dispose
  fullName: BindOpen.Data.Queries.DbQueryBuilder.Dispose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count
  name: GetSqlText_Count
  nameWithType: DbQueryBuilder.GetSqlText_Count
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Count
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount
  name: GetSqlText_TextCount
  nameWithType: DbQueryBuilder.GetSqlText_TextCount
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_TextCount
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum
  name: GetSqlText_Sum
  nameWithType: DbQueryBuilder.GetSqlText_Sum
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Sum
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average
  name: GetSqlText_Average
  nameWithType: DbQueryBuilder.GetSqlText_Average
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Average
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In
  name: GetSqlText_In
  nameWithType: DbQueryBuilder.GetSqlText_In
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_In
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq
  name: GetSqlText_Eq
  nameWithType: DbQueryBuilder.GetSqlText_Eq
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Eq
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff
  name: GetSqlText_Diff
  nameWithType: DbQueryBuilder.GetSqlText_Diff
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Diff
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt
  name: GetSqlText_Gt
  nameWithType: DbQueryBuilder.GetSqlText_Gt
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gt
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte
  name: GetSqlText_Gte
  nameWithType: DbQueryBuilder.GetSqlText_Gte
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Gte
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt
  name: GetSqlText_Lt
  nameWithType: DbQueryBuilder.GetSqlText_Lt
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lt
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte
  name: GetSqlText_Lte
  nameWithType: DbQueryBuilder.GetSqlText_Lte
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Lte
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull
  name: GetSqlText_IsNull
  nameWithType: DbQueryBuilder.GetSqlText_IsNull
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_IsNull
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText
  name: GetSqlText_ConvertToText
  nameWithType: DbQueryBuilder.GetSqlText_ConvertToText
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate
  name: GetSqlText_CurrentDate
  nameWithType: DbQueryBuilder.GetSqlText_CurrentDate
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If
  name: GetSqlText_If
  nameWithType: DbQueryBuilder.GetSqlText_If
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_If
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not
  name: GetSqlText_Not
  nameWithType: DbQueryBuilder.GetSqlText_Not
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Not
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or
  name: GetSqlText_Or
  nameWithType: DbQueryBuilder.GetSqlText_Or
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Or
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And
  name: GetSqlText_And
  nameWithType: DbQueryBuilder.GetSqlText_And
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_And
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor
  name: GetSqlText_Xor
  nameWithType: DbQueryBuilder.GetSqlText_Xor
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Xor
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript
  name: GetBdoScript
  nameWithType: DbQueryBuilder.GetBdoScript
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetBdoScript
- uid: BindOpen.Extensions.Carriers.DbField
  commentId: T:BindOpen.Extensions.Carriers.DbField
  parent: BindOpen.Extensions.Carriers
  name: DbField
  nameWithType: DbField
  fullName: BindOpen.Extensions.Carriers.DbField
- uid: BindOpen.Extensions.Carriers
  commentId: N:BindOpen.Extensions.Carriers
  name: BindOpen.Extensions.Carriers
  nameWithType: BindOpen.Extensions.Carriers
  fullName: BindOpen.Extensions.Carriers
- uid: BindOpen.Extensions.Carriers.DbTable
  commentId: T:BindOpen.Extensions.Carriers.DbTable
  parent: BindOpen.Extensions.Carriers
  name: DbTable
  nameWithType: DbTable
  fullName: BindOpen.Extensions.Carriers.DbTable
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text
  name: GetSqlText_Text
  nameWithType: DbQueryBuilder.GetSqlText_Text
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Text
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like
  name: GetSqlText_Like
  nameWithType: DbQueryBuilder.GetSqlText_Like
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Like
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace
  name: GetSqlText_Replace
  nameWithType: DbQueryBuilder.GetSqlText_Replace
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Replace
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate
  name: GetSqlText_Concatenate
  nameWithType: DbQueryBuilder.GetSqlText_Concatenate
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null
  name: GetSqlText_Null
  nameWithType: DbQueryBuilder.GetSqlText_Null
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Null
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True
  name: GetSqlText_True
  nameWithType: DbQueryBuilder.GetSqlText_True
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_True
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database
  name: GetSqlText_Database
  nameWithType: DbQueryBuilder.GetSqlText_Database
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Database
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema
  name: GetSqlText_Schema
  nameWithType: DbQueryBuilder.GetSqlText_Schema
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Schema
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table
  name: GetSqlText_Table
  nameWithType: DbQueryBuilder.GetSqlText_Table
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Table
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field
  name: GetSqlText_Field
  nameWithType: DbQueryBuilder.GetSqlText_Field
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Field
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List
  name: GetSqlText_List
  nameWithType: DbQueryBuilder.GetSqlText_List
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_List
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid
  name: GetSqlText_NewGuid
  nameWithType: DbQueryBuilder.GetSqlText_NewGuid
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid
- uid: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random*
  commentId: Overload:BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random
  name: GetSqlText_Random
  nameWithType: DbQueryBuilder.GetSqlText_Random
  fullName: BindOpen.Data.Queries.DbQueryBuilder.GetSqlText_Random
shouldSkipMarkup: true
