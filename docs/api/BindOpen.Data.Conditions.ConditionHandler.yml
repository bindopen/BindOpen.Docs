### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Conditions.ConditionHandler
  commentId: T:BindOpen.Data.Conditions.ConditionHandler
  id: ConditionHandler
  parent: BindOpen.Data.Conditions
  children:
  - BindOpen.Data.Conditions.ConditionHandler.Evaluate(BindOpen.Data.Conditions.ICondition,BindOpen.System.Scripting.IBdoScriptInterpreter,BindOpen.System.Scripting.IBdoScriptVariableSet)
  langs:
  - csharp
  - vb
  name: ConditionHandler
  nameWithType: ConditionHandler
  fullName: BindOpen.Data.Conditions.ConditionHandler
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Conditions/Handlers/ConditionHandler.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ConditionHandler
    path: ../src/BindOpen.Core/Data/Conditions/Handlers/ConditionHandler.cs
    startLine: 10
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Conditions
  summary: "\nThis static class provides methods to handle conditions.\n"
  example: []
  syntax:
    content: public static class ConditionHandler
    content.vb: Public Module ConditionHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Conditions.ConditionHandler.Evaluate(BindOpen.Data.Conditions.ICondition,BindOpen.System.Scripting.IBdoScriptInterpreter,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Conditions.ConditionHandler.Evaluate(BindOpen.Data.Conditions.ICondition,BindOpen.System.Scripting.IBdoScriptInterpreter,BindOpen.System.Scripting.IBdoScriptVariableSet)
  id: Evaluate(BindOpen.Data.Conditions.ICondition,BindOpen.System.Scripting.IBdoScriptInterpreter,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExtensionMethod: true
  parent: BindOpen.Data.Conditions.ConditionHandler
  langs:
  - csharp
  - vb
  name: Evaluate(ICondition, IBdoScriptInterpreter, IBdoScriptVariableSet)
  nameWithType: ConditionHandler.Evaluate(ICondition, IBdoScriptInterpreter, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Conditions.ConditionHandler.Evaluate(BindOpen.Data.Conditions.ICondition, BindOpen.System.Scripting.IBdoScriptInterpreter, BindOpen.System.Scripting.IBdoScriptVariableSet)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Conditions/Handlers/ConditionHandler.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Evaluate
    path: ../src/BindOpen.Core/Data/Conditions/Handlers/ConditionHandler.cs
    startLine: 19
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Conditions
  summary: "\nEvaluate this instance.\n"
  example: []
  syntax:
    content: public static bool Evaluate(this ICondition condition, IBdoScriptInterpreter scriptInterpreter, IBdoScriptVariableSet scriptVariableSet)
    parameters:
    - id: condition
      type: BindOpen.Data.Conditions.ICondition
      description: The condition to consider.
    - id: scriptInterpreter
      type: BindOpen.System.Scripting.IBdoScriptInterpreter
      description: Script interpreter.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set used to evaluate.
    return:
      type: System.Boolean
      description: True if this instance is true.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Evaluate(condition As ICondition, scriptInterpreter As IBdoScriptInterpreter, scriptVariableSet As IBdoScriptVariableSet) As Boolean
  overload: BindOpen.Data.Conditions.ConditionHandler.Evaluate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BindOpen.Data.Conditions
  commentId: N:BindOpen.Data.Conditions
  name: BindOpen.Data.Conditions
  nameWithType: BindOpen.Data.Conditions
  fullName: BindOpen.Data.Conditions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Conditions.ConditionHandler.Evaluate*
  commentId: Overload:BindOpen.Data.Conditions.ConditionHandler.Evaluate
  name: Evaluate
  nameWithType: ConditionHandler.Evaluate
  fullName: BindOpen.Data.Conditions.ConditionHandler.Evaluate
- uid: BindOpen.Data.Conditions.ICondition
  commentId: T:BindOpen.Data.Conditions.ICondition
  parent: BindOpen.Data.Conditions
  name: ICondition
  nameWithType: ICondition
  fullName: BindOpen.Data.Conditions.ICondition
- uid: BindOpen.System.Scripting.IBdoScriptInterpreter
  commentId: T:BindOpen.System.Scripting.IBdoScriptInterpreter
  parent: BindOpen.System.Scripting
  name: IBdoScriptInterpreter
  nameWithType: IBdoScriptInterpreter
  fullName: BindOpen.System.Scripting.IBdoScriptInterpreter
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  commentId: T:BindOpen.System.Scripting.IBdoScriptVariableSet
  parent: BindOpen.System.Scripting
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.System.Scripting
  commentId: N:BindOpen.System.Scripting
  name: BindOpen.System.Scripting
  nameWithType: BindOpen.System.Scripting
  fullName: BindOpen.System.Scripting
shouldSkipMarkup: true
