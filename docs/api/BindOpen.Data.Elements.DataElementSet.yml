### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Elements.DataElementSet
  commentId: T:BindOpen.Data.Elements.DataElementSet
  id: DataElementSet
  parent: BindOpen.Data.Elements
  children:
  - BindOpen.Data.Elements.DataElementSet.#ctor
  - BindOpen.Data.Elements.DataElementSet.#ctor(BindOpen.Data.Elements.DataElement[])
  - BindOpen.Data.Elements.DataElementSet.#ctor(BindOpen.Data.Elements.IDataElement[])
  - BindOpen.Data.Elements.DataElementSet.AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
  - BindOpen.Data.Elements.DataElementSet.AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Elements.DataElementSet.AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Elements.DataElementSet.Check``1(System.Boolean,``0,System.String[])
  - BindOpen.Data.Elements.DataElementSet.Clone
  - BindOpen.Data.Elements.DataElementSet.Elements
  - BindOpen.Data.Elements.DataElementSet.ElementsSpecified
  - BindOpen.Data.Elements.DataElementSet.GetAvailableIndexes(System.Int32)
  - BindOpen.Data.Elements.DataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  - BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel(System.String,System.String,System.String,System.String[])
  - BindOpen.Data.Elements.DataElementSet.GetElement(System.String,System.String)
  - BindOpen.Data.Elements.DataElementSet.GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Elements.DataElementSet.GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Elements.DataElementSet.GetElementsWithGroupId(System.String)
  - BindOpen.Data.Elements.DataElementSet.GetGroupIds
  - BindOpen.Data.Elements.DataElementSet.GetTextNode(System.String,System.String)
  - BindOpen.Data.Elements.DataElementSet.GetTitleLabel(System.String,System.String,System.String,System.String[])
  - BindOpen.Data.Elements.DataElementSet.HasItem(System.String)
  - BindOpen.Data.Elements.DataElementSet.Item(System.String)
  - BindOpen.Data.Elements.DataElementSet.op_Implicit(BindOpen.Data.Elements.DataElement[])~BindOpen.Data.Elements.DataElementSet
  - BindOpen.Data.Elements.DataElementSet.RemoveElement(System.String)
  - BindOpen.Data.Elements.DataElementSet.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Elements.DataElementSet.Sort(System.String)
  - BindOpen.Data.Elements.DataElementSet.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  langs:
  - csharp
  - vb
  name: DataElementSet
  nameWithType: DataElementSet
  fullName: BindOpen.Data.Elements.DataElementSet
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DataElementSet
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 17
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nThis class represents a data element set.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class DataElementSet : DataItemSet<DataElement>, IDataElementSet, IDataItemSet<DataElement>, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced
    content.vb: >-
      <Serializable>

      Public Class DataElementSet
          Inherits DataItemSet(Of DataElement)
          Implements IDataElementSet, IDataItemSet(Of DataElement), IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - BindOpen.Data.Items.DataItem
  - BindOpen.Data.Items.IdentifiedDataItem
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  derivedClasses:
  - BindOpen.Application.Configuration.BdoBaseConfiguration
  - BindOpen.Application.Options.OptionSet
  implements:
  - BindOpen.Data.Elements.IDataElementSet
  - BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}
  - BindOpen.Data.Items.IIdentifiedDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  - BindOpen.Data.Items.IIdentified
  - BindOpen.Data.Items.IReferenced
  inheritedMembers:
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}._items
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Items
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.ItemsSpecified
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Count
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Item(System.Int32)
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.ClearItems
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(BindOpen.Data.Elements.DataElement[])
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Remove(System.String[])
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.HasItems
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.GetItem(System.String)
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(BindOpen.Data.Elements.DataElement,BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(System.Collections.Generic.List{BindOpen.Data.Elements.DataElement},BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.PropertyChanged
  - BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.OnPropertyChanged(System.String)
  - BindOpen.Data.Items.IdentifiedDataItem.Id
  - BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  - BindOpen.Data.Items.IdentifiedDataItem.Key
  - BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  - BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - BindOpen.Data.Items.DataItem.Clone``1
  - BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Dispose
  - BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - BindOpen.Data.Elements.IDataElementSet.BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - BindOpen.Data.Elements.DataElementSet.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.Data.Elements.DataElementSet})
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - BindOpen.Data.Elements.IDataElementSet.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(System.Object)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Data.Elements.DataElementSet.Elements
  commentId: P:BindOpen.Data.Elements.DataElementSet.Elements
  id: Elements
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: Elements
  nameWithType: DataElementSet.Elements
  fullName: BindOpen.Data.Elements.DataElementSet.Elements
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Elements
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 30
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nElements of this instance.\n"
  example: []
  syntax:
    content: public List<DataElement> Elements { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Elements.DataElement}
    content.vb: Public Property Elements As List(Of DataElement)
  overload: BindOpen.Data.Elements.DataElementSet.Elements*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.Elements
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.ElementsSpecified
  commentId: P:BindOpen.Data.Elements.DataElementSet.ElementsSpecified
  id: ElementsSpecified
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: ElementsSpecified
  nameWithType: DataElementSet.ElementsSpecified
  fullName: BindOpen.Data.Elements.DataElementSet.ElementsSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ElementsSpecified
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 47
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nSpecification of the Elements property of this instance.\n"
  example: []
  syntax:
    content: public bool ElementsSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ElementsSpecified As Boolean
  overload: BindOpen.Data.Elements.DataElementSet.ElementsSpecified*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.ElementsSpecified
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.Data.Elements.DataElementSet.Item(System.String)
  commentId: P:BindOpen.Data.Elements.DataElementSet.Item(System.String)
  id: Item(System.String)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: DataElementSet.Item[String]
  fullName: BindOpen.Data.Elements.DataElementSet.Item[System.String]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 53
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nReturns the element with the specified key.\n"
  example: []
  syntax:
    content: public DataElement this[string key] { get; }
    parameters:
    - id: key
      type: System.String
    return:
      type: BindOpen.Data.Elements.DataElement
    content.vb: Public ReadOnly Property Item(key As String) As DataElement
  overload: BindOpen.Data.Elements.DataElementSet.Item*
  implements:
  - BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}.Item(System.String)
  nameWithType.vb: DataElementSet.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.Data.Elements.DataElementSet.Item(System.String)
  name.vb: Item(String)
- uid: BindOpen.Data.Elements.DataElementSet.op_Implicit(BindOpen.Data.Elements.DataElement[])~BindOpen.Data.Elements.DataElementSet
  commentId: M:BindOpen.Data.Elements.DataElementSet.op_Implicit(BindOpen.Data.Elements.DataElement[])~BindOpen.Data.Elements.DataElementSet
  id: op_Implicit(BindOpen.Data.Elements.DataElement[])~BindOpen.Data.Elements.DataElementSet
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: Implicit(DataElement[] to DataElementSet)
  nameWithType: DataElementSet.Implicit(DataElement[] to DataElementSet)
  fullName: BindOpen.Data.Elements.DataElementSet.Implicit(BindOpen.Data.Elements.DataElement[] to BindOpen.Data.Elements.DataElementSet)
  type: Operator
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: op_Implicit
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 62
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nConverts from data element array.\n"
  example: []
  syntax:
    content: public static implicit operator DataElementSet(DataElement[] elements)
    parameters:
    - id: elements
      type: BindOpen.Data.Elements.DataElement[]
      description: The elements to consider.
    return:
      type: BindOpen.Data.Elements.DataElementSet
    content.vb: Public Shared Widening Operator CType(elements As DataElement()) As DataElementSet
  overload: BindOpen.Data.Elements.DataElementSet.op_Implicit*
  nameWithType.vb: DataElementSet.Widening(DataElement() to DataElementSet)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Elements.DataElementSet.Widening(BindOpen.Data.Elements.DataElement() to BindOpen.Data.Elements.DataElementSet)
  name.vb: Widening(DataElement() to DataElementSet)
- uid: BindOpen.Data.Elements.DataElementSet.#ctor
  commentId: M:BindOpen.Data.Elements.DataElementSet.#ctor
  id: '#ctor'
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: DataElementSet()
  nameWithType: DataElementSet.DataElementSet()
  fullName: BindOpen.Data.Elements.DataElementSet.DataElementSet()
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 78
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInstantiates a new instance of the DataElementSet class.\n"
  example: []
  syntax:
    content: public DataElementSet()
    content.vb: Public Sub New
  overload: BindOpen.Data.Elements.DataElementSet.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.#ctor(BindOpen.Data.Elements.DataElement[])
  commentId: M:BindOpen.Data.Elements.DataElementSet.#ctor(BindOpen.Data.Elements.DataElement[])
  id: '#ctor(BindOpen.Data.Elements.DataElement[])'
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: DataElementSet(DataElement[])
  nameWithType: DataElementSet.DataElementSet(DataElement[])
  fullName: BindOpen.Data.Elements.DataElementSet.DataElementSet(BindOpen.Data.Elements.DataElement[])
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 86
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInstantiates a new instance of the DataElementSet class.\n"
  example: []
  syntax:
    content: public DataElementSet(params DataElement[] elements)
    parameters:
    - id: elements
      type: BindOpen.Data.Elements.DataElement[]
      description: The elements to consider.
    content.vb: Public Sub New(ParamArray elements As DataElement())
  overload: BindOpen.Data.Elements.DataElementSet.#ctor*
  nameWithType.vb: DataElementSet.DataElementSet(DataElement())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Elements.DataElementSet.DataElementSet(BindOpen.Data.Elements.DataElement())
  name.vb: DataElementSet(DataElement())
- uid: BindOpen.Data.Elements.DataElementSet.#ctor(BindOpen.Data.Elements.IDataElement[])
  commentId: M:BindOpen.Data.Elements.DataElementSet.#ctor(BindOpen.Data.Elements.IDataElement[])
  id: '#ctor(BindOpen.Data.Elements.IDataElement[])'
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: DataElementSet(IDataElement[])
  nameWithType: DataElementSet.DataElementSet(IDataElement[])
  fullName: BindOpen.Data.Elements.DataElementSet.DataElementSet(BindOpen.Data.Elements.IDataElement[])
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 94
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nInstantiates a new instance of the DataElementSet class.\n"
  example: []
  syntax:
    content: public DataElementSet(params IDataElement[] elements)
    parameters:
    - id: elements
      type: BindOpen.Data.Elements.IDataElement[]
      description: The elements to consider.
    content.vb: Public Sub New(ParamArray elements As IDataElement())
  overload: BindOpen.Data.Elements.DataElementSet.#ctor*
  nameWithType.vb: DataElementSet.DataElementSet(IDataElement())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Elements.DataElementSet.DataElementSet(BindOpen.Data.Elements.IDataElement())
  name.vb: DataElementSet(IDataElement())
- uid: BindOpen.Data.Elements.DataElementSet.AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
  commentId: M:BindOpen.Data.Elements.DataElementSet.AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
  id: AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: AddElement(IDataElement, IDataElementSet)
  nameWithType: DataElementSet.AddElement(IDataElement, IDataElementSet)
  fullName: BindOpen.Data.Elements.DataElementSet.AddElement(BindOpen.Data.Elements.IDataElement, BindOpen.Data.Elements.IDataElementSet)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddElement
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 113
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nAdds a new element.\n"
  remarks: The new element must have a name.
  example: []
  syntax:
    content: public IDataElement AddElement(IDataElement element, IDataElementSet referenceElementSet = null)
    parameters:
    - id: element
      type: BindOpen.Data.Elements.IDataElement
      description: The new element to add.
    - id: referenceElementSet
      type: BindOpen.Data.Elements.IDataElementSet
      description: The reference set of elements to consider.
    return:
      type: BindOpen.Data.Elements.IDataElement
      description: Returns the new element that has been added. Returns null if the element has not been added.
    content.vb: Public Function AddElement(element As IDataElement, referenceElementSet As IDataElementSet = Nothing) As IDataElement
  overload: BindOpen.Data.Elements.DataElementSet.AddElement*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.RemoveElement(System.String)
  commentId: M:BindOpen.Data.Elements.DataElementSet.RemoveElement(System.String)
  id: RemoveElement(System.String)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: RemoveElement(String)
  nameWithType: DataElementSet.RemoveElement(String)
  fullName: BindOpen.Data.Elements.DataElementSet.RemoveElement(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveElement
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 139
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nRemoves the element with the specified name.\n"
  example: []
  syntax:
    content: public void RemoveElement(string key)
    parameters:
    - id: key
      type: System.String
      description: The key of the element to remove.
    content.vb: Public Sub RemoveElement(key As String)
  overload: BindOpen.Data.Elements.DataElementSet.RemoveElement*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.RemoveElement(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Elements.DataElementSet.AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
  id: AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: AddElementItem(String, Object, IBdoLog)
  nameWithType: DataElementSet.AddElementItem(String, Object, IBdoLog)
  fullName: BindOpen.Data.Elements.DataElementSet.AddElementItem(System.String, System.Object, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddElementItem
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 156
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nReturns the item of this instance.\n"
  example: []
  syntax:
    content: public virtual bool AddElementItem(string elementName, object item = null, IBdoLog log = null)
    parameters:
    - id: elementName
      type: System.String
      description: The element name to consider.
    - id: item
      type: System.Object
      description: The item to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to populate.
    return:
      type: System.Boolean
      description: Indicates whether the item has been set.
    content.vb: Public Overridable Function AddElementItem(elementName As String, item As Object = Nothing, log As IBdoLog = Nothing) As Boolean
  overload: BindOpen.Data.Elements.DataElementSet.AddElementItem*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Elements.DataElementSet.AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Elements.DataElementSet.AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
  id: AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: AddElementItems(String, Object[], IBdoLog)
  nameWithType: DataElementSet.AddElementItems(String, Object[], IBdoLog)
  fullName: BindOpen.Data.Elements.DataElementSet.AddElementItems(System.String, System.Object[], BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddElementItems
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 175
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nReturns the items of this instance.\n"
  example: []
  syntax:
    content: public virtual List<object> AddElementItems(string elementName, object[] items = null, IBdoLog log = null)
    parameters:
    - id: elementName
      type: System.String
      description: The element name to consider.
    - id: items
      type: System.Object[]
      description: The items to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to populate.
    return:
      type: System.Collections.Generic.List{System.Object}
      description: Returns the items of this instance.
    content.vb: Public Overridable Function AddElementItems(elementName As String, items As Object() = Nothing, log As IBdoLog = Nothing) As List(Of Object)
  overload: BindOpen.Data.Elements.DataElementSet.AddElementItems*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: DataElementSet.AddElementItems(String, Object(), IBdoLog)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Elements.DataElementSet.AddElementItems(System.String, System.Object(), BindOpen.System.Diagnostics.IBdoLog)
  name.vb: AddElementItems(String, Object(), IBdoLog)
- uid: BindOpen.Data.Elements.DataElementSet.HasItem(System.String)
  commentId: M:BindOpen.Data.Elements.DataElementSet.HasItem(System.String)
  id: HasItem(System.String)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: HasItem(String)
  nameWithType: DataElementSet.HasItem(String)
  fullName: BindOpen.Data.Elements.DataElementSet.HasItem(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasItem
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 200
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nChecks if this instance has an element with the specified key.\n"
  example: []
  syntax:
    content: public bool HasItem(string key)
    parameters:
    - id: key
      type: System.String
      description: The key of the element to check.
    return:
      type: System.Boolean
      description: Returns true if the instance has an element with the specified name.
    content.vb: Public Function HasItem(key As String) As Boolean
  overload: BindOpen.Data.Elements.DataElementSet.HasItem*
  implements:
  - BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}.HasItem(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  id: GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetCommonItemKeys(IDataElementSet)
  nameWithType: DataElementSet.GetCommonItemKeys(IDataElementSet)
  fullName: BindOpen.Data.Elements.DataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetCommonItemKeys
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 210
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nGets the common keys with the specified set of elements.\n"
  example: []
  syntax:
    content: public List<string> GetCommonItemKeys(IDataElementSet elementSet)
    parameters:
    - id: elementSet
      type: BindOpen.Data.Elements.IDataElementSet
      description: The collection to consider.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The names of the common object elements with the specified set of elements.
    content.vb: Public Function GetCommonItemKeys(elementSet As IDataElementSet) As List(Of String)
  overload: BindOpen.Data.Elements.DataElementSet.GetCommonItemKeys*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.GetElementsWithGroupId(System.String)
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetElementsWithGroupId(System.String)
  id: GetElementsWithGroupId(System.String)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetElementsWithGroupId(String)
  nameWithType: DataElementSet.GetElementsWithGroupId(String)
  fullName: BindOpen.Data.Elements.DataElementSet.GetElementsWithGroupId(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetElementsWithGroupId
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 239
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nGets the items with the specified group ID.\n"
  example: []
  syntax:
    content: public List<IDataElement> GetElementsWithGroupId(string groupId)
    parameters:
    - id: groupId
      type: System.String
      description: The ID of the item group.
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Elements.IDataElement}
      description: Returns items with the specified group ID.
    content.vb: Public Function GetElementsWithGroupId(groupId As String) As List(Of IDataElement)
  overload: BindOpen.Data.Elements.DataElementSet.GetElementsWithGroupId*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetElementsWithGroupId(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.GetElement(System.String,System.String)
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetElement(System.String,System.String)
  id: GetElement(System.String,System.String)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetElement(String, String)
  nameWithType: DataElementSet.GetElement(String, String)
  fullName: BindOpen.Data.Elements.DataElementSet.GetElement(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetElement
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 250
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nReturns the item with the specified name and group ID.\n"
  example: []
  syntax:
    content: public IDataElement GetElement(string name, string groupId = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the item to return.
    - id: groupId
      type: System.String
      description: The ID of the group of the item to return.
    return:
      type: BindOpen.Data.Elements.IDataElement
      description: Returns the item with the specified name and group ID.
    content.vb: Public Function GetElement(name As String, groupId As String = Nothing) As IDataElement
  overload: BindOpen.Data.Elements.DataElementSet.GetElement*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetElement(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.GetGroupIds
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetGroupIds
  id: GetGroupIds
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetGroupIds()
  nameWithType: DataElementSet.GetGroupIds()
  fullName: BindOpen.Data.Elements.DataElementSet.GetGroupIds()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetGroupIds
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 263
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nGets all the element groups IDs.\n"
  example: []
  syntax:
    content: public List<string> GetGroupIds()
    return:
      type: System.Collections.Generic.List{System.String}
      description: Returns all the element group IDs.
    content.vb: Public Function GetGroupIds As List(Of String)
  overload: BindOpen.Data.Elements.DataElementSet.GetGroupIds*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetGroupIds
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetElementObject(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataElementSet.GetElementObject(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Elements.DataElementSet.GetElementObject(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetElementObject
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 279
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nReturns the item object of this instance.\n"
  example: []
  syntax:
    content: public virtual object GetElementObject(string elementName = null, IBdoScope scope = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: elementName
      type: System.String
      description: The element name to consider.
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to use.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to populate.
    return:
      type: System.Object
      description: Returns the items of this instance.
    content.vb: Public Overridable Function GetElementObject(elementName As String = Nothing, scope As IBdoScope = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As Object
  overload: BindOpen.Data.Elements.DataElementSet.GetElementObject*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: BindOpen.Data.Elements.DataElementSet.GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetElementObject<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataElementSet.GetElementObject<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Elements.DataElementSet.GetElementObject<T>(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetElementObject
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 300
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nReturns the item object of this instance.\n"
  example: []
  syntax:
    content: public virtual T GetElementObject<T>(string elementName = null, IBdoScope scope = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: elementName
      type: System.String
      description: The element name to consider.
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The script variable set to use.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to populate.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns the items of this instance.
    content.vb: Public Overridable Function GetElementObject(Of T)(elementName As String = Nothing, scope As IBdoScope = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing) As T
  overload: BindOpen.Data.Elements.DataElementSet.GetElementObject*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: DataElementSet.GetElementObject(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: BindOpen.Data.Elements.DataElementSet.GetElementObject(Of T)(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: GetElementObject(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
- uid: BindOpen.Data.Elements.DataElementSet.GetAvailableIndexes(System.Int32)
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetAvailableIndexes(System.Int32)
  id: GetAvailableIndexes(System.Int32)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetAvailableIndexes(Int32)
  nameWithType: DataElementSet.GetAvailableIndexes(Int32)
  fullName: BindOpen.Data.Elements.DataElementSet.GetAvailableIndexes(System.Int32)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetAvailableIndexes
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 316
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nGets the available indexes.\n"
  example: []
  syntax:
    content: public List<int> GetAvailableIndexes(int maxIndex)
    parameters:
    - id: maxIndex
      type: System.Int32
      description: The maximum index to consider.
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: Returns the avaible indexes.
    content.vb: Public Function GetAvailableIndexes(maxIndex As Integer) As List(Of Integer)
  overload: BindOpen.Data.Elements.DataElementSet.GetAvailableIndexes*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetAvailableIndexes(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.GetTitleLabel(System.String,System.String,System.String,System.String[])
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetTitleLabel(System.String,System.String,System.String,System.String[])
  id: GetTitleLabel(System.String,System.String,System.String,System.String[])
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetTitleLabel(String, String, String, String[])
  nameWithType: DataElementSet.GetTitleLabel(String, String, String, String[])
  fullName: BindOpen.Data.Elements.DataElementSet.GetTitleLabel(System.String, System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetTitleLabel
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 338
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nGets the specified title.\n"
  example: []
  syntax:
    content: public string GetTitleLabel(string key, string variantName = "*", string defaultVariantName = "*", string[] parameters = null)
    parameters:
    - id: key
      type: System.String
      description: The key to consider.
    - id: variantName
      type: System.String
      description: The variant variant name to consider.
    - id: defaultVariantName
      type: System.String
      description: The default variant name to consider.
    - id: parameters
      type: System.String[]
      description: The parameters to consider.
    return:
      type: System.String
      description: Returns the specified label.
    content.vb: Public Function GetTitleLabel(key As String, variantName As String = "*", defaultVariantName As String = "*", parameters As String() = Nothing) As String
  overload: BindOpen.Data.Elements.DataElementSet.GetTitleLabel*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetTitleLabel(System.String,System.String,System.String,System.String[])
  nameWithType.vb: DataElementSet.GetTitleLabel(String, String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Elements.DataElementSet.GetTitleLabel(System.String, System.String, System.String, System.String())
  name.vb: GetTitleLabel(String, String, String, String())
- uid: BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel(System.String,System.String,System.String,System.String[])
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel(System.String,System.String,System.String,System.String[])
  id: GetDescriptionLabel(System.String,System.String,System.String,System.String[])
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetDescriptionLabel(String, String, String, String[])
  nameWithType: DataElementSet.GetDescriptionLabel(String, String, String, String[])
  fullName: BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel(System.String, System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetDescriptionLabel
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 370
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nGets the specified description.\n"
  example: []
  syntax:
    content: public string GetDescriptionLabel(string key, string variantName = "*", string defaultVariantName = "*", string[] parameters = null)
    parameters:
    - id: key
      type: System.String
      description: The key to consider.
    - id: variantName
      type: System.String
      description: The variant variant name to consider.
    - id: defaultVariantName
      type: System.String
      description: The default variant name to consider.
    - id: parameters
      type: System.String[]
      description: The parameters to consider.
    return:
      type: System.String
      description: Returns the specified label.
    content.vb: Public Function GetDescriptionLabel(key As String, variantName As String = "*", defaultVariantName As String = "*", parameters As String() = Nothing) As String
  overload: BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel(System.String,System.String,System.String,System.String[])
  nameWithType.vb: DataElementSet.GetDescriptionLabel(String, String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel(System.String, System.String, System.String, System.String())
  name.vb: GetDescriptionLabel(String, String, String, String())
- uid: BindOpen.Data.Elements.DataElementSet.GetTextNode(System.String,System.String)
  commentId: M:BindOpen.Data.Elements.DataElementSet.GetTextNode(System.String,System.String)
  id: GetTextNode(System.String,System.String)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: GetTextNode(String, String)
  nameWithType: DataElementSet.GetTextNode(String, String)
  fullName: BindOpen.Data.Elements.DataElementSet.GetTextNode(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetTextNode
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 408
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nReturns a text node representing this instance.\n"
  example: []
  syntax:
    content: public string GetTextNode(string nodeName, string indent)
    parameters:
    - id: nodeName
      type: System.String
      description: Name of the text node.
    - id: indent
      type: System.String
      description: Tabulation indent to include in the text.
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetTextNode(nodeName As String, indent As String) As String
  overload: BindOpen.Data.Elements.DataElementSet.GetTextNode*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.GetTextNode(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.Sort(System.String)
  commentId: M:BindOpen.Data.Elements.DataElementSet.Sort(System.String)
  id: Sort(System.String)
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: Sort(String)
  nameWithType: DataElementSet.Sort(String)
  fullName: BindOpen.Data.Elements.DataElementSet.Sort(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Sort
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 435
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nReturns a text node representing this instance.\n"
  example: []
  syntax:
    content: public List<IDataElement> Sort(string groupId = null)
    parameters:
    - id: groupId
      type: System.String
      description: ID of the group to consider. Null if all.
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Elements.IDataElement}
      description: Returns the sorted list of data elements.
    content.vb: Public Function Sort(groupId As String = Nothing) As List(Of IDataElement)
  overload: BindOpen.Data.Elements.DataElementSet.Sort*
  implements:
  - BindOpen.Data.Elements.IDataElementSet.Sort(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Data.Elements.DataElementSet.Clone
  commentId: M:BindOpen.Data.Elements.DataElementSet.Clone
  id: Clone
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: DataElementSet.Clone()
  fullName: BindOpen.Data.Elements.DataElementSet.Clone()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clone
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 476
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nClones this instance.\n"
  example: []
  syntax:
    content: public override object Clone()
    return:
      type: System.Object
      description: Returns a cloned instance.
    content.vb: Public Overrides Function Clone As Object
  overridden: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Clone
  overload: BindOpen.Data.Elements.DataElementSet.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.Data.Elements.DataElementSet.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Elements.DataElementSet.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  id: Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: Update<T1>(T1, String[], UpdateModes[])
  nameWithType: DataElementSet.Update<T1>(T1, String[], UpdateModes[])
  fullName: BindOpen.Data.Elements.DataElementSet.Update<T1>(T1, System.String[], BindOpen.Data.Common.UpdateModes[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Update
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 500
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nUpdates this instance.\n"
  remarks: Put reference collections as null if you do not want to repair this instance.
  example: []
  syntax:
    content: >-
      public override IBdoLog Update<T1>(T1 item = null, string[] specificationAreas = null, UpdateModes[] updateModes = null)
          where T1 : IDataItem
    parameters:
    - id: item
      type: '{T1}'
      description: The item to consider.
    - id: specificationAreas
      type: System.String[]
      description: The specification areas to consider.
    - id: updateModes
      type: BindOpen.Data.Common.UpdateModes[]
      description: The update modes to consider.
    typeParameters:
    - id: T1
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: Log of the operation.
    content.vb: Public Overrides Function Update(Of T1 As IDataItem)(item As T1 = Nothing, specificationAreas As String() = Nothing, updateModes As UpdateModes() = Nothing) As IBdoLog
  overridden: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Update``1({T1},System.String[],BindOpen.Data.Common.UpdateModes[])
  overload: BindOpen.Data.Elements.DataElementSet.Update*
  implements:
  - BindOpen.Data.Items.IDataItem.Update``1({T1},System.String[],BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataElementSet.Update(Of T1)(T1, String(), UpdateModes())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.Data.Elements.DataElementSet.Update(Of T1)(T1, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T1)(T1, String(), UpdateModes())
- uid: BindOpen.Data.Elements.DataElementSet.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Elements.DataElementSet.Check``1(System.Boolean,``0,System.String[])
  id: Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: Check<T1>(Boolean, T1, String[])
  nameWithType: DataElementSet.Check<T1>(Boolean, T1, String[])
  fullName: BindOpen.Data.Elements.DataElementSet.Check<T1>(System.Boolean, T1, System.String[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Check
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 549
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nChecks this instance.\n"
  example: []
  syntax:
    content: >-
      public override IBdoLog Check<T1>(bool isExistenceChecked = true, T1 item = null, string[] specificationAreas = null)
          where T1 : IDataItem
    parameters:
    - id: isExistenceChecked
      type: System.Boolean
      description: Indicates whether the carrier existence is checked.
    - id: item
      type: '{T1}'
      description: The item to consider.
    - id: specificationAreas
      type: System.String[]
      description: The specification areas to consider.
    typeParameters:
    - id: T1
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: Returns the check log.
    content.vb: Public Overrides Function Check(Of T1 As IDataItem)(isExistenceChecked As Boolean = True, item As T1 = Nothing, specificationAreas As String() = Nothing) As IBdoLog
  overridden: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Check``1(System.Boolean,{T1},System.String[])
  overload: BindOpen.Data.Elements.DataElementSet.Check*
  implements:
  - BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,{T1},System.String[])
  nameWithType.vb: DataElementSet.Check(Of T1)(Boolean, T1, String())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.Data.Elements.DataElementSet.Check(Of T1)(System.Boolean, T1, System.String())
  name.vb: Check(Of T1)(Boolean, T1, String())
- uid: BindOpen.Data.Elements.DataElementSet.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Elements.DataElementSet.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  id: Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Elements.DataElementSet
  langs:
  - csharp
  - vb
  name: Repair<T1>(T1, String[], UpdateModes[])
  nameWithType: DataElementSet.Repair<T1>(T1, String[], UpdateModes[])
  fullName: BindOpen.Data.Elements.DataElementSet.Repair<T1>(T1, System.String[], BindOpen.Data.Common.UpdateModes[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Repair
    path: ../src/BindOpen.Core/Data/Elements/Sets/DataElementSet.cs
    startLine: 599
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Elements
  summary: "\nRepairs this instance with the specified definition.\n"
  example: []
  syntax:
    content: >-
      public override IBdoLog Repair<T1>(T1 item = null, string[] specificationAreas = null, UpdateModes[] updateModes = null)
          where T1 : IDataItem
    parameters:
    - id: item
      type: '{T1}'
      description: The item to consider.
    - id: specificationAreas
      type: System.String[]
      description: The specification areas to consider.
    - id: updateModes
      type: BindOpen.Data.Common.UpdateModes[]
      description: The update modes to consider.
    typeParameters:
    - id: T1
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: Log of the operation.
    content.vb: Public Overrides Function Repair(Of T1 As IDataItem)(item As T1 = Nothing, specificationAreas As String() = Nothing, updateModes As UpdateModes() = Nothing) As IBdoLog
  overridden: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Repair``1({T1},System.String[],BindOpen.Data.Common.UpdateModes[])
  overload: BindOpen.Data.Elements.DataElementSet.Repair*
  implements:
  - BindOpen.Data.Items.IDataItem.Repair``1({T1},System.String[],BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataElementSet.Repair(Of T1)(T1, String(), UpdateModes())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.Data.Elements.DataElementSet.Repair(Of T1)(T1, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T1)(T1, String(), UpdateModes())
references:
- uid: BindOpen.Data.Elements
  commentId: N:BindOpen.Data.Elements
  name: BindOpen.Data.Elements
  nameWithType: BindOpen.Data.Elements
  fullName: BindOpen.Data.Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: BindOpen.Data.Items.DataItem
  commentId: T:BindOpen.Data.Items.DataItem
  parent: BindOpen.Data.Items
  name: DataItem
  nameWithType: DataItem
  fullName: BindOpen.Data.Items.DataItem
- uid: BindOpen.Data.Items.IdentifiedDataItem
  commentId: T:BindOpen.Data.Items.IdentifiedDataItem
  parent: BindOpen.Data.Items
  name: IdentifiedDataItem
  nameWithType: IdentifiedDataItem
  fullName: BindOpen.Data.Items.IdentifiedDataItem
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  commentId: T:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  parent: BindOpen.Data.Items
  definition: BindOpen.Data.Items.DataItemSet`1
  name: DataItemSet<DataElement>
  nameWithType: DataItemSet<DataElement>
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>
  nameWithType.vb: DataItemSet(Of DataElement)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement)
  name.vb: DataItemSet(Of DataElement)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1
    name: DataItemSet
    nameWithType: DataItemSet
    fullName: BindOpen.Data.Items.DataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1
    name: DataItemSet
    nameWithType: DataItemSet
    fullName: BindOpen.Data.Items.DataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.IDataElementSet
  commentId: T:BindOpen.Data.Elements.IDataElementSet
  parent: BindOpen.Data.Elements
  name: IDataElementSet
  nameWithType: IDataElementSet
  fullName: BindOpen.Data.Elements.IDataElementSet
- uid: BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}
  commentId: T:BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}
  parent: BindOpen.Data.Items
  definition: BindOpen.Data.Items.IDataItemSet`1
  name: IDataItemSet<DataElement>
  nameWithType: IDataItemSet<DataElement>
  fullName: BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Elements.DataElement>
  nameWithType.vb: IDataItemSet(Of DataElement)
  fullName.vb: BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Elements.DataElement)
  name.vb: IDataItemSet(Of DataElement)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IIdentifiedDataItem
  commentId: T:BindOpen.Data.Items.IIdentifiedDataItem
  parent: BindOpen.Data.Items
  name: IIdentifiedDataItem
  nameWithType: IIdentifiedDataItem
  fullName: BindOpen.Data.Items.IIdentifiedDataItem
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  commentId: T:BindOpen.Data.Items.IIdentified
  parent: BindOpen.Data.Items
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  commentId: T:BindOpen.Data.Items.IReferenced
  parent: BindOpen.Data.Items
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}._items
  commentId: F:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}._items
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1._items
  name: _items
  nameWithType: DataItemSet<DataElement>._items
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>._items
  nameWithType.vb: DataItemSet(Of DataElement)._items
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement)._items
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Items
  commentId: P:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Items
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Items
  name: Items
  nameWithType: DataItemSet<DataElement>.Items
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Items
  nameWithType.vb: DataItemSet(Of DataElement).Items
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Items
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.ItemsSpecified
  commentId: P:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.ItemsSpecified
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.ItemsSpecified
  name: ItemsSpecified
  nameWithType: DataItemSet<DataElement>.ItemsSpecified
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.ItemsSpecified
  nameWithType.vb: DataItemSet(Of DataElement).ItemsSpecified
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).ItemsSpecified
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Count
  commentId: P:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Count
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Count
  name: Count
  nameWithType: DataItemSet<DataElement>.Count
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Count
  nameWithType.vb: DataItemSet(Of DataElement).Count
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Count
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Item(System.Int32)
  commentId: P:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Item(System.Int32)
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: DataItemSet<DataElement>.Item[Int32]
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Item[System.Int32]
  nameWithType.vb: DataItemSet(Of DataElement).Item(Int32)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Item(System.Int32)
    name: Item
    nameWithType: DataItemSet<DataElement>.Item
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Item(System.Int32)
    name: Item
    nameWithType: DataItemSet(Of DataElement).Item
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.ClearItems
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.ClearItems
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.ClearItems
  name: ClearItems()
  nameWithType: DataItemSet<DataElement>.ClearItems()
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.ClearItems()
  nameWithType.vb: DataItemSet(Of DataElement).ClearItems()
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).ClearItems()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.ClearItems
    name: ClearItems
    nameWithType: DataItemSet<DataElement>.ClearItems
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.ClearItems
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.ClearItems
    name: ClearItems
    nameWithType: DataItemSet(Of DataElement).ClearItems
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).ClearItems
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(BindOpen.Data.Elements.DataElement[])
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(BindOpen.Data.Elements.DataElement[])
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Add(`0[])
  name: Add(DataElement[])
  nameWithType: DataItemSet<DataElement>.Add(DataElement[])
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Add(BindOpen.Data.Elements.DataElement[])
  nameWithType.vb: DataItemSet(Of DataElement).Add(DataElement())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Add(BindOpen.Data.Elements.DataElement())
  name.vb: Add(DataElement())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(`0[])
    name: Add
    nameWithType: DataItemSet<DataElement>.Add
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(`0[])
    name: Add
    nameWithType: DataItemSet(Of DataElement).Add
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Remove(System.String[])
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Remove(System.String[])
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Remove(System.String[])
  name: Remove(String[])
  nameWithType: DataItemSet<DataElement>.Remove(String[])
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Remove(System.String[])
  nameWithType.vb: DataItemSet(Of DataElement).Remove(String())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Remove(System.String())
  name.vb: Remove(String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Remove(System.String[])
    name: Remove
    nameWithType: DataItemSet<DataElement>.Remove
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Remove(System.String[])
    name: Remove
    nameWithType: DataItemSet(Of DataElement).Remove
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.HasItems
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.HasItems
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.HasItems
  name: HasItems()
  nameWithType: DataItemSet<DataElement>.HasItems()
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.HasItems()
  nameWithType.vb: DataItemSet(Of DataElement).HasItems()
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).HasItems()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.HasItems
    name: HasItems
    nameWithType: DataItemSet<DataElement>.HasItems
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.HasItems
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.HasItems
    name: HasItems
    nameWithType: DataItemSet(Of DataElement).HasItems
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).HasItems
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.GetItem(System.String)
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.GetItem(System.String)
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.GetItem(System.String)
  name: GetItem(String)
  nameWithType: DataItemSet<DataElement>.GetItem(String)
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.GetItem(System.String)
  nameWithType.vb: DataItemSet(Of DataElement).GetItem(String)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).GetItem(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.GetItem(System.String)
    name: GetItem
    nameWithType: DataItemSet<DataElement>.GetItem
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.GetItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.GetItem(System.String)
    name: GetItem
    nameWithType: DataItemSet(Of DataElement).GetItem
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).GetItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{`0})
  name: GetCommonItemKeys(IDataItemSet<DataElement>)
  nameWithType: DataItemSet<DataElement>.GetCommonItemKeys(IDataItemSet<DataElement>)
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Elements.DataElement>)
  nameWithType.vb: DataItemSet(Of DataElement).GetCommonItemKeys(IDataItemSet(Of DataElement))
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Elements.DataElement))
  name.vb: GetCommonItemKeys(IDataItemSet(Of DataElement))
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{`0})
    name: GetCommonItemKeys
    nameWithType: DataItemSet<DataElement>.GetCommonItemKeys
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.GetCommonItemKeys
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{`0})
    name: GetCommonItemKeys
    nameWithType: DataItemSet(Of DataElement).GetCommonItemKeys
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).GetCommonItemKeys
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(BindOpen.Data.Elements.DataElement,BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(BindOpen.Data.Elements.DataElement,BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Add(`0,BindOpen.Data.Items.IDataItemSet{`0})
  name: Add(DataElement, IDataItemSet<DataElement>)
  nameWithType: DataItemSet<DataElement>.Add(DataElement, IDataItemSet<DataElement>)
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Add(BindOpen.Data.Elements.DataElement, BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Elements.DataElement>)
  nameWithType.vb: DataItemSet(Of DataElement).Add(DataElement, IDataItemSet(Of DataElement))
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Add(BindOpen.Data.Elements.DataElement, BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Elements.DataElement))
  name.vb: Add(DataElement, IDataItemSet(Of DataElement))
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(`0,BindOpen.Data.Items.IDataItemSet{`0})
    name: Add
    nameWithType: DataItemSet<DataElement>.Add
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(`0,BindOpen.Data.Items.IDataItemSet{`0})
    name: Add
    nameWithType: DataItemSet(Of DataElement).Add
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(System.Collections.Generic.List{BindOpen.Data.Elements.DataElement},BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Add(System.Collections.Generic.List{BindOpen.Data.Elements.DataElement},BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement})
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Add(System.Collections.Generic.List{`0},BindOpen.Data.Items.IDataItemSet{`0})
  name: Add(List<DataElement>, IDataItemSet<DataElement>)
  nameWithType: DataItemSet<DataElement>.Add(List<DataElement>, IDataItemSet<DataElement>)
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Add(System.Collections.Generic.List<BindOpen.Data.Elements.DataElement>, BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Elements.DataElement>)
  nameWithType.vb: DataItemSet(Of DataElement).Add(List(Of DataElement), IDataItemSet(Of DataElement))
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Add(System.Collections.Generic.List(Of BindOpen.Data.Elements.DataElement), BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Elements.DataElement))
  name.vb: Add(List(Of DataElement), IDataItemSet(Of DataElement))
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(System.Collections.Generic.List{`0},BindOpen.Data.Items.IDataItemSet{`0})
    name: Add
    nameWithType: DataItemSet<DataElement>.Add
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(System.Collections.Generic.List{`0},BindOpen.Data.Items.IDataItemSet{`0})
    name: Add
    nameWithType: DataItemSet(Of DataElement).Add
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: DataItemSet<DataElement>.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: DataItemSet(Of DataElement).UpdateStorageInfo(IBdoLog)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItemSet<DataElement>.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItemSet(Of DataElement).UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataItemSet<DataElement>.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: DataItemSet(Of DataElement).UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItemSet<DataElement>.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItemSet(Of DataElement).UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.PropertyChanged
  commentId: E:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.PropertyChanged
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.PropertyChanged
  name: PropertyChanged
  nameWithType: DataItemSet<DataElement>.PropertyChanged
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.PropertyChanged
  nameWithType.vb: DataItemSet(Of DataElement).PropertyChanged
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).PropertyChanged
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.OnPropertyChanged(System.String)
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.OnPropertyChanged(System.String)
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.OnPropertyChanged(System.String)
  name: OnPropertyChanged(String)
  nameWithType: DataItemSet<DataElement>.OnPropertyChanged(String)
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.OnPropertyChanged(System.String)
  nameWithType.vb: DataItemSet(Of DataElement).OnPropertyChanged(String)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).OnPropertyChanged(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: DataItemSet<DataElement>.OnPropertyChanged
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: DataItemSet(Of DataElement).OnPropertyChanged
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IdentifiedDataItem.Id
  commentId: P:BindOpen.Data.Items.IdentifiedDataItem.Id
  parent: BindOpen.Data.Items.IdentifiedDataItem
  name: Id
  nameWithType: IdentifiedDataItem.Id
  fullName: BindOpen.Data.Items.IdentifiedDataItem.Id
- uid: BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  commentId: P:BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  parent: BindOpen.Data.Items.IdentifiedDataItem
  name: IdSpecified
  nameWithType: IdentifiedDataItem.IdSpecified
  fullName: BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
- uid: BindOpen.Data.Items.IdentifiedDataItem.Key
  commentId: M:BindOpen.Data.Items.IdentifiedDataItem.Key
  parent: BindOpen.Data.Items.IdentifiedDataItem
  name: Key()
  nameWithType: IdentifiedDataItem.Key()
  fullName: BindOpen.Data.Items.IdentifiedDataItem.Key()
  spec.csharp:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.Key
    name: Key
    nameWithType: IdentifiedDataItem.Key
    fullName: BindOpen.Data.Items.IdentifiedDataItem.Key
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.Key
    name: Key
    nameWithType: IdentifiedDataItem.Key
    fullName: BindOpen.Data.Items.IdentifiedDataItem.Key
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  commentId: M:BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  parent: BindOpen.Data.Items.IdentifiedDataItem
  name: NewGuid()
  nameWithType: IdentifiedDataItem.NewGuid()
  fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid()
  spec.csharp:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
    name: NewGuid
    nameWithType: IdentifiedDataItem.NewGuid
    fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
    name: NewGuid
    nameWithType: IdentifiedDataItem.NewGuid
    fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  commentId: M:BindOpen.Data.Items.DataItem.InitializeLifetimeService
  parent: BindOpen.Data.Items.DataItem
  name: InitializeLifetimeService()
  nameWithType: DataItem.InitializeLifetimeService()
  fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone``1
  commentId: M:BindOpen.Data.Items.DataItem.Clone``1
  parent: BindOpen.Data.Items.DataItem
  name: Clone<T>()
  nameWithType: DataItem.Clone<T>()
  fullName: BindOpen.Data.Items.DataItem.Clone<T>()
  nameWithType.vb: DataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.DataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone<T>
    nameWithType: DataItem.Clone<T>
    fullName: BindOpen.Data.Items.DataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone(Of T)
    nameWithType: DataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.DataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: DataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: DataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: DataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: DataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose
  commentId: M:BindOpen.Data.Items.DataItem.Dispose
  parent: BindOpen.Data.Items.DataItem
  name: Dispose()
  nameWithType: DataItem.Dispose()
  fullName: BindOpen.Data.Items.DataItem.Dispose()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DataItem.Dispose(Boolean)
  fullName: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.IDataElementSet.BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
  commentId: M:BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
  parent: BindOpen.Application.Arguments.AppArgumentHelper
  definition: BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
  name: Check(IOptionSpecSet, Boolean)
  nameWithType: AppArgumentHelper.Check(IOptionSpecSet, Boolean)
  fullName: BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Application.Options.IOptionSpecSet, System.Boolean)
  spec.csharp:
  - uid: BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
    name: Check
    nameWithType: AppArgumentHelper.Check
    fullName: BindOpen.Application.Arguments.AppArgumentHelper.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Options.IOptionSpecSet
    name: IOptionSpecSet
    nameWithType: IOptionSpecSet
    fullName: BindOpen.Application.Options.IOptionSpecSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
    name: Check
    nameWithType: AppArgumentHelper.Check
    fullName: BindOpen.Application.Arguments.AppArgumentHelper.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Options.IOptionSpecSet
    name: IOptionSpecSet
    nameWithType: IOptionSpecSet
    fullName: BindOpen.Application.Options.IOptionSpecSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.Data.Elements.DataElementSet})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  name: Using<DataElementSet>(Action<DataElementSet>)
  nameWithType: ObjectHelper.Using<DataElementSet>(Action<DataElementSet>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.Data.Elements.DataElementSet>(System.Action<BindOpen.Data.Elements.DataElementSet>)
  nameWithType.vb: ObjectHelper.Using(Of DataElementSet)(Action(Of DataElementSet))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.Data.Elements.DataElementSet)(System.Action(Of BindOpen.Data.Elements.DataElementSet))
  name.vb: Using(Of DataElementSet)(Action(Of DataElementSet))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using<DataElementSet>
    nameWithType: ObjectHelper.Using<DataElementSet>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.Data.Elements.DataElementSet>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.DataElementSet
    name: DataElementSet
    nameWithType: DataElementSet
    fullName: BindOpen.Data.Elements.DataElementSet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using(Of DataElementSet)
    nameWithType: ObjectHelper.Using(Of DataElementSet)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.Data.Elements.DataElementSet)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.DataElementSet
    name: DataElementSet
    nameWithType: DataElementSet
    fullName: BindOpen.Data.Elements.DataElementSet
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.IDataElementSet.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(BindOpen.Data.Elements.IDataElementSet,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(BindOpen.Data.Elements.IDataElementSet,System.Object)
  name: UpdateFromObject<T>(Object)
  nameWithType: ObjectHelper.UpdateFromObject<T>(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject<T>(System.Object)
  nameWithType.vb: ObjectHelper.UpdateFromObject(Of T)(Object)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject(Of T)(System.Object)
  name.vb: UpdateFromObject(Of T)(Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(System.Object)
    name: UpdateFromObject<T>
    nameWithType: ObjectHelper.UpdateFromObject<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(System.Object)
    name: UpdateFromObject(Of T)
    nameWithType: ObjectHelper.UpdateFromObject(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: BindOpen.Data.Items.DataItemSet`1
  commentId: T:BindOpen.Data.Items.DataItemSet`1
  name: DataItemSet<T>
  nameWithType: DataItemSet<T>
  fullName: BindOpen.Data.Items.DataItemSet<T>
  nameWithType.vb: DataItemSet(Of T)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T)
  name.vb: DataItemSet(Of T)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1
    name: DataItemSet
    nameWithType: DataItemSet
    fullName: BindOpen.Data.Items.DataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1
    name: DataItemSet
    nameWithType: DataItemSet
    fullName: BindOpen.Data.Items.DataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItemSet`1
  commentId: T:BindOpen.Data.Items.IDataItemSet`1
  parent: BindOpen.Data.Items
  name: IDataItemSet<T>
  nameWithType: IDataItemSet<T>
  fullName: BindOpen.Data.Items.IDataItemSet<T>
  nameWithType.vb: IDataItemSet(Of T)
  fullName.vb: BindOpen.Data.Items.IDataItemSet(Of T)
  name.vb: IDataItemSet(Of T)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1._items
  commentId: F:BindOpen.Data.Items.DataItemSet`1._items
  name: _items
  nameWithType: DataItemSet<T>._items
  fullName: BindOpen.Data.Items.DataItemSet<T>._items
  nameWithType.vb: DataItemSet(Of T)._items
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T)._items
- uid: BindOpen.Data.Items.DataItemSet`1.Items
  commentId: P:BindOpen.Data.Items.DataItemSet`1.Items
  name: Items
  nameWithType: DataItemSet<T>.Items
  fullName: BindOpen.Data.Items.DataItemSet<T>.Items
  nameWithType.vb: DataItemSet(Of T).Items
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Items
- uid: BindOpen.Data.Items.DataItemSet`1.ItemsSpecified
  commentId: P:BindOpen.Data.Items.DataItemSet`1.ItemsSpecified
  name: ItemsSpecified
  nameWithType: DataItemSet<T>.ItemsSpecified
  fullName: BindOpen.Data.Items.DataItemSet<T>.ItemsSpecified
  nameWithType.vb: DataItemSet(Of T).ItemsSpecified
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).ItemsSpecified
- uid: BindOpen.Data.Items.DataItemSet`1.Count
  commentId: P:BindOpen.Data.Items.DataItemSet`1.Count
  name: Count
  nameWithType: DataItemSet<T>.Count
  fullName: BindOpen.Data.Items.DataItemSet<T>.Count
  nameWithType.vb: DataItemSet(Of T).Count
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Count
- uid: BindOpen.Data.Items.DataItemSet`1.Item(System.Int32)
  commentId: P:BindOpen.Data.Items.DataItemSet`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: DataItemSet<T>.Item[Int32]
  fullName: BindOpen.Data.Items.DataItemSet<T>.Item[System.Int32]
  nameWithType.vb: DataItemSet(Of T).Item(Int32)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Item(System.Int32)
    name: Item
    nameWithType: DataItemSet<T>.Item
    fullName: BindOpen.Data.Items.DataItemSet<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Item(System.Int32)
    name: Item
    nameWithType: DataItemSet(Of T).Item
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.ClearItems
  commentId: M:BindOpen.Data.Items.DataItemSet`1.ClearItems
  name: ClearItems()
  nameWithType: DataItemSet<T>.ClearItems()
  fullName: BindOpen.Data.Items.DataItemSet<T>.ClearItems()
  nameWithType.vb: DataItemSet(Of T).ClearItems()
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).ClearItems()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.ClearItems
    name: ClearItems
    nameWithType: DataItemSet<T>.ClearItems
    fullName: BindOpen.Data.Items.DataItemSet<T>.ClearItems
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.ClearItems
    name: ClearItems
    nameWithType: DataItemSet(Of T).ClearItems
    fullName: BindOpen.Data.Items.DataItemSet(Of T).ClearItems
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.Add(`0[])
  commentId: M:BindOpen.Data.Items.DataItemSet`1.Add(`0[])
  name: Add(T[])
  nameWithType: DataItemSet<T>.Add(T[])
  fullName: BindOpen.Data.Items.DataItemSet<T>.Add(T[])
  nameWithType.vb: DataItemSet(Of T).Add(T())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Add(T())
  name.vb: Add(T())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(`0[])
    name: Add
    nameWithType: DataItemSet<T>.Add
    fullName: BindOpen.Data.Items.DataItemSet<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(`0[])
    name: Add
    nameWithType: DataItemSet(Of T).Add
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.Remove(System.String[])
  commentId: M:BindOpen.Data.Items.DataItemSet`1.Remove(System.String[])
  isExternal: true
  name: Remove(String[])
  nameWithType: DataItemSet<T>.Remove(String[])
  fullName: BindOpen.Data.Items.DataItemSet<T>.Remove(System.String[])
  nameWithType.vb: DataItemSet(Of T).Remove(String())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Remove(System.String())
  name.vb: Remove(String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Remove(System.String[])
    name: Remove
    nameWithType: DataItemSet<T>.Remove
    fullName: BindOpen.Data.Items.DataItemSet<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Remove(System.String[])
    name: Remove
    nameWithType: DataItemSet(Of T).Remove
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.HasItems
  commentId: M:BindOpen.Data.Items.DataItemSet`1.HasItems
  name: HasItems()
  nameWithType: DataItemSet<T>.HasItems()
  fullName: BindOpen.Data.Items.DataItemSet<T>.HasItems()
  nameWithType.vb: DataItemSet(Of T).HasItems()
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).HasItems()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.HasItems
    name: HasItems
    nameWithType: DataItemSet<T>.HasItems
    fullName: BindOpen.Data.Items.DataItemSet<T>.HasItems
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.HasItems
    name: HasItems
    nameWithType: DataItemSet(Of T).HasItems
    fullName: BindOpen.Data.Items.DataItemSet(Of T).HasItems
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.GetItem(System.String)
  commentId: M:BindOpen.Data.Items.DataItemSet`1.GetItem(System.String)
  isExternal: true
  name: GetItem(String)
  nameWithType: DataItemSet<T>.GetItem(String)
  fullName: BindOpen.Data.Items.DataItemSet<T>.GetItem(System.String)
  nameWithType.vb: DataItemSet(Of T).GetItem(String)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).GetItem(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.GetItem(System.String)
    name: GetItem
    nameWithType: DataItemSet<T>.GetItem
    fullName: BindOpen.Data.Items.DataItemSet<T>.GetItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.GetItem(System.String)
    name: GetItem
    nameWithType: DataItemSet(Of T).GetItem
    fullName: BindOpen.Data.Items.DataItemSet(Of T).GetItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{`0})
  commentId: M:BindOpen.Data.Items.DataItemSet`1.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{`0})
  name: GetCommonItemKeys(IDataItemSet<T>)
  nameWithType: DataItemSet<T>.GetCommonItemKeys(IDataItemSet<T>)
  fullName: BindOpen.Data.Items.DataItemSet<T>.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet<T>)
  nameWithType.vb: DataItemSet(Of T).GetCommonItemKeys(IDataItemSet(Of T))
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet(Of T))
  name.vb: GetCommonItemKeys(IDataItemSet(Of T))
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{`0})
    name: GetCommonItemKeys
    nameWithType: DataItemSet<T>.GetCommonItemKeys
    fullName: BindOpen.Data.Items.DataItemSet<T>.GetCommonItemKeys
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.GetCommonItemKeys(BindOpen.Data.Items.IDataItemSet{`0})
    name: GetCommonItemKeys
    nameWithType: DataItemSet(Of T).GetCommonItemKeys
    fullName: BindOpen.Data.Items.DataItemSet(Of T).GetCommonItemKeys
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.Add(`0,BindOpen.Data.Items.IDataItemSet{`0})
  commentId: M:BindOpen.Data.Items.DataItemSet`1.Add(`0,BindOpen.Data.Items.IDataItemSet{`0})
  name: Add(T, IDataItemSet<T>)
  nameWithType: DataItemSet<T>.Add(T, IDataItemSet<T>)
  fullName: BindOpen.Data.Items.DataItemSet<T>.Add(T, BindOpen.Data.Items.IDataItemSet<T>)
  nameWithType.vb: DataItemSet(Of T).Add(T, IDataItemSet(Of T))
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Add(T, BindOpen.Data.Items.IDataItemSet(Of T))
  name.vb: Add(T, IDataItemSet(Of T))
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(`0,BindOpen.Data.Items.IDataItemSet{`0})
    name: Add
    nameWithType: DataItemSet<T>.Add
    fullName: BindOpen.Data.Items.DataItemSet<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(`0,BindOpen.Data.Items.IDataItemSet{`0})
    name: Add
    nameWithType: DataItemSet(Of T).Add
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.Add(System.Collections.Generic.List{`0},BindOpen.Data.Items.IDataItemSet{`0})
  commentId: M:BindOpen.Data.Items.DataItemSet`1.Add(System.Collections.Generic.List{`0},BindOpen.Data.Items.IDataItemSet{`0})
  isExternal: true
  name: Add(List<T>, IDataItemSet<T>)
  nameWithType: DataItemSet<T>.Add(List<T>, IDataItemSet<T>)
  fullName: BindOpen.Data.Items.DataItemSet<T>.Add(System.Collections.Generic.List<T>, BindOpen.Data.Items.IDataItemSet<T>)
  nameWithType.vb: DataItemSet(Of T).Add(List(Of T), IDataItemSet(Of T))
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Add(System.Collections.Generic.List(Of T), BindOpen.Data.Items.IDataItemSet(Of T))
  name.vb: Add(List(Of T), IDataItemSet(Of T))
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(System.Collections.Generic.List{`0},BindOpen.Data.Items.IDataItemSet{`0})
    name: Add
    nameWithType: DataItemSet<T>.Add
    fullName: BindOpen.Data.Items.DataItemSet<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Add(System.Collections.Generic.List{`0},BindOpen.Data.Items.IDataItemSet{`0})
    name: Add
    nameWithType: DataItemSet(Of T).Add
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Items.IDataItemSet`1
    name: IDataItemSet
    nameWithType: IDataItemSet
    fullName: BindOpen.Data.Items.IDataItemSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItemSet`1.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: DataItemSet<T>.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.DataItemSet<T>.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: DataItemSet(Of T).UpdateStorageInfo(IBdoLog)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItemSet<T>.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItemSet<T>.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DataItemSet(Of T).UpdateStorageInfo
    fullName: BindOpen.Data.Items.DataItemSet(Of T).UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DataItemSet`1.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DataItemSet<T>.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.DataItemSet<T>.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: DataItemSet(Of T).UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItemSet<T>.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItemSet<T>.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DataItemSet(Of T).UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DataItemSet(Of T).UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.PropertyChanged
  commentId: E:BindOpen.Data.Items.DataItemSet`1.PropertyChanged
  name: PropertyChanged
  nameWithType: DataItemSet<T>.PropertyChanged
  fullName: BindOpen.Data.Items.DataItemSet<T>.PropertyChanged
  nameWithType.vb: DataItemSet(Of T).PropertyChanged
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).PropertyChanged
- uid: BindOpen.Data.Items.DataItemSet`1.OnPropertyChanged(System.String)
  commentId: M:BindOpen.Data.Items.DataItemSet`1.OnPropertyChanged(System.String)
  isExternal: true
  name: OnPropertyChanged(String)
  nameWithType: DataItemSet<T>.OnPropertyChanged(String)
  fullName: BindOpen.Data.Items.DataItemSet<T>.OnPropertyChanged(System.String)
  nameWithType.vb: DataItemSet(Of T).OnPropertyChanged(String)
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).OnPropertyChanged(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: DataItemSet<T>.OnPropertyChanged
    fullName: BindOpen.Data.Items.DataItemSet<T>.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: DataItemSet(Of T).OnPropertyChanged
    fullName: BindOpen.Data.Items.DataItemSet(Of T).OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
  commentId: M:BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
  isExternal: true
  name: Check(IDataElementSet, IOptionSpecSet, Boolean)
  nameWithType: AppArgumentHelper.Check(IDataElementSet, IOptionSpecSet, Boolean)
  fullName: BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Options.IOptionSpecSet, System.Boolean)
  spec.csharp:
  - uid: BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
    name: Check
    nameWithType: AppArgumentHelper.Check
    fullName: BindOpen.Application.Arguments.AppArgumentHelper.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Options.IOptionSpecSet
    name: IOptionSpecSet
    nameWithType: IOptionSpecSet
    fullName: BindOpen.Application.Options.IOptionSpecSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Application.Arguments.AppArgumentHelper.Check(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Options.IOptionSpecSet,System.Boolean)
    name: Check
    nameWithType: AppArgumentHelper.Check
    fullName: BindOpen.Application.Arguments.AppArgumentHelper.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Options.IOptionSpecSet
    name: IOptionSpecSet
    nameWithType: IOptionSpecSet
    fullName: BindOpen.Application.Options.IOptionSpecSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Arguments.AppArgumentHelper
  commentId: T:BindOpen.Application.Arguments.AppArgumentHelper
  parent: BindOpen.Application.Arguments
  name: AppArgumentHelper
  nameWithType: AppArgumentHelper
  fullName: BindOpen.Application.Arguments.AppArgumentHelper
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  isExternal: true
  name: Using<T>(T, Action<T>)
  nameWithType: ObjectHelper.Using<T>(T, Action<T>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>(T, System.Action<T>)
  nameWithType.vb: ObjectHelper.Using(Of T)(T, Action(Of T))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)(T, System.Action(Of T))
  name.vb: Using(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using<T>
    nameWithType: ObjectHelper.Using<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using(Of T)
    nameWithType: ObjectHelper.Using(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(BindOpen.Data.Elements.IDataElementSet,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(BindOpen.Data.Elements.IDataElementSet,System.Object)
  isExternal: true
  name: UpdateFromObject<T>(IDataElementSet, Object)
  nameWithType: ObjectHelper.UpdateFromObject<T>(IDataElementSet, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject<T>(BindOpen.Data.Elements.IDataElementSet, System.Object)
  nameWithType.vb: ObjectHelper.UpdateFromObject(Of T)(IDataElementSet, Object)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject(Of T)(BindOpen.Data.Elements.IDataElementSet, System.Object)
  name.vb: UpdateFromObject(Of T)(IDataElementSet, Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(BindOpen.Data.Elements.IDataElementSet,System.Object)
    name: UpdateFromObject<T>
    nameWithType: ObjectHelper.UpdateFromObject<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject``1(BindOpen.Data.Elements.IDataElementSet,System.Object)
    name: UpdateFromObject(Of T)
    nameWithType: ObjectHelper.UpdateFromObject(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromObject(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Arguments
  commentId: N:BindOpen.Application.Arguments
  name: BindOpen.Application.Arguments
  nameWithType: BindOpen.Application.Arguments
  fullName: BindOpen.Application.Arguments
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.Data.Elements.DataElementSet.Elements*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.Elements
  name: Elements
  nameWithType: DataElementSet.Elements
  fullName: BindOpen.Data.Elements.DataElementSet.Elements
- uid: BindOpen.Data.Elements.IDataElementSet.Elements
  commentId: P:BindOpen.Data.Elements.IDataElementSet.Elements
  parent: BindOpen.Data.Elements.IDataElementSet
  name: Elements
  nameWithType: IDataElementSet.Elements
  fullName: BindOpen.Data.Elements.IDataElementSet.Elements
- uid: System.Collections.Generic.List{BindOpen.Data.Elements.DataElement}
  commentId: T:System.Collections.Generic.List{BindOpen.Data.Elements.DataElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DataElement>
  nameWithType: List<DataElement>
  fullName: System.Collections.Generic.List<BindOpen.Data.Elements.DataElement>
  nameWithType.vb: List(Of DataElement)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Data.Elements.DataElement)
  name.vb: List(Of DataElement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.Data.Elements.DataElementSet.ElementsSpecified*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.ElementsSpecified
  name: ElementsSpecified
  nameWithType: DataElementSet.ElementsSpecified
  fullName: BindOpen.Data.Elements.DataElementSet.ElementsSpecified
- uid: BindOpen.Data.Elements.IDataElementSet.ElementsSpecified
  commentId: P:BindOpen.Data.Elements.IDataElementSet.ElementsSpecified
  parent: BindOpen.Data.Elements.IDataElementSet
  name: ElementsSpecified
  nameWithType: IDataElementSet.ElementsSpecified
  fullName: BindOpen.Data.Elements.IDataElementSet.ElementsSpecified
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Elements.DataElementSet.Item*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.Item
  name: Item
  nameWithType: DataElementSet.Item
  fullName: BindOpen.Data.Elements.DataElementSet.Item
- uid: BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}.Item(System.String)
  commentId: P:BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}.Item(System.String)
  parent: BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.IDataItemSet`1.Item(System.String)
  name: Item[String]
  nameWithType: IDataItemSet<DataElement>.Item[String]
  fullName: BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Elements.DataElement>.Item[System.String]
  nameWithType.vb: IDataItemSet(Of DataElement).Item(String)
  fullName.vb: BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Elements.DataElement).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItemSet`1.Item(System.String)
    name: Item
    nameWithType: IDataItemSet<DataElement>.Item
    fullName: BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Elements.DataElement>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItemSet`1.Item(System.String)
    name: Item
    nameWithType: IDataItemSet(Of DataElement).Item
    fullName: BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Elements.DataElement).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Elements.DataElement
  commentId: T:BindOpen.Data.Elements.DataElement
  parent: BindOpen.Data.Elements
  name: DataElement
  nameWithType: DataElement
  fullName: BindOpen.Data.Elements.DataElement
- uid: BindOpen.Data.Items.IDataItemSet`1.Item(System.String)
  commentId: P:BindOpen.Data.Items.IDataItemSet`1.Item(System.String)
  isExternal: true
  name: Item[String]
  nameWithType: IDataItemSet<T>.Item[String]
  fullName: BindOpen.Data.Items.IDataItemSet<T>.Item[System.String]
  nameWithType.vb: IDataItemSet(Of T).Item(String)
  fullName.vb: BindOpen.Data.Items.IDataItemSet(Of T).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItemSet`1.Item(System.String)
    name: Item
    nameWithType: IDataItemSet<T>.Item
    fullName: BindOpen.Data.Items.IDataItemSet<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItemSet`1.Item(System.String)
    name: Item
    nameWithType: IDataItemSet(Of T).Item
    fullName: BindOpen.Data.Items.IDataItemSet(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.op_Implicit*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.op_Implicit
  name: Implicit
  nameWithType: DataElementSet.Implicit
  fullName: BindOpen.Data.Elements.DataElementSet.Implicit
  nameWithType.vb: DataElementSet.Widening
  fullName.vb: BindOpen.Data.Elements.DataElementSet.Widening
  name.vb: Widening
- uid: BindOpen.Data.Elements.DataElement[]
  isExternal: true
  name: DataElement[]
  nameWithType: DataElement[]
  fullName: BindOpen.Data.Elements.DataElement[]
  nameWithType.vb: DataElement()
  fullName.vb: BindOpen.Data.Elements.DataElement()
  name.vb: DataElement()
  spec.csharp:
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Elements.DataElement
    name: DataElement
    nameWithType: DataElement
    fullName: BindOpen.Data.Elements.DataElement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Elements.DataElementSet
  commentId: T:BindOpen.Data.Elements.DataElementSet
  parent: BindOpen.Data.Elements
  name: DataElementSet
  nameWithType: DataElementSet
  fullName: BindOpen.Data.Elements.DataElementSet
- uid: BindOpen.Data.Elements.DataElementSet.#ctor*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.#ctor
  name: DataElementSet
  nameWithType: DataElementSet.DataElementSet
  fullName: BindOpen.Data.Elements.DataElementSet.DataElementSet
- uid: BindOpen.Data.Elements.IDataElement[]
  isExternal: true
  name: IDataElement[]
  nameWithType: IDataElement[]
  fullName: BindOpen.Data.Elements.IDataElement[]
  nameWithType.vb: IDataElement()
  fullName.vb: BindOpen.Data.Elements.IDataElement()
  name.vb: IDataElement()
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Elements.DataElementSet.AddElement*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.AddElement
  name: AddElement
  nameWithType: DataElementSet.AddElement
  fullName: BindOpen.Data.Elements.DataElementSet.AddElement
- uid: BindOpen.Data.Elements.IDataElementSet.AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
  parent: BindOpen.Data.Elements.IDataElementSet
  name: AddElement(IDataElement, IDataElementSet)
  nameWithType: IDataElementSet.AddElement(IDataElement, IDataElementSet)
  fullName: BindOpen.Data.Elements.IDataElementSet.AddElement(BindOpen.Data.Elements.IDataElement, BindOpen.Data.Elements.IDataElementSet)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
    name: AddElement
    nameWithType: IDataElementSet.AddElement
    fullName: BindOpen.Data.Elements.IDataElementSet.AddElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.AddElement(BindOpen.Data.Elements.IDataElement,BindOpen.Data.Elements.IDataElementSet)
    name: AddElement
    nameWithType: IDataElementSet.AddElement
    fullName: BindOpen.Data.Elements.IDataElementSet.AddElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.IDataElement
  commentId: T:BindOpen.Data.Elements.IDataElement
  parent: BindOpen.Data.Elements
  name: IDataElement
  nameWithType: IDataElement
  fullName: BindOpen.Data.Elements.IDataElement
- uid: BindOpen.Data.Elements.DataElementSet.RemoveElement*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.RemoveElement
  name: RemoveElement
  nameWithType: DataElementSet.RemoveElement
  fullName: BindOpen.Data.Elements.DataElementSet.RemoveElement
- uid: BindOpen.Data.Elements.IDataElementSet.RemoveElement(System.String)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.RemoveElement(System.String)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: RemoveElement(String)
  nameWithType: IDataElementSet.RemoveElement(String)
  fullName: BindOpen.Data.Elements.IDataElementSet.RemoveElement(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.RemoveElement(System.String)
    name: RemoveElement
    nameWithType: IDataElementSet.RemoveElement
    fullName: BindOpen.Data.Elements.IDataElementSet.RemoveElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.RemoveElement(System.String)
    name: RemoveElement
    nameWithType: IDataElementSet.RemoveElement
    fullName: BindOpen.Data.Elements.IDataElementSet.RemoveElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.AddElementItem*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.AddElementItem
  name: AddElementItem
  nameWithType: DataElementSet.AddElementItem
  fullName: BindOpen.Data.Elements.DataElementSet.AddElementItem
- uid: BindOpen.Data.Elements.IDataElementSet.AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: AddElementItem(String, Object, IBdoLog)
  nameWithType: IDataElementSet.AddElementItem(String, Object, IBdoLog)
  fullName: BindOpen.Data.Elements.IDataElementSet.AddElementItem(System.String, System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: AddElementItem
    nameWithType: IDataElementSet.AddElementItem
    fullName: BindOpen.Data.Elements.IDataElementSet.AddElementItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.AddElementItem(System.String,System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: AddElementItem
    nameWithType: IDataElementSet.AddElementItem
    fullName: BindOpen.Data.Elements.IDataElementSet.AddElementItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.Data.Elements.DataElementSet.AddElementItems*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.AddElementItems
  name: AddElementItems
  nameWithType: DataElementSet.AddElementItems
  fullName: BindOpen.Data.Elements.DataElementSet.AddElementItems
- uid: BindOpen.Data.Elements.IDataElementSet.AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: AddElementItems(String, Object[], IBdoLog)
  nameWithType: IDataElementSet.AddElementItems(String, Object[], IBdoLog)
  fullName: BindOpen.Data.Elements.IDataElementSet.AddElementItems(System.String, System.Object[], BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: IDataElementSet.AddElementItems(String, Object(), IBdoLog)
  fullName.vb: BindOpen.Data.Elements.IDataElementSet.AddElementItems(System.String, System.Object(), BindOpen.System.Diagnostics.IBdoLog)
  name.vb: AddElementItems(String, Object(), IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
    name: AddElementItems
    nameWithType: IDataElementSet.AddElementItems
    fullName: BindOpen.Data.Elements.IDataElementSet.AddElementItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.AddElementItems(System.String,System.Object[],BindOpen.System.Diagnostics.IBdoLog)
    name: AddElementItems
    nameWithType: IDataElementSet.AddElementItems
    fullName: BindOpen.Data.Elements.IDataElementSet.AddElementItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{System.Object}
  commentId: T:System.Collections.Generic.List{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Object>
  nameWithType: List<Object>
  fullName: System.Collections.Generic.List<System.Object>
  nameWithType.vb: List(Of Object)
  fullName.vb: System.Collections.Generic.List(Of System.Object)
  name.vb: List(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.HasItem*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.HasItem
  name: HasItem
  nameWithType: DataElementSet.HasItem
  fullName: BindOpen.Data.Elements.DataElementSet.HasItem
- uid: BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}.HasItem(System.String)
  commentId: M:BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}.HasItem(System.String)
  parent: BindOpen.Data.Items.IDataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.IDataItemSet`1.HasItem(System.String)
  name: HasItem(String)
  nameWithType: IDataItemSet<DataElement>.HasItem(String)
  fullName: BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Elements.DataElement>.HasItem(System.String)
  nameWithType.vb: IDataItemSet(Of DataElement).HasItem(String)
  fullName.vb: BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Elements.DataElement).HasItem(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItemSet`1.HasItem(System.String)
    name: HasItem
    nameWithType: IDataItemSet<DataElement>.HasItem
    fullName: BindOpen.Data.Items.IDataItemSet<BindOpen.Data.Elements.DataElement>.HasItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItemSet`1.HasItem(System.String)
    name: HasItem
    nameWithType: IDataItemSet(Of DataElement).HasItem
    fullName: BindOpen.Data.Items.IDataItemSet(Of BindOpen.Data.Elements.DataElement).HasItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItemSet`1.HasItem(System.String)
  commentId: M:BindOpen.Data.Items.IDataItemSet`1.HasItem(System.String)
  isExternal: true
  name: HasItem(String)
  nameWithType: IDataItemSet<T>.HasItem(String)
  fullName: BindOpen.Data.Items.IDataItemSet<T>.HasItem(System.String)
  nameWithType.vb: IDataItemSet(Of T).HasItem(String)
  fullName.vb: BindOpen.Data.Items.IDataItemSet(Of T).HasItem(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItemSet`1.HasItem(System.String)
    name: HasItem
    nameWithType: IDataItemSet<T>.HasItem
    fullName: BindOpen.Data.Items.IDataItemSet<T>.HasItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItemSet`1.HasItem(System.String)
    name: HasItem
    nameWithType: IDataItemSet(Of T).HasItem
    fullName: BindOpen.Data.Items.IDataItemSet(Of T).HasItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.GetCommonItemKeys*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetCommonItemKeys
  name: GetCommonItemKeys
  nameWithType: DataElementSet.GetCommonItemKeys
  fullName: BindOpen.Data.Elements.DataElementSet.GetCommonItemKeys
- uid: BindOpen.Data.Elements.IDataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  parent: BindOpen.Data.Elements.IDataElementSet
  name: GetCommonItemKeys(IDataElementSet)
  nameWithType: IDataElementSet.GetCommonItemKeys(IDataElementSet)
  fullName: BindOpen.Data.Elements.IDataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
    name: GetCommonItemKeys
    nameWithType: IDataElementSet.GetCommonItemKeys
    fullName: BindOpen.Data.Elements.IDataElementSet.GetCommonItemKeys
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetCommonItemKeys(BindOpen.Data.Elements.IDataElementSet)
    name: GetCommonItemKeys
    nameWithType: IDataElementSet.GetCommonItemKeys
    fullName: BindOpen.Data.Elements.IDataElementSet.GetCommonItemKeys
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.GetElementsWithGroupId*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetElementsWithGroupId
  name: GetElementsWithGroupId
  nameWithType: DataElementSet.GetElementsWithGroupId
  fullName: BindOpen.Data.Elements.DataElementSet.GetElementsWithGroupId
- uid: BindOpen.Data.Elements.IDataElementSet.GetElementsWithGroupId(System.String)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetElementsWithGroupId(System.String)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: GetElementsWithGroupId(String)
  nameWithType: IDataElementSet.GetElementsWithGroupId(String)
  fullName: BindOpen.Data.Elements.IDataElementSet.GetElementsWithGroupId(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetElementsWithGroupId(System.String)
    name: GetElementsWithGroupId
    nameWithType: IDataElementSet.GetElementsWithGroupId
    fullName: BindOpen.Data.Elements.IDataElementSet.GetElementsWithGroupId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetElementsWithGroupId(System.String)
    name: GetElementsWithGroupId
    nameWithType: IDataElementSet.GetElementsWithGroupId
    fullName: BindOpen.Data.Elements.IDataElementSet.GetElementsWithGroupId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{BindOpen.Data.Elements.IDataElement}
  commentId: T:System.Collections.Generic.List{BindOpen.Data.Elements.IDataElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IDataElement>
  nameWithType: List<IDataElement>
  fullName: System.Collections.Generic.List<BindOpen.Data.Elements.IDataElement>
  nameWithType.vb: List(Of IDataElement)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Data.Elements.IDataElement)
  name.vb: List(Of IDataElement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.GetElement*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetElement
  name: GetElement
  nameWithType: DataElementSet.GetElement
  fullName: BindOpen.Data.Elements.DataElementSet.GetElement
- uid: BindOpen.Data.Elements.IDataElementSet.GetElement(System.String,System.String)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetElement(System.String,System.String)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: GetElement(String, String)
  nameWithType: IDataElementSet.GetElement(String, String)
  fullName: BindOpen.Data.Elements.IDataElementSet.GetElement(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetElement(System.String,System.String)
    name: GetElement
    nameWithType: IDataElementSet.GetElement
    fullName: BindOpen.Data.Elements.IDataElementSet.GetElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetElement(System.String,System.String)
    name: GetElement
    nameWithType: IDataElementSet.GetElement
    fullName: BindOpen.Data.Elements.IDataElementSet.GetElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.GetGroupIds*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetGroupIds
  name: GetGroupIds
  nameWithType: DataElementSet.GetGroupIds
  fullName: BindOpen.Data.Elements.DataElementSet.GetGroupIds
- uid: BindOpen.Data.Elements.IDataElementSet.GetGroupIds
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetGroupIds
  parent: BindOpen.Data.Elements.IDataElementSet
  name: GetGroupIds()
  nameWithType: IDataElementSet.GetGroupIds()
  fullName: BindOpen.Data.Elements.IDataElementSet.GetGroupIds()
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetGroupIds
    name: GetGroupIds
    nameWithType: IDataElementSet.GetGroupIds
    fullName: BindOpen.Data.Elements.IDataElementSet.GetGroupIds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetGroupIds
    name: GetGroupIds
    nameWithType: IDataElementSet.GetGroupIds
    fullName: BindOpen.Data.Elements.IDataElementSet.GetGroupIds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.GetElementObject*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetElementObject
  name: GetElementObject
  nameWithType: DataElementSet.GetElementObject
  fullName: BindOpen.Data.Elements.DataElementSet.GetElementObject
- uid: BindOpen.Data.Elements.IDataElementSet.GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: GetElementObject(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IDataElementSet.GetElementObject(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Elements.IDataElementSet.GetElementObject(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: GetElementObject
    nameWithType: IDataElementSet.GetElementObject
    fullName: BindOpen.Data.Elements.IDataElementSet.GetElementObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetElementObject(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: GetElementObject
    nameWithType: IDataElementSet.GetElementObject
    fullName: BindOpen.Data.Elements.IDataElementSet.GetElementObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.IBdoScope
  commentId: T:BindOpen.Application.Scopes.IBdoScope
  parent: BindOpen.Application.Scopes
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  commentId: T:BindOpen.System.Scripting.IBdoScriptVariableSet
  parent: BindOpen.System.Scripting
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: BindOpen.System.Scripting
  commentId: N:BindOpen.System.Scripting
  name: BindOpen.System.Scripting
  nameWithType: BindOpen.System.Scripting
  fullName: BindOpen.System.Scripting
- uid: BindOpen.Data.Elements.IDataElementSet.GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: GetElementObject<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IDataElementSet.GetElementObject<T>(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Elements.IDataElementSet.GetElementObject<T>(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: IDataElementSet.GetElementObject(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName.vb: BindOpen.Data.Elements.IDataElementSet.GetElementObject(Of T)(System.String, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: GetElementObject(Of T)(String, IBdoScope, IBdoScriptVariableSet, IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: GetElementObject<T>
    nameWithType: IDataElementSet.GetElementObject<T>
    fullName: BindOpen.Data.Elements.IDataElementSet.GetElementObject<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetElementObject``1(System.String,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: GetElementObject(Of T)
    nameWithType: IDataElementSet.GetElementObject(Of T)
    fullName: BindOpen.Data.Elements.IDataElementSet.GetElementObject(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Data.Elements.DataElementSet.GetAvailableIndexes*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetAvailableIndexes
  name: GetAvailableIndexes
  nameWithType: DataElementSet.GetAvailableIndexes
  fullName: BindOpen.Data.Elements.DataElementSet.GetAvailableIndexes
- uid: BindOpen.Data.Elements.IDataElementSet.GetAvailableIndexes(System.Int32)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetAvailableIndexes(System.Int32)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: GetAvailableIndexes(Int32)
  nameWithType: IDataElementSet.GetAvailableIndexes(Int32)
  fullName: BindOpen.Data.Elements.IDataElementSet.GetAvailableIndexes(System.Int32)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetAvailableIndexes(System.Int32)
    name: GetAvailableIndexes
    nameWithType: IDataElementSet.GetAvailableIndexes
    fullName: BindOpen.Data.Elements.IDataElementSet.GetAvailableIndexes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetAvailableIndexes(System.Int32)
    name: GetAvailableIndexes
    nameWithType: IDataElementSet.GetAvailableIndexes
    fullName: BindOpen.Data.Elements.IDataElementSet.GetAvailableIndexes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.GetTitleLabel*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetTitleLabel
  name: GetTitleLabel
  nameWithType: DataElementSet.GetTitleLabel
  fullName: BindOpen.Data.Elements.DataElementSet.GetTitleLabel
- uid: BindOpen.Data.Elements.IDataElementSet.GetTitleLabel(System.String,System.String,System.String,System.String[])
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetTitleLabel(System.String,System.String,System.String,System.String[])
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: GetTitleLabel(String, String, String, String[])
  nameWithType: IDataElementSet.GetTitleLabel(String, String, String, String[])
  fullName: BindOpen.Data.Elements.IDataElementSet.GetTitleLabel(System.String, System.String, System.String, System.String[])
  nameWithType.vb: IDataElementSet.GetTitleLabel(String, String, String, String())
  fullName.vb: BindOpen.Data.Elements.IDataElementSet.GetTitleLabel(System.String, System.String, System.String, System.String())
  name.vb: GetTitleLabel(String, String, String, String())
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetTitleLabel(System.String,System.String,System.String,System.String[])
    name: GetTitleLabel
    nameWithType: IDataElementSet.GetTitleLabel
    fullName: BindOpen.Data.Elements.IDataElementSet.GetTitleLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetTitleLabel(System.String,System.String,System.String,System.String[])
    name: GetTitleLabel
    nameWithType: IDataElementSet.GetTitleLabel
    fullName: BindOpen.Data.Elements.IDataElementSet.GetTitleLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel
  name: GetDescriptionLabel
  nameWithType: DataElementSet.GetDescriptionLabel
  fullName: BindOpen.Data.Elements.DataElementSet.GetDescriptionLabel
- uid: BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel(System.String,System.String,System.String,System.String[])
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel(System.String,System.String,System.String,System.String[])
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: GetDescriptionLabel(String, String, String, String[])
  nameWithType: IDataElementSet.GetDescriptionLabel(String, String, String, String[])
  fullName: BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel(System.String, System.String, System.String, System.String[])
  nameWithType.vb: IDataElementSet.GetDescriptionLabel(String, String, String, String())
  fullName.vb: BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel(System.String, System.String, System.String, System.String())
  name.vb: GetDescriptionLabel(String, String, String, String())
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel(System.String,System.String,System.String,System.String[])
    name: GetDescriptionLabel
    nameWithType: IDataElementSet.GetDescriptionLabel
    fullName: BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel(System.String,System.String,System.String,System.String[])
    name: GetDescriptionLabel
    nameWithType: IDataElementSet.GetDescriptionLabel
    fullName: BindOpen.Data.Elements.IDataElementSet.GetDescriptionLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.GetTextNode*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.GetTextNode
  name: GetTextNode
  nameWithType: DataElementSet.GetTextNode
  fullName: BindOpen.Data.Elements.DataElementSet.GetTextNode
- uid: BindOpen.Data.Elements.IDataElementSet.GetTextNode(System.String,System.String)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.GetTextNode(System.String,System.String)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: GetTextNode(String, String)
  nameWithType: IDataElementSet.GetTextNode(String, String)
  fullName: BindOpen.Data.Elements.IDataElementSet.GetTextNode(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetTextNode(System.String,System.String)
    name: GetTextNode
    nameWithType: IDataElementSet.GetTextNode
    fullName: BindOpen.Data.Elements.IDataElementSet.GetTextNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.GetTextNode(System.String,System.String)
    name: GetTextNode
    nameWithType: IDataElementSet.GetTextNode
    fullName: BindOpen.Data.Elements.IDataElementSet.GetTextNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.Sort*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.Sort
  name: Sort
  nameWithType: DataElementSet.Sort
  fullName: BindOpen.Data.Elements.DataElementSet.Sort
- uid: BindOpen.Data.Elements.IDataElementSet.Sort(System.String)
  commentId: M:BindOpen.Data.Elements.IDataElementSet.Sort(System.String)
  parent: BindOpen.Data.Elements.IDataElementSet
  isExternal: true
  name: Sort(String)
  nameWithType: IDataElementSet.Sort(String)
  fullName: BindOpen.Data.Elements.IDataElementSet.Sort(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Elements.IDataElementSet.Sort(System.String)
    name: Sort
    nameWithType: IDataElementSet.Sort
    fullName: BindOpen.Data.Elements.IDataElementSet.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Elements.IDataElementSet.Sort(System.String)
    name: Sort
    nameWithType: IDataElementSet.Sort
    fullName: BindOpen.Data.Elements.IDataElementSet.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Clone
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Clone
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Clone
  name: Clone()
  nameWithType: DataItemSet<DataElement>.Clone()
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Clone()
  nameWithType.vb: DataItemSet(Of DataElement).Clone()
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Clone()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Clone
    name: Clone
    nameWithType: DataItemSet<DataElement>.Clone
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Clone
    name: Clone
    nameWithType: DataItemSet(Of DataElement).Clone
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.Clone*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.Clone
  name: Clone
  nameWithType: DataElementSet.Clone
  fullName: BindOpen.Data.Elements.DataElementSet.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.Clone
  commentId: M:BindOpen.Data.Items.DataItemSet`1.Clone
  name: Clone()
  nameWithType: DataItemSet<T>.Clone()
  fullName: BindOpen.Data.Items.DataItemSet<T>.Clone()
  nameWithType.vb: DataItemSet(Of T).Clone()
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Clone()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Clone
    name: Clone
    nameWithType: DataItemSet<T>.Clone
    fullName: BindOpen.Data.Items.DataItemSet<T>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Clone
    name: Clone
    nameWithType: DataItemSet(Of T).Clone
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Update``1({T1},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T1>(T1, String[], UpdateModes[])
  nameWithType: DataItemSet<DataElement>.Update<T1>(T1, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Update<T1>(T1, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItemSet(Of DataElement).Update(Of T1)(T1, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Update(Of T1)(T1, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T1)(T1, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T1>
    nameWithType: DataItemSet<DataElement>.Update<T1>
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Update<T1>
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T1)
    nameWithType: DataItemSet(Of DataElement).Update(Of T1)
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Update(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.Update*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.Update
  name: Update
  nameWithType: DataElementSet.Update
  fullName: BindOpen.Data.Elements.DataElementSet.Update
- uid: BindOpen.Data.Items.IDataItem.Update``1({T1},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T1>(T1, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T1>(T1, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T1>(T1, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T1)(T1, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T1)(T1, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T1)(T1, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T1>
    nameWithType: IDataItem.Update<T1>
    fullName: BindOpen.Data.Items.IDataItem.Update<T1>
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T1)
    nameWithType: IDataItem.Update(Of T1)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: BindOpen.Data.Common.UpdateModes[]
  isExternal: true
  name: UpdateModes[]
  nameWithType: UpdateModes[]
  fullName: BindOpen.Data.Common.UpdateModes[]
  nameWithType.vb: UpdateModes()
  fullName.vb: BindOpen.Data.Common.UpdateModes()
  name.vb: UpdateModes()
  spec.csharp:
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Data.Items.DataItemSet`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItemSet`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T1>(T1, String[], UpdateModes[])
  nameWithType: DataItemSet<T>.Update<T1>(T1, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItemSet<T>.Update<T1>(T1, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItemSet(Of T).Update(Of T1)(T1, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Update(Of T1)(T1, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T1)(T1, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T1>
    nameWithType: DataItemSet<T>.Update<T1>
    fullName: BindOpen.Data.Items.DataItemSet<T>.Update<T1>
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T1)
    nameWithType: DataItemSet(Of T).Update(Of T1)
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Update(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Check``1(System.Boolean,{T1},System.String[])
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Check``1(System.Boolean,``0,System.String[])
  name: Check<T1>(Boolean, T1, String[])
  nameWithType: DataItemSet<DataElement>.Check<T1>(Boolean, T1, String[])
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Check<T1>(System.Boolean, T1, System.String[])
  nameWithType.vb: DataItemSet(Of DataElement).Check(Of T1)(Boolean, T1, String())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Check(Of T1)(System.Boolean, T1, System.String())
  name.vb: Check(Of T1)(Boolean, T1, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Check``1(System.Boolean,``0,System.String[])
    name: Check<T1>
    nameWithType: DataItemSet<DataElement>.Check<T1>
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Check<T1>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T1)
    nameWithType: DataItemSet(Of DataElement).Check(Of T1)
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Check(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.Check*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.Check
  name: Check
  nameWithType: DataElementSet.Check
  fullName: BindOpen.Data.Elements.DataElementSet.Check
- uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,{T1},System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T1>(Boolean, T1, String[])
  nameWithType: IDataItem.Check<T1>(Boolean, T1, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check<T1>(System.Boolean, T1, System.String[])
  nameWithType.vb: IDataItem.Check(Of T1)(Boolean, T1, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(Of T1)(System.Boolean, T1, System.String())
  name.vb: Check(Of T1)(Boolean, T1, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T1>
    nameWithType: IDataItem.Check<T1>
    fullName: BindOpen.Data.Items.IDataItem.Check<T1>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T1)
    nameWithType: IDataItem.Check(Of T1)
    fullName: BindOpen.Data.Items.IDataItem.Check(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.DataItemSet`1.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T1>(Boolean, T1, String[])
  nameWithType: DataItemSet<T>.Check<T1>(Boolean, T1, String[])
  fullName: BindOpen.Data.Items.DataItemSet<T>.Check<T1>(System.Boolean, T1, System.String[])
  nameWithType.vb: DataItemSet(Of T).Check(Of T1)(Boolean, T1, String())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Check(Of T1)(System.Boolean, T1, System.String())
  name.vb: Check(Of T1)(Boolean, T1, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Check``1(System.Boolean,``0,System.String[])
    name: Check<T1>
    nameWithType: DataItemSet<T>.Check<T1>
    fullName: BindOpen.Data.Items.DataItemSet<T>.Check<T1>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T1)
    nameWithType: DataItemSet(Of T).Check(Of T1)
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Check(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: IDataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: IDataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: IDataItem.Check<T>
    fullName: BindOpen.Data.Items.IDataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: IDataItem.Check(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Repair``1({T1},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItemSet{BindOpen.Data.Elements.DataElement}
  definition: BindOpen.Data.Items.DataItemSet`1.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T1>(T1, String[], UpdateModes[])
  nameWithType: DataItemSet<DataElement>.Repair<T1>(T1, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Repair<T1>(T1, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItemSet(Of DataElement).Repair(Of T1)(T1, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Repair(Of T1)(T1, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T1)(T1, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T1>
    nameWithType: DataItemSet<DataElement>.Repair<T1>
    fullName: BindOpen.Data.Items.DataItemSet<BindOpen.Data.Elements.DataElement>.Repair<T1>
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T1)
    nameWithType: DataItemSet(Of DataElement).Repair(Of T1)
    fullName: BindOpen.Data.Items.DataItemSet(Of BindOpen.Data.Elements.DataElement).Repair(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Elements.DataElementSet.Repair*
  commentId: Overload:BindOpen.Data.Elements.DataElementSet.Repair
  name: Repair
  nameWithType: DataElementSet.Repair
  fullName: BindOpen.Data.Elements.DataElementSet.Repair
- uid: BindOpen.Data.Items.IDataItem.Repair``1({T1},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T1>(T1, String[], UpdateModes[])
  nameWithType: IDataItem.Repair<T1>(T1, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair<T1>(T1, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(Of T1)(T1, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(Of T1)(T1, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T1)(T1, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T1>
    nameWithType: IDataItem.Repair<T1>
    fullName: BindOpen.Data.Items.IDataItem.Repair<T1>
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T1)
    nameWithType: IDataItem.Repair(Of T1)
    fullName: BindOpen.Data.Items.IDataItem.Repair(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItemSet`1.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItemSet`1.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T1>(T1, String[], UpdateModes[])
  nameWithType: DataItemSet<T>.Repair<T1>(T1, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItemSet<T>.Repair<T1>(T1, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItemSet(Of T).Repair(Of T1)(T1, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItemSet(Of T).Repair(Of T1)(T1, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T1)(T1, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItemSet`1.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T1>
    nameWithType: DataItemSet<T>.Repair<T1>
    fullName: BindOpen.Data.Items.DataItemSet<T>.Repair<T1>
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItemSet`1.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T1)
    nameWithType: DataItemSet(Of T).Repair(Of T1)
    fullName: BindOpen.Data.Items.DataItemSet(Of T).Repair(Of T1)
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: IDataItem.Repair<T>
    fullName: BindOpen.Data.Items.IDataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: IDataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
