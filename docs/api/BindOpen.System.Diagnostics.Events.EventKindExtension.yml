### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Diagnostics.Events.EventKindExtension
  commentId: T:BindOpen.System.Diagnostics.Events.EventKindExtension
  id: EventKindExtension
  parent: BindOpen.System.Diagnostics.Events
  children:
  - BindOpen.System.Diagnostics.Events.EventKindExtension.IsGreaterThan(BindOpen.System.Diagnostics.Events.EventKinds,BindOpen.System.Diagnostics.Events.EventKinds)
  - BindOpen.System.Diagnostics.Events.EventKindExtension.Max(BindOpen.System.Diagnostics.Events.EventKinds,BindOpen.System.Diagnostics.Events.EventKinds)
  - BindOpen.System.Diagnostics.Events.EventKindExtension.Max(System.Collections.Generic.List{BindOpen.System.Diagnostics.Events.EventKinds})
  langs:
  - csharp
  - vb
  name: EventKindExtension
  nameWithType: EventKindExtension
  fullName: BindOpen.System.Diagnostics.Events.EventKindExtension
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Events/BdoEventKind.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: EventKindExtension
    path: ../src/BindOpen.Core/System/Diagnostics/Events/BdoEventKind.cs
    startLine: 66
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Events
  summary: "\nThis class represents a event kind extension.\n"
  example: []
  syntax:
    content: public static class EventKindExtension
    content.vb: Public Module EventKindExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.System.Diagnostics.Events.EventKindExtension.Max(System.Collections.Generic.List{BindOpen.System.Diagnostics.Events.EventKinds})
  commentId: M:BindOpen.System.Diagnostics.Events.EventKindExtension.Max(System.Collections.Generic.List{BindOpen.System.Diagnostics.Events.EventKinds})
  id: Max(System.Collections.Generic.List{BindOpen.System.Diagnostics.Events.EventKinds})
  isExtensionMethod: true
  parent: BindOpen.System.Diagnostics.Events.EventKindExtension
  langs:
  - csharp
  - vb
  name: Max(List<EventKinds>)
  nameWithType: EventKindExtension.Max(List<EventKinds>)
  fullName: BindOpen.System.Diagnostics.Events.EventKindExtension.Max(System.Collections.Generic.List<BindOpen.System.Diagnostics.Events.EventKinds>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Events/BdoEventKind.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Max
    path: ../src/BindOpen.Core/System/Diagnostics/Events/BdoEventKind.cs
    startLine: 76
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Events
  summary: "\nGets the maximum kind of events of the specified event kinds.\n"
  example: []
  syntax:
    content: public static EventKinds Max(this List<EventKinds> eventKinds)
    parameters:
    - id: eventKinds
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.Events.EventKinds}
      description: The event kinds to consider.
    return:
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: True if this instance has the specified events. False otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(eventKinds As List(Of EventKinds)) As EventKinds
  overload: BindOpen.System.Diagnostics.Events.EventKindExtension.Max*
  nameWithType.vb: EventKindExtension.Max(List(Of EventKinds))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.System.Diagnostics.Events.EventKindExtension.Max(System.Collections.Generic.List(Of BindOpen.System.Diagnostics.Events.EventKinds))
  name.vb: Max(List(Of EventKinds))
- uid: BindOpen.System.Diagnostics.Events.EventKindExtension.Max(BindOpen.System.Diagnostics.Events.EventKinds,BindOpen.System.Diagnostics.Events.EventKinds)
  commentId: M:BindOpen.System.Diagnostics.Events.EventKindExtension.Max(BindOpen.System.Diagnostics.Events.EventKinds,BindOpen.System.Diagnostics.Events.EventKinds)
  id: Max(BindOpen.System.Diagnostics.Events.EventKinds,BindOpen.System.Diagnostics.Events.EventKinds)
  isExtensionMethod: true
  parent: BindOpen.System.Diagnostics.Events.EventKindExtension
  langs:
  - csharp
  - vb
  name: Max(EventKinds, EventKinds)
  nameWithType: EventKindExtension.Max(EventKinds, EventKinds)
  fullName: BindOpen.System.Diagnostics.Events.EventKindExtension.Max(BindOpen.System.Diagnostics.Events.EventKinds, BindOpen.System.Diagnostics.Events.EventKinds)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Events/BdoEventKind.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Max
    path: ../src/BindOpen.Core/System/Diagnostics/Events/BdoEventKind.cs
    startLine: 92
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Events
  summary: "\nGets the maximum between the two specified event kinds.\n"
  example: []
  syntax:
    content: public static EventKinds Max(this EventKinds eventKind1, EventKinds eventKind2)
    parameters:
    - id: eventKind1
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: The first event kind to consider.
    - id: eventKind2
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: The second event kind to consider.
    return:
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: True if the first event kind is greater than the second one.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(eventKind1 As EventKinds, eventKind2 As EventKinds) As EventKinds
  overload: BindOpen.System.Diagnostics.Events.EventKindExtension.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.System.Diagnostics.Events.EventKindExtension.IsGreaterThan(BindOpen.System.Diagnostics.Events.EventKinds,BindOpen.System.Diagnostics.Events.EventKinds)
  commentId: M:BindOpen.System.Diagnostics.Events.EventKindExtension.IsGreaterThan(BindOpen.System.Diagnostics.Events.EventKinds,BindOpen.System.Diagnostics.Events.EventKinds)
  id: IsGreaterThan(BindOpen.System.Diagnostics.Events.EventKinds,BindOpen.System.Diagnostics.Events.EventKinds)
  isExtensionMethod: true
  parent: BindOpen.System.Diagnostics.Events.EventKindExtension
  langs:
  - csharp
  - vb
  name: IsGreaterThan(EventKinds, EventKinds)
  nameWithType: EventKindExtension.IsGreaterThan(EventKinds, EventKinds)
  fullName: BindOpen.System.Diagnostics.Events.EventKindExtension.IsGreaterThan(BindOpen.System.Diagnostics.Events.EventKinds, BindOpen.System.Diagnostics.Events.EventKinds)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/Events/BdoEventKind.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IsGreaterThan
    path: ../src/BindOpen.Core/System/Diagnostics/Events/BdoEventKind.cs
    startLine: 103
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics.Events
  summary: "\nIndicates whether the first event kind is greater than the second one.\n"
  example: []
  syntax:
    content: public static bool IsGreaterThan(this EventKinds eventKind1, EventKinds eventKind2)
    parameters:
    - id: eventKind1
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: The first event kind to consider.
    - id: eventKind2
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: The second event kind to consider.
    return:
      type: System.Boolean
      description: True if the first event kind is greater than the second one.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsGreaterThan(eventKind1 As EventKinds, eventKind2 As EventKinds) As Boolean
  overload: BindOpen.System.Diagnostics.Events.EventKindExtension.IsGreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BindOpen.System.Diagnostics.Events
  commentId: N:BindOpen.System.Diagnostics.Events
  name: BindOpen.System.Diagnostics.Events
  nameWithType: BindOpen.System.Diagnostics.Events
  fullName: BindOpen.System.Diagnostics.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.System.Diagnostics.Events.EventKindExtension.Max*
  commentId: Overload:BindOpen.System.Diagnostics.Events.EventKindExtension.Max
  name: Max
  nameWithType: EventKindExtension.Max
  fullName: BindOpen.System.Diagnostics.Events.EventKindExtension.Max
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.Events.EventKinds}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.Events.EventKinds}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EventKinds>
  nameWithType: List<EventKinds>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.Events.EventKinds>
  nameWithType.vb: List(Of EventKinds)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.Events.EventKinds)
  name.vb: List(Of EventKinds)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Events.EventKinds
  commentId: T:BindOpen.System.Diagnostics.Events.EventKinds
  parent: BindOpen.System.Diagnostics.Events
  name: EventKinds
  nameWithType: EventKinds
  fullName: BindOpen.System.Diagnostics.Events.EventKinds
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.System.Diagnostics.Events.EventKindExtension.IsGreaterThan*
  commentId: Overload:BindOpen.System.Diagnostics.Events.EventKindExtension.IsGreaterThan
  name: IsGreaterThan
  nameWithType: EventKindExtension.IsGreaterThan
  fullName: BindOpen.System.Diagnostics.Events.EventKindExtension.IsGreaterThan
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
shouldSkipMarkup: true
