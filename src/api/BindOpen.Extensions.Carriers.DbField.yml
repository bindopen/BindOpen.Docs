### YamlMime:ManagedReference
items:
- uid: BindOpen.Extensions.Carriers.DbField
  commentId: T:BindOpen.Extensions.Carriers.DbField
  id: DbField
  parent: BindOpen.Extensions.Carriers
  children:
  - BindOpen.Extensions.Carriers.DbField.#ctor
  - BindOpen.Extensions.Carriers.DbField.Alias
  - BindOpen.Extensions.Carriers.DbField.AsAll
  - BindOpen.Extensions.Carriers.DbField.AsKey
  - BindOpen.Extensions.Carriers.DbField.DataModule
  - BindOpen.Extensions.Carriers.DbField.DataTable
  - BindOpen.Extensions.Carriers.DbField.DataTableAlias
  - BindOpen.Extensions.Carriers.DbField.Expression
  - BindOpen.Extensions.Carriers.DbField.GetName
  - BindOpen.Extensions.Carriers.DbField.IsAll
  - BindOpen.Extensions.Carriers.DbField.IsForeignKey
  - BindOpen.Extensions.Carriers.DbField.IsKey
  - BindOpen.Extensions.Carriers.DbField.IsNameAsScript
  - BindOpen.Extensions.Carriers.DbField.op_Implicit(BindOpen.Extensions.Carriers.DbField)~System.String
  - BindOpen.Extensions.Carriers.DbField.Query
  - BindOpen.Extensions.Carriers.DbField.Schema
  - BindOpen.Extensions.Carriers.DbField.SetLiteralValue(System.String)
  - BindOpen.Extensions.Carriers.DbField.SetScriptValue(System.String)
  - BindOpen.Extensions.Carriers.DbField.SetValue(BindOpen.Data.Expression.DataExpression)
  - BindOpen.Extensions.Carriers.DbField.Size
  - BindOpen.Extensions.Carriers.DbField.ToString
  - BindOpen.Extensions.Carriers.DbField.ValueType
  - BindOpen.Extensions.Carriers.DbField.WithAlias(System.String)
  - BindOpen.Extensions.Carriers.DbField.WithDataModule(System.String)
  - BindOpen.Extensions.Carriers.DbField.WithDataTable(System.String)
  - BindOpen.Extensions.Carriers.DbField.WithNameAsScript
  - BindOpen.Extensions.Carriers.DbField.WithSchema(System.String)
  - BindOpen.Extensions.Carriers.DbField.WithSize(System.Int32)
  - BindOpen.Extensions.Carriers.DbField.WithValueType(BindOpen.Data.Common.DataValueType)
  langs:
  - csharp
  - vb
  name: DbField
  nameWithType: DbField
  fullName: BindOpen.Extensions.Carriers.DbField
  type: Class
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nThis class represents a database data field.\n"
  syntax:
    content: 'public class DbField : BdoCarrier, IDbQueryItem'
    content.vb: >-
      Public Class DbField
          Inherits BdoCarrier
          Implements IDbQueryItem
  inheritance:
  - System.Object
  implements:
  - BindOpen.Data.Queries.IDbQueryItem
  extensionMethods:
  - BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsLiteral(System.Object,BindOpen.Data.Common.DataValueType)
  - BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsScript(System.String)
  - BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Data.Queries.IDbQuery)
  - BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField)
  - BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsParameter(System.String)
  - BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsParameter(System.Byte)
  - BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Data.Elements.IDataElement)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.Extensions.Carriers.DbField.#ctor
  commentId: M:BindOpen.Extensions.Carriers.DbField.#ctor
  id: '#ctor'
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: DbField()
  nameWithType: DbField.DbField()
  fullName: BindOpen.Extensions.Carriers.DbField.DbField()
  type: Constructor
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nInstantiates a new instance of the DbField class.\n"
  syntax:
    content: public DbField()
    content.vb: Public Sub New
  overload: BindOpen.Extensions.Carriers.DbField.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.GetName
  commentId: M:BindOpen.Extensions.Carriers.DbField.GetName
  id: GetName
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: GetName()
  nameWithType: DbField.GetName()
  fullName: BindOpen.Extensions.Carriers.DbField.GetName()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nGet the name of this instance that is the alias if there is or the name otherwise.\n"
  syntax:
    content: public string GetName()
    return:
      type: System.String
    content.vb: Public Function GetName As String
  overload: BindOpen.Extensions.Carriers.DbField.GetName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.ToString
  commentId: M:BindOpen.Extensions.Carriers.DbField.ToString
  id: ToString
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DbField.ToString()
  fullName: BindOpen.Extensions.Carriers.DbField.ToString()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\n\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: BindOpen.Extensions.Carriers.DbField.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.Extensions.Carriers.DbField.SetValue(BindOpen.Data.Expression.DataExpression)
  commentId: M:BindOpen.Extensions.Carriers.DbField.SetValue(BindOpen.Data.Expression.DataExpression)
  id: SetValue(BindOpen.Data.Expression.DataExpression)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: SetValue(DataExpression)
  nameWithType: DbField.SetValue(DataExpression)
  fullName: BindOpen.Extensions.Carriers.DbField.SetValue(BindOpen.Data.Expression.DataExpression)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSets the expression value of this instance.\n"
  syntax:
    content: public void SetValue(DataExpression expression)
    parameters:
    - id: expression
      type: BindOpen.Data.Expression.DataExpression
      description: Data expression value of the instance.
    content.vb: Public Sub SetValue(expression As DataExpression)
  overload: BindOpen.Extensions.Carriers.DbField.SetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.SetLiteralValue(System.String)
  commentId: M:BindOpen.Extensions.Carriers.DbField.SetLiteralValue(System.String)
  id: SetLiteralValue(System.String)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: SetLiteralValue(String)
  nameWithType: DbField.SetLiteralValue(String)
  fullName: BindOpen.Extensions.Carriers.DbField.SetLiteralValue(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSets the literal value of this instance.\n"
  syntax:
    content: public void SetLiteralValue(string text)
    parameters:
    - id: text
      type: System.String
      description: The literal value.
    content.vb: Public Sub SetLiteralValue(text As String)
  overload: BindOpen.Extensions.Carriers.DbField.SetLiteralValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.SetScriptValue(System.String)
  commentId: M:BindOpen.Extensions.Carriers.DbField.SetScriptValue(System.String)
  id: SetScriptValue(System.String)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: SetScriptValue(String)
  nameWithType: DbField.SetScriptValue(String)
  fullName: BindOpen.Extensions.Carriers.DbField.SetScriptValue(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSets the script value of this instance.\n"
  syntax:
    content: public void SetScriptValue(string text)
    parameters:
    - id: text
      type: System.String
      description: The script value.
    content.vb: Public Sub SetScriptValue(text As String)
  overload: BindOpen.Extensions.Carriers.DbField.SetScriptValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.WithDataModule(System.String)
  commentId: M:BindOpen.Extensions.Carriers.DbField.WithDataModule(System.String)
  id: WithDataModule(System.String)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: WithDataModule(String)
  nameWithType: DbField.WithDataModule(String)
  fullName: BindOpen.Extensions.Carriers.DbField.WithDataModule(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSets the specified data module.\n"
  syntax:
    content: public DbField WithDataModule(string dataModule)
    parameters:
    - id: dataModule
      type: System.String
      description: The data module to consider.
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function WithDataModule(dataModule As String) As DbField
  overload: BindOpen.Extensions.Carriers.DbField.WithDataModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.WithDataTable(System.String)
  commentId: M:BindOpen.Extensions.Carriers.DbField.WithDataTable(System.String)
  id: WithDataTable(System.String)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: WithDataTable(String)
  nameWithType: DbField.WithDataTable(String)
  fullName: BindOpen.Extensions.Carriers.DbField.WithDataTable(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSets the specified data table.\n"
  syntax:
    content: public DbField WithDataTable(string dataTable)
    parameters:
    - id: dataTable
      type: System.String
      description: The data table to consider.
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function WithDataTable(dataTable As String) As DbField
  overload: BindOpen.Extensions.Carriers.DbField.WithDataTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.WithSchema(System.String)
  commentId: M:BindOpen.Extensions.Carriers.DbField.WithSchema(System.String)
  id: WithSchema(System.String)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: WithSchema(String)
  nameWithType: DbField.WithSchema(String)
  fullName: BindOpen.Extensions.Carriers.DbField.WithSchema(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSets the specified schema.\n"
  syntax:
    content: public DbField WithSchema(string schema)
    parameters:
    - id: schema
      type: System.String
      description: The schema to consider.
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function WithSchema(schema As String) As DbField
  overload: BindOpen.Extensions.Carriers.DbField.WithSchema*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.WithAlias(System.String)
  commentId: M:BindOpen.Extensions.Carriers.DbField.WithAlias(System.String)
  id: WithAlias(System.String)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: WithAlias(String)
  nameWithType: DbField.WithAlias(String)
  fullName: BindOpen.Extensions.Carriers.DbField.WithAlias(System.String)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSets the specified alias.\n"
  syntax:
    content: public DbField WithAlias(string alias)
    parameters:
    - id: alias
      type: System.String
      description: The alias to consider.
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function WithAlias(alias As String) As DbField
  overload: BindOpen.Extensions.Carriers.DbField.WithAlias*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.WithSize(System.Int32)
  commentId: M:BindOpen.Extensions.Carriers.DbField.WithSize(System.Int32)
  id: WithSize(System.Int32)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: WithSize(Int32)
  nameWithType: DbField.WithSize(Int32)
  fullName: BindOpen.Extensions.Carriers.DbField.WithSize(System.Int32)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSets the specified size.\n"
  syntax:
    content: public DbField WithSize(int size)
    parameters:
    - id: size
      type: System.Int32
      description: The size to consider.
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function WithSize(size As Integer) As DbField
  overload: BindOpen.Extensions.Carriers.DbField.WithSize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.AsAll
  commentId: M:BindOpen.Extensions.Carriers.DbField.AsAll
  id: AsAll
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: AsAll()
  nameWithType: DbField.AsAll()
  fullName: BindOpen.Extensions.Carriers.DbField.AsAll()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nIndicates that this instance represents all fields.\n"
  syntax:
    content: public DbField AsAll()
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function AsAll As DbField
  overload: BindOpen.Extensions.Carriers.DbField.AsAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.AsKey
  commentId: M:BindOpen.Extensions.Carriers.DbField.AsKey
  id: AsKey
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: AsKey()
  nameWithType: DbField.AsKey()
  fullName: BindOpen.Extensions.Carriers.DbField.AsKey()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nIndicates that this instance represents a key.\n"
  syntax:
    content: public DbField AsKey()
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function AsKey As DbField
  overload: BindOpen.Extensions.Carriers.DbField.AsKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.WithNameAsScript
  commentId: M:BindOpen.Extensions.Carriers.DbField.WithNameAsScript
  id: WithNameAsScript
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: WithNameAsScript()
  nameWithType: DbField.WithNameAsScript()
  fullName: BindOpen.Extensions.Carriers.DbField.WithNameAsScript()
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nIndicates that the name of this instance is as script.\n"
  syntax:
    content: public DbField WithNameAsScript()
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function WithNameAsScript As DbField
  overload: BindOpen.Extensions.Carriers.DbField.WithNameAsScript*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.WithValueType(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Extensions.Carriers.DbField.WithValueType(BindOpen.Data.Common.DataValueType)
  id: WithValueType(BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: WithValueType(DataValueType)
  nameWithType: DbField.WithValueType(DataValueType)
  fullName: BindOpen.Extensions.Carriers.DbField.WithValueType(BindOpen.Data.Common.DataValueType)
  type: Method
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSpecifies the value type of this instance.\n"
  syntax:
    content: public DbField WithValueType(DataValueType valueType)
    parameters:
    - id: valueType
      type: BindOpen.Data.Common.DataValueType
      description: The value type to consider.
    return:
      type: BindOpen.Extensions.Carriers.DbField
      description: Returns this instance.
    content.vb: Public Function WithValueType(valueType As DataValueType) As DbField
  overload: BindOpen.Extensions.Carriers.DbField.WithValueType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.op_Implicit(BindOpen.Extensions.Carriers.DbField)~System.String
  commentId: M:BindOpen.Extensions.Carriers.DbField.op_Implicit(BindOpen.Extensions.Carriers.DbField)~System.String
  id: op_Implicit(BindOpen.Extensions.Carriers.DbField)~System.String
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: Implicit(DbField to String)
  nameWithType: DbField.Implicit(DbField to String)
  fullName: BindOpen.Extensions.Carriers.DbField.Implicit(BindOpen.Extensions.Carriers.DbField to System.String)
  type: Operator
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nReturns the data expression string corresponding to this instance.\n"
  syntax:
    content: public static implicit operator string (DbField field)
    parameters:
    - id: field
      type: BindOpen.Extensions.Carriers.DbField
      description: The field to consider.
    return:
      type: System.String
    content.vb: Public Shared Widening Operator CType(field As DbField) As String
  overload: BindOpen.Extensions.Carriers.DbField.op_Implicit*
  nameWithType.vb: DbField.Widening(DbField to String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Extensions.Carriers.DbField.Widening(BindOpen.Extensions.Carriers.DbField to System.String)
  name.vb: Widening(DbField to String)
- uid: BindOpen.Extensions.Carriers.DbField.IsAll
  commentId: P:BindOpen.Extensions.Carriers.DbField.IsAll
  id: IsAll
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: IsAll
  nameWithType: DbField.IsAll
  fullName: BindOpen.Extensions.Carriers.DbField.IsAll
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nIndicates wheteher this instance represents all the fields.\n"
  syntax:
    content: public bool IsAll { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsAll As Boolean
  overload: BindOpen.Extensions.Carriers.DbField.IsAll*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.DataModule
  commentId: P:BindOpen.Extensions.Carriers.DbField.DataModule
  id: DataModule
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: DataModule
  nameWithType: DbField.DataModule
  fullName: BindOpen.Extensions.Carriers.DbField.DataModule
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nData module of this instance.\n"
  syntax:
    content: public string DataModule { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DataModule As String
  overload: BindOpen.Extensions.Carriers.DbField.DataModule*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.Schema
  commentId: P:BindOpen.Extensions.Carriers.DbField.Schema
  id: Schema
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: Schema
  nameWithType: DbField.Schema
  fullName: BindOpen.Extensions.Carriers.DbField.Schema
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nData module of this instance.\n"
  syntax:
    content: public string Schema { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Schema As String
  overload: BindOpen.Extensions.Carriers.DbField.Schema*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.DataTable
  commentId: P:BindOpen.Extensions.Carriers.DbField.DataTable
  id: DataTable
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: DataTable
  nameWithType: DbField.DataTable
  fullName: BindOpen.Extensions.Carriers.DbField.DataTable
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nData table of this instance.\n"
  syntax:
    content: public string DataTable { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DataTable As String
  overload: BindOpen.Extensions.Carriers.DbField.DataTable*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.DataTableAlias
  commentId: P:BindOpen.Extensions.Carriers.DbField.DataTableAlias
  id: DataTableAlias
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: DataTableAlias
  nameWithType: DbField.DataTableAlias
  fullName: BindOpen.Extensions.Carriers.DbField.DataTableAlias
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nAlias of the data table of this instance.\n"
  syntax:
    content: public string DataTableAlias { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DataTableAlias As String
  overload: BindOpen.Extensions.Carriers.DbField.DataTableAlias*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.Alias
  commentId: P:BindOpen.Extensions.Carriers.DbField.Alias
  id: Alias
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: Alias
  nameWithType: DbField.Alias
  fullName: BindOpen.Extensions.Carriers.DbField.Alias
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nAlias of this instance.\n"
  syntax:
    content: public string Alias { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Alias As String
  overload: BindOpen.Extensions.Carriers.DbField.Alias*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.Size
  commentId: P:BindOpen.Extensions.Carriers.DbField.Size
  id: Size
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: DbField.Size
  fullName: BindOpen.Extensions.Carriers.DbField.Size
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nSize of this instance.\n"
  syntax:
    content: public int Size { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Size As Integer
  overload: BindOpen.Extensions.Carriers.DbField.Size*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.Expression
  commentId: P:BindOpen.Extensions.Carriers.DbField.Expression
  id: Expression
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: DbField.Expression
  fullName: BindOpen.Extensions.Carriers.DbField.Expression
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nValue of this instance.\n"
  syntax:
    content: public DataExpression Expression { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Expression.DataExpression
    content.vb: Public Property Expression As DataExpression
  overload: BindOpen.Extensions.Carriers.DbField.Expression*
  implements:
  - BindOpen.Data.Queries.IDbQueryItem.Expression
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.Query
  commentId: P:BindOpen.Extensions.Carriers.DbField.Query
  id: Query
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: Query
  nameWithType: DbField.Query
  fullName: BindOpen.Extensions.Carriers.DbField.Query
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nValue of this instance.\n"
  syntax:
    content: public DbQuery Query { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Queries.DbQuery
    content.vb: Public Property Query As DbQuery
  overload: BindOpen.Extensions.Carriers.DbField.Query*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.IsKey
  commentId: P:BindOpen.Extensions.Carriers.DbField.IsKey
  id: IsKey
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: IsKey
  nameWithType: DbField.IsKey
  fullName: BindOpen.Extensions.Carriers.DbField.IsKey
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nIndicates wheteher this instance is a key.\n"
  syntax:
    content: public bool IsKey { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsKey As Boolean
  overload: BindOpen.Extensions.Carriers.DbField.IsKey*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.IsForeignKey
  commentId: P:BindOpen.Extensions.Carriers.DbField.IsForeignKey
  id: IsForeignKey
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: IsForeignKey
  nameWithType: DbField.IsForeignKey
  fullName: BindOpen.Extensions.Carriers.DbField.IsForeignKey
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nIndicates wheteher this instance is a foreign key.\n"
  syntax:
    content: public bool IsForeignKey { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsForeignKey As Boolean
  overload: BindOpen.Extensions.Carriers.DbField.IsForeignKey*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.IsNameAsScript
  commentId: P:BindOpen.Extensions.Carriers.DbField.IsNameAsScript
  id: IsNameAsScript
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: IsNameAsScript
  nameWithType: DbField.IsNameAsScript
  fullName: BindOpen.Extensions.Carriers.DbField.IsNameAsScript
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nIndicates wheteher the name of this instance can be defined by a script.\n"
  syntax:
    content: public bool IsNameAsScript { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsNameAsScript As Boolean
  overload: BindOpen.Extensions.Carriers.DbField.IsNameAsScript*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.Extensions.Carriers.DbField.ValueType
  commentId: P:BindOpen.Extensions.Carriers.DbField.ValueType
  id: ValueType
  parent: BindOpen.Extensions.Carriers.DbField
  langs:
  - csharp
  - vb
  name: ValueType
  nameWithType: DbField.ValueType
  fullName: BindOpen.Extensions.Carriers.DbField.ValueType
  type: Property
  source:
    path: BindOpen.Databases
    isExternal: true
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Extensions.Carriers
  summary: "\nType of value of this instance.\n"
  syntax:
    content: public DataValueType ValueType { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Common.DataValueType
    content.vb: Public Property ValueType As DataValueType
  overload: BindOpen.Extensions.Carriers.DbField.ValueType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: BindOpen.Extensions.Carriers
  commentId: N:BindOpen.Extensions.Carriers
  isExternal: true
  name: BindOpen.Extensions.Carriers
  nameWithType: BindOpen.Extensions.Carriers
  fullName: BindOpen.Extensions.Carriers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BindOpen.Data.Queries.IDbQueryItem
  commentId: T:BindOpen.Data.Queries.IDbQueryItem
  parent: BindOpen.Data.Queries
  isExternal: true
  name: IDbQueryItem
  nameWithType: IDbQueryItem
  fullName: BindOpen.Data.Queries.IDbQueryItem
- uid: BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsLiteral(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsLiteral(BindOpen.Extensions.Carriers.DbField,System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Queries.DbFluent
  definition: BindOpen.Data.Queries.DbFluent.AsLiteral(BindOpen.Extensions.Carriers.DbField,System.Object,BindOpen.Data.Common.DataValueType)
  name: AsLiteral(Object, DataValueType)
  nameWithType: DbFluent.AsLiteral(Object, DataValueType)
  fullName: BindOpen.Data.Queries.DbFluent.AsLiteral(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsLiteral(System.Object,BindOpen.Data.Common.DataValueType)
    name: AsLiteral
    nameWithType: DbFluent.AsLiteral
    fullName: BindOpen.Data.Queries.DbFluent.AsLiteral
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsLiteral(System.Object,BindOpen.Data.Common.DataValueType)
    name: AsLiteral
    nameWithType: DbFluent.AsLiteral
    fullName: BindOpen.Data.Queries.DbFluent.AsLiteral
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsScript(System.String)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Extensions.Carriers.DbField,System.String)
  parent: BindOpen.Data.Queries.DbFluent
  definition: BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Extensions.Carriers.DbField,System.String)
  name: AsScript(String)
  nameWithType: DbFluent.AsScript(String)
  fullName: BindOpen.Data.Queries.DbFluent.AsScript(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsScript(System.String)
    name: AsScript
    nameWithType: DbFluent.AsScript
    fullName: BindOpen.Data.Queries.DbFluent.AsScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsScript(System.String)
    name: AsScript
    nameWithType: DbFluent.AsScript
    fullName: BindOpen.Data.Queries.DbFluent.AsScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Data.Queries.IDbQuery)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Queries.IDbQuery)
  parent: BindOpen.Data.Queries.DbFluent
  definition: BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Queries.IDbQuery)
  name: AsQuery(IDbQuery)
  nameWithType: DbFluent.AsQuery(IDbQuery)
  fullName: BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Data.Queries.IDbQuery)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Data.Queries.IDbQuery)
    name: AsQuery
    nameWithType: DbFluent.AsQuery
    fullName: BindOpen.Data.Queries.DbFluent.AsQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbQuery
    name: IDbQuery
    nameWithType: IDbQuery
    fullName: BindOpen.Data.Queries.IDbQuery
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Data.Queries.IDbQuery)
    name: AsQuery
    nameWithType: DbFluent.AsQuery
    fullName: BindOpen.Data.Queries.DbFluent.AsQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Queries.IDbQuery
    name: IDbQuery
    nameWithType: IDbQuery
    fullName: BindOpen.Data.Queries.IDbQuery
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField,BindOpen.Extensions.Carriers.DbField)
  parent: BindOpen.Data.Queries.DbFluent
  definition: BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField,BindOpen.Extensions.Carriers.DbField)
  name: AsOther(DbField)
  nameWithType: DbFluent.AsOther(DbField)
  fullName: BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField)
    name: AsOther
    nameWithType: DbFluent.AsOther
    fullName: BindOpen.Data.Queries.DbFluent.AsOther
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField)
    name: AsOther
    nameWithType: DbFluent.AsOther
    fullName: BindOpen.Data.Queries.DbFluent.AsOther
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsParameter(System.String)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.String)
  parent: BindOpen.Data.Queries.DbFluent
  definition: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.String)
  name: AsParameter(String)
  nameWithType: DbFluent.AsParameter(String)
  fullName: BindOpen.Data.Queries.DbFluent.AsParameter(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(System.String)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(System.String)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsParameter(System.Byte)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.Byte)
  parent: BindOpen.Data.Queries.DbFluent
  definition: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.Byte)
  name: AsParameter(Byte)
  nameWithType: DbFluent.AsParameter(Byte)
  fullName: BindOpen.Data.Queries.DbFluent.AsParameter(System.Byte)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(System.Byte)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(System.Byte)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Carriers.DbField.BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Data.Elements.IDataElement)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Elements.IDataElement)
  parent: BindOpen.Data.Queries.DbFluent
  definition: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Elements.IDataElement)
  name: AsParameter(IDataElement)
  nameWithType: DbFluent.AsParameter(IDataElement)
  fullName: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Data.Elements.IDataElement)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Data.Elements.IDataElement)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Data.Elements.IDataElement)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  isExternal: true
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: BindOpen.Data.Queries.DbFluent.AsLiteral(BindOpen.Extensions.Carriers.DbField,System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsLiteral(BindOpen.Extensions.Carriers.DbField,System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: AsLiteral(DbField, Object, DataValueType)
  nameWithType: DbFluent.AsLiteral(DbField, Object, DataValueType)
  fullName: BindOpen.Data.Queries.DbFluent.AsLiteral(BindOpen.Extensions.Carriers.DbField, System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsLiteral(BindOpen.Extensions.Carriers.DbField,System.Object,BindOpen.Data.Common.DataValueType)
    name: AsLiteral
    nameWithType: DbFluent.AsLiteral
    fullName: BindOpen.Data.Queries.DbFluent.AsLiteral
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsLiteral(BindOpen.Extensions.Carriers.DbField,System.Object,BindOpen.Data.Common.DataValueType)
    name: AsLiteral
    nameWithType: DbFluent.AsLiteral
    fullName: BindOpen.Data.Queries.DbFluent.AsLiteral
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbFluent
  commentId: T:BindOpen.Data.Queries.DbFluent
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbFluent
  nameWithType: DbFluent
  fullName: BindOpen.Data.Queries.DbFluent
- uid: BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Extensions.Carriers.DbField,System.String)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Extensions.Carriers.DbField,System.String)
  isExternal: true
  name: AsScript(DbField, String)
  nameWithType: DbFluent.AsScript(DbField, String)
  fullName: BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Extensions.Carriers.DbField, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Extensions.Carriers.DbField,System.String)
    name: AsScript
    nameWithType: DbFluent.AsScript
    fullName: BindOpen.Data.Queries.DbFluent.AsScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsScript(BindOpen.Extensions.Carriers.DbField,System.String)
    name: AsScript
    nameWithType: DbFluent.AsScript
    fullName: BindOpen.Data.Queries.DbFluent.AsScript
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Queries.IDbQuery)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Queries.IDbQuery)
  isExternal: true
  name: AsQuery(DbField, IDbQuery)
  nameWithType: DbFluent.AsQuery(DbField, IDbQuery)
  fullName: BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Extensions.Carriers.DbField, BindOpen.Data.Queries.IDbQuery)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Queries.IDbQuery)
    name: AsQuery
    nameWithType: DbFluent.AsQuery
    fullName: BindOpen.Data.Queries.DbFluent.AsQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.IDbQuery
    name: IDbQuery
    nameWithType: IDbQuery
    fullName: BindOpen.Data.Queries.IDbQuery
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsQuery(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Queries.IDbQuery)
    name: AsQuery
    nameWithType: DbFluent.AsQuery
    fullName: BindOpen.Data.Queries.DbFluent.AsQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Queries.IDbQuery
    name: IDbQuery
    nameWithType: IDbQuery
    fullName: BindOpen.Data.Queries.IDbQuery
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField,BindOpen.Extensions.Carriers.DbField)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField,BindOpen.Extensions.Carriers.DbField)
  isExternal: true
  name: AsOther(DbField, DbField)
  nameWithType: DbFluent.AsOther(DbField, DbField)
  fullName: BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField, BindOpen.Extensions.Carriers.DbField)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField,BindOpen.Extensions.Carriers.DbField)
    name: AsOther
    nameWithType: DbFluent.AsOther
    fullName: BindOpen.Data.Queries.DbFluent.AsOther
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsOther(BindOpen.Extensions.Carriers.DbField,BindOpen.Extensions.Carriers.DbField)
    name: AsOther
    nameWithType: DbFluent.AsOther
    fullName: BindOpen.Data.Queries.DbFluent.AsOther
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.String)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.String)
  isExternal: true
  name: AsParameter(DbField, String)
  nameWithType: DbFluent.AsParameter(DbField, String)
  fullName: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.String)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.String)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.Byte)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.Byte)
  isExternal: true
  name: AsParameter(DbField, Byte)
  nameWithType: DbFluent.AsParameter(DbField, Byte)
  fullName: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField, System.Byte)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.Byte)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,System.Byte)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Elements.IDataElement)
  commentId: M:BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Elements.IDataElement)
  isExternal: true
  name: AsParameter(DbField, IDataElement)
  nameWithType: DbFluent.AsParameter(DbField, IDataElement)
  fullName: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField, BindOpen.Data.Elements.IDataElement)
  spec.csharp:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Elements.IDataElement)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Queries.DbFluent.AsParameter(BindOpen.Extensions.Carriers.DbField,BindOpen.Data.Elements.IDataElement)
    name: AsParameter
    nameWithType: DbFluent.AsParameter
    fullName: BindOpen.Data.Queries.DbFluent.AsParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Carriers.DbField
    name: DbField
    nameWithType: DbField
    fullName: BindOpen.Extensions.Carriers.DbField
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElement
    name: IDataElement
    nameWithType: IDataElement
    fullName: BindOpen.Data.Elements.IDataElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Extensions.Carriers.DbField.#ctor*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.#ctor
  isExternal: true
  name: DbField
  nameWithType: DbField.DbField
  fullName: BindOpen.Extensions.Carriers.DbField.DbField
- uid: BindOpen.Extensions.Carriers.DbField.GetName*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.GetName
  isExternal: true
  name: GetName
  nameWithType: DbField.GetName
  fullName: BindOpen.Extensions.Carriers.DbField.GetName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Extensions.Carriers.DbField.ToString*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.ToString
  isExternal: true
  name: ToString
  nameWithType: DbField.ToString
  fullName: BindOpen.Extensions.Carriers.DbField.ToString
- uid: BindOpen.Extensions.Carriers.DbField.SetValue*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.SetValue
  isExternal: true
  name: SetValue
  nameWithType: DbField.SetValue
  fullName: BindOpen.Extensions.Carriers.DbField.SetValue
- uid: BindOpen.Data.Expression.DataExpression
  isExternal: true
  name: DataExpression
  nameWithType: DataExpression
  fullName: BindOpen.Data.Expression.DataExpression
- uid: BindOpen.Extensions.Carriers.DbField.SetLiteralValue*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.SetLiteralValue
  isExternal: true
  name: SetLiteralValue
  nameWithType: DbField.SetLiteralValue
  fullName: BindOpen.Extensions.Carriers.DbField.SetLiteralValue
- uid: BindOpen.Extensions.Carriers.DbField.SetScriptValue*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.SetScriptValue
  isExternal: true
  name: SetScriptValue
  nameWithType: DbField.SetScriptValue
  fullName: BindOpen.Extensions.Carriers.DbField.SetScriptValue
- uid: BindOpen.Extensions.Carriers.DbField.WithDataModule*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.WithDataModule
  isExternal: true
  name: WithDataModule
  nameWithType: DbField.WithDataModule
  fullName: BindOpen.Extensions.Carriers.DbField.WithDataModule
- uid: BindOpen.Extensions.Carriers.DbField
  commentId: T:BindOpen.Extensions.Carriers.DbField
  parent: BindOpen.Extensions.Carriers
  isExternal: true
  name: DbField
  nameWithType: DbField
  fullName: BindOpen.Extensions.Carriers.DbField
- uid: BindOpen.Extensions.Carriers.DbField.WithDataTable*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.WithDataTable
  isExternal: true
  name: WithDataTable
  nameWithType: DbField.WithDataTable
  fullName: BindOpen.Extensions.Carriers.DbField.WithDataTable
- uid: BindOpen.Extensions.Carriers.DbField.WithSchema*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.WithSchema
  isExternal: true
  name: WithSchema
  nameWithType: DbField.WithSchema
  fullName: BindOpen.Extensions.Carriers.DbField.WithSchema
- uid: BindOpen.Extensions.Carriers.DbField.WithAlias*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.WithAlias
  isExternal: true
  name: WithAlias
  nameWithType: DbField.WithAlias
  fullName: BindOpen.Extensions.Carriers.DbField.WithAlias
- uid: BindOpen.Extensions.Carriers.DbField.WithSize*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.WithSize
  isExternal: true
  name: WithSize
  nameWithType: DbField.WithSize
  fullName: BindOpen.Extensions.Carriers.DbField.WithSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: BindOpen.Extensions.Carriers.DbField.AsAll*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.AsAll
  isExternal: true
  name: AsAll
  nameWithType: DbField.AsAll
  fullName: BindOpen.Extensions.Carriers.DbField.AsAll
- uid: BindOpen.Extensions.Carriers.DbField.AsKey*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.AsKey
  isExternal: true
  name: AsKey
  nameWithType: DbField.AsKey
  fullName: BindOpen.Extensions.Carriers.DbField.AsKey
- uid: BindOpen.Extensions.Carriers.DbField.WithNameAsScript*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.WithNameAsScript
  isExternal: true
  name: WithNameAsScript
  nameWithType: DbField.WithNameAsScript
  fullName: BindOpen.Extensions.Carriers.DbField.WithNameAsScript
- uid: BindOpen.Extensions.Carriers.DbField.WithValueType*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.WithValueType
  isExternal: true
  name: WithValueType
  nameWithType: DbField.WithValueType
  fullName: BindOpen.Extensions.Carriers.DbField.WithValueType
- uid: BindOpen.Data.Common.DataValueType
  isExternal: true
  name: DataValueType
  nameWithType: DataValueType
  fullName: BindOpen.Data.Common.DataValueType
- uid: BindOpen.Extensions.Carriers.DbField.op_Implicit*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.op_Implicit
  isExternal: true
  name: Implicit
  nameWithType: DbField.Implicit
  fullName: BindOpen.Extensions.Carriers.DbField.Implicit
  nameWithType.vb: DbField.Widening
  fullName.vb: BindOpen.Extensions.Carriers.DbField.Widening
  name.vb: Widening
- uid: BindOpen.Extensions.Carriers.DbField.IsAll*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.IsAll
  isExternal: true
  name: IsAll
  nameWithType: DbField.IsAll
  fullName: BindOpen.Extensions.Carriers.DbField.IsAll
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Extensions.Carriers.DbField.DataModule*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.DataModule
  isExternal: true
  name: DataModule
  nameWithType: DbField.DataModule
  fullName: BindOpen.Extensions.Carriers.DbField.DataModule
- uid: BindOpen.Extensions.Carriers.DbField.Schema*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.Schema
  isExternal: true
  name: Schema
  nameWithType: DbField.Schema
  fullName: BindOpen.Extensions.Carriers.DbField.Schema
- uid: BindOpen.Extensions.Carriers.DbField.DataTable*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.DataTable
  isExternal: true
  name: DataTable
  nameWithType: DbField.DataTable
  fullName: BindOpen.Extensions.Carriers.DbField.DataTable
- uid: BindOpen.Extensions.Carriers.DbField.DataTableAlias*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.DataTableAlias
  isExternal: true
  name: DataTableAlias
  nameWithType: DbField.DataTableAlias
  fullName: BindOpen.Extensions.Carriers.DbField.DataTableAlias
- uid: BindOpen.Extensions.Carriers.DbField.Alias*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.Alias
  isExternal: true
  name: Alias
  nameWithType: DbField.Alias
  fullName: BindOpen.Extensions.Carriers.DbField.Alias
- uid: BindOpen.Extensions.Carriers.DbField.Size*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.Size
  isExternal: true
  name: Size
  nameWithType: DbField.Size
  fullName: BindOpen.Extensions.Carriers.DbField.Size
- uid: BindOpen.Extensions.Carriers.DbField.Expression*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.Expression
  isExternal: true
  name: Expression
  nameWithType: DbField.Expression
  fullName: BindOpen.Extensions.Carriers.DbField.Expression
- uid: BindOpen.Data.Queries.IDbQueryItem.Expression
  commentId: P:BindOpen.Data.Queries.IDbQueryItem.Expression
  parent: BindOpen.Data.Queries.IDbQueryItem
  isExternal: true
  name: Expression
  nameWithType: IDbQueryItem.Expression
  fullName: BindOpen.Data.Queries.IDbQueryItem.Expression
- uid: BindOpen.Extensions.Carriers.DbField.Query*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.Query
  isExternal: true
  name: Query
  nameWithType: DbField.Query
  fullName: BindOpen.Extensions.Carriers.DbField.Query
- uid: BindOpen.Data.Queries.DbQuery
  commentId: T:BindOpen.Data.Queries.DbQuery
  parent: BindOpen.Data.Queries
  isExternal: true
  name: DbQuery
  nameWithType: DbQuery
  fullName: BindOpen.Data.Queries.DbQuery
- uid: BindOpen.Extensions.Carriers.DbField.IsKey*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.IsKey
  isExternal: true
  name: IsKey
  nameWithType: DbField.IsKey
  fullName: BindOpen.Extensions.Carriers.DbField.IsKey
- uid: BindOpen.Extensions.Carriers.DbField.IsForeignKey*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.IsForeignKey
  isExternal: true
  name: IsForeignKey
  nameWithType: DbField.IsForeignKey
  fullName: BindOpen.Extensions.Carriers.DbField.IsForeignKey
- uid: BindOpen.Extensions.Carriers.DbField.IsNameAsScript*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.IsNameAsScript
  isExternal: true
  name: IsNameAsScript
  nameWithType: DbField.IsNameAsScript
  fullName: BindOpen.Extensions.Carriers.DbField.IsNameAsScript
- uid: BindOpen.Extensions.Carriers.DbField.ValueType*
  commentId: Overload:BindOpen.Extensions.Carriers.DbField.ValueType
  isExternal: true
  name: ValueType
  nameWithType: DbField.ValueType
  fullName: BindOpen.Extensions.Carriers.DbField.ValueType
shouldSkipMarkup: true
