### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger
  commentId: T:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger
  id: BdoSnapLogger
  parent: BindOpen.System.Diagnostics.Loggers
  children:
  - BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor
  - BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  - BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  - BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent,System.Collections.Generic.List{System.String})
  - BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  langs:
  - csharp
  - vb
  name: BdoSnapLogger
  nameWithType: BdoSnapLogger
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger
  type: Class
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nThis class represents a Snap logger.\n"
  syntax:
    content: 'public class BdoSnapLogger : BdoLogger'
    content.vb: >-
      Public Class BdoSnapLogger
          Inherits BdoLogger
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor
  id: '#ctor'
  parent: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger
  langs:
  - csharp
  - vb
  name: BdoSnapLogger()
  nameWithType: BdoSnapLogger.BdoSnapLogger()
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.BdoSnapLogger()
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nInstantiates a new instance of the SnapLogger class.\n"
  syntax:
    content: public BdoSnapLogger()
    content.vb: Public Sub New
  overload: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  id: '#ctor(System.String,BindOpen.System.Diagnostics.BdoLoggerMode,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})'
  parent: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger
  langs:
  - csharp
  - vb
  name: BdoSnapLogger(String, BdoLoggerMode, Predicate<IBdoLogEvent>)
  nameWithType: BdoSnapLogger.BdoSnapLogger(String, BdoLoggerMode, Predicate<IBdoLogEvent>)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.BdoSnapLogger(System.String, BindOpen.System.Diagnostics.BdoLoggerMode, System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>)
  type: Constructor
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nInstantiates a new instance of the SnapLogger class.\n"
  remarks: With expiration day number equaling to -1, no files expires. Equaling to 0, all files except the current one expires.
  syntax:
    content: public BdoSnapLogger(string name, BdoLoggerMode mode, Predicate<IBdoLogEvent> eventFilter = null)
    parameters:
    - id: name
      type: System.String
      description: The name to consider.
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to consider.
    - id: eventFilter
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: The function that filters events.
    content.vb: Public Sub New(name As String, mode As BdoLoggerMode, eventFilter As Predicate(Of IBdoLogEvent) = Nothing)
  overload: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor*
  nameWithType.vb: BdoSnapLogger.BdoSnapLogger(String, BdoLoggerMode, Predicate(Of IBdoLogEvent))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.BdoSnapLogger(System.String, BindOpen.System.Diagnostics.BdoLoggerMode, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent))
  name.vb: BdoSnapLogger(String, BdoLoggerMode, Predicate(Of IBdoLogEvent))
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  id: ToString(BindOpen.System.Diagnostics.IBdoLog,System.Collections.Generic.List{System.String})
  parent: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger
  langs:
  - csharp
  - vb
  name: ToString(IBdoLog, List<String>)
  nameWithType: BdoSnapLogger.ToString(IBdoLog, List<String>)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLog, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nGets the string representing to the specified log.\n"
  syntax:
    content: public override string ToString(IBdoLog log, List<string> attributeNames = null)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: attributeNames
      type: System.Collections.Generic.List{System.String}
      description: The attribute names to consider.
    return:
      type: System.String
      description: The string representing to the specified log.
    content.vb: Public Overrides Function ToString(log As IBdoLog, attributeNames As List(Of String) = Nothing) As String
  overload: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString*
  nameWithType.vb: BdoSnapLogger.ToString(IBdoLog, List(Of String))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLog, System.Collections.Generic.List(Of System.String))
  name.vb: ToString(IBdoLog, List(Of String))
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent,System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent,System.Collections.Generic.List{System.String})
  id: ToString(BindOpen.System.Diagnostics.IBdoLogEvent,System.Collections.Generic.List{System.String})
  parent: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger
  langs:
  - csharp
  - vb
  name: ToString(IBdoLogEvent, List<String>)
  nameWithType: BdoSnapLogger.ToString(IBdoLogEvent, List<String>)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nGets the string representing to the specified event.\n"
  syntax:
    content: public override string ToString(IBdoLogEvent logEvent, List<string> attributeNames = null)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: The log event to consider.
    - id: attributeNames
      type: System.Collections.Generic.List{System.String}
      description: The attribute names to consider.
    return:
      type: System.String
      description: The string representing to the specified event.
    content.vb: Public Overrides Function ToString(logEvent As IBdoLogEvent, attributeNames As List(Of String) = Nothing) As String
  overload: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString*
  nameWithType.vb: BdoSnapLogger.ToString(IBdoLogEvent, List(Of String))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString(BindOpen.System.Diagnostics.IBdoLogEvent, System.Collections.Generic.List(Of System.String))
  name.vb: ToString(IBdoLogEvent, List(Of String))
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  commentId: M:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  id: WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  parent: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger
  langs:
  - csharp
  - vb
  name: WriteEvent(IBdoLogEvent)
  nameWithType: BdoSnapLogger.WriteEvent(IBdoLogEvent)
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.WriteEvent(BindOpen.System.Diagnostics.IBdoLogEvent)
  type: Method
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.System.Diagnostics.Loggers
  summary: "\nLogs the specified record.\n"
  syntax:
    content: public override bool WriteEvent(IBdoLogEvent logEvent)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: The log event to consider.
    return:
      type: System.Boolean
    content.vb: Public Overrides Function WriteEvent(logEvent As IBdoLogEvent) As Boolean
  overload: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.WriteEvent*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: BindOpen.System.Diagnostics.Loggers
  commentId: N:BindOpen.System.Diagnostics.Loggers
  isExternal: true
  name: BindOpen.System.Diagnostics.Loggers
  nameWithType: BindOpen.System.Diagnostics.Loggers
  fullName: BindOpen.System.Diagnostics.Loggers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.#ctor
  isExternal: true
  name: BdoSnapLogger
  nameWithType: BdoSnapLogger.BdoSnapLogger
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.BdoSnapLogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.BdoLoggerMode
  isExternal: true
  name: BdoLoggerMode
  nameWithType: BdoLoggerMode
  fullName: BindOpen.System.Diagnostics.BdoLoggerMode
- uid: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  commentId: '!:System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}'
  definition: System.Predicate`1
  name: Predicate<IBdoLogEvent>
  nameWithType: Predicate<IBdoLogEvent>
  fullName: System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>
  nameWithType.vb: Predicate(Of IBdoLogEvent)
  fullName.vb: System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent)
  name.vb: Predicate(Of IBdoLogEvent)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString
  isExternal: true
  name: ToString
  nameWithType: BdoSnapLogger.ToString
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.ToString
- uid: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: System.Collections.Generic.List{System.String}
  commentId: '!:System.Collections.Generic.List{System.String}'
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLogEvent
  isExternal: true
  name: IBdoLogEvent
  nameWithType: IBdoLogEvent
  fullName: BindOpen.System.Diagnostics.IBdoLogEvent
- uid: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.WriteEvent*
  commentId: Overload:BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.WriteEvent
  isExternal: true
  name: WriteEvent
  nameWithType: BdoSnapLogger.WriteEvent
  fullName: BindOpen.System.Diagnostics.Loggers.BdoSnapLogger.WriteEvent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
shouldSkipMarkup: true
