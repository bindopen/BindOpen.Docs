### YamlMime:ManagedReference
items:
- uid: BindOpen.System.Diagnostics.BdoLog
  commentId: T:BindOpen.System.Diagnostics.BdoLog
  id: BdoLog
  parent: BindOpen.System.Diagnostics
  children:
  - BindOpen.System.Diagnostics.BdoLog.#ctor
  - BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent},BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  - BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  - BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  - BindOpen.System.Diagnostics.BdoLog.#ctor(System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent},BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  - BindOpen.System.Diagnostics.BdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.BdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.BdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.BdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  - BindOpen.System.Diagnostics.BdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.BdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  - BindOpen.System.Diagnostics.BdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  - BindOpen.System.Diagnostics.BdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  - BindOpen.System.Diagnostics.BdoLog.BuildTree
  - BindOpen.System.Diagnostics.BdoLog.Checkpoints
  - BindOpen.System.Diagnostics.BdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.BdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.BdoLog.Detail
  - BindOpen.System.Diagnostics.BdoLog.DetailSpecified
  - BindOpen.System.Diagnostics.BdoLog.Dispose(System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  - BindOpen.System.Diagnostics.BdoLog.Errors
  - BindOpen.System.Diagnostics.BdoLog.Events
  - BindOpen.System.Diagnostics.BdoLog.EventsSpecified
  - BindOpen.System.Diagnostics.BdoLog.Exceptions
  - BindOpen.System.Diagnostics.BdoLog.Execution
  - BindOpen.System.Diagnostics.BdoLog.ExecutionSpecified
  - BindOpen.System.Diagnostics.BdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  - BindOpen.System.Diagnostics.BdoLog.GetDescription(System.String,System.String)
  - BindOpen.System.Diagnostics.BdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.GetEventWithId(System.String,System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  - BindOpen.System.Diagnostics.BdoLog.GetLogger(System.String)
  - BindOpen.System.Diagnostics.BdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  - BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.GetRoot
  - BindOpen.System.Diagnostics.BdoLog.GetSubLogWithId(System.String,System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.GetTitle(System.String,System.String)
  - BindOpen.System.Diagnostics.BdoLog.HasErrors(System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptions(System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.HasExceptions(System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.HasMessages(System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.HasSubLog
  - BindOpen.System.Diagnostics.BdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  - BindOpen.System.Diagnostics.BdoLog.Item(System.Int32)
  - BindOpen.System.Diagnostics.BdoLog.Item(System.String)
  - BindOpen.System.Diagnostics.BdoLog.Level
  - BindOpen.System.Diagnostics.BdoLog.Load``1(System.String,System.Boolean,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.LoadFromString``1(System.String,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.BdoLog.Loggers
  - BindOpen.System.Diagnostics.BdoLog.Messages
  - BindOpen.System.Diagnostics.BdoLog.Parent
  - BindOpen.System.Diagnostics.BdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.RemoveSubLog(System.String,System.Boolean)
  - BindOpen.System.Diagnostics.BdoLog.Root
  - BindOpen.System.Diagnostics.BdoLog.Sanitize
  - BindOpen.System.Diagnostics.BdoLog.Save``1(System.String)
  - BindOpen.System.Diagnostics.BdoLog.Start
  - BindOpen.System.Diagnostics.BdoLog.SubLogEventPredicate
  - BindOpen.System.Diagnostics.BdoLog.SubLogs
  - BindOpen.System.Diagnostics.BdoLog.Task
  - BindOpen.System.Diagnostics.BdoLog.TaskSpecified
  - BindOpen.System.Diagnostics.BdoLog.ToString``1
  - BindOpen.System.Diagnostics.BdoLog.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.BdoLog.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.BdoLog.Warnings
  - BindOpen.System.Diagnostics.BdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  - BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  - BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  - BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  - BindOpen.System.Diagnostics.BdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  langs:
  - csharp
  - vb
  name: BdoLog
  nameWithType: BdoLog
  fullName: BindOpen.System.Diagnostics.BdoLog
  type: Class
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: BdoLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 20
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nThis class represents a logger of tasks.\n"
  example: []
  syntax:
    content: 'public class BdoLog : DescribedDataItem, IBdoLog, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed'
    content.vb: >-
      Public Class BdoLog
          Inherits DescribedDataItem
          Implements IBdoLog, IDescribedDataItem, ITitledDataItem, INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed, IGloballyTitled, IGloballyDescribed
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - BindOpen.Data.Items.DataItem
  - BindOpen.Data.Items.IdentifiedDataItem
  - BindOpen.Data.Items.StoredDataItem
  - BindOpen.Data.Items.NamedDataItem
  - BindOpen.Data.Items.TitledDataItem
  - BindOpen.Data.Items.DescribedDataItem
  implements:
  - BindOpen.System.Diagnostics.IBdoLog
  - BindOpen.Data.Items.IDescribedDataItem
  - BindOpen.Data.Items.ITitledDataItem
  - BindOpen.Data.Items.INamedDataItem
  - BindOpen.Data.Items.IStoredDataItem
  - BindOpen.Data.Items.IIdentifiedDataItem
  - BindOpen.Data.Items.IDataItem
  - System.ICloneable
  - System.IDisposable
  - BindOpen.Data.Items.IIdentified
  - BindOpen.Data.Items.IReferenced
  - BindOpen.Data.Items.IStorable
  - BindOpen.Data.Items.INamed
  - BindOpen.Data.Items.IGloballyTitled
  - BindOpen.Data.Items.IGloballyDescribed
  inheritedMembers:
  - BindOpen.Data.Items.DescribedDataItem.Description
  - BindOpen.Data.Items.DescribedDataItem.DescriptionSpecified
  - BindOpen.Data.Items.DescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
  - BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String)
  - BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String,System.String)
  - BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String)
  - BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String,System.String)
  - BindOpen.Data.Items.DescribedDataItem.Clone
  - BindOpen.Data.Items.TitledDataItem.Title
  - BindOpen.Data.Items.TitledDataItem.TitleSpecified
  - BindOpen.Data.Items.TitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
  - BindOpen.Data.Items.TitledDataItem.AddTitle(System.String)
  - BindOpen.Data.Items.TitledDataItem.AddTitle(System.String,System.String)
  - BindOpen.Data.Items.TitledDataItem.SetTitle(System.String)
  - BindOpen.Data.Items.TitledDataItem.SetTitle(System.String,System.String)
  - BindOpen.Data.Items.NamedDataItem.Name
  - BindOpen.Data.Items.NamedDataItem.NameSpecified
  - BindOpen.Data.Items.NamedDataItem.Key
  - BindOpen.Data.Items.NamedDataItem.GetClonedName(System.String,System.String)
  - BindOpen.Data.Items.StoredDataItem.NamePreffix
  - BindOpen.Data.Items.StoredDataItem.CreationDate
  - BindOpen.Data.Items.StoredDataItem.CreationDateSpecified
  - BindOpen.Data.Items.StoredDataItem.LastModificationDate
  - BindOpen.Data.Items.StoredDataItem.LastModificationDateSpecified
  - BindOpen.Data.Items.StoredDataItem.DeclareUpdate
  - BindOpen.Data.Items.IdentifiedDataItem.Id
  - BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  - BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  - BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - BindOpen.Data.Items.DataItem.Clone``1
  - BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.DataItem.Dispose
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - BindOpen.System.Diagnostics.BdoLog.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.System.Diagnostics.BdoLog})
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.System.Diagnostics.IBdoLog.BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String,System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BindOpen.System.Diagnostics.BdoLog.Execution
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Execution
  id: Execution
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Execution
  nameWithType: BdoLog.Execution
  fullName: BindOpen.System.Diagnostics.BdoLog.Execution
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Execution
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 47
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nExecution of this instance.\n"
  example: []
  syntax:
    content: public ProcessExecution Execution { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Processing.ProcessExecution
    content.vb: Public Property Execution As ProcessExecution
  overload: BindOpen.System.Diagnostics.BdoLog.Execution*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Execution
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.ExecutionSpecified
  commentId: P:BindOpen.System.Diagnostics.BdoLog.ExecutionSpecified
  id: ExecutionSpecified
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: ExecutionSpecified
  nameWithType: BdoLog.ExecutionSpecified
  fullName: BindOpen.System.Diagnostics.BdoLog.ExecutionSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ExecutionSpecified
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 53
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nSpecification of the Execution property of this instance.\n"
  example: []
  syntax:
    content: public bool ExecutionSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ExecutionSpecified As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.ExecutionSpecified*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Task
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Task
  id: Task
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Task
  nameWithType: BdoLog.Task
  fullName: BindOpen.System.Diagnostics.BdoLog.Task
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Task
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 61
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nLogged by this instance. By default, a new task is initialized when this instance is initialized.\n"
  example: []
  syntax:
    content: public BdoTaskConfiguration Task { get; set; }
    parameters: []
    return:
      type: BindOpen.Extensions.Runtime.BdoTaskConfiguration
    content.vb: Public Property Task As BdoTaskConfiguration
  overload: BindOpen.System.Diagnostics.BdoLog.Task*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Task
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.TaskSpecified
  commentId: P:BindOpen.System.Diagnostics.BdoLog.TaskSpecified
  id: TaskSpecified
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: TaskSpecified
  nameWithType: BdoLog.TaskSpecified
  fullName: BindOpen.System.Diagnostics.BdoLog.TaskSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: TaskSpecified
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 71
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nSpecification of the Task property of this instance.\n"
  example: []
  syntax:
    content: public bool TaskSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property TaskSpecified As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.TaskSpecified*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.SubLogEventPredicate
  commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogEventPredicate
  id: SubLogEventPredicate
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: SubLogEventPredicate
  nameWithType: BdoLog.SubLogEventPredicate
  fullName: BindOpen.System.Diagnostics.BdoLog.SubLogEventPredicate
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SubLogEventPredicate
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 77
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nFunction that filters event.\n"
  example: []
  syntax:
    content: public Predicate<IBdoLogEvent> SubLogEventPredicate { get; set; }
    parameters: []
    return:
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: Public Property SubLogEventPredicate As Predicate(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.SubLogEventPredicate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.Detail
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Detail
  id: Detail
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Detail
  nameWithType: BdoLog.Detail
  fullName: BindOpen.System.Diagnostics.BdoLog.Detail
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Detail
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 89
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nDetail of this instance.\n"
  example: []
  syntax:
    content: public DataElementSet Detail { get; set; }
    parameters: []
    return:
      type: BindOpen.Data.Elements.DataElementSet
    content.vb: Public Property Detail As DataElementSet
  overload: BindOpen.System.Diagnostics.BdoLog.Detail*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Detail
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.DetailSpecified
  commentId: P:BindOpen.System.Diagnostics.BdoLog.DetailSpecified
  id: DetailSpecified
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: DetailSpecified
  nameWithType: BdoLog.DetailSpecified
  fullName: BindOpen.System.Diagnostics.BdoLog.DetailSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: DetailSpecified
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 95
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nSpecification of the Detail property of this instance.\n"
  example: []
  syntax:
    content: public bool DetailSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property DetailSpecified As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.DetailSpecified*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Item(System.String)
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Item(System.String)
  id: Item(System.String)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: BdoLog.Item[String]
  fullName: BindOpen.System.Diagnostics.BdoLog.Item[System.String]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 104
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nThe event with the specified ID.\n"
  example: []
  syntax:
    content: public BdoLogEvent this[string id] { get; }
    parameters:
    - id: id
      type: System.String
      description: ''
    return:
      type: BindOpen.System.Diagnostics.BdoLogEvent
    content.vb: Public ReadOnly Property Item(id As String) As BdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.Item*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
  nameWithType.vb: BdoLog.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.Item(System.String)
  name.vb: Item(String)
- uid: BindOpen.System.Diagnostics.BdoLog.Item(System.Int32)
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Item(System.Int32)
  id: Item(System.Int32)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: BdoLog.Item[Int32]
  fullName: BindOpen.System.Diagnostics.BdoLog.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 111
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nThe event with the specified ID.\n"
  example: []
  syntax:
    content: public BdoLogEvent this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: ''
    return:
      type: BindOpen.System.Diagnostics.BdoLogEvent
    content.vb: Public ReadOnly Property Item(index As Integer) As BdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.Item*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
  nameWithType.vb: BdoLog.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.Item(System.Int32)
  name.vb: Item(Int32)
- uid: BindOpen.System.Diagnostics.BdoLog.Events
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Events
  id: Events
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: BdoLog.Events
  fullName: BindOpen.System.Diagnostics.BdoLog.Events
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Events
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 123
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nEvents of this instance.\n"
  example: []
  syntax:
    content: public List<BdoLogEvent> Events { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.BdoLogEvent}
    content.vb: Public Property Events As List(Of BdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.Events*
  seealso:
  - linkId: BindOpen.System.Diagnostics.BdoLog.Errors
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Errors
  - linkId: BindOpen.System.Diagnostics.BdoLog.Warnings
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Warnings
  - linkId: BindOpen.System.Diagnostics.BdoLog.Messages
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Messages
  - linkId: BindOpen.System.Diagnostics.BdoLog.Exceptions
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Exceptions
  - linkId: BindOpen.System.Diagnostics.BdoLog.Checkpoints
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Checkpoints
  - linkId: BindOpen.System.Diagnostics.BdoLog.SubLogs
    commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Events
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.EventsSpecified
  commentId: P:BindOpen.System.Diagnostics.BdoLog.EventsSpecified
  id: EventsSpecified
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: EventsSpecified
  nameWithType: BdoLog.EventsSpecified
  fullName: BindOpen.System.Diagnostics.BdoLog.EventsSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: EventsSpecified
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 130
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nSpecification of the Events property of this instance.\n"
  example: []
  syntax:
    content: public bool EventsSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property EventsSpecified As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.EventsSpecified*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Errors
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Errors
  id: Errors
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Errors
  nameWithType: BdoLog.Errors
  fullName: BindOpen.System.Diagnostics.BdoLog.Errors
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Errors
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 142
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nErrors of this instance.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> Errors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: Public ReadOnly Property Errors As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.Errors*
  seealso:
  - linkId: BindOpen.System.Diagnostics.BdoLog.Events
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Events
  - linkId: BindOpen.System.Diagnostics.BdoLog.Warnings
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Warnings
  - linkId: BindOpen.System.Diagnostics.BdoLog.Messages
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Messages
  - linkId: BindOpen.System.Diagnostics.BdoLog.Exceptions
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Exceptions
  - linkId: BindOpen.System.Diagnostics.BdoLog.Checkpoints
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Checkpoints
  - linkId: BindOpen.System.Diagnostics.BdoLog.SubLogs
    commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Errors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Warnings
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Warnings
  id: Warnings
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Warnings
  nameWithType: BdoLog.Warnings
  fullName: BindOpen.System.Diagnostics.BdoLog.Warnings
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Warnings
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 154
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nWarnings of this instance.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> Warnings { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: Public ReadOnly Property Warnings As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.Warnings*
  seealso:
  - linkId: BindOpen.System.Diagnostics.BdoLog.Errors
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Errors
  - linkId: BindOpen.System.Diagnostics.BdoLog.Events
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Events
  - linkId: BindOpen.System.Diagnostics.BdoLog.Messages
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Messages
  - linkId: BindOpen.System.Diagnostics.BdoLog.Exceptions
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Exceptions
  - linkId: BindOpen.System.Diagnostics.BdoLog.Checkpoints
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Checkpoints
  - linkId: BindOpen.System.Diagnostics.BdoLog.SubLogs
    commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Warnings
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Messages
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Messages
  id: Messages
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Messages
  nameWithType: BdoLog.Messages
  fullName: BindOpen.System.Diagnostics.BdoLog.Messages
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Messages
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 166
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nMessages of this instance.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> Messages { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: Public ReadOnly Property Messages As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.Messages*
  seealso:
  - linkId: BindOpen.System.Diagnostics.BdoLog.Errors
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Errors
  - linkId: BindOpen.System.Diagnostics.BdoLog.Warnings
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Warnings
  - linkId: BindOpen.System.Diagnostics.BdoLog.Events
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Events
  - linkId: BindOpen.System.Diagnostics.BdoLog.Exceptions
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Exceptions
  - linkId: BindOpen.System.Diagnostics.BdoLog.Checkpoints
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Checkpoints
  - linkId: BindOpen.System.Diagnostics.BdoLog.SubLogs
    commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Messages
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Exceptions
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Exceptions
  id: Exceptions
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Exceptions
  nameWithType: BdoLog.Exceptions
  fullName: BindOpen.System.Diagnostics.BdoLog.Exceptions
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Exceptions
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 178
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nExceptions of this instance.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> Exceptions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: Public ReadOnly Property Exceptions As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.Exceptions*
  seealso:
  - linkId: BindOpen.System.Diagnostics.BdoLog.Errors
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Errors
  - linkId: BindOpen.System.Diagnostics.BdoLog.Warnings
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Warnings
  - linkId: BindOpen.System.Diagnostics.BdoLog.Messages
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Messages
  - linkId: BindOpen.System.Diagnostics.BdoLog.Events
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Events
  - linkId: BindOpen.System.Diagnostics.BdoLog.Checkpoints
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Checkpoints
  - linkId: BindOpen.System.Diagnostics.BdoLog.SubLogs
    commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Exceptions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Checkpoints
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Checkpoints
  id: Checkpoints
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Checkpoints
  nameWithType: BdoLog.Checkpoints
  fullName: BindOpen.System.Diagnostics.BdoLog.Checkpoints
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Checkpoints
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 190
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nCheckpoints of this instance.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> Checkpoints { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
    content.vb: Public ReadOnly Property Checkpoints As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.Checkpoints*
  seealso:
  - linkId: BindOpen.System.Diagnostics.BdoLog.Errors
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Errors
  - linkId: BindOpen.System.Diagnostics.BdoLog.Warnings
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Warnings
  - linkId: BindOpen.System.Diagnostics.BdoLog.Messages
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Messages
  - linkId: BindOpen.System.Diagnostics.BdoLog.Exceptions
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Exceptions
  - linkId: BindOpen.System.Diagnostics.BdoLog.Events
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Events
  - linkId: BindOpen.System.Diagnostics.BdoLog.SubLogs
    commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Checkpoints
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.SubLogs
  commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  id: SubLogs
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: SubLogs
  nameWithType: BdoLog.SubLogs
  fullName: BindOpen.System.Diagnostics.BdoLog.SubLogs
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SubLogs
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 202
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nLogs of this instance.\n"
  example: []
  syntax:
    content: public List<IBdoLog> SubLogs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLog}
    content.vb: Public ReadOnly Property SubLogs As List(Of IBdoLog)
  overload: BindOpen.System.Diagnostics.BdoLog.SubLogs*
  seealso:
  - linkId: BindOpen.System.Diagnostics.BdoLog.Errors
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Errors
  - linkId: BindOpen.System.Diagnostics.BdoLog.Warnings
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Warnings
  - linkId: BindOpen.System.Diagnostics.BdoLog.Messages
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Messages
  - linkId: BindOpen.System.Diagnostics.BdoLog.Exceptions
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Exceptions
  - linkId: BindOpen.System.Diagnostics.BdoLog.Events
    commentId: P:BindOpen.System.Diagnostics.BdoLog.Events
  - linkId: BindOpen.System.Diagnostics.BdoLog.SubLogs
    commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.SubLogs
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Parent
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Parent
  id: Parent
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: BdoLog.Parent
  fullName: BindOpen.System.Diagnostics.BdoLog.Parent
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Parent
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 210
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nParent of this instance.\n"
  example: []
  syntax:
    content: public IBdoLog Parent { get; set; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Public Property Parent As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.Parent*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Parent
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.Root
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Root
  id: Root
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: BdoLog.Root
  fullName: BindOpen.System.Diagnostics.BdoLog.Root
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Root
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 216
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nRoot of this instance.\n"
  example: []
  syntax:
    content: public IBdoLog Root { get; }
    parameters: []
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Public ReadOnly Property Root As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.Root*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Root
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Level
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Level
  id: Level
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Level
  nameWithType: BdoLog.Level
  fullName: BindOpen.System.Diagnostics.BdoLog.Level
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Level
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 225
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nThe level of this instance.\n"
  example: []
  syntax:
    content: public int Level { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Level As Integer
  overload: BindOpen.System.Diagnostics.BdoLog.Level*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Level
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BindOpen.System.Diagnostics.BdoLog.Loggers
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Loggers
  id: Loggers
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Loggers
  nameWithType: BdoLog.Loggers
  fullName: BindOpen.System.Diagnostics.BdoLog.Loggers
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Loggers
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 233
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nLoggers of this instance.\n"
  example: []
  syntax:
    content: public List<IBdoLogger> Loggers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
    content.vb: Public Property Loggers As List(Of IBdoLogger)
  overload: BindOpen.System.Diagnostics.BdoLog.Loggers*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Loggers
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.#ctor
  commentId: M:BindOpen.System.Diagnostics.BdoLog.#ctor
  id: '#ctor'
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: BdoLog()
  nameWithType: BdoLog.BdoLog()
  fullName: BindOpen.System.Diagnostics.BdoLog.BdoLog()
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 247
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nInstantiates a new instance of the Log class.\n"
  example: []
  syntax:
    content: public BdoLog()
    content.vb: Public Sub New
  overload: BindOpen.System.Diagnostics.BdoLog.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  id: '#ctor(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])'
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: BdoLog(IBdoLogger[])
  nameWithType: BdoLog.BdoLog(IBdoLogger[])
  fullName: BindOpen.System.Diagnostics.BdoLog.BdoLog(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 255
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nInstantiates a new instance of the Log class.\n"
  example: []
  syntax:
    content: public BdoLog(params IBdoLogger[] loggers)
    parameters:
    - id: loggers
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
      description: The loggers to consider.
    content.vb: Public Sub New(ParamArray loggers As IBdoLogger())
  overload: BindOpen.System.Diagnostics.BdoLog.#ctor*
  nameWithType.vb: BdoLog.BdoLog(IBdoLogger())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.BdoLog(BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: BdoLog(IBdoLogger())
- uid: BindOpen.System.Diagnostics.BdoLog.#ctor(System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent},BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.#ctor(System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent},BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  id: '#ctor(System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent},BindOpen.System.Diagnostics.Loggers.IBdoLogger[])'
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: BdoLog(Predicate<IBdoLogEvent>, IBdoLogger[])
  nameWithType: BdoLog.BdoLog(Predicate<IBdoLogEvent>, IBdoLogger[])
  fullName: BindOpen.System.Diagnostics.BdoLog.BdoLog(System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>, BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 265
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nInstantiates a new instance of the Log class.\n"
  example: []
  syntax:
    content: public BdoLog(Predicate<IBdoLogEvent> eventFilter = null, params IBdoLogger[] loggers)
    parameters:
    - id: eventFilter
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: The function that filters events.
    - id: loggers
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
      description: The loggers to consider.
    content.vb: Public Sub New(eventFilter As Predicate(Of IBdoLogEvent) = Nothing, ParamArray loggers As IBdoLogger())
  overload: BindOpen.System.Diagnostics.BdoLog.#ctor*
  nameWithType.vb: BdoLog.BdoLog(Predicate(Of IBdoLogEvent), IBdoLogger())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.BdoLog(System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent), BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: BdoLog(Predicate(Of IBdoLogEvent), IBdoLogger())
- uid: BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent},BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent},BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  id: '#ctor(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent},BindOpen.System.Diagnostics.Loggers.IBdoLogger[])'
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: BdoLog(IBdoTaskConfiguration, Predicate<IBdoLogEvent>, IBdoLogger[])
  nameWithType: BdoLog.BdoLog(IBdoTaskConfiguration, Predicate<IBdoLogEvent>, IBdoLogger[])
  fullName: BindOpen.System.Diagnostics.BdoLog.BdoLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration, System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>, BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 281
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nInstantiates a new instance of the Log class.\n"
  example: []
  syntax:
    content: public BdoLog(IBdoTaskConfiguration task, Predicate<IBdoLogEvent> eventFilter = null, params IBdoLogger[] loggers)
    parameters:
    - id: task
      type: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
      description: The task to consider.
    - id: eventFilter
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: The function that filters events.
    - id: loggers
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
      description: The loggers to consider.
    content.vb: Public Sub New(task As IBdoTaskConfiguration, eventFilter As Predicate(Of IBdoLogEvent) = Nothing, ParamArray loggers As IBdoLogger())
  overload: BindOpen.System.Diagnostics.BdoLog.#ctor*
  nameWithType.vb: BdoLog.BdoLog(IBdoTaskConfiguration, Predicate(Of IBdoLogEvent), IBdoLogger())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.BdoLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent), BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: BdoLog(IBdoTaskConfiguration, Predicate(Of IBdoLogEvent), IBdoLogger())
- uid: BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.#ctor(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})
  id: '#ctor(BindOpen.System.Diagnostics.IBdoLog,BindOpen.Extensions.Runtime.IBdoTaskConfiguration,System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent})'
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: BdoLog(IBdoLog, IBdoTaskConfiguration, Predicate<IBdoLogEvent>)
  nameWithType: BdoLog.BdoLog(IBdoLog, IBdoTaskConfiguration, Predicate<IBdoLogEvent>)
  fullName: BindOpen.System.Diagnostics.BdoLog.BdoLog(BindOpen.System.Diagnostics.IBdoLog, BindOpen.Extensions.Runtime.IBdoTaskConfiguration, System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>)
  type: Constructor
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: .ctor
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 296
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nInstantiates a new instance of the Log class specifying parent.\n"
  example: []
  syntax:
    content: public BdoLog(IBdoLog parentLog, IBdoTaskConfiguration task = null, Predicate<IBdoLogEvent> eventFilter = null)
    parameters:
    - id: parentLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The parent logger to consider.
    - id: task
      type: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
      description: The task to consider.
    - id: eventFilter
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: The function that filters events.
    content.vb: Public Sub New(parentLog As IBdoLog, task As IBdoTaskConfiguration = Nothing, eventFilter As Predicate(Of IBdoLogEvent) = Nothing)
  overload: BindOpen.System.Diagnostics.BdoLog.#ctor*
  nameWithType.vb: BdoLog.BdoLog(IBdoLog, IBdoTaskConfiguration, Predicate(Of IBdoLogEvent))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.BdoLog(BindOpen.System.Diagnostics.IBdoLog, BindOpen.Extensions.Runtime.IBdoTaskConfiguration, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent))
  name.vb: BdoLog(IBdoLog, IBdoTaskConfiguration, Predicate(Of IBdoLogEvent))
- uid: BindOpen.System.Diagnostics.BdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  id: AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddLoggers(IBdoLogger[])
  nameWithType: BdoLog.AddLoggers(IBdoLogger[])
  fullName: BindOpen.System.Diagnostics.BdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddLoggers
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 323
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified loggers.\n"
  example: []
  syntax:
    content: public void AddLoggers(params IBdoLogger[] loggers)
    parameters:
    - id: loggers
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
      description: The loggers to add.
    content.vb: Public Sub AddLoggers(ParamArray loggers As IBdoLogger())
  overload: BindOpen.System.Diagnostics.BdoLog.AddLoggers*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  nameWithType.vb: BdoLog.AddLoggers(IBdoLogger())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: AddLoggers(IBdoLogger())
- uid: BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: WriteLog(IBdoTaskConfiguration, BdoLoggerMode)
  nameWithType: BdoLog.WriteLog(IBdoTaskConfiguration, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration, BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 345
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nLogs the specified task.\n"
  example: []
  syntax:
    content: public void WriteLog(IBdoTaskConfiguration task, BdoLoggerMode mode = BdoLoggerMode.Auto)
    parameters:
    - id: task
      type: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
      description: The task to log.
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to log.
    content.vb: Public Sub WriteLog(task As IBdoTaskConfiguration, mode As BdoLoggerMode = BdoLoggerMode.Auto)
  overload: BindOpen.System.Diagnostics.BdoLog.WriteLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: WriteLog(IBdoLogEvent, BdoLoggerMode)
  nameWithType: BdoLog.WriteLog(IBdoLogEvent, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 364
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nLogs the specified event.\n"
  example: []
  syntax:
    content: public void WriteLog(IBdoLogEvent logEvent, BdoLoggerMode mode = BdoLoggerMode.Auto)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: The event to log.
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to log.
    content.vb: Public Sub WriteLog(logEvent As IBdoLogEvent, mode As BdoLoggerMode = BdoLoggerMode.Auto)
  overload: BindOpen.System.Diagnostics.BdoLog.WriteLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: WriteLog(String, Object, BdoLoggerMode)
  nameWithType: BdoLog.WriteLog(String, Object, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.BdoLog.WriteLog(System.String, System.Object, BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 384
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nLogs the specified element.\n"
  example: []
  syntax:
    content: public void WriteLog(string elementName, object elementValue, BdoLoggerMode mode = BdoLoggerMode.Auto)
    parameters:
    - id: elementName
      type: System.String
      description: The element name to log.
    - id: elementValue
      type: System.Object
      description: The element value to log.
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to log.
    content.vb: Public Sub WriteLog(elementName As String, elementValue As Object, mode As BdoLoggerMode = BdoLoggerMode.Auto)
  overload: BindOpen.System.Diagnostics.BdoLog.WriteLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  id: WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: WriteLog(IBdoLog, BdoLoggerMode)
  nameWithType: BdoLog.WriteLog(IBdoLog, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.BdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.BdoLoggerMode)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WriteLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 400
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nLogs the specified child log.\n"
  example: []
  syntax:
    content: public void WriteLog(IBdoLog childLog, BdoLoggerMode mode = BdoLoggerMode.Auto)
    parameters:
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log to consider.
    - id: mode
      type: BindOpen.System.Diagnostics.BdoLoggerMode
      description: The mode to log.
    content.vb: Public Sub WriteLog(childLog As IBdoLog, mode As BdoLoggerMode = BdoLoggerMode.Auto)
  overload: BindOpen.System.Diagnostics.BdoLog.WriteLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddEvent(IBdoLogEvent, IBdoLog, Predicate<IBdoLog>)
  nameWithType: BdoLog.AddEvent(IBdoLogEvent, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEvent
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 419
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds a new log event.\n"
  example: []
  syntax:
    content: public IBdoLogEvent AddEvent(IBdoLogEvent logEvent, IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: logEvent
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: The log event to add.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
    content.vb: Public Function AddEvent(logEvent As IBdoLogEvent, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.AddEvent*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  nameWithType.vb: BdoLog.AddEvent(IBdoLogEvent, IBdoLog, Predicate(Of IBdoLog))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddEvent(IBdoLogEvent, IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: BdoLog.AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEvent
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 467
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified log event.\n"
  example: []
  syntax:
    content: public IBdoLogEvent AddEvent(EventKinds kind, string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: kind
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: The kind of this instance.
    - id: title
      type: System.String
      description: The title of this instance.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality of this instance.
    - id: description
      type: System.String
      description: The description of this instance.
    - id: resultCode
      type: System.String
      description: The result code of this instance.
    - id: source
      type: System.String
      description: The ExtensionDataContext of this instance.
    - id: date
      type: System.Nullable{System.DateTime}
      description: The date to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
    content.vb: Public Function AddEvent(kind As EventKinds, title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.AddEvent*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  nameWithType.vb: BdoLog.AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.BdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddWarning(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: BdoLog.AddWarning(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddWarning(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddWarning
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 505
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified warning.\n"
  example: []
  syntax:
    content: public IBdoLogEvent AddWarning(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string aSource = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: The title of this instance.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality of this instance.
    - id: description
      type: System.String
      description: The description of this instance.
    - id: resultCode
      type: System.String
      description: The result code of this instance.
    - id: aSource
      type: System.String
      description: The ExtensionDataContext of this instance.
    - id: date
      type: System.Nullable{System.DateTime}
      description: The date to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
    content.vb: Public Function AddWarning(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, aSource As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.AddWarning*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  nameWithType.vb: BdoLog.AddWarning(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddWarning(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddWarning(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.BdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddError(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: BdoLog.AddError(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddError(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddError
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 536
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified error.\n"
  example: []
  syntax:
    content: public IBdoLogEvent AddError(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string aSource = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: The title of this instance.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality of this instance.
    - id: description
      type: System.String
      description: The description of this instance.
    - id: resultCode
      type: System.String
      description: The result code of this instance.
    - id: aSource
      type: System.String
      description: The ExtensionDataContext of this instance.
    - id: date
      type: System.Nullable{System.DateTime}
      description: The date to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
    content.vb: Public Function AddError(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, aSource As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.AddError*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  nameWithType.vb: BdoLog.AddError(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddError(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddError(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.BdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: BdoLog.AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddCheckpoint(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddCheckpoint
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 567
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified checkpoint.\n"
  example: []
  syntax:
    content: public IBdoLogEvent AddCheckpoint(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: The title of this instance.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality of this instance.
    - id: description
      type: System.String
      description: The description of this instance.
    - id: resultCode
      type: System.String
      description: The result code of this instance.
    - id: source
      type: System.String
      description: The ExtensionDataContext of this instance.
    - id: date
      type: System.Nullable{System.DateTime}
      description: The date to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
    content.vb: Public Function AddCheckpoint(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.AddCheckpoint*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  nameWithType.vb: BdoLog.AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddCheckpoint(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.BdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddMessage(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: BdoLog.AddMessage(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddMessage(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddMessage
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 598
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified message.\n"
  example: []
  syntax:
    content: public IBdoLogEvent AddMessage(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: The title of this instance.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality of this instance.
    - id: description
      type: System.String
      description: The description of this instance.
    - id: resultCode
      type: System.String
      description: The result code of this instance.
    - id: source
      type: System.String
      description: The ExtensionDataContext of this instance.
    - id: date
      type: System.Nullable{System.DateTime}
      description: The date to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
    content.vb: Public Function AddMessage(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.AddMessage*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  nameWithType.vb: BdoLog.AddMessage(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddMessage(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddMessage(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.BdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddException(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: BdoLog.AddException(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddException(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddException
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 629
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified exception.\n"
  example: []
  syntax:
    content: public IBdoLogEvent AddException(string title, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ), IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: title
      type: System.String
      description: The title of this instance.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality of this instance.
    - id: description
      type: System.String
      description: The description of this instance.
    - id: resultCode
      type: System.String
      description: The result code of this instance.
    - id: source
      type: System.String
      description: The ExtensionDataContext of this instance.
    - id: date
      type: System.Nullable{System.DateTime}
      description: The date to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
    content.vb: Public Function AddException(title As String, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.AddException*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  nameWithType.vb: BdoLog.AddException(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddException(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddException(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.BdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  id: AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate<IBdoLog>)
  nameWithType: BdoLog.AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddException(System.Exception, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddException
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 658
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified exception.\n"
  example: []
  syntax:
    content: public IBdoLogEvent AddException(Exception exception, BdoEventCriticality criticality = BdoEventCriticality.None, string resultCode = null, string source = null, IBdoLog childLog = null, Predicate<IBdoLog> logFinder = null)
    parameters:
    - id: exception
      type: System.Exception
      description: The exception to consider.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality to consider.
    - id: resultCode
      type: System.String
      description: The result code to consider.
    - id: source
      type: System.String
      description: The ExtensionDataContext to consider.
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
    content.vb: Public Function AddException(exception As Exception, criticality As BdoEventCriticality = BdoEventCriticality.None, resultCode As String = Nothing, source As String = Nothing, childLog As IBdoLog = Nothing, logFinder As Predicate(Of IBdoLog) = Nothing) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.AddException*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  nameWithType.vb: BdoLog.AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate(Of IBdoLog))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddException(System.Exception, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate(Of IBdoLog))
- uid: BindOpen.System.Diagnostics.BdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  id: WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: WithEvents(Func<IBdoLog, IBdoLogEvent>[])
  nameWithType: BdoLog.WithEvents(Func<IBdoLog, IBdoLogEvent>[])
  fullName: BindOpen.System.Diagnostics.BdoLog.WithEvents(System.Func<BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent>[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: WithEvents
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 678
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified events.\n"
  example: []
  syntax:
    content: public IBdoLog WithEvents(params Func<IBdoLog, IBdoLogEvent>[] eventFuncs)
    parameters:
    - id: eventFuncs
      type: System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[]
      description: The functions that return events.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: Returns the added events.
    content.vb: Public Function WithEvents(ParamArray eventFuncs As Func(Of IBdoLog, IBdoLogEvent)()) As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.WithEvents*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  nameWithType.vb: BdoLog.WithEvents(Func(Of IBdoLog, IBdoLogEvent)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.WithEvents(System.Func(Of BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent)())
  name.vb: WithEvents(Func(Of IBdoLog, IBdoLogEvent)())
- uid: BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddEvents(IBdoLog, EventKinds[])
  nameWithType: BdoLog.AddEvents(IBdoLog, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEvents
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 694
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the events of the specified log.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> AddEvents(IBdoLog log, params EventKinds[] kinds)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log whose task results must be added.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The event kinds to add.
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: Returns the added events.
    content.vb: Public Function AddEvents(log As IBdoLog, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.AddEvents*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.AddEvents(IBdoLog, EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEvents(IBdoLog, EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  id: AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddEvents(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  nameWithType: BdoLog.AddEvents(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEvents
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 708
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the events of the specified log.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> AddEvents(IBdoLog log, Predicate<IBdoLog> logFinder = null, params EventKinds[] kinds)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The event kinds to add.
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: Returns the added events.
    content.vb: Public Function AddEvents(log As IBdoLog, logFinder As Predicate(Of IBdoLog) = Nothing, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.AddEvents*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.AddEvents(IBdoLog, Predicate(Of IBdoLog), EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEvents(IBdoLog, Predicate(Of IBdoLog), EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddEventsTo(IBdoLog, EventKinds[])
  nameWithType: BdoLog.AddEventsTo(IBdoLog, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEventsTo
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 737
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nInserts the events of this instance into the specified log.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> AddEventsTo(IBdoLog log, params EventKinds[] kinds)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log whose task results must be added.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The event kinds to add.
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: Returns the added events.
    content.vb: Public Function AddEventsTo(log As IBdoLog, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.AddEventsTo*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.AddEventsTo(IBdoLog, EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEventsTo(IBdoLog, EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  id: AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddEventsTo(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  nameWithType: BdoLog.AddEventsTo(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddEventsTo
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 751
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the events of this instance to the specified log.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> AddEventsTo(IBdoLog log, Predicate<IBdoLog> logFinder = null, params EventKinds[] kinds)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The event kinds to add.
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: Returns the added events.
    content.vb: Public Function AddEventsTo(log As IBdoLog, logFinder As Predicate(Of IBdoLog) = Nothing, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.AddEventsTo*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.AddEventsTo(IBdoLog, Predicate(Of IBdoLog), EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEventsTo(IBdoLog, Predicate(Of IBdoLog), EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: ClearEvents(Boolean, EventKinds[])
  nameWithType: BdoLog.ClearEvents(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.ClearEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ClearEvents
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 779
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nClears the specified events.\n"
  example: []
  syntax:
    content: public void ClearEvents(bool isRecursive = true, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicate whether the search is recursive.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The kinds to consider.
    content.vb: Public Sub ClearEvents(isRecursive As Boolean = True, ParamArray kinds As EventKinds())
  overload: BindOpen.System.Diagnostics.BdoLog.ClearEvents*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.ClearEvents(Boolean, EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.ClearEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: ClearEvents(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.Sanitize
  commentId: M:BindOpen.System.Diagnostics.BdoLog.Sanitize
  id: Sanitize
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Sanitize()
  nameWithType: BdoLog.Sanitize()
  fullName: BindOpen.System.Diagnostics.BdoLog.Sanitize()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Sanitize
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 797
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nSanitize this instance.\n"
  example: []
  syntax:
    content: public void Sanitize()
    content.vb: Public Sub Sanitize
  overload: BindOpen.System.Diagnostics.BdoLog.Sanitize*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Sanitize
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  id: AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddSubLog(IBdoLog, Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  nameWithType: BdoLog.AddSubLog(IBdoLog, Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 818
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified warning.\n"
  example: []
  syntax:
    content: public IBdoLog AddSubLog(IBdoLog childLog, Predicate<IBdoLog> logFinder = null, EventKinds eventKind = EventKinds.Message | EventKinds.Checkpoint | EventKinds.Warning | EventKinds.Error | EventKinds.Exception | EventKinds.Other | EventKinds.Any, string title = null, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ))
    parameters:
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log of this instance.
    - id: logFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    - id: eventKind
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: The event kind of this instance.
    - id: title
      type: System.String
      description: The title of this instance.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality of this instance.
    - id: description
      type: System.String
      description: The description of this instance.
    - id: resultCode
      type: System.String
      description: The result code of this instance.
    - id: source
      type: System.String
      description: The ExtensionDataContext of this instance.
    - id: date
      type: System.Nullable{System.DateTime}
      description: The date to consider.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Public Function AddSubLog(childLog As IBdoLog, logFinder As Predicate(Of IBdoLog) = Nothing, eventKind As EventKinds = EventKinds.Message Or EventKinds.Checkpoint Or EventKinds.Warning Or EventKinds.Error Or EventKinds.Exception Or EventKinds.Other Or EventKinds.Any, title As String = Nothing, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.AddSubLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  nameWithType.vb: BdoLog.AddSubLog(IBdoLog, Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime))
  name.vb: AddSubLog(IBdoLog, Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
- uid: BindOpen.System.Diagnostics.BdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  id: AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: AddSubLog(Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  nameWithType: BdoLog.AddSubLog(Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  fullName: BindOpen.System.Diagnostics.BdoLog.AddSubLog(System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 853
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nAdds the specified warning.\n"
  example: []
  syntax:
    content: public IBdoLog AddSubLog(Predicate<IBdoLog> filterFinder = null, EventKinds eventKind = EventKinds.Message | EventKinds.Checkpoint | EventKinds.Warning | EventKinds.Error | EventKinds.Exception | EventKinds.Other | EventKinds.Any, string title = null, BdoEventCriticality criticality = BdoEventCriticality.None, string description = null, string resultCode = null, string source = null, DateTime? date = default(DateTime? ))
    parameters:
    - id: filterFinder
      type: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
      description: The filter function to consider. If true then the child log is added otherwise it is not.
    - id: eventKind
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: The event kind of this instance.
    - id: title
      type: System.String
      description: The title of this instance.
    - id: criticality
      type: BindOpen.System.Diagnostics.Events.BdoEventCriticality
      description: The criticality of this instance.
    - id: description
      type: System.String
      description: The description of this instance.
    - id: resultCode
      type: System.String
      description: The result code of this instance.
    - id: source
      type: System.String
      description: The ExtensionDataContext of this instance.
    - id: date
      type: System.Nullable{System.DateTime}
      description: The date to consider.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
    content.vb: Public Function AddSubLog(filterFinder As Predicate(Of IBdoLog) = Nothing, eventKind As EventKinds = EventKinds.Message Or EventKinds.Checkpoint Or EventKinds.Warning Or EventKinds.Error Or EventKinds.Exception Or EventKinds.Other Or EventKinds.Any, title As String = Nothing, criticality As BdoEventCriticality = BdoEventCriticality.None, description As String = Nothing, resultCode As String = Nothing, source As String = Nothing, date As Date? = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.AddSubLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  nameWithType.vb: BdoLog.AddSubLog(Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.AddSubLog(System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime))
  name.vb: AddSubLog(Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
- uid: BindOpen.System.Diagnostics.BdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  id: RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: RemoveSubLog(IBdoLog, Boolean)
  nameWithType: BdoLog.RemoveSubLog(IBdoLog, Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 898
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nRemoves the specified child log.\n"
  example: []
  syntax:
    content: public bool RemoveSubLog(IBdoLog childLog, bool isRecursive = true)
    parameters:
    - id: childLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child log to remove.
    - id: isRecursive
      type: System.Boolean
      description: Indicate whether the search is recursive.
    return:
      type: System.Boolean
    content.vb: Public Function RemoveSubLog(childLog As IBdoLog, isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.RemoveSubLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.RemoveSubLog(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.RemoveSubLog(System.String,System.Boolean)
  id: RemoveSubLog(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: RemoveSubLog(String, Boolean)
  nameWithType: BdoLog.RemoveSubLog(String, Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.RemoveSubLog(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 908
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nRemoves the child log with the specified ID.\n"
  example: []
  syntax:
    content: public bool RemoveSubLog(string id, bool isRecursive = true)
    parameters:
    - id: id
      type: System.String
      description: The ID to consider.
    - id: isRecursive
      type: System.Boolean
      description: Indicate whether the search is recursive.
    return:
      type: System.Boolean
    content.vb: Public Function RemoveSubLog(id As String, isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.RemoveSubLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.GetLogger(System.String)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetLogger(System.String)
  id: GetLogger(System.String)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetLogger(String)
  nameWithType: BdoLog.GetLogger(String)
  fullName: BindOpen.System.Diagnostics.BdoLog.GetLogger(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetLogger
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 931
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nGets the logger with the specified name.\n"
  example: []
  syntax:
    content: public IBdoLogger GetLogger(string name = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the logger to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
      description: Returns the logger with the specified name.
    content.vb: Public Function GetLogger(name As String = Nothing) As IBdoLogger
  overload: BindOpen.System.Diagnostics.BdoLog.GetLogger*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  id: GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetLogger(BdoDefaultLoggerFormat)
  nameWithType: BdoLog.GetLogger(BdoDefaultLoggerFormat)
  fullName: BindOpen.System.Diagnostics.BdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetLogger
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 944
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nGets the logger with the specified format.\n"
  example: []
  syntax:
    content: public IBdoLogger GetLogger(BdoDefaultLoggerFormat format)
    parameters:
    - id: format
      type: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
      description: The name of the format to consider.
    return:
      type: BindOpen.System.Diagnostics.Loggers.IBdoLogger
      description: Returns the logger with the specified format.
    content.vb: Public Function GetLogger(format As BdoDefaultLoggerFormat) As IBdoLogger
  overload: BindOpen.System.Diagnostics.BdoLog.GetLogger*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  id: GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetLoggers(BdoDefaultLoggerFormat[])
  nameWithType: BdoLog.GetLoggers(BdoDefaultLoggerFormat[])
  fullName: BindOpen.System.Diagnostics.BdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetLoggers
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 954
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nGets the loggers with the specified formats.\n"
  example: []
  syntax:
    content: public List<IBdoLogger> GetLoggers(params BdoDefaultLoggerFormat[] formats)
    parameters:
    - id: formats
      type: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[]
      description: The log formats to consider.
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
      description: The loggers with the specified formats.
    content.vb: Public Function GetLoggers(ParamArray formats As BdoDefaultLoggerFormat()) As List(Of IBdoLogger)
  overload: BindOpen.System.Diagnostics.BdoLog.GetLoggers*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  nameWithType.vb: BdoLog.GetLoggers(BdoDefaultLoggerFormat())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat())
  name.vb: GetLoggers(BdoDefaultLoggerFormat())
- uid: BindOpen.System.Diagnostics.BdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  id: Clone(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Clone(IBdoLog)
  nameWithType: BdoLog.Clone(IBdoLog)
  fullName: BindOpen.System.Diagnostics.BdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clone
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 972
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nClones this instance.\n"
  example: []
  syntax:
    content: public IBdoLog Clone(IBdoLog parent = null)
    parameters:
    - id: parent
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The parent to consider.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: Returns a cloned instance.
    content.vb: Public Function Clone(parent As IBdoLog = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.Clone*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  id: Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Clone<T>(IBdoLog)
  nameWithType: BdoLog.Clone<T>(IBdoLog)
  fullName: BindOpen.System.Diagnostics.BdoLog.Clone<T>(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clone
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 991
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nClones this instance.\n"
  example: []
  syntax:
    content: >-
      public T Clone<T>(IBdoLog parent = null)
          where T : class
    parameters:
    - id: parent
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The parent to consider.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Returns a cloned instance.
    content.vb: Public Function Clone(Of T As Class)(parent As IBdoLog = Nothing) As T
  overload: BindOpen.System.Diagnostics.BdoLog.Clone*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: BdoLog.Clone(Of T)(IBdoLog)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.Clone(Of T)(BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Clone(Of T)(IBdoLog)
- uid: BindOpen.System.Diagnostics.BdoLog.GetTitle(System.String,System.String)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetTitle(System.String,System.String)
  id: GetTitle(System.String,System.String)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetTitle(String, String)
  nameWithType: BdoLog.GetTitle(String, String)
  fullName: BindOpen.System.Diagnostics.BdoLog.GetTitle(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetTitle
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1001
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nReturns the title label.\n"
  example: []
  syntax:
    content: public override string GetTitle(string variantName = "*", string defaultVariantName = "*")
    parameters:
    - id: variantName
      type: System.String
      description: The variant variant name to consider.
    - id: defaultVariantName
      type: System.String
      description: The default variant name to consider.
    return:
      type: System.String
    content.vb: Public Overrides Function GetTitle(variantName As String = "*", defaultVariantName As String = "*") As String
  overridden: BindOpen.Data.Items.TitledDataItem.GetTitle(System.String,System.String)
  overload: BindOpen.System.Diagnostics.BdoLog.GetTitle*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String,System.String)
  - BindOpen.Data.Items.IGloballyTitled.GetTitle(System.String,System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.BdoLog.GetDescription(System.String,System.String)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetDescription(System.String,System.String)
  id: GetDescription(System.String,System.String)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetDescription(String, String)
  nameWithType: BdoLog.GetDescription(String, String)
  fullName: BindOpen.System.Diagnostics.BdoLog.GetDescription(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetDescription
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1014
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nReturns the description label.\n"
  example: []
  syntax:
    content: public override string GetDescription(string variantName = "*", string defaultVariantName = "*")
    parameters:
    - id: variantName
      type: System.String
      description: The variant variant name to consider.
    - id: defaultVariantName
      type: System.String
      description: The default variant name to consider.
    return:
      type: System.String
    content.vb: Public Overrides Function GetDescription(variantName As String = "*", defaultVariantName As String = "*") As String
  overridden: BindOpen.Data.Items.DescribedDataItem.GetDescription(System.String,System.String)
  overload: BindOpen.System.Diagnostics.BdoLog.GetDescription*
  implements:
  - BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.BdoLog.GetEventWithId(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetEventWithId(System.String,System.Boolean)
  id: GetEventWithId(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetEventWithId(String, Boolean)
  nameWithType: BdoLog.GetEventWithId(String, Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.GetEventWithId(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetEventWithId
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1030
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nReturns the event of this instance with the specified ID.\n"
  example: []
  syntax:
    content: public IBdoLogEvent GetEventWithId(string id, bool isRecursive = false)
    parameters:
    - id: id
      type: System.String
      description: The ID of the event to return.
    - id: isRecursive
      type: System.Boolean
      description: Indicate whether the search is recursive.
    return:
      type: BindOpen.System.Diagnostics.IBdoLogEvent
      description: The event of this instance with the specified ID.
    content.vb: Public Function GetEventWithId(id As String, isRecursive As Boolean = False) As IBdoLogEvent
  overload: BindOpen.System.Diagnostics.BdoLog.GetEventWithId*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetEvents(Boolean, EventKinds[])
  nameWithType: BdoLog.GetEvents(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.GetEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetEvents
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1053
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nGets the specified events of this instance.\n"
  example: []
  syntax:
    content: public List<IBdoLogEvent> GetEvents(bool isRecursive = false, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicate whether the search is recursive.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The kinds to consider.
    return:
      type: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
      description: Returns the specified events of this instance.
    content.vb: Public Function GetEvents(isRecursive As Boolean = False, ParamArray kinds As EventKinds()) As List(Of IBdoLogEvent)
  overload: BindOpen.System.Diagnostics.BdoLog.GetEvents*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.GetEvents(Boolean, EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.GetEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetEvents(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetEventCount(Boolean, EventKinds[])
  nameWithType: BdoLog.GetEventCount(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.GetEventCount(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetEventCount
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1078
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nReturns the number of the specified events of this instance.\n"
  example: []
  syntax:
    content: public int GetEventCount(bool isRecursive = false, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicate whether the search is recursive.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The kinds to consider.
    return:
      type: System.Int32
      description: The number of the specified events of this instance.
    content.vb: Public Function GetEventCount(isRecursive As Boolean = False, ParamArray kinds As EventKinds()) As Integer
  overload: BindOpen.System.Diagnostics.BdoLog.GetEventCount*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.GetEventCount(Boolean, EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.GetEventCount(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetEventCount(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetMaxEventKind(Boolean, EventKinds[])
  nameWithType: BdoLog.GetMaxEventKind(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetMaxEventKind
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1099
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nGets the warnings, errors or exceptions of this instance.\n"
  example: []
  syntax:
    content: public EventKinds GetMaxEventKind(bool isRecursive = true, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicate whether the search is recursive.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The kinds to consider.
    return:
      type: BindOpen.System.Diagnostics.Events.EventKinds
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function GetMaxEventKind(isRecursive As Boolean = True, ParamArray kinds As EventKinds()) As EventKinds
  overload: BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.GetMaxEventKind(Boolean, EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetMaxEventKind(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasEvent(Boolean, EventKinds[])
  nameWithType: BdoLog.HasEvent(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.HasEvent(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasEvent
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1114
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nIndicates whether this instance has the specified events.\n"
  example: []
  syntax:
    content: public bool HasEvent(bool isRecursive = true, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicates whether the search must be recursive.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The event kinds to consider.
    return:
      type: System.Boolean
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function HasEvent(isRecursive As Boolean = True, ParamArray kinds As EventKinds()) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasEvent*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.HasEvent(Boolean, EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.HasEvent(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasEvent(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  id: HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasEvent(EventKinds[])
  nameWithType: BdoLog.HasEvent(EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasEvent
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1135
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nIndicates whether this instance has the specified events.\n"
  example: []
  syntax:
    content: public bool HasEvent(params EventKinds[] kinds)
    parameters:
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The event kinds to consider.
    return:
      type: System.Boolean
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function HasEvent(ParamArray kinds As EventKinds()) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasEvent*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.HasEvent(EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasEvent(EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  id: HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasWarnings(Boolean, EventKinds[])
  nameWithType: BdoLog.HasWarnings(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.BdoLog.HasWarnings(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasWarnings
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1147
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nChecks this instance has any warnings.\n"
  example: []
  syntax:
    content: public bool HasWarnings(bool isRecursive = true, params EventKinds[] kinds)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicates whether the search must be recursive.
    - id: kinds
      type: BindOpen.System.Diagnostics.Events.EventKinds[]
      description: The event kinds to consider.
    return:
      type: System.Boolean
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function HasWarnings(isRecursive As Boolean = True, ParamArray kinds As EventKinds()) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasWarnings*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: BdoLog.HasWarnings(Boolean, EventKinds())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.HasWarnings(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasWarnings(Boolean, EventKinds())
- uid: BindOpen.System.Diagnostics.BdoLog.HasErrors(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasErrors(System.Boolean)
  id: HasErrors(System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasErrors(Boolean)
  nameWithType: BdoLog.HasErrors(Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.HasErrors(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasErrors
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1159
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nChecks this instance has any errors.\n"
  example: []
  syntax:
    content: public bool HasErrors(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicates whether the search must be recursive.
    return:
      type: System.Boolean
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function HasErrors(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasErrors*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.HasExceptions(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasExceptions(System.Boolean)
  id: HasExceptions(System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasExceptions(Boolean)
  nameWithType: BdoLog.HasExceptions(Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.HasExceptions(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasExceptions
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1169
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nChecks this instance has any exceptions.\n"
  example: []
  syntax:
    content: public bool HasExceptions(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicates whether the search must be recursive.
    return:
      type: System.Boolean
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function HasExceptions(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasExceptions*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.HasMessages(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasMessages(System.Boolean)
  id: HasMessages(System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasMessages(Boolean)
  nameWithType: BdoLog.HasMessages(Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.HasMessages(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasMessages
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1179
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nChecks this instance has any messages.\n"
  example: []
  syntax:
    content: public bool HasMessages(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicates whether the search must be recursive.
    return:
      type: System.Boolean
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function HasMessages(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasMessages*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptions(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptions(System.Boolean)
  id: HasErrorsOrExceptions(System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasErrorsOrExceptions(Boolean)
  nameWithType: BdoLog.HasErrorsOrExceptions(Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptions(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasErrorsOrExceptions
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1189
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nChecks this instance has any errors or exceptions.\n"
  example: []
  syntax:
    content: public bool HasErrorsOrExceptions(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicates whether the search must be recursive.
    return:
      type: System.Boolean
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function HasErrorsOrExceptions(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptions*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  id: HasErrorsOrExceptionsOrWarnings(System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasErrorsOrExceptionsOrWarnings(Boolean)
  nameWithType: BdoLog.HasErrorsOrExceptionsOrWarnings(Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasErrorsOrExceptionsOrWarnings
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1199
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nChecks this instance has any warnings, errors or exceptions.\n"
  example: []
  syntax:
    content: public bool HasErrorsOrExceptionsOrWarnings(bool isRecursive = true)
    parameters:
    - id: isRecursive
      type: System.Boolean
      description: Indicates whether the search must be recursive.
    return:
      type: System.Boolean
      description: True if this instance has the specified events. False otherwise.
    content.vb: Public Function HasErrorsOrExceptionsOrWarnings(isRecursive As Boolean = True) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptionsOrWarnings*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.GetRoot
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetRoot
  id: GetRoot
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetRoot()
  nameWithType: BdoLog.GetRoot()
  fullName: BindOpen.System.Diagnostics.BdoLog.GetRoot()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetRoot
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1210
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nReturns the log root.\n"
  example: []
  syntax:
    content: public IBdoLog GetRoot()
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log root.
    content.vb: Public Function GetRoot As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.GetRoot*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetRoot
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.GetSubLogWithId(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.GetSubLogWithId(System.String,System.Boolean)
  id: GetSubLogWithId(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: GetSubLogWithId(String, Boolean)
  nameWithType: BdoLog.GetSubLogWithId(String, Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.GetSubLogWithId(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetSubLogWithId
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1221
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nReturns the sub log with the specified ID.\n"
  example: []
  syntax:
    content: public IBdoLog GetSubLogWithId(string id, bool isRecursive = false)
    parameters:
    - id: id
      type: System.String
      description: The ID of the log to return.
    - id: isRecursive
      type: System.Boolean
      description: Indicates whether the search must be recursive.
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The child with the specified ID.
    content.vb: Public Function GetSubLogWithId(id As String, isRecursive As Boolean = False) As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.GetSubLogWithId*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.HasSubLog
  commentId: M:BindOpen.System.Diagnostics.BdoLog.HasSubLog
  id: HasSubLog
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: HasSubLog()
  nameWithType: BdoLog.HasSubLog()
  fullName: BindOpen.System.Diagnostics.BdoLog.HasSubLog()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasSubLog
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1242
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nChecks this instance has child log.\n"
  example: []
  syntax:
    content: public bool HasSubLog()
    return:
      type: System.Boolean
      description: True if this instance has child log. False otherwise.
    content.vb: Public Function HasSubLog As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.HasSubLog*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.BuildTree
  commentId: M:BindOpen.System.Diagnostics.BdoLog.BuildTree
  id: BuildTree
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: BuildTree()
  nameWithType: BdoLog.BuildTree()
  fullName: BindOpen.System.Diagnostics.BdoLog.BuildTree()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: BuildTree
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1250
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nBuilds the tree of this instance.\n"
  example: []
  syntax:
    content: public void BuildTree()
    content.vb: Public Sub BuildTree
  overload: BindOpen.System.Diagnostics.BdoLog.BuildTree*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.BuildTree
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  commentId: M:BindOpen.System.Diagnostics.BdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  id: ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: ForLoggers(Action<IBdoLogger>)
  nameWithType: BdoLog.ForLoggers(Action<IBdoLogger>)
  fullName: BindOpen.System.Diagnostics.BdoLog.ForLoggers(System.Action<BindOpen.System.Diagnostics.Loggers.IBdoLogger>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ForLoggers
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1275
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nExecutes the specified action on loggers of this instance.\n"
  example: []
  syntax:
    content: public void ForLoggers(Action<IBdoLogger> action)
    parameters:
    - id: action
      type: System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
      description: The action to consider.
    content.vb: Public Sub ForLoggers(action As Action(Of IBdoLogger))
  overload: BindOpen.System.Diagnostics.BdoLog.ForLoggers*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  nameWithType.vb: BdoLog.ForLoggers(Action(Of IBdoLogger))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.ForLoggers(System.Action(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger))
  name.vb: ForLoggers(Action(Of IBdoLogger))
- uid: BindOpen.System.Diagnostics.BdoLog.Start
  commentId: M:BindOpen.System.Diagnostics.BdoLog.Start
  id: Start
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: BdoLog.Start()
  fullName: BindOpen.System.Diagnostics.BdoLog.Start()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Start
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1289
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nStarts this instance.\n"
  example: []
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: BindOpen.System.Diagnostics.BdoLog.Start*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Start
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  id: End(BindOpen.System.Processing.ProcessExecutionStatus)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: End(ProcessExecutionStatus)
  nameWithType: BdoLog.End(ProcessExecutionStatus)
  fullName: BindOpen.System.Diagnostics.BdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: End
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1299
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nEnds this instance specifying the status.\n"
  example: []
  syntax:
    content: public void End(ProcessExecutionStatus status = ProcessExecutionStatus.Completed)
    parameters:
    - id: status
      type: BindOpen.System.Processing.ProcessExecutionStatus
      description: The new status to consider.
    content.vb: Public Sub End(status As ProcessExecutionStatus = ProcessExecutionStatus.Completed)
  overload: BindOpen.System.Diagnostics.BdoLog.End*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BindOpen.System.Diagnostics.BdoLog.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  id: UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: BdoLog.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.System.Diagnostics.BdoLog.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: UpdateStorageInfo
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1317
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nUpdates information for storage.\n"
  example: []
  syntax:
    content: public override void UpdateStorageInfo(IBdoLog log = null)
    parameters:
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to update.
    content.vb: Public Overrides Sub UpdateStorageInfo(log As IBdoLog = Nothing)
  overridden: BindOpen.Data.Items.DescribedDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  overload: BindOpen.System.Diagnostics.BdoLog.UpdateStorageInfo*
  implements:
  - BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.BdoLog.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  id: UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: BdoLog.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.System.Diagnostics.BdoLog.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: UpdateRuntimeInfo
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1339
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nUpdates information for runtime.\n"
  example: []
  syntax:
    content: public override void UpdateRuntimeInfo(IBdoScope scope = null, IBdoScriptVariableSet scriptVariableSet = null, IBdoLog log = null)
    parameters:
    - id: scope
      type: BindOpen.Application.Scopes.IBdoScope
      description: The scope to consider.
    - id: scriptVariableSet
      type: BindOpen.System.Scripting.IBdoScriptVariableSet
      description: The set of script variables to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to update.
    content.vb: Public Overrides Sub UpdateRuntimeInfo(scope As IBdoScope = Nothing, scriptVariableSet As IBdoScriptVariableSet = Nothing, log As IBdoLog = Nothing)
  overridden: BindOpen.Data.Items.DescribedDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  overload: BindOpen.System.Diagnostics.BdoLog.UpdateRuntimeInfo*
  implements:
  - BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: BindOpen.System.Diagnostics.BdoLog.Load``1(System.String,System.Boolean,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.Load``1(System.String,System.Boolean,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  id: Load``1(System.String,System.Boolean,BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Load<T>(String, Boolean, IBdoLog, Boolean)
  nameWithType: BdoLog.Load<T>(String, Boolean, IBdoLog, Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.Load<T>(System.String, System.Boolean, BindOpen.System.Diagnostics.IBdoLog, System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Load
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1366
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nInstantiates a new instance of Log class from a xml file.\n"
  example: []
  syntax:
    content: >-
      public static IBdoLog Load<T>(string filePath, bool isCheckXml, IBdoLog loadLog, bool mustFileExist = true)
          where T : IBdoLogger, new()
    parameters:
    - id: filePath
      type: System.String
      description: The path of the Xml file to load.
    - id: isCheckXml
      type: System.Boolean
      description: Indicates whether the file must be checked.
    - id: loadLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The output log of the load task.
    - id: mustFileExist
      type: System.Boolean
      description: Indicates whether the file must exist.
    typeParameters:
    - id: T
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The load log.
    content.vb: Public Shared Function Load(Of T As {IBdoLogger, New})(filePath As String, isCheckXml As Boolean, loadLog As IBdoLog, mustFileExist As Boolean = True) As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.Load*
  nameWithType.vb: BdoLog.Load(Of T)(String, Boolean, IBdoLog, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.Load(Of T)(System.String, System.Boolean, BindOpen.System.Diagnostics.IBdoLog, System.Boolean)
  name.vb: Load(Of T)(String, Boolean, IBdoLog, Boolean)
- uid: BindOpen.System.Diagnostics.BdoLog.LoadFromString``1(System.String,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.LoadFromString``1(System.String,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  id: LoadFromString``1(System.String,System.Boolean,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: LoadFromString<T>(String, Boolean, IBdoLog)
  nameWithType: BdoLog.LoadFromString<T>(String, Boolean, IBdoLog)
  fullName: BindOpen.System.Diagnostics.BdoLog.LoadFromString<T>(System.String, System.Boolean, BindOpen.System.Diagnostics.IBdoLog)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: LoadFromString
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1384
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nInstantiates a new instance of Log class from a xml string.\n"
  example: []
  syntax:
    content: >-
      public static IBdoLog LoadFromString<T>(string xmlString, bool isCheckXml, IBdoLog loadLog = null)
          where T : IBdoLogger, new()
    parameters:
    - id: xmlString
      type: System.String
      description: The Xml string to load.
    - id: isCheckXml
      type: System.Boolean
      description: Indicates whether the file must be checked.
    - id: loadLog
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The output log of the load task.
    typeParameters:
    - id: T
    return:
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log defined in the Xml file.
    content.vb: Public Shared Function LoadFromString(Of T As {IBdoLogger, New})(xmlString As String, isCheckXml As Boolean, loadLog As IBdoLog = Nothing) As IBdoLog
  overload: BindOpen.System.Diagnostics.BdoLog.LoadFromString*
  nameWithType.vb: BdoLog.LoadFromString(Of T)(String, Boolean, IBdoLog)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.LoadFromString(Of T)(System.String, System.Boolean, BindOpen.System.Diagnostics.IBdoLog)
  name.vb: LoadFromString(Of T)(String, Boolean, IBdoLog)
- uid: BindOpen.System.Diagnostics.BdoLog.Save``1(System.String)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.Save``1(System.String)
  id: Save``1(System.String)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Save<T>(String)
  nameWithType: BdoLog.Save<T>(String)
  fullName: BindOpen.System.Diagnostics.BdoLog.Save<T>(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Save
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1401
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nSaves this instance in the specified log file.\n"
  example: []
  syntax:
    content: >-
      public bool Save<T>(string logFilePath)
          where T : IBdoLogger, new()
    parameters:
    - id: logFilePath
      type: System.String
      description: The path of the log file to save.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: Returns the saving log.
    content.vb: Public Function Save(Of T As {IBdoLogger, New})(logFilePath As String) As Boolean
  overload: BindOpen.System.Diagnostics.BdoLog.Save*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.Save``1(System.String)
  nameWithType.vb: BdoLog.Save(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.Save(Of T)(System.String)
  name.vb: Save(Of T)(String)
- uid: BindOpen.System.Diagnostics.BdoLog.ToString``1
  commentId: M:BindOpen.System.Diagnostics.BdoLog.ToString``1
  id: ToString``1
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: ToString<T>()
  nameWithType: BdoLog.ToString<T>()
  fullName: BindOpen.System.Diagnostics.BdoLog.ToString<T>()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ToString
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1411
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nGets the xml string of this instance.\n"
  example: []
  syntax:
    content: >-
      public string ToString<T>()
          where T : IBdoLogger, new()
    typeParameters:
    - id: T
    return:
      type: System.String
      description: The Xml string of this instance.
    content.vb: Public Function ToString(Of T As {IBdoLogger, New}) As String
  overload: BindOpen.System.Diagnostics.BdoLog.ToString*
  implements:
  - BindOpen.System.Diagnostics.IBdoLog.ToString``1
  nameWithType.vb: BdoLog.ToString(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BindOpen.System.Diagnostics.BdoLog.ToString(Of T)()
  name.vb: ToString(Of T)()
- uid: BindOpen.System.Diagnostics.BdoLog.Dispose(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.BdoLog.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: BindOpen.System.Diagnostics.BdoLog
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: BdoLog.Dispose(Boolean)
  fullName: BindOpen.System.Diagnostics.BdoLog.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/System/Diagnostics/BdoLog.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Dispose
    path: ../src/BindOpen.Core/System/Diagnostics/BdoLog.cs
    startLine: 1428
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.System.Diagnostics
  summary: "\nDisposes this instance. \n"
  example: []
  syntax:
    content: protected override void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(isDisposing As Boolean)
  overridden: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  overload: BindOpen.System.Diagnostics.BdoLog.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: BindOpen.Data.Items.DataItem
  commentId: T:BindOpen.Data.Items.DataItem
  parent: BindOpen.Data.Items
  name: DataItem
  nameWithType: DataItem
  fullName: BindOpen.Data.Items.DataItem
- uid: BindOpen.Data.Items.IdentifiedDataItem
  commentId: T:BindOpen.Data.Items.IdentifiedDataItem
  parent: BindOpen.Data.Items
  name: IdentifiedDataItem
  nameWithType: IdentifiedDataItem
  fullName: BindOpen.Data.Items.IdentifiedDataItem
- uid: BindOpen.Data.Items.StoredDataItem
  commentId: T:BindOpen.Data.Items.StoredDataItem
  parent: BindOpen.Data.Items
  name: StoredDataItem
  nameWithType: StoredDataItem
  fullName: BindOpen.Data.Items.StoredDataItem
- uid: BindOpen.Data.Items.NamedDataItem
  commentId: T:BindOpen.Data.Items.NamedDataItem
  parent: BindOpen.Data.Items
  name: NamedDataItem
  nameWithType: NamedDataItem
  fullName: BindOpen.Data.Items.NamedDataItem
- uid: BindOpen.Data.Items.TitledDataItem
  commentId: T:BindOpen.Data.Items.TitledDataItem
  parent: BindOpen.Data.Items
  name: TitledDataItem
  nameWithType: TitledDataItem
  fullName: BindOpen.Data.Items.TitledDataItem
- uid: BindOpen.Data.Items.DescribedDataItem
  commentId: T:BindOpen.Data.Items.DescribedDataItem
  parent: BindOpen.Data.Items
  name: DescribedDataItem
  nameWithType: DescribedDataItem
  fullName: BindOpen.Data.Items.DescribedDataItem
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Data.Items.IDescribedDataItem
  commentId: T:BindOpen.Data.Items.IDescribedDataItem
  parent: BindOpen.Data.Items
  name: IDescribedDataItem
  nameWithType: IDescribedDataItem
  fullName: BindOpen.Data.Items.IDescribedDataItem
- uid: BindOpen.Data.Items.ITitledDataItem
  commentId: T:BindOpen.Data.Items.ITitledDataItem
  parent: BindOpen.Data.Items
  name: ITitledDataItem
  nameWithType: ITitledDataItem
  fullName: BindOpen.Data.Items.ITitledDataItem
- uid: BindOpen.Data.Items.INamedDataItem
  commentId: T:BindOpen.Data.Items.INamedDataItem
  parent: BindOpen.Data.Items
  name: INamedDataItem
  nameWithType: INamedDataItem
  fullName: BindOpen.Data.Items.INamedDataItem
- uid: BindOpen.Data.Items.IStoredDataItem
  commentId: T:BindOpen.Data.Items.IStoredDataItem
  parent: BindOpen.Data.Items
  name: IStoredDataItem
  nameWithType: IStoredDataItem
  fullName: BindOpen.Data.Items.IStoredDataItem
- uid: BindOpen.Data.Items.IIdentifiedDataItem
  commentId: T:BindOpen.Data.Items.IIdentifiedDataItem
  parent: BindOpen.Data.Items
  name: IIdentifiedDataItem
  nameWithType: IIdentifiedDataItem
  fullName: BindOpen.Data.Items.IIdentifiedDataItem
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Items.IIdentified
  commentId: T:BindOpen.Data.Items.IIdentified
  parent: BindOpen.Data.Items
  name: IIdentified
  nameWithType: IIdentified
  fullName: BindOpen.Data.Items.IIdentified
- uid: BindOpen.Data.Items.IReferenced
  commentId: T:BindOpen.Data.Items.IReferenced
  parent: BindOpen.Data.Items
  name: IReferenced
  nameWithType: IReferenced
  fullName: BindOpen.Data.Items.IReferenced
- uid: BindOpen.Data.Items.IStorable
  commentId: T:BindOpen.Data.Items.IStorable
  parent: BindOpen.Data.Items
  name: IStorable
  nameWithType: IStorable
  fullName: BindOpen.Data.Items.IStorable
- uid: BindOpen.Data.Items.INamed
  commentId: T:BindOpen.Data.Items.INamed
  parent: BindOpen.Data.Items
  name: INamed
  nameWithType: INamed
  fullName: BindOpen.Data.Items.INamed
- uid: BindOpen.Data.Items.IGloballyTitled
  commentId: T:BindOpen.Data.Items.IGloballyTitled
  parent: BindOpen.Data.Items
  name: IGloballyTitled
  nameWithType: IGloballyTitled
  fullName: BindOpen.Data.Items.IGloballyTitled
- uid: BindOpen.Data.Items.IGloballyDescribed
  commentId: T:BindOpen.Data.Items.IGloballyDescribed
  parent: BindOpen.Data.Items
  name: IGloballyDescribed
  nameWithType: IGloballyDescribed
  fullName: BindOpen.Data.Items.IGloballyDescribed
- uid: BindOpen.Data.Items.DescribedDataItem.Description
  commentId: P:BindOpen.Data.Items.DescribedDataItem.Description
  parent: BindOpen.Data.Items.DescribedDataItem
  name: Description
  nameWithType: DescribedDataItem.Description
  fullName: BindOpen.Data.Items.DescribedDataItem.Description
- uid: BindOpen.Data.Items.DescribedDataItem.DescriptionSpecified
  commentId: P:BindOpen.Data.Items.DescribedDataItem.DescriptionSpecified
  parent: BindOpen.Data.Items.DescribedDataItem
  name: DescriptionSpecified
  nameWithType: DescribedDataItem.DescriptionSpecified
  fullName: BindOpen.Data.Items.DescribedDataItem.DescriptionSpecified
- uid: BindOpen.Data.Items.DescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
  commentId: M:BindOpen.Data.Items.DescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
  parent: BindOpen.Data.Items.DescribedDataItem
  name: Update(IDescribedDataItem)
  nameWithType: DescribedDataItem.Update(IDescribedDataItem)
  fullName: BindOpen.Data.Items.DescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
    name: Update
    nameWithType: DescribedDataItem.Update
    fullName: BindOpen.Data.Items.DescribedDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDescribedDataItem
    name: IDescribedDataItem
    nameWithType: IDescribedDataItem
    fullName: BindOpen.Data.Items.IDescribedDataItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.Update(BindOpen.Data.Items.IDescribedDataItem)
    name: Update
    nameWithType: DescribedDataItem.Update
    fullName: BindOpen.Data.Items.DescribedDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.IDescribedDataItem
    name: IDescribedDataItem
    nameWithType: IDescribedDataItem
    fullName: BindOpen.Data.Items.IDescribedDataItem
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String)
  commentId: M:BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String)
  parent: BindOpen.Data.Items.DescribedDataItem
  isExternal: true
  name: AddDescription(String)
  nameWithType: DescribedDataItem.AddDescription(String)
  fullName: BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String)
    name: AddDescription
    nameWithType: DescribedDataItem.AddDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.AddDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String)
    name: AddDescription
    nameWithType: DescribedDataItem.AddDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.AddDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String,System.String)
  parent: BindOpen.Data.Items.DescribedDataItem
  isExternal: true
  name: AddDescription(String, String)
  nameWithType: DescribedDataItem.AddDescription(String, String)
  fullName: BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String,System.String)
    name: AddDescription
    nameWithType: DescribedDataItem.AddDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.AddDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.AddDescription(System.String,System.String)
    name: AddDescription
    nameWithType: DescribedDataItem.AddDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.AddDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String)
  commentId: M:BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String)
  parent: BindOpen.Data.Items.DescribedDataItem
  isExternal: true
  name: SetDescription(String)
  nameWithType: DescribedDataItem.SetDescription(String)
  fullName: BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String)
    name: SetDescription
    nameWithType: DescribedDataItem.SetDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.SetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String)
    name: SetDescription
    nameWithType: DescribedDataItem.SetDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.SetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String,System.String)
  parent: BindOpen.Data.Items.DescribedDataItem
  isExternal: true
  name: SetDescription(String, String)
  nameWithType: DescribedDataItem.SetDescription(String, String)
  fullName: BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String,System.String)
    name: SetDescription
    nameWithType: DescribedDataItem.SetDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.SetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.SetDescription(System.String,System.String)
    name: SetDescription
    nameWithType: DescribedDataItem.SetDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.SetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DescribedDataItem.Clone
  commentId: M:BindOpen.Data.Items.DescribedDataItem.Clone
  parent: BindOpen.Data.Items.DescribedDataItem
  name: Clone()
  nameWithType: DescribedDataItem.Clone()
  fullName: BindOpen.Data.Items.DescribedDataItem.Clone()
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.Clone
    name: Clone
    nameWithType: DescribedDataItem.Clone
    fullName: BindOpen.Data.Items.DescribedDataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.Clone
    name: Clone
    nameWithType: DescribedDataItem.Clone
    fullName: BindOpen.Data.Items.DescribedDataItem.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.TitledDataItem.Title
  commentId: P:BindOpen.Data.Items.TitledDataItem.Title
  parent: BindOpen.Data.Items.TitledDataItem
  name: Title
  nameWithType: TitledDataItem.Title
  fullName: BindOpen.Data.Items.TitledDataItem.Title
- uid: BindOpen.Data.Items.TitledDataItem.TitleSpecified
  commentId: P:BindOpen.Data.Items.TitledDataItem.TitleSpecified
  parent: BindOpen.Data.Items.TitledDataItem
  name: TitleSpecified
  nameWithType: TitledDataItem.TitleSpecified
  fullName: BindOpen.Data.Items.TitledDataItem.TitleSpecified
- uid: BindOpen.Data.Items.TitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
  commentId: M:BindOpen.Data.Items.TitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
  parent: BindOpen.Data.Items.TitledDataItem
  name: Update(ITitledDataItem)
  nameWithType: TitledDataItem.Update(ITitledDataItem)
  fullName: BindOpen.Data.Items.TitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
  spec.csharp:
  - uid: BindOpen.Data.Items.TitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
    name: Update
    nameWithType: TitledDataItem.Update
    fullName: BindOpen.Data.Items.TitledDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.ITitledDataItem
    name: ITitledDataItem
    nameWithType: ITitledDataItem
    fullName: BindOpen.Data.Items.ITitledDataItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.TitledDataItem.Update(BindOpen.Data.Items.ITitledDataItem)
    name: Update
    nameWithType: TitledDataItem.Update
    fullName: BindOpen.Data.Items.TitledDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Items.ITitledDataItem
    name: ITitledDataItem
    nameWithType: ITitledDataItem
    fullName: BindOpen.Data.Items.ITitledDataItem
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.TitledDataItem.AddTitle(System.String)
  commentId: M:BindOpen.Data.Items.TitledDataItem.AddTitle(System.String)
  parent: BindOpen.Data.Items.TitledDataItem
  isExternal: true
  name: AddTitle(String)
  nameWithType: TitledDataItem.AddTitle(String)
  fullName: BindOpen.Data.Items.TitledDataItem.AddTitle(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.TitledDataItem.AddTitle(System.String)
    name: AddTitle
    nameWithType: TitledDataItem.AddTitle
    fullName: BindOpen.Data.Items.TitledDataItem.AddTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.TitledDataItem.AddTitle(System.String)
    name: AddTitle
    nameWithType: TitledDataItem.AddTitle
    fullName: BindOpen.Data.Items.TitledDataItem.AddTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.TitledDataItem.AddTitle(System.String,System.String)
  commentId: M:BindOpen.Data.Items.TitledDataItem.AddTitle(System.String,System.String)
  parent: BindOpen.Data.Items.TitledDataItem
  isExternal: true
  name: AddTitle(String, String)
  nameWithType: TitledDataItem.AddTitle(String, String)
  fullName: BindOpen.Data.Items.TitledDataItem.AddTitle(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.TitledDataItem.AddTitle(System.String,System.String)
    name: AddTitle
    nameWithType: TitledDataItem.AddTitle
    fullName: BindOpen.Data.Items.TitledDataItem.AddTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.TitledDataItem.AddTitle(System.String,System.String)
    name: AddTitle
    nameWithType: TitledDataItem.AddTitle
    fullName: BindOpen.Data.Items.TitledDataItem.AddTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.TitledDataItem.SetTitle(System.String)
  commentId: M:BindOpen.Data.Items.TitledDataItem.SetTitle(System.String)
  parent: BindOpen.Data.Items.TitledDataItem
  isExternal: true
  name: SetTitle(String)
  nameWithType: TitledDataItem.SetTitle(String)
  fullName: BindOpen.Data.Items.TitledDataItem.SetTitle(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.TitledDataItem.SetTitle(System.String)
    name: SetTitle
    nameWithType: TitledDataItem.SetTitle
    fullName: BindOpen.Data.Items.TitledDataItem.SetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.TitledDataItem.SetTitle(System.String)
    name: SetTitle
    nameWithType: TitledDataItem.SetTitle
    fullName: BindOpen.Data.Items.TitledDataItem.SetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.TitledDataItem.SetTitle(System.String,System.String)
  commentId: M:BindOpen.Data.Items.TitledDataItem.SetTitle(System.String,System.String)
  parent: BindOpen.Data.Items.TitledDataItem
  isExternal: true
  name: SetTitle(String, String)
  nameWithType: TitledDataItem.SetTitle(String, String)
  fullName: BindOpen.Data.Items.TitledDataItem.SetTitle(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.TitledDataItem.SetTitle(System.String,System.String)
    name: SetTitle
    nameWithType: TitledDataItem.SetTitle
    fullName: BindOpen.Data.Items.TitledDataItem.SetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.TitledDataItem.SetTitle(System.String,System.String)
    name: SetTitle
    nameWithType: TitledDataItem.SetTitle
    fullName: BindOpen.Data.Items.TitledDataItem.SetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.NamedDataItem.Name
  commentId: P:BindOpen.Data.Items.NamedDataItem.Name
  parent: BindOpen.Data.Items.NamedDataItem
  name: Name
  nameWithType: NamedDataItem.Name
  fullName: BindOpen.Data.Items.NamedDataItem.Name
- uid: BindOpen.Data.Items.NamedDataItem.NameSpecified
  commentId: P:BindOpen.Data.Items.NamedDataItem.NameSpecified
  parent: BindOpen.Data.Items.NamedDataItem
  name: NameSpecified
  nameWithType: NamedDataItem.NameSpecified
  fullName: BindOpen.Data.Items.NamedDataItem.NameSpecified
- uid: BindOpen.Data.Items.NamedDataItem.Key
  commentId: M:BindOpen.Data.Items.NamedDataItem.Key
  parent: BindOpen.Data.Items.NamedDataItem
  name: Key()
  nameWithType: NamedDataItem.Key()
  fullName: BindOpen.Data.Items.NamedDataItem.Key()
  spec.csharp:
  - uid: BindOpen.Data.Items.NamedDataItem.Key
    name: Key
    nameWithType: NamedDataItem.Key
    fullName: BindOpen.Data.Items.NamedDataItem.Key
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.NamedDataItem.Key
    name: Key
    nameWithType: NamedDataItem.Key
    fullName: BindOpen.Data.Items.NamedDataItem.Key
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.NamedDataItem.GetClonedName(System.String,System.String)
  commentId: M:BindOpen.Data.Items.NamedDataItem.GetClonedName(System.String,System.String)
  parent: BindOpen.Data.Items.NamedDataItem
  isExternal: true
  name: GetClonedName(String, String)
  nameWithType: NamedDataItem.GetClonedName(String, String)
  fullName: BindOpen.Data.Items.NamedDataItem.GetClonedName(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.NamedDataItem.GetClonedName(System.String,System.String)
    name: GetClonedName
    nameWithType: NamedDataItem.GetClonedName
    fullName: BindOpen.Data.Items.NamedDataItem.GetClonedName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.NamedDataItem.GetClonedName(System.String,System.String)
    name: GetClonedName
    nameWithType: NamedDataItem.GetClonedName
    fullName: BindOpen.Data.Items.NamedDataItem.GetClonedName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.StoredDataItem.NamePreffix
  commentId: P:BindOpen.Data.Items.StoredDataItem.NamePreffix
  parent: BindOpen.Data.Items.StoredDataItem
  name: NamePreffix
  nameWithType: StoredDataItem.NamePreffix
  fullName: BindOpen.Data.Items.StoredDataItem.NamePreffix
- uid: BindOpen.Data.Items.StoredDataItem.CreationDate
  commentId: P:BindOpen.Data.Items.StoredDataItem.CreationDate
  parent: BindOpen.Data.Items.StoredDataItem
  name: CreationDate
  nameWithType: StoredDataItem.CreationDate
  fullName: BindOpen.Data.Items.StoredDataItem.CreationDate
- uid: BindOpen.Data.Items.StoredDataItem.CreationDateSpecified
  commentId: P:BindOpen.Data.Items.StoredDataItem.CreationDateSpecified
  parent: BindOpen.Data.Items.StoredDataItem
  name: CreationDateSpecified
  nameWithType: StoredDataItem.CreationDateSpecified
  fullName: BindOpen.Data.Items.StoredDataItem.CreationDateSpecified
- uid: BindOpen.Data.Items.StoredDataItem.LastModificationDate
  commentId: P:BindOpen.Data.Items.StoredDataItem.LastModificationDate
  parent: BindOpen.Data.Items.StoredDataItem
  name: LastModificationDate
  nameWithType: StoredDataItem.LastModificationDate
  fullName: BindOpen.Data.Items.StoredDataItem.LastModificationDate
- uid: BindOpen.Data.Items.StoredDataItem.LastModificationDateSpecified
  commentId: P:BindOpen.Data.Items.StoredDataItem.LastModificationDateSpecified
  parent: BindOpen.Data.Items.StoredDataItem
  name: LastModificationDateSpecified
  nameWithType: StoredDataItem.LastModificationDateSpecified
  fullName: BindOpen.Data.Items.StoredDataItem.LastModificationDateSpecified
- uid: BindOpen.Data.Items.StoredDataItem.DeclareUpdate
  commentId: M:BindOpen.Data.Items.StoredDataItem.DeclareUpdate
  parent: BindOpen.Data.Items.StoredDataItem
  name: DeclareUpdate()
  nameWithType: StoredDataItem.DeclareUpdate()
  fullName: BindOpen.Data.Items.StoredDataItem.DeclareUpdate()
  spec.csharp:
  - uid: BindOpen.Data.Items.StoredDataItem.DeclareUpdate
    name: DeclareUpdate
    nameWithType: StoredDataItem.DeclareUpdate
    fullName: BindOpen.Data.Items.StoredDataItem.DeclareUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.StoredDataItem.DeclareUpdate
    name: DeclareUpdate
    nameWithType: StoredDataItem.DeclareUpdate
    fullName: BindOpen.Data.Items.StoredDataItem.DeclareUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IdentifiedDataItem.Id
  commentId: P:BindOpen.Data.Items.IdentifiedDataItem.Id
  parent: BindOpen.Data.Items.IdentifiedDataItem
  name: Id
  nameWithType: IdentifiedDataItem.Id
  fullName: BindOpen.Data.Items.IdentifiedDataItem.Id
- uid: BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  commentId: P:BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
  parent: BindOpen.Data.Items.IdentifiedDataItem
  name: IdSpecified
  nameWithType: IdentifiedDataItem.IdSpecified
  fullName: BindOpen.Data.Items.IdentifiedDataItem.IdSpecified
- uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  commentId: M:BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  parent: BindOpen.Data.Items.IdentifiedDataItem
  name: NewGuid()
  nameWithType: IdentifiedDataItem.NewGuid()
  fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid()
  spec.csharp:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
    name: NewGuid
    nameWithType: IdentifiedDataItem.NewGuid
    fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
    name: NewGuid
    nameWithType: IdentifiedDataItem.NewGuid
    fullName: BindOpen.Data.Items.IdentifiedDataItem.NewGuid
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  commentId: M:BindOpen.Data.Items.DataItem.InitializeLifetimeService
  parent: BindOpen.Data.Items.DataItem
  name: InitializeLifetimeService()
  nameWithType: DataItem.InitializeLifetimeService()
  fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: DataItem.InitializeLifetimeService
    fullName: BindOpen.Data.Items.DataItem.InitializeLifetimeService
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Clone``1
  commentId: M:BindOpen.Data.Items.DataItem.Clone``1
  parent: BindOpen.Data.Items.DataItem
  name: Clone<T>()
  nameWithType: DataItem.Clone<T>()
  fullName: BindOpen.Data.Items.DataItem.Clone<T>()
  nameWithType.vb: DataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.DataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone<T>
    nameWithType: DataItem.Clone<T>
    fullName: BindOpen.Data.Items.DataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Clone``1
    name: Clone(Of T)
    nameWithType: DataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.DataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: DataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: DataItem.Update
    fullName: BindOpen.Data.Items.DataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: DataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: DataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: DataItem.Check
    fullName: BindOpen.Data.Items.DataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  definition: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: DataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: DataItem.Repair
    fullName: BindOpen.Data.Items.DataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose
  commentId: M:BindOpen.Data.Items.DataItem.Dispose
  parent: BindOpen.Data.Items.DataItem
  name: Dispose()
  nameWithType: DataItem.Dispose()
  fullName: BindOpen.Data.Items.DataItem.Dispose()
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{BindOpen.System.Diagnostics.BdoLog})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  name: Using<BdoLog>(Action<BdoLog>)
  nameWithType: ObjectHelper.Using<BdoLog>(Action<BdoLog>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.System.Diagnostics.BdoLog>(System.Action<BindOpen.System.Diagnostics.BdoLog>)
  nameWithType.vb: ObjectHelper.Using(Of BdoLog)(Action(Of BdoLog))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.System.Diagnostics.BdoLog)(System.Action(Of BindOpen.System.Diagnostics.BdoLog))
  name.vb: Using(Of BdoLog)(Action(Of BdoLog))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using<BdoLog>
    nameWithType: ObjectHelper.Using<BdoLog>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<BindOpen.System.Diagnostics.BdoLog>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.BdoLog
    name: BdoLog
    nameWithType: BdoLog
    fullName: BindOpen.System.Diagnostics.BdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(System.Action{``0})
    name: Using(Of BdoLog)
    nameWithType: ObjectHelper.Using(Of BdoLog)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of BindOpen.System.Diagnostics.BdoLog)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.BdoLog
    name: BdoLog
    nameWithType: BdoLog
    fullName: BindOpen.System.Diagnostics.BdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String,System.String)
  commentId: M:BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
  parent: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory
  definition: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
  name: ToApiDto(String, String)
  nameWithType: ApiBdoLogDtoFactory.ToApiDto(String, String)
  fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String,System.String)
    name: ToApiDto
    nameWithType: ApiBdoLogDtoFactory.ToApiDto
    fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(System.String,System.String)
    name: ToApiDto
    nameWithType: ApiBdoLogDtoFactory.ToApiDto
    fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: DataItem.Update<T>
    fullName: BindOpen.Data.Items.DataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: DataItem.Update(Of T)
    fullName: BindOpen.Data.Items.DataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: DataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.DataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: DataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.DataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: DataItem.Check<T>
    fullName: BindOpen.Data.Items.DataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: DataItem.Check(Of T)
    fullName: BindOpen.Data.Items.DataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: DataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.DataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: DataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.DataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: DataItem.Repair<T>
    fullName: BindOpen.Data.Items.DataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: DataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.DataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
  isExternal: true
  name: Using<T>(T, Action<T>)
  nameWithType: ObjectHelper.Using<T>(T, Action<T>)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>(T, System.Action<T>)
  nameWithType.vb: ObjectHelper.Using(Of T)(T, Action(Of T))
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)(T, System.Action(Of T))
  name.vb: Using(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using<T>
    nameWithType: ObjectHelper.Using<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Using``1(``0,System.Action{``0})
    name: Using(Of T)
    nameWithType: ObjectHelper.Using(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Using(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
  commentId: M:BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
  isExternal: true
  name: ToApiDto(IBdoLog, String, String)
  nameWithType: ApiBdoLogDtoFactory.ToApiDto(IBdoLog, String, String)
  fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog, System.String, System.String)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
    name: ToApiDto
    nameWithType: ApiBdoLogDtoFactory.ToApiDto
    fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto(BindOpen.System.Diagnostics.IBdoLog,System.String,System.String)
    name: ToApiDto
    nameWithType: ApiBdoLogDtoFactory.ToApiDto
    fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory.ToApiDto
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory
  commentId: T:BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory
  parent: BindOpen.System.Diagnostics.Dto
  name: ApiBdoLogDtoFactory
  nameWithType: ApiBdoLogDtoFactory
  fullName: BindOpen.System.Diagnostics.Dto.ApiBdoLogDtoFactory
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.System.Diagnostics.Dto
  commentId: N:BindOpen.System.Diagnostics.Dto
  name: BindOpen.System.Diagnostics.Dto
  nameWithType: BindOpen.System.Diagnostics.Dto
  fullName: BindOpen.System.Diagnostics.Dto
- uid: BindOpen.System.Diagnostics.BdoLog.Execution*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Execution
  name: Execution
  nameWithType: BdoLog.Execution
  fullName: BindOpen.System.Diagnostics.BdoLog.Execution
- uid: BindOpen.System.Diagnostics.IBdoLog.Execution
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Execution
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Execution
  nameWithType: IBdoLog.Execution
  fullName: BindOpen.System.Diagnostics.IBdoLog.Execution
- uid: BindOpen.System.Processing.ProcessExecution
  commentId: T:BindOpen.System.Processing.ProcessExecution
  parent: BindOpen.System.Processing
  name: ProcessExecution
  nameWithType: ProcessExecution
  fullName: BindOpen.System.Processing.ProcessExecution
- uid: BindOpen.System.Processing
  commentId: N:BindOpen.System.Processing
  name: BindOpen.System.Processing
  nameWithType: BindOpen.System.Processing
  fullName: BindOpen.System.Processing
- uid: BindOpen.System.Diagnostics.BdoLog.ExecutionSpecified*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.ExecutionSpecified
  name: ExecutionSpecified
  nameWithType: BdoLog.ExecutionSpecified
  fullName: BindOpen.System.Diagnostics.BdoLog.ExecutionSpecified
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.System.Diagnostics.BdoLog.Task*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Task
  name: Task
  nameWithType: BdoLog.Task
  fullName: BindOpen.System.Diagnostics.BdoLog.Task
- uid: BindOpen.System.Diagnostics.IBdoLog.Task
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Task
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Task
  nameWithType: IBdoLog.Task
  fullName: BindOpen.System.Diagnostics.IBdoLog.Task
- uid: BindOpen.Extensions.Runtime.BdoTaskConfiguration
  commentId: T:BindOpen.Extensions.Runtime.BdoTaskConfiguration
  parent: BindOpen.Extensions.Runtime
  name: BdoTaskConfiguration
  nameWithType: BdoTaskConfiguration
  fullName: BindOpen.Extensions.Runtime.BdoTaskConfiguration
- uid: BindOpen.Extensions.Runtime
  commentId: N:BindOpen.Extensions.Runtime
  name: BindOpen.Extensions.Runtime
  nameWithType: BindOpen.Extensions.Runtime
  fullName: BindOpen.Extensions.Runtime
- uid: BindOpen.System.Diagnostics.BdoLog.TaskSpecified*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.TaskSpecified
  name: TaskSpecified
  nameWithType: BdoLog.TaskSpecified
  fullName: BindOpen.System.Diagnostics.BdoLog.TaskSpecified
- uid: BindOpen.System.Diagnostics.BdoLog.SubLogEventPredicate*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.SubLogEventPredicate
  name: SubLogEventPredicate
  nameWithType: BdoLog.SubLogEventPredicate
  fullName: BindOpen.System.Diagnostics.BdoLog.SubLogEventPredicate
- uid: System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  commentId: T:System.Predicate{BindOpen.System.Diagnostics.IBdoLogEvent}
  parent: System
  definition: System.Predicate`1
  name: Predicate<IBdoLogEvent>
  nameWithType: Predicate<IBdoLogEvent>
  fullName: System.Predicate<BindOpen.System.Diagnostics.IBdoLogEvent>
  nameWithType.vb: Predicate(Of IBdoLogEvent)
  fullName.vb: System.Predicate(Of BindOpen.System.Diagnostics.IBdoLogEvent)
  name.vb: Predicate(Of IBdoLogEvent)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.Detail*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Detail
  name: Detail
  nameWithType: BdoLog.Detail
  fullName: BindOpen.System.Diagnostics.BdoLog.Detail
- uid: BindOpen.System.Diagnostics.IBdoLog.Detail
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Detail
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Detail
  nameWithType: IBdoLog.Detail
  fullName: BindOpen.System.Diagnostics.IBdoLog.Detail
- uid: BindOpen.Data.Elements.DataElementSet
  commentId: T:BindOpen.Data.Elements.DataElementSet
  parent: BindOpen.Data.Elements
  name: DataElementSet
  nameWithType: DataElementSet
  fullName: BindOpen.Data.Elements.DataElementSet
- uid: BindOpen.Data.Elements
  commentId: N:BindOpen.Data.Elements
  name: BindOpen.Data.Elements
  nameWithType: BindOpen.Data.Elements
  fullName: BindOpen.Data.Elements
- uid: BindOpen.System.Diagnostics.BdoLog.DetailSpecified*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.DetailSpecified
  name: DetailSpecified
  nameWithType: BdoLog.DetailSpecified
  fullName: BindOpen.System.Diagnostics.BdoLog.DetailSpecified
- uid: BindOpen.System.Diagnostics.BdoLog.Item*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Item
  name: Item
  nameWithType: BdoLog.Item
  fullName: BindOpen.System.Diagnostics.BdoLog.Item
- uid: BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: Item[String]
  nameWithType: IBdoLog.Item[String]
  fullName: BindOpen.System.Diagnostics.IBdoLog.Item[System.String]
  nameWithType.vb: IBdoLog.Item(String)
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
    name: Item
    nameWithType: IBdoLog.Item
    fullName: BindOpen.System.Diagnostics.IBdoLog.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Item(System.String)
    name: Item
    nameWithType: IBdoLog.Item
    fullName: BindOpen.System.Diagnostics.IBdoLog.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.BdoLogEvent
  commentId: T:BindOpen.System.Diagnostics.BdoLogEvent
  parent: BindOpen.System.Diagnostics
  name: BdoLogEvent
  nameWithType: BdoLogEvent
  fullName: BindOpen.System.Diagnostics.BdoLogEvent
- uid: BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: Item[Int32]
  nameWithType: IBdoLog.Item[Int32]
  fullName: BindOpen.System.Diagnostics.IBdoLog.Item[System.Int32]
  nameWithType.vb: IBdoLog.Item(Int32)
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
    name: Item
    nameWithType: IBdoLog.Item
    fullName: BindOpen.System.Diagnostics.IBdoLog.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Item(System.Int32)
    name: Item
    nameWithType: IBdoLog.Item
    fullName: BindOpen.System.Diagnostics.IBdoLog.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: BindOpen.System.Diagnostics.BdoLog.Errors
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Errors
  isExternal: true
- uid: BindOpen.System.Diagnostics.BdoLog.Warnings
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Warnings
  isExternal: true
- uid: BindOpen.System.Diagnostics.BdoLog.Messages
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Messages
  isExternal: true
- uid: BindOpen.System.Diagnostics.BdoLog.Exceptions
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Exceptions
  isExternal: true
- uid: BindOpen.System.Diagnostics.BdoLog.Checkpoints
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Checkpoints
  isExternal: true
- uid: BindOpen.System.Diagnostics.BdoLog.SubLogs
  commentId: P:BindOpen.System.Diagnostics.BdoLog.SubLogs
  isExternal: true
- uid: BindOpen.System.Diagnostics.BdoLog.Events*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Events
  name: Events
  nameWithType: BdoLog.Events
  fullName: BindOpen.System.Diagnostics.BdoLog.Events
- uid: BindOpen.System.Diagnostics.IBdoLog.Events
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Events
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Events
  nameWithType: IBdoLog.Events
  fullName: BindOpen.System.Diagnostics.IBdoLog.Events
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.BdoLogEvent}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.BdoLogEvent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<BdoLogEvent>
  nameWithType: List<BdoLogEvent>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.BdoLogEvent>
  nameWithType.vb: List(Of BdoLogEvent)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.BdoLogEvent)
  name.vb: List(Of BdoLogEvent)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.BdoLogEvent
    name: BdoLogEvent
    nameWithType: BdoLogEvent
    fullName: BindOpen.System.Diagnostics.BdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.BdoLogEvent
    name: BdoLogEvent
    nameWithType: BdoLogEvent
    fullName: BindOpen.System.Diagnostics.BdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.System.Diagnostics.BdoLog.EventsSpecified*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.EventsSpecified
  name: EventsSpecified
  nameWithType: BdoLog.EventsSpecified
  fullName: BindOpen.System.Diagnostics.BdoLog.EventsSpecified
- uid: BindOpen.System.Diagnostics.BdoLog.Events
  commentId: P:BindOpen.System.Diagnostics.BdoLog.Events
  isExternal: true
- uid: BindOpen.System.Diagnostics.BdoLog.Errors*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Errors
  name: Errors
  nameWithType: BdoLog.Errors
  fullName: BindOpen.System.Diagnostics.BdoLog.Errors
- uid: BindOpen.System.Diagnostics.IBdoLog.Errors
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Errors
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Errors
  nameWithType: IBdoLog.Errors
  fullName: BindOpen.System.Diagnostics.IBdoLog.Errors
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLogEvent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IBdoLogEvent>
  nameWithType: List<IBdoLogEvent>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.IBdoLogEvent>
  nameWithType.vb: List(Of IBdoLogEvent)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.IBdoLogEvent)
  name.vb: List(Of IBdoLogEvent)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.Warnings*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Warnings
  name: Warnings
  nameWithType: BdoLog.Warnings
  fullName: BindOpen.System.Diagnostics.BdoLog.Warnings
- uid: BindOpen.System.Diagnostics.IBdoLog.Warnings
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Warnings
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Warnings
  nameWithType: IBdoLog.Warnings
  fullName: BindOpen.System.Diagnostics.IBdoLog.Warnings
- uid: BindOpen.System.Diagnostics.BdoLog.Messages*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Messages
  name: Messages
  nameWithType: BdoLog.Messages
  fullName: BindOpen.System.Diagnostics.BdoLog.Messages
- uid: BindOpen.System.Diagnostics.IBdoLog.Messages
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Messages
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Messages
  nameWithType: IBdoLog.Messages
  fullName: BindOpen.System.Diagnostics.IBdoLog.Messages
- uid: BindOpen.System.Diagnostics.BdoLog.Exceptions*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Exceptions
  name: Exceptions
  nameWithType: BdoLog.Exceptions
  fullName: BindOpen.System.Diagnostics.BdoLog.Exceptions
- uid: BindOpen.System.Diagnostics.IBdoLog.Exceptions
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Exceptions
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Exceptions
  nameWithType: IBdoLog.Exceptions
  fullName: BindOpen.System.Diagnostics.IBdoLog.Exceptions
- uid: BindOpen.System.Diagnostics.BdoLog.Checkpoints*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Checkpoints
  name: Checkpoints
  nameWithType: BdoLog.Checkpoints
  fullName: BindOpen.System.Diagnostics.BdoLog.Checkpoints
- uid: BindOpen.System.Diagnostics.IBdoLog.Checkpoints
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Checkpoints
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Checkpoints
  nameWithType: IBdoLog.Checkpoints
  fullName: BindOpen.System.Diagnostics.IBdoLog.Checkpoints
- uid: BindOpen.System.Diagnostics.BdoLog.SubLogs*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.SubLogs
  name: SubLogs
  nameWithType: BdoLog.SubLogs
  fullName: BindOpen.System.Diagnostics.BdoLog.SubLogs
- uid: BindOpen.System.Diagnostics.IBdoLog.SubLogs
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.SubLogs
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: SubLogs
  nameWithType: IBdoLog.SubLogs
  fullName: BindOpen.System.Diagnostics.IBdoLog.SubLogs
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLog}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.IBdoLog}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IBdoLog>
  nameWithType: List<IBdoLog>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.IBdoLog>
  nameWithType.vb: List(Of IBdoLog)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.IBdoLog)
  name.vb: List(Of IBdoLog)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.Parent*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Parent
  name: Parent
  nameWithType: BdoLog.Parent
  fullName: BindOpen.System.Diagnostics.BdoLog.Parent
- uid: BindOpen.System.Diagnostics.IBdoLog.Parent
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Parent
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Parent
  nameWithType: IBdoLog.Parent
  fullName: BindOpen.System.Diagnostics.IBdoLog.Parent
- uid: BindOpen.System.Diagnostics.BdoLog.Root*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Root
  name: Root
  nameWithType: BdoLog.Root
  fullName: BindOpen.System.Diagnostics.BdoLog.Root
- uid: BindOpen.System.Diagnostics.IBdoLog.Root
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Root
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Root
  nameWithType: IBdoLog.Root
  fullName: BindOpen.System.Diagnostics.IBdoLog.Root
- uid: BindOpen.System.Diagnostics.BdoLog.Level*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Level
  name: Level
  nameWithType: BdoLog.Level
  fullName: BindOpen.System.Diagnostics.BdoLog.Level
- uid: BindOpen.System.Diagnostics.IBdoLog.Level
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Level
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Level
  nameWithType: IBdoLog.Level
  fullName: BindOpen.System.Diagnostics.IBdoLog.Level
- uid: BindOpen.System.Diagnostics.BdoLog.Loggers*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Loggers
  name: Loggers
  nameWithType: BdoLog.Loggers
  fullName: BindOpen.System.Diagnostics.BdoLog.Loggers
- uid: BindOpen.System.Diagnostics.IBdoLog.Loggers
  commentId: P:BindOpen.System.Diagnostics.IBdoLog.Loggers
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Loggers
  nameWithType: IBdoLog.Loggers
  fullName: BindOpen.System.Diagnostics.IBdoLog.Loggers
- uid: System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  commentId: T:System.Collections.Generic.List{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IBdoLogger>
  nameWithType: List<IBdoLogger>
  fullName: System.Collections.Generic.List<BindOpen.System.Diagnostics.Loggers.IBdoLogger>
  nameWithType.vb: List(Of IBdoLogger)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger)
  name.vb: List(Of IBdoLogger)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.#ctor*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.#ctor
  name: BdoLog
  nameWithType: BdoLog.BdoLog
  fullName: BindOpen.System.Diagnostics.BdoLog.BdoLog
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
  isExternal: true
  name: IBdoLogger[]
  nameWithType: IBdoLogger[]
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger[]
  nameWithType.vb: IBdoLogger()
  fullName.vb: BindOpen.System.Diagnostics.Loggers.IBdoLogger()
  name.vb: IBdoLogger()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  commentId: T:BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  parent: BindOpen.Extensions.Runtime
  name: IBdoTaskConfiguration
  nameWithType: IBdoTaskConfiguration
  fullName: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
- uid: BindOpen.System.Diagnostics.BdoLog.AddLoggers*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddLoggers
  name: AddLoggers
  nameWithType: BdoLog.AddLoggers
  fullName: BindOpen.System.Diagnostics.BdoLog.AddLoggers
- uid: BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: AddLoggers(IBdoLogger[])
  nameWithType: IBdoLog.AddLoggers(IBdoLogger[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
  nameWithType.vb: IBdoLog.AddLoggers(IBdoLogger())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger())
  name.vb: AddLoggers(IBdoLogger())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
    name: AddLoggers
    nameWithType: IBdoLog.AddLoggers
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddLoggers(BindOpen.System.Diagnostics.Loggers.IBdoLogger[])
    name: AddLoggers
    nameWithType: IBdoLog.AddLoggers
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.WriteLog*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.WriteLog
  name: WriteLog
  nameWithType: BdoLog.WriteLog
  fullName: BindOpen.System.Diagnostics.BdoLog.WriteLog
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: WriteLog(IBdoTaskConfiguration, BdoLoggerMode)
  nameWithType: IBdoLog.WriteLog(IBdoTaskConfiguration, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration, BindOpen.System.Diagnostics.BdoLoggerMode)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
    name: WriteLog
    nameWithType: IBdoLog.WriteLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
    name: IBdoTaskConfiguration
    nameWithType: IBdoTaskConfiguration
    fullName: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.BdoLoggerMode
    name: BdoLoggerMode
    nameWithType: BdoLoggerMode
    fullName: BindOpen.System.Diagnostics.BdoLoggerMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.Extensions.Runtime.IBdoTaskConfiguration,BindOpen.System.Diagnostics.BdoLoggerMode)
    name: WriteLog
    nameWithType: IBdoLog.WriteLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
    name: IBdoTaskConfiguration
    nameWithType: IBdoTaskConfiguration
    fullName: BindOpen.Extensions.Runtime.IBdoTaskConfiguration
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.BdoLoggerMode
    name: BdoLoggerMode
    nameWithType: BdoLoggerMode
    fullName: BindOpen.System.Diagnostics.BdoLoggerMode
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLoggerMode
  commentId: T:BindOpen.System.Diagnostics.BdoLoggerMode
  parent: BindOpen.System.Diagnostics
  name: BdoLoggerMode
  nameWithType: BdoLoggerMode
  fullName: BindOpen.System.Diagnostics.BdoLoggerMode
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: WriteLog(IBdoLogEvent, BdoLoggerMode)
  nameWithType: IBdoLog.WriteLog(IBdoLogEvent, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.BdoLoggerMode)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
    name: WriteLog
    nameWithType: IBdoLog.WriteLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.BdoLoggerMode
    name: BdoLoggerMode
    nameWithType: BdoLoggerMode
    fullName: BindOpen.System.Diagnostics.BdoLoggerMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.BdoLoggerMode)
    name: WriteLog
    nameWithType: IBdoLog.WriteLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.BdoLoggerMode
    name: BdoLoggerMode
    nameWithType: BdoLoggerMode
    fullName: BindOpen.System.Diagnostics.BdoLoggerMode
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLogEvent
  commentId: T:BindOpen.System.Diagnostics.IBdoLogEvent
  parent: BindOpen.System.Diagnostics
  name: IBdoLogEvent
  nameWithType: IBdoLogEvent
  fullName: BindOpen.System.Diagnostics.IBdoLogEvent
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: WriteLog(String, Object, BdoLoggerMode)
  nameWithType: IBdoLog.WriteLog(String, Object, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String, System.Object, BindOpen.System.Diagnostics.BdoLoggerMode)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
    name: WriteLog
    nameWithType: IBdoLog.WriteLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.BdoLoggerMode
    name: BdoLoggerMode
    nameWithType: BdoLoggerMode
    fullName: BindOpen.System.Diagnostics.BdoLoggerMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(System.String,System.Object,BindOpen.System.Diagnostics.BdoLoggerMode)
    name: WriteLog
    nameWithType: IBdoLog.WriteLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.BdoLoggerMode
    name: BdoLoggerMode
    nameWithType: BdoLoggerMode
    fullName: BindOpen.System.Diagnostics.BdoLoggerMode
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: WriteLog(IBdoLog, BdoLoggerMode)
  nameWithType: IBdoLog.WriteLog(IBdoLog, BdoLoggerMode)
  fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.BdoLoggerMode)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
    name: WriteLog
    nameWithType: IBdoLog.WriteLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.BdoLoggerMode
    name: BdoLoggerMode
    nameWithType: BdoLoggerMode
    fullName: BindOpen.System.Diagnostics.BdoLoggerMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WriteLog(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.BdoLoggerMode)
    name: WriteLog
    nameWithType: IBdoLog.WriteLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.WriteLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.BdoLoggerMode
    name: BdoLoggerMode
    nameWithType: BdoLoggerMode
    fullName: BindOpen.System.Diagnostics.BdoLoggerMode
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.AddEvent*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddEvent
  name: AddEvent
  nameWithType: BdoLog.AddEvent
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEvent
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddEvent(IBdoLogEvent, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddEvent(IBdoLogEvent, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  nameWithType.vb: IBdoLog.AddEvent(IBdoLogEvent, IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent, BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddEvent(IBdoLogEvent, IBdoLog, Predicate(Of IBdoLog))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddEvent
    nameWithType: IBdoLog.AddEvent
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.IBdoLogEvent,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddEvent
    nameWithType: IBdoLog.AddEvent
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
  commentId: T:System.Predicate{BindOpen.System.Diagnostics.IBdoLog}
  parent: System
  definition: System.Predicate`1
  name: Predicate<IBdoLog>
  nameWithType: Predicate<IBdoLog>
  fullName: System.Predicate<BindOpen.System.Diagnostics.IBdoLog>
  nameWithType.vb: Predicate(Of IBdoLog)
  fullName.vb: System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Predicate(Of IBdoLog)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  nameWithType.vb: IBdoLog.AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddEvent(EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddEvent
    nameWithType: IBdoLog.AddEvent
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEvent(BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddEvent
    nameWithType: IBdoLog.AddEvent
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Events.EventKinds
  commentId: T:BindOpen.System.Diagnostics.Events.EventKinds
  parent: BindOpen.System.Diagnostics.Events
  name: EventKinds
  nameWithType: EventKinds
  fullName: BindOpen.System.Diagnostics.Events.EventKinds
- uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  commentId: T:BindOpen.System.Diagnostics.Events.BdoEventCriticality
  parent: BindOpen.System.Diagnostics.Events
  name: BdoEventCriticality
  nameWithType: BdoEventCriticality
  fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Events
  commentId: N:BindOpen.System.Diagnostics.Events
  name: BindOpen.System.Diagnostics.Events
  nameWithType: BindOpen.System.Diagnostics.Events
  fullName: BindOpen.System.Diagnostics.Events
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.AddWarning*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddWarning
  name: AddWarning
  nameWithType: BdoLog.AddWarning
  fullName: BindOpen.System.Diagnostics.BdoLog.AddWarning
- uid: BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddWarning(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddWarning(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  nameWithType.vb: IBdoLog.AddWarning(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddWarning(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddWarning
    nameWithType: IBdoLog.AddWarning
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddWarning
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddWarning(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddWarning
    nameWithType: IBdoLog.AddWarning
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddWarning
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.AddError*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddError
  name: AddError
  nameWithType: BdoLog.AddError
  fullName: BindOpen.System.Diagnostics.BdoLog.AddError
- uid: BindOpen.System.Diagnostics.IBdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddError(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddError(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddError(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  nameWithType.vb: IBdoLog.AddError(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddError(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddError(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddError
    nameWithType: IBdoLog.AddError
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddError
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddError(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddError
    nameWithType: IBdoLog.AddError
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddError
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.AddCheckpoint*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddCheckpoint
  name: AddCheckpoint
  nameWithType: BdoLog.AddCheckpoint
  fullName: BindOpen.System.Diagnostics.BdoLog.AddCheckpoint
- uid: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  nameWithType.vb: IBdoLog.AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddCheckpoint(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddCheckpoint
    nameWithType: IBdoLog.AddCheckpoint
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddCheckpoint
    nameWithType: IBdoLog.AddCheckpoint
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddCheckpoint
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.AddMessage*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddMessage
  name: AddMessage
  nameWithType: BdoLog.AddMessage
  fullName: BindOpen.System.Diagnostics.BdoLog.AddMessage
- uid: BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddMessage(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddMessage(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  nameWithType.vb: IBdoLog.AddMessage(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddMessage(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddMessage
    nameWithType: IBdoLog.AddMessage
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddMessage(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddMessage
    nameWithType: IBdoLog.AddMessage
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.AddException*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddException
  name: AddException
  nameWithType: BdoLog.AddException
  fullName: BindOpen.System.Diagnostics.BdoLog.AddException
- uid: BindOpen.System.Diagnostics.IBdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddException(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddException(String, BdoEventCriticality, String, String, String, Nullable<DateTime>, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddException(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  nameWithType.vb: IBdoLog.AddException(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddException(System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime), BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddException(String, BdoEventCriticality, String, String, String, Nullable(Of DateTime), IBdoLog, Predicate(Of IBdoLog))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddException
    nameWithType: IBdoLog.AddException
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddException(System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddException
    nameWithType: IBdoLog.AddException
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate<IBdoLog>)
  nameWithType: IBdoLog.AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate<IBdoLog>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>)
  nameWithType.vb: IBdoLog.AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate(Of IBdoLog))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog))
  name.vb: AddException(Exception, BdoEventCriticality, String, String, IBdoLog, Predicate(Of IBdoLog))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddException
    nameWithType: IBdoLog.AddException
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddException(System.Exception,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog})
    name: AddException
    nameWithType: IBdoLog.AddException
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: BindOpen.System.Diagnostics.BdoLog.WithEvents*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.WithEvents
  name: WithEvents
  nameWithType: BdoLog.WithEvents
  fullName: BindOpen.System.Diagnostics.BdoLog.WithEvents
- uid: BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: WithEvents(Func<IBdoLog, IBdoLogEvent>[])
  nameWithType: IBdoLog.WithEvents(Func<IBdoLog, IBdoLogEvent>[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func<BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent>[])
  nameWithType.vb: IBdoLog.WithEvents(Func(Of IBdoLog, IBdoLogEvent)())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func(Of BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent)())
  name.vb: WithEvents(Func(Of IBdoLog, IBdoLogEvent)())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
    name: WithEvents
    nameWithType: IBdoLog.WithEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.WithEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.WithEvents(System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[])
    name: WithEvents
    nameWithType: IBdoLog.WithEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.WithEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.IBdoLogEvent}[]
  isExternal: true
  name: Func<IBdoLog, IBdoLogEvent>[]
  nameWithType: Func<IBdoLog, IBdoLogEvent>[]
  fullName: System.Func<BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent>[]
  nameWithType.vb: Func(Of IBdoLog, IBdoLogEvent)()
  fullName.vb: System.Func(Of BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.IBdoLogEvent)()
  name.vb: Func(Of IBdoLog, IBdoLogEvent)()
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLogEvent
    name: IBdoLogEvent
    nameWithType: IBdoLogEvent
    fullName: BindOpen.System.Diagnostics.IBdoLogEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.BdoLog.AddEvents*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddEvents
  name: AddEvents
  nameWithType: BdoLog.AddEvents
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEvents
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: AddEvents(IBdoLog, EventKinds[])
  nameWithType: IBdoLog.AddEvents(IBdoLog, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.AddEvents(IBdoLog, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEvents(IBdoLog, EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: AddEvents
    nameWithType: IBdoLog.AddEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: AddEvents
    nameWithType: IBdoLog.AddEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Events.EventKinds[]
  isExternal: true
  name: EventKinds[]
  nameWithType: EventKinds[]
  fullName: BindOpen.System.Diagnostics.Events.EventKinds[]
  nameWithType.vb: EventKinds()
  fullName.vb: BindOpen.System.Diagnostics.Events.EventKinds()
  name.vb: EventKinds()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddEvents(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  nameWithType: IBdoLog.AddEvents(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.AddEvents(IBdoLog, Predicate(Of IBdoLog), EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEvents(IBdoLog, Predicate(Of IBdoLog), EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
    name: AddEvents
    nameWithType: IBdoLog.AddEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEvents(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
    name: AddEvents
    nameWithType: IBdoLog.AddEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.AddEventsTo*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddEventsTo
  name: AddEventsTo
  nameWithType: BdoLog.AddEventsTo
  fullName: BindOpen.System.Diagnostics.BdoLog.AddEventsTo
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: AddEventsTo(IBdoLog, EventKinds[])
  nameWithType: IBdoLog.AddEventsTo(IBdoLog, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.AddEventsTo(IBdoLog, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEventsTo(IBdoLog, EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: AddEventsTo
    nameWithType: IBdoLog.AddEventsTo
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: AddEventsTo
    nameWithType: IBdoLog.AddEventsTo
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddEventsTo(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  nameWithType: IBdoLog.AddEventsTo(IBdoLog, Predicate<IBdoLog>, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.AddEventsTo(IBdoLog, Predicate(Of IBdoLog), EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: AddEventsTo(IBdoLog, Predicate(Of IBdoLog), EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
    name: AddEventsTo
    nameWithType: IBdoLog.AddEventsTo
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds[])
    name: AddEventsTo
    nameWithType: IBdoLog.AddEventsTo
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddEventsTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.ClearEvents*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.ClearEvents
  name: ClearEvents
  nameWithType: BdoLog.ClearEvents
  fullName: BindOpen.System.Diagnostics.BdoLog.ClearEvents
- uid: BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: ClearEvents(Boolean, EventKinds[])
  nameWithType: IBdoLog.ClearEvents(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.ClearEvents(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: ClearEvents(Boolean, EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: ClearEvents
    nameWithType: IBdoLog.ClearEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.ClearEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.ClearEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: ClearEvents
    nameWithType: IBdoLog.ClearEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.ClearEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.Sanitize*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Sanitize
  name: Sanitize
  nameWithType: BdoLog.Sanitize
  fullName: BindOpen.System.Diagnostics.BdoLog.Sanitize
- uid: BindOpen.System.Diagnostics.IBdoLog.Sanitize
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Sanitize
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Sanitize()
  nameWithType: IBdoLog.Sanitize()
  fullName: BindOpen.System.Diagnostics.IBdoLog.Sanitize()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Sanitize
    name: Sanitize
    nameWithType: IBdoLog.Sanitize
    fullName: BindOpen.System.Diagnostics.IBdoLog.Sanitize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Sanitize
    name: Sanitize
    nameWithType: IBdoLog.Sanitize
    fullName: BindOpen.System.Diagnostics.IBdoLog.Sanitize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.AddSubLog*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.AddSubLog
  name: AddSubLog
  nameWithType: BdoLog.AddSubLog
  fullName: BindOpen.System.Diagnostics.BdoLog.AddSubLog
- uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddSubLog(IBdoLog, Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  nameWithType: IBdoLog.AddSubLog(IBdoLog, Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>)
  nameWithType.vb: IBdoLog.AddSubLog(IBdoLog, Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime))
  name.vb: AddSubLog(IBdoLog, Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
    name: AddSubLog
    nameWithType: IBdoLog.AddSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
    name: AddSubLog
    nameWithType: IBdoLog.AddSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: AddSubLog(Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  nameWithType: IBdoLog.AddSubLog(Predicate<IBdoLog>, EventKinds, String, BdoEventCriticality, String, String, String, Nullable<DateTime>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate<BindOpen.System.Diagnostics.IBdoLog>, BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable<System.DateTime>)
  nameWithType.vb: IBdoLog.AddSubLog(Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate(Of BindOpen.System.Diagnostics.IBdoLog), BindOpen.System.Diagnostics.Events.EventKinds, System.String, BindOpen.System.Diagnostics.Events.BdoEventCriticality, System.String, System.String, System.String, System.Nullable(Of System.DateTime))
  name.vb: AddSubLog(Predicate(Of IBdoLog), EventKinds, String, BdoEventCriticality, String, String, String, Nullable(Of DateTime))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
    name: AddSubLog
    nameWithType: IBdoLog.AddSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.AddSubLog(System.Predicate{BindOpen.System.Diagnostics.IBdoLog},BindOpen.System.Diagnostics.Events.EventKinds,System.String,BindOpen.System.Diagnostics.Events.BdoEventCriticality,System.String,System.String,System.String,System.Nullable{System.DateTime})
    name: AddSubLog
    nameWithType: IBdoLog.AddSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.AddSubLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.BdoEventCriticality
    name: BdoEventCriticality
    nameWithType: BdoEventCriticality
    fullName: BindOpen.System.Diagnostics.Events.BdoEventCriticality
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.RemoveSubLog*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.RemoveSubLog
  name: RemoveSubLog
  nameWithType: BdoLog.RemoveSubLog
  fullName: BindOpen.System.Diagnostics.BdoLog.RemoveSubLog
- uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: RemoveSubLog(IBdoLog, Boolean)
  nameWithType: IBdoLog.RemoveSubLog(IBdoLog, Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog, System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
    name: RemoveSubLog
    nameWithType: IBdoLog.RemoveSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(BindOpen.System.Diagnostics.IBdoLog,System.Boolean)
    name: RemoveSubLog
    nameWithType: IBdoLog.RemoveSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: RemoveSubLog(String, Boolean)
  nameWithType: IBdoLog.RemoveSubLog(String, Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String, System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String,System.Boolean)
    name: RemoveSubLog
    nameWithType: IBdoLog.RemoveSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog(System.String,System.Boolean)
    name: RemoveSubLog
    nameWithType: IBdoLog.RemoveSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.RemoveSubLog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetLogger*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetLogger
  name: GetLogger
  nameWithType: BdoLog.GetLogger
  fullName: BindOpen.System.Diagnostics.BdoLog.GetLogger
- uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: GetLogger(String)
  nameWithType: IBdoLog.GetLogger(String)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
    name: GetLogger
    nameWithType: IBdoLog.GetLogger
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger(System.String)
    name: GetLogger
    nameWithType: IBdoLog.GetLogger
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  commentId: T:BindOpen.System.Diagnostics.Loggers.IBdoLogger
  parent: BindOpen.System.Diagnostics.Loggers
  name: IBdoLogger
  nameWithType: IBdoLogger
  fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
- uid: BindOpen.System.Diagnostics.Loggers
  commentId: N:BindOpen.System.Diagnostics.Loggers
  name: BindOpen.System.Diagnostics.Loggers
  nameWithType: BindOpen.System.Diagnostics.Loggers
  fullName: BindOpen.System.Diagnostics.Loggers
- uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: GetLogger(BdoDefaultLoggerFormat)
  nameWithType: IBdoLog.GetLogger(BdoDefaultLoggerFormat)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
    name: GetLogger
    nameWithType: IBdoLog.GetLogger
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    name: BdoDefaultLoggerFormat
    nameWithType: BdoDefaultLoggerFormat
    fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetLogger(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat)
    name: GetLogger
    nameWithType: IBdoLog.GetLogger
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetLogger
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    name: BdoDefaultLoggerFormat
    nameWithType: BdoDefaultLoggerFormat
    fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  commentId: T:BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  parent: BindOpen.System.Diagnostics.Loggers
  name: BdoDefaultLoggerFormat
  nameWithType: BdoDefaultLoggerFormat
  fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
- uid: BindOpen.System.Diagnostics.BdoLog.GetLoggers*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetLoggers
  name: GetLoggers
  nameWithType: BdoLog.GetLoggers
  fullName: BindOpen.System.Diagnostics.BdoLog.GetLoggers
- uid: BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: GetLoggers(BdoDefaultLoggerFormat[])
  nameWithType: IBdoLog.GetLoggers(BdoDefaultLoggerFormat[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
  nameWithType.vb: IBdoLog.GetLoggers(BdoDefaultLoggerFormat())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat())
  name.vb: GetLoggers(BdoDefaultLoggerFormat())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
    name: GetLoggers
    nameWithType: IBdoLog.GetLoggers
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    name: BdoDefaultLoggerFormat
    nameWithType: BdoDefaultLoggerFormat
    fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetLoggers(BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[])
    name: GetLoggers
    nameWithType: IBdoLog.GetLoggers
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    name: BdoDefaultLoggerFormat
    nameWithType: BdoDefaultLoggerFormat
    fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[]
  isExternal: true
  name: BdoDefaultLoggerFormat[]
  nameWithType: BdoDefaultLoggerFormat[]
  fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat[]
  nameWithType.vb: BdoDefaultLoggerFormat()
  fullName.vb: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat()
  name.vb: BdoDefaultLoggerFormat()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    name: BdoDefaultLoggerFormat
    nameWithType: BdoDefaultLoggerFormat
    fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
    name: BdoDefaultLoggerFormat
    nameWithType: BdoDefaultLoggerFormat
    fullName: BindOpen.System.Diagnostics.Loggers.BdoDefaultLoggerFormat
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: BindOpen.System.Diagnostics.BdoLog.Clone*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Clone
  name: Clone
  nameWithType: BdoLog.Clone
  fullName: BindOpen.System.Diagnostics.BdoLog.Clone
- uid: BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Clone(IBdoLog)
  nameWithType: IBdoLog.Clone(IBdoLog)
  fullName: BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
    name: Clone
    nameWithType: IBdoLog.Clone
    fullName: BindOpen.System.Diagnostics.IBdoLog.Clone
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Clone(BindOpen.System.Diagnostics.IBdoLog)
    name: Clone
    nameWithType: IBdoLog.Clone
    fullName: BindOpen.System.Diagnostics.IBdoLog.Clone
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Clone<T>(IBdoLog)
  nameWithType: IBdoLog.Clone<T>(IBdoLog)
  fullName: BindOpen.System.Diagnostics.IBdoLog.Clone<T>(BindOpen.System.Diagnostics.IBdoLog)
  nameWithType.vb: IBdoLog.Clone(Of T)(IBdoLog)
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.Clone(Of T)(BindOpen.System.Diagnostics.IBdoLog)
  name.vb: Clone(Of T)(IBdoLog)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
    name: Clone<T>
    nameWithType: IBdoLog.Clone<T>
    fullName: BindOpen.System.Diagnostics.IBdoLog.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Clone``1(BindOpen.System.Diagnostics.IBdoLog)
    name: Clone(Of T)
    nameWithType: IBdoLog.Clone(Of T)
    fullName: BindOpen.System.Diagnostics.IBdoLog.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: BindOpen.Data.Items.TitledDataItem.GetTitle(System.String,System.String)
  commentId: M:BindOpen.Data.Items.TitledDataItem.GetTitle(System.String,System.String)
  parent: BindOpen.Data.Items.TitledDataItem
  isExternal: true
  name: GetTitle(String, String)
  nameWithType: TitledDataItem.GetTitle(String, String)
  fullName: BindOpen.Data.Items.TitledDataItem.GetTitle(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.TitledDataItem.GetTitle(System.String,System.String)
    name: GetTitle
    nameWithType: TitledDataItem.GetTitle
    fullName: BindOpen.Data.Items.TitledDataItem.GetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.TitledDataItem.GetTitle(System.String,System.String)
    name: GetTitle
    nameWithType: TitledDataItem.GetTitle
    fullName: BindOpen.Data.Items.TitledDataItem.GetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetTitle*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetTitle
  name: GetTitle
  nameWithType: BdoLog.GetTitle
  fullName: BindOpen.System.Diagnostics.BdoLog.GetTitle
- uid: BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String,System.String)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String,System.String)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: GetTitle(String, String)
  nameWithType: IBdoLog.GetTitle(String, String)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String,System.String)
    name: GetTitle
    nameWithType: IBdoLog.GetTitle
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetTitle(System.String,System.String)
    name: GetTitle
    nameWithType: IBdoLog.GetTitle
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IGloballyTitled.GetTitle(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IGloballyTitled.GetTitle(System.String,System.String)
  parent: BindOpen.Data.Items.IGloballyTitled
  isExternal: true
  name: GetTitle(String, String)
  nameWithType: IGloballyTitled.GetTitle(String, String)
  fullName: BindOpen.Data.Items.IGloballyTitled.GetTitle(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyTitled.GetTitle(System.String,System.String)
    name: GetTitle
    nameWithType: IGloballyTitled.GetTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.GetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyTitled.GetTitle(System.String,System.String)
    name: GetTitle
    nameWithType: IGloballyTitled.GetTitle
    fullName: BindOpen.Data.Items.IGloballyTitled.GetTitle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DescribedDataItem.GetDescription(System.String,System.String)
  commentId: M:BindOpen.Data.Items.DescribedDataItem.GetDescription(System.String,System.String)
  parent: BindOpen.Data.Items.DescribedDataItem
  isExternal: true
  name: GetDescription(String, String)
  nameWithType: DescribedDataItem.GetDescription(String, String)
  fullName: BindOpen.Data.Items.DescribedDataItem.GetDescription(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.GetDescription(System.String,System.String)
    name: GetDescription
    nameWithType: DescribedDataItem.GetDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.GetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.GetDescription(System.String,System.String)
    name: GetDescription
    nameWithType: DescribedDataItem.GetDescription
    fullName: BindOpen.Data.Items.DescribedDataItem.GetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetDescription*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetDescription
  name: GetDescription
  nameWithType: BdoLog.GetDescription
  fullName: BindOpen.System.Diagnostics.BdoLog.GetDescription
- uid: BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
  parent: BindOpen.Data.Items.IGloballyDescribed
  isExternal: true
  name: GetDescription(String, String)
  nameWithType: IGloballyDescribed.GetDescription(String, String)
  fullName: BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
    name: GetDescription
    nameWithType: IGloballyDescribed.GetDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.GetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IGloballyDescribed.GetDescription(System.String,System.String)
    name: GetDescription
    nameWithType: IGloballyDescribed.GetDescription
    fullName: BindOpen.Data.Items.IGloballyDescribed.GetDescription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetEventWithId*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetEventWithId
  name: GetEventWithId
  nameWithType: BdoLog.GetEventWithId
  fullName: BindOpen.System.Diagnostics.BdoLog.GetEventWithId
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: GetEventWithId(String, Boolean)
  nameWithType: IBdoLog.GetEventWithId(String, Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String, System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String,System.Boolean)
    name: GetEventWithId
    nameWithType: IBdoLog.GetEventWithId
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId(System.String,System.Boolean)
    name: GetEventWithId
    nameWithType: IBdoLog.GetEventWithId
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventWithId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetEvents*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetEvents
  name: GetEvents
  nameWithType: BdoLog.GetEvents
  fullName: BindOpen.System.Diagnostics.BdoLog.GetEvents
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: GetEvents(Boolean, EventKinds[])
  nameWithType: IBdoLog.GetEvents(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.GetEvents(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetEvents(Boolean, EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: GetEvents
    nameWithType: IBdoLog.GetEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetEvents(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: GetEvents
    nameWithType: IBdoLog.GetEvents
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetEventCount*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetEventCount
  name: GetEventCount
  nameWithType: BdoLog.GetEventCount
  fullName: BindOpen.System.Diagnostics.BdoLog.GetEventCount
- uid: BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: GetEventCount(Boolean, EventKinds[])
  nameWithType: IBdoLog.GetEventCount(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.GetEventCount(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetEventCount(Boolean, EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: GetEventCount
    nameWithType: IBdoLog.GetEventCount
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetEventCount(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: GetEventCount
    nameWithType: IBdoLog.GetEventCount
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetEventCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind
  name: GetMaxEventKind
  nameWithType: BdoLog.GetMaxEventKind
  fullName: BindOpen.System.Diagnostics.BdoLog.GetMaxEventKind
- uid: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: GetMaxEventKind(Boolean, EventKinds[])
  nameWithType: IBdoLog.GetMaxEventKind(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.GetMaxEventKind(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: GetMaxEventKind(Boolean, EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: GetMaxEventKind
    nameWithType: IBdoLog.GetMaxEventKind
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: GetMaxEventKind
    nameWithType: IBdoLog.GetMaxEventKind
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetMaxEventKind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.HasEvent*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.HasEvent
  name: HasEvent
  nameWithType: BdoLog.HasEvent
  fullName: BindOpen.System.Diagnostics.BdoLog.HasEvent
- uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: HasEvent(Boolean, EventKinds[])
  nameWithType: IBdoLog.HasEvent(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.HasEvent(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasEvent(Boolean, EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: HasEvent
    nameWithType: IBdoLog.HasEvent
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: HasEvent
    nameWithType: IBdoLog.HasEvent
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: HasEvent(EventKinds[])
  nameWithType: IBdoLog.HasEvent(EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.HasEvent(EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasEvent(EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
    name: HasEvent
    nameWithType: IBdoLog.HasEvent
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasEvent(BindOpen.System.Diagnostics.Events.EventKinds[])
    name: HasEvent
    nameWithType: IBdoLog.HasEvent
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.HasWarnings*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.HasWarnings
  name: HasWarnings
  nameWithType: BdoLog.HasWarnings
  fullName: BindOpen.System.Diagnostics.BdoLog.HasWarnings
- uid: BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: HasWarnings(Boolean, EventKinds[])
  nameWithType: IBdoLog.HasWarnings(Boolean, EventKinds[])
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds[])
  nameWithType.vb: IBdoLog.HasWarnings(Boolean, EventKinds())
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean, BindOpen.System.Diagnostics.Events.EventKinds())
  name.vb: HasWarnings(Boolean, EventKinds())
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: HasWarnings
    nameWithType: IBdoLog.HasWarnings
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasWarnings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasWarnings(System.Boolean,BindOpen.System.Diagnostics.Events.EventKinds[])
    name: HasWarnings
    nameWithType: IBdoLog.HasWarnings
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasWarnings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.Events.EventKinds
    name: EventKinds
    nameWithType: EventKinds
    fullName: BindOpen.System.Diagnostics.Events.EventKinds
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.HasErrors*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.HasErrors
  name: HasErrors
  nameWithType: BdoLog.HasErrors
  fullName: BindOpen.System.Diagnostics.BdoLog.HasErrors
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: HasErrors(Boolean)
  nameWithType: IBdoLog.HasErrors(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
    name: HasErrors
    nameWithType: IBdoLog.HasErrors
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrors
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasErrors(System.Boolean)
    name: HasErrors
    nameWithType: IBdoLog.HasErrors
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrors
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.HasExceptions*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.HasExceptions
  name: HasExceptions
  nameWithType: BdoLog.HasExceptions
  fullName: BindOpen.System.Diagnostics.BdoLog.HasExceptions
- uid: BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: HasExceptions(Boolean)
  nameWithType: IBdoLog.HasExceptions(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
    name: HasExceptions
    nameWithType: IBdoLog.HasExceptions
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasExceptions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasExceptions(System.Boolean)
    name: HasExceptions
    nameWithType: IBdoLog.HasExceptions
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasExceptions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.HasMessages*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.HasMessages
  name: HasMessages
  nameWithType: BdoLog.HasMessages
  fullName: BindOpen.System.Diagnostics.BdoLog.HasMessages
- uid: BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: HasMessages(Boolean)
  nameWithType: IBdoLog.HasMessages(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
    name: HasMessages
    nameWithType: IBdoLog.HasMessages
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasMessages(System.Boolean)
    name: HasMessages
    nameWithType: IBdoLog.HasMessages
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptions*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptions
  name: HasErrorsOrExceptions
  nameWithType: BdoLog.HasErrorsOrExceptions
  fullName: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptions
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: HasErrorsOrExceptions(Boolean)
  nameWithType: IBdoLog.HasErrorsOrExceptions(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
    name: HasErrorsOrExceptions
    nameWithType: IBdoLog.HasErrorsOrExceptions
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions(System.Boolean)
    name: HasErrorsOrExceptions
    nameWithType: IBdoLog.HasErrorsOrExceptions
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptionsOrWarnings*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptionsOrWarnings
  name: HasErrorsOrExceptionsOrWarnings
  nameWithType: BdoLog.HasErrorsOrExceptionsOrWarnings
  fullName: BindOpen.System.Diagnostics.BdoLog.HasErrorsOrExceptionsOrWarnings
- uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: HasErrorsOrExceptionsOrWarnings(Boolean)
  nameWithType: IBdoLog.HasErrorsOrExceptionsOrWarnings(Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
    name: HasErrorsOrExceptionsOrWarnings
    nameWithType: IBdoLog.HasErrorsOrExceptionsOrWarnings
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings(System.Boolean)
    name: HasErrorsOrExceptionsOrWarnings
    nameWithType: IBdoLog.HasErrorsOrExceptionsOrWarnings
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasErrorsOrExceptionsOrWarnings
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetRoot*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetRoot
  name: GetRoot
  nameWithType: BdoLog.GetRoot
  fullName: BindOpen.System.Diagnostics.BdoLog.GetRoot
- uid: BindOpen.System.Diagnostics.IBdoLog.GetRoot
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetRoot
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: GetRoot()
  nameWithType: IBdoLog.GetRoot()
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetRoot()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetRoot
    name: GetRoot
    nameWithType: IBdoLog.GetRoot
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetRoot
    name: GetRoot
    nameWithType: IBdoLog.GetRoot
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.GetSubLogWithId*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.GetSubLogWithId
  name: GetSubLogWithId
  nameWithType: BdoLog.GetSubLogWithId
  fullName: BindOpen.System.Diagnostics.BdoLog.GetSubLogWithId
- uid: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String,System.Boolean)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String,System.Boolean)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: GetSubLogWithId(String, Boolean)
  nameWithType: IBdoLog.GetSubLogWithId(String, Boolean)
  fullName: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String, System.Boolean)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String,System.Boolean)
    name: GetSubLogWithId
    nameWithType: IBdoLog.GetSubLogWithId
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId(System.String,System.Boolean)
    name: GetSubLogWithId
    nameWithType: IBdoLog.GetSubLogWithId
    fullName: BindOpen.System.Diagnostics.IBdoLog.GetSubLogWithId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.HasSubLog*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.HasSubLog
  name: HasSubLog
  nameWithType: BdoLog.HasSubLog
  fullName: BindOpen.System.Diagnostics.BdoLog.HasSubLog
- uid: BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: HasSubLog()
  nameWithType: IBdoLog.HasSubLog()
  fullName: BindOpen.System.Diagnostics.IBdoLog.HasSubLog()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasSubLog
    name: HasSubLog
    nameWithType: IBdoLog.HasSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.HasSubLog
    name: HasSubLog
    nameWithType: IBdoLog.HasSubLog
    fullName: BindOpen.System.Diagnostics.IBdoLog.HasSubLog
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.BuildTree*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.BuildTree
  name: BuildTree
  nameWithType: BdoLog.BuildTree
  fullName: BindOpen.System.Diagnostics.BdoLog.BuildTree
- uid: BindOpen.System.Diagnostics.IBdoLog.BuildTree
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.BuildTree
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: BuildTree()
  nameWithType: IBdoLog.BuildTree()
  fullName: BindOpen.System.Diagnostics.IBdoLog.BuildTree()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.BuildTree
    name: BuildTree
    nameWithType: IBdoLog.BuildTree
    fullName: BindOpen.System.Diagnostics.IBdoLog.BuildTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.BuildTree
    name: BuildTree
    nameWithType: IBdoLog.BuildTree
    fullName: BindOpen.System.Diagnostics.IBdoLog.BuildTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.ForLoggers*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.ForLoggers
  name: ForLoggers
  nameWithType: BdoLog.ForLoggers
  fullName: BindOpen.System.Diagnostics.BdoLog.ForLoggers
- uid: BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: ForLoggers(Action<IBdoLogger>)
  nameWithType: IBdoLog.ForLoggers(Action<IBdoLogger>)
  fullName: BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action<BindOpen.System.Diagnostics.Loggers.IBdoLogger>)
  nameWithType.vb: IBdoLog.ForLoggers(Action(Of IBdoLogger))
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger))
  name.vb: ForLoggers(Action(Of IBdoLogger))
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
    name: ForLoggers
    nameWithType: IBdoLog.ForLoggers
    fullName: BindOpen.System.Diagnostics.IBdoLog.ForLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.ForLoggers(System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger})
    name: ForLoggers
    nameWithType: IBdoLog.ForLoggers
    fullName: BindOpen.System.Diagnostics.IBdoLog.ForLoggers
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  commentId: T:System.Action{BindOpen.System.Diagnostics.Loggers.IBdoLogger}
  parent: System
  definition: System.Action`1
  name: Action<IBdoLogger>
  nameWithType: Action<IBdoLogger>
  fullName: System.Action<BindOpen.System.Diagnostics.Loggers.IBdoLogger>
  nameWithType.vb: Action(Of IBdoLogger)
  fullName.vb: System.Action(Of BindOpen.System.Diagnostics.Loggers.IBdoLogger)
  name.vb: Action(Of IBdoLogger)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.System.Diagnostics.Loggers.IBdoLogger
    name: IBdoLogger
    nameWithType: IBdoLogger
    fullName: BindOpen.System.Diagnostics.Loggers.IBdoLogger
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.Start*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Start
  name: Start
  nameWithType: BdoLog.Start
  fullName: BindOpen.System.Diagnostics.BdoLog.Start
- uid: BindOpen.System.Diagnostics.IBdoLog.Start
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Start
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: Start()
  nameWithType: IBdoLog.Start()
  fullName: BindOpen.System.Diagnostics.IBdoLog.Start()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Start
    name: Start
    nameWithType: IBdoLog.Start
    fullName: BindOpen.System.Diagnostics.IBdoLog.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Start
    name: Start
    nameWithType: IBdoLog.Start
    fullName: BindOpen.System.Diagnostics.IBdoLog.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.End*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.End
  name: End
  nameWithType: BdoLog.End
  fullName: BindOpen.System.Diagnostics.BdoLog.End
- uid: BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: End(ProcessExecutionStatus)
  nameWithType: IBdoLog.End(ProcessExecutionStatus)
  fullName: BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
    name: End
    nameWithType: IBdoLog.End
    fullName: BindOpen.System.Diagnostics.IBdoLog.End
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Processing.ProcessExecutionStatus
    name: ProcessExecutionStatus
    nameWithType: ProcessExecutionStatus
    fullName: BindOpen.System.Processing.ProcessExecutionStatus
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.End(BindOpen.System.Processing.ProcessExecutionStatus)
    name: End
    nameWithType: IBdoLog.End
    fullName: BindOpen.System.Diagnostics.IBdoLog.End
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Processing.ProcessExecutionStatus
    name: ProcessExecutionStatus
    nameWithType: ProcessExecutionStatus
    fullName: BindOpen.System.Processing.ProcessExecutionStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Processing.ProcessExecutionStatus
  commentId: T:BindOpen.System.Processing.ProcessExecutionStatus
  parent: BindOpen.System.Processing
  name: ProcessExecutionStatus
  nameWithType: ProcessExecutionStatus
  fullName: BindOpen.System.Processing.ProcessExecutionStatus
- uid: BindOpen.Data.Items.DescribedDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DescribedDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DescribedDataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: DescribedDataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.DescribedDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DescribedDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DescribedDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: DescribedDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.DescribedDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.UpdateStorageInfo*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.UpdateStorageInfo
  name: UpdateStorageInfo
  nameWithType: BdoLog.UpdateStorageInfo
  fullName: BindOpen.System.Diagnostics.BdoLog.UpdateStorageInfo
- uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.IDataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: IDataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: IDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: IDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DescribedDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.DescribedDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.DescribedDataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: DescribedDataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.DescribedDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.DescribedDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DescribedDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DescribedDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DescribedDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: DescribedDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.DescribedDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.UpdateRuntimeInfo*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.UpdateRuntimeInfo
  name: UpdateRuntimeInfo
  nameWithType: BdoLog.UpdateRuntimeInfo
  fullName: BindOpen.System.Diagnostics.BdoLog.UpdateRuntimeInfo
- uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.IDataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IDataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: IDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: IDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Application.Scopes.IBdoScope
  commentId: T:BindOpen.Application.Scopes.IBdoScope
  parent: BindOpen.Application.Scopes
  name: IBdoScope
  nameWithType: IBdoScope
  fullName: BindOpen.Application.Scopes.IBdoScope
- uid: BindOpen.System.Scripting.IBdoScriptVariableSet
  commentId: T:BindOpen.System.Scripting.IBdoScriptVariableSet
  parent: BindOpen.System.Scripting
  name: IBdoScriptVariableSet
  nameWithType: IBdoScriptVariableSet
  fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
- uid: BindOpen.Application.Scopes
  commentId: N:BindOpen.Application.Scopes
  name: BindOpen.Application.Scopes
  nameWithType: BindOpen.Application.Scopes
  fullName: BindOpen.Application.Scopes
- uid: BindOpen.System.Scripting
  commentId: N:BindOpen.System.Scripting
  name: BindOpen.System.Scripting
  nameWithType: BindOpen.System.Scripting
  fullName: BindOpen.System.Scripting
- uid: BindOpen.System.Diagnostics.BdoLog.Load*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Load
  name: Load
  nameWithType: BdoLog.Load
  fullName: BindOpen.System.Diagnostics.BdoLog.Load
- uid: BindOpen.System.Diagnostics.BdoLog.LoadFromString*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.LoadFromString
  name: LoadFromString
  nameWithType: BdoLog.LoadFromString
  fullName: BindOpen.System.Diagnostics.BdoLog.LoadFromString
- uid: BindOpen.System.Diagnostics.BdoLog.Save*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Save
  name: Save
  nameWithType: BdoLog.Save
  fullName: BindOpen.System.Diagnostics.BdoLog.Save
- uid: BindOpen.System.Diagnostics.IBdoLog.Save``1(System.String)
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.Save``1(System.String)
  parent: BindOpen.System.Diagnostics.IBdoLog
  isExternal: true
  name: Save<T>(String)
  nameWithType: IBdoLog.Save<T>(String)
  fullName: BindOpen.System.Diagnostics.IBdoLog.Save<T>(System.String)
  nameWithType.vb: IBdoLog.Save(Of T)(String)
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.Save(Of T)(System.String)
  name.vb: Save(Of T)(String)
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Save``1(System.String)
    name: Save<T>
    nameWithType: IBdoLog.Save<T>
    fullName: BindOpen.System.Diagnostics.IBdoLog.Save<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.Save``1(System.String)
    name: Save(Of T)
    nameWithType: IBdoLog.Save(Of T)
    fullName: BindOpen.System.Diagnostics.IBdoLog.Save(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.ToString*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.ToString
  name: ToString
  nameWithType: BdoLog.ToString
  fullName: BindOpen.System.Diagnostics.BdoLog.ToString
- uid: BindOpen.System.Diagnostics.IBdoLog.ToString``1
  commentId: M:BindOpen.System.Diagnostics.IBdoLog.ToString``1
  parent: BindOpen.System.Diagnostics.IBdoLog
  name: ToString<T>()
  nameWithType: IBdoLog.ToString<T>()
  fullName: BindOpen.System.Diagnostics.IBdoLog.ToString<T>()
  nameWithType.vb: IBdoLog.ToString(Of T)()
  fullName.vb: BindOpen.System.Diagnostics.IBdoLog.ToString(Of T)()
  name.vb: ToString(Of T)()
  spec.csharp:
  - uid: BindOpen.System.Diagnostics.IBdoLog.ToString``1
    name: ToString<T>
    nameWithType: IBdoLog.ToString<T>
    fullName: BindOpen.System.Diagnostics.IBdoLog.ToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.System.Diagnostics.IBdoLog.ToString``1
    name: ToString(Of T)
    nameWithType: IBdoLog.ToString(Of T)
    fullName: BindOpen.System.Diagnostics.IBdoLog.ToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  commentId: M:BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  parent: BindOpen.Data.Items.DataItem
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DataItem.Dispose(Boolean)
  fullName: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
  spec.csharp:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.DataItem.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DataItem.Dispose
    fullName: BindOpen.Data.Items.DataItem.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.System.Diagnostics.BdoLog.Dispose*
  commentId: Overload:BindOpen.System.Diagnostics.BdoLog.Dispose
  name: Dispose
  nameWithType: BdoLog.Dispose
  fullName: BindOpen.System.Diagnostics.BdoLog.Dispose
shouldSkipMarkup: true
