### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Queries.DbQueryExtension
  commentId: T:BindOpen.Data.Queries.DbQueryExtension
  id: DbQueryExtension
  parent: BindOpen.Data.Queries
  children:
  - BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition,System.Int32)
  - BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  - BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  - BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  langs:
  - csharp
  - vb
  name: DbQueryExtension
  nameWithType: DbQueryExtension
  fullName: BindOpen.Data.Queries.DbQueryExtension
  type: Class
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: DbQueryExtension
    path: ../src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
    startLine: 12
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nThis class represents the database data query extension.\n"
  example: []
  syntax:
    content: public static class DbQueryExtension
    content.vb: Public Module DbQueryExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition,System.Int32)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition,System.Int32)
  id: ConvertToExtensionScript(System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition,System.Int32)
  isExtensionMethod: true
  parent: BindOpen.Data.Queries.DbQueryExtension
  langs:
  - csharp
  - vb
  name: ConvertToExtensionScript(String, IBdoLog, ApiScriptFilteringDefinition, Int32)
  nameWithType: DbQueryExtension.ConvertToExtensionScript(String, IBdoLog, ApiScriptFilteringDefinition, Int32)
  fullName: BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript(System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptFilteringDefinition, System.Int32)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: ConvertToExtensionScript
    path: ../src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
    startLine: 49
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nConverts the specifed search query into an extension script.\n"
  example: []
  syntax:
    content: public static string ConvertToExtensionScript(this string searchQuery, IBdoLog log = null, ApiScriptFilteringDefinition definition = null, int i = 0)
    parameters:
    - id: searchQuery
      type: System.String
      description: The search query to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: 'The '
    - id: definition
      type: BindOpen.Data.Queries.ApiScriptFilteringDefinition
      description: The clause statement to consider.
    - id: i
      type: System.Int32
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConvertToExtensionScript(searchQuery As String, log As IBdoLog = Nothing, definition As ApiScriptFilteringDefinition = Nothing, i As Integer = 0) As String
  overload: BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  id: Filter(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  isExtensionMethod: true
  parent: BindOpen.Data.Queries.DbQueryExtension
  langs:
  - csharp
  - vb
  name: Filter(IDbSingleQuery, String, IBdoLog, ApiScriptFilteringDefinition)
  nameWithType: DbQueryExtension.Filter(IDbSingleQuery, String, IBdoLog, ApiScriptFilteringDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Filter(BindOpen.Data.Queries.IDbSingleQuery, System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptFilteringDefinition)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Filter
    path: ../src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
    startLine: 194
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nAdds filters to the specified database query considering the specified filter query string.\n"
  example: []
  syntax:
    content: public static IDbSingleQuery Filter(this IDbSingleQuery dbQuery, string filterQuery, IBdoLog log = null, ApiScriptFilteringDefinition definition = null)
    parameters:
    - id: dbQuery
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: The database query to consider.
    - id: filterQuery
      type: System.String
      description: The filter query string to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: definition
      type: BindOpen.Data.Queries.ApiScriptFilteringDefinition
      description: The clause statement to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: The built query.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Filter(dbQuery As IDbSingleQuery, filterQuery As String, log As IBdoLog = Nothing, definition As ApiScriptFilteringDefinition = Nothing) As IDbSingleQuery
  overload: BindOpen.Data.Queries.DbQueryExtension.Filter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  id: Sort(BindOpen.Data.Queries.IDbSingleQuery,System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  isExtensionMethod: true
  parent: BindOpen.Data.Queries.DbQueryExtension
  langs:
  - csharp
  - vb
  name: Sort(IDbSingleQuery, String, IBdoLog, ApiScriptSortingDefinition)
  nameWithType: DbQueryExtension.Sort(IDbSingleQuery, String, IBdoLog, ApiScriptSortingDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Sort(BindOpen.Data.Queries.IDbSingleQuery, System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Sort
    path: ../src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
    startLine: 233
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nSorts the specified query considering the specified query script.\n"
  example: []
  syntax:
    content: public static IDbSingleQuery Sort(this IDbSingleQuery query, string sortQuery, IBdoLog log = null, ApiScriptSortingDefinition definition = null)
    parameters:
    - id: query
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: The database query to consider.
    - id: sortQuery
      type: System.String
      description: The sort query text to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: definition
      type: BindOpen.Data.Queries.ApiScriptSortingDefinition
      description: The definition to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: The built query.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sort(query As IDbSingleQuery, sortQuery As String, log As IBdoLog = Nothing, definition As ApiScriptSortingDefinition = Nothing) As IDbSingleQuery
  overload: BindOpen.Data.Queries.DbQueryExtension.Sort*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  commentId: M:BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  id: Paginate(BindOpen.Data.Queries.IDbSingleQuery,System.Nullable{System.Int32},System.String,BindOpen.System.Diagnostics.IBdoLog,BindOpen.Data.Queries.ApiScriptSortingDefinition)
  isExtensionMethod: true
  parent: BindOpen.Data.Queries.DbQueryExtension
  langs:
  - csharp
  - vb
  name: Paginate(IDbSingleQuery, Nullable<Int32>, String, IBdoLog, ApiScriptSortingDefinition)
  nameWithType: DbQueryExtension.Paginate(IDbSingleQuery, Nullable<Int32>, String, IBdoLog, ApiScriptSortingDefinition)
  fullName: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery, System.Nullable<System.Int32>, System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  type: Method
  source:
    remote:
      path: src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
      branch: master
      repo: https://github.com/bindopen/BindOpen.Databases.git
    id: Paginate
    path: ../src/BindOpen.Databases/Data/Queries/ApiScript/DbDataQueryExtension.cs
    startLine: 292
  assemblies:
  - BindOpen.Databases
  namespace: BindOpen.Data.Queries
  summary: "\nBuilds the following query: Get the server instances.\n"
  example: []
  syntax:
    content: public static IDbSingleQuery Paginate(this IDbSingleQuery query, int? pageSize, string pageToken, IBdoLog log = null, ApiScriptSortingDefinition clauseStatement = null)
    parameters:
    - id: query
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: The database query to consider.
    - id: pageSize
      type: System.Nullable{System.Int32}
      description: The page size to consider.
    - id: pageToken
      type: System.String
      description: The page token text to consider.
    - id: log
      type: BindOpen.System.Diagnostics.IBdoLog
      description: The log to consider.
    - id: clauseStatement
      type: BindOpen.Data.Queries.ApiScriptSortingDefinition
      description: The clause statement to consider.
    return:
      type: BindOpen.Data.Queries.IDbSingleQuery
      description: The built query.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Paginate(query As IDbSingleQuery, pageSize As Integer?, pageToken As String, log As IBdoLog = Nothing, clauseStatement As ApiScriptSortingDefinition = Nothing) As IDbSingleQuery
  overload: BindOpen.Data.Queries.DbQueryExtension.Paginate*
  nameWithType.vb: DbQueryExtension.Paginate(IDbSingleQuery, Nullable(Of Int32), String, IBdoLog, ApiScriptSortingDefinition)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BindOpen.Data.Queries.DbQueryExtension.Paginate(BindOpen.Data.Queries.IDbSingleQuery, System.Nullable(Of System.Int32), System.String, BindOpen.System.Diagnostics.IBdoLog, BindOpen.Data.Queries.ApiScriptSortingDefinition)
  name.vb: Paginate(IDbSingleQuery, Nullable(Of Int32), String, IBdoLog, ApiScriptSortingDefinition)
references:
- uid: BindOpen.Data.Queries
  commentId: N:BindOpen.Data.Queries
  name: BindOpen.Data.Queries
  nameWithType: BindOpen.Data.Queries
  fullName: BindOpen.Data.Queries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript*
  commentId: Overload:BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript
  name: ConvertToExtensionScript
  nameWithType: DbQueryExtension.ConvertToExtensionScript
  fullName: BindOpen.Data.Queries.DbQueryExtension.ConvertToExtensionScript
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.System.Diagnostics.IBdoLog
  commentId: T:BindOpen.System.Diagnostics.IBdoLog
  parent: BindOpen.System.Diagnostics
  isExternal: true
  name: IBdoLog
  nameWithType: IBdoLog
  fullName: BindOpen.System.Diagnostics.IBdoLog
- uid: BindOpen.Data.Queries.ApiScriptFilteringDefinition
  commentId: T:BindOpen.Data.Queries.ApiScriptFilteringDefinition
  parent: BindOpen.Data.Queries
  name: ApiScriptFilteringDefinition
  nameWithType: ApiScriptFilteringDefinition
  fullName: BindOpen.Data.Queries.ApiScriptFilteringDefinition
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: BindOpen.System.Diagnostics
  commentId: N:BindOpen.System.Diagnostics
  isExternal: true
  name: BindOpen.System.Diagnostics
  nameWithType: BindOpen.System.Diagnostics
  fullName: BindOpen.System.Diagnostics
- uid: BindOpen.Data.Queries.DbQueryExtension.Filter*
  commentId: Overload:BindOpen.Data.Queries.DbQueryExtension.Filter
  name: Filter
  nameWithType: DbQueryExtension.Filter
  fullName: BindOpen.Data.Queries.DbQueryExtension.Filter
- uid: BindOpen.Data.Queries.IDbSingleQuery
  commentId: T:BindOpen.Data.Queries.IDbSingleQuery
  parent: BindOpen.Data.Queries
  name: IDbSingleQuery
  nameWithType: IDbSingleQuery
  fullName: BindOpen.Data.Queries.IDbSingleQuery
- uid: BindOpen.Data.Queries.DbQueryExtension.Sort*
  commentId: Overload:BindOpen.Data.Queries.DbQueryExtension.Sort
  name: Sort
  nameWithType: DbQueryExtension.Sort
  fullName: BindOpen.Data.Queries.DbQueryExtension.Sort
- uid: BindOpen.Data.Queries.ApiScriptSortingDefinition
  commentId: T:BindOpen.Data.Queries.ApiScriptSortingDefinition
  parent: BindOpen.Data.Queries
  name: ApiScriptSortingDefinition
  nameWithType: ApiScriptSortingDefinition
  fullName: BindOpen.Data.Queries.ApiScriptSortingDefinition
- uid: BindOpen.Data.Queries.DbQueryExtension.Paginate*
  commentId: Overload:BindOpen.Data.Queries.DbQueryExtension.Paginate
  name: Paginate
  nameWithType: DbQueryExtension.Paginate
  fullName: BindOpen.Data.Queries.DbQueryExtension.Paginate
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
