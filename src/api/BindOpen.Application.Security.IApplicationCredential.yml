### YamlMime:ManagedReference
items:
- uid: BindOpen.Application.Security.IApplicationCredential
  commentId: T:BindOpen.Application.Security.IApplicationCredential
  id: IApplicationCredential
  parent: BindOpen.Application.Security
  children:
  - BindOpen.Application.Security.IApplicationCredential.DomainId
  - BindOpen.Application.Security.IApplicationCredential.Login
  - BindOpen.Application.Security.IApplicationCredential.Password
  - BindOpen.Application.Security.IApplicationCredential.TokenValue
  langs:
  - csharp
  - vb
  name: IApplicationCredential
  nameWithType: IApplicationCredential
  fullName: BindOpen.Application.Security.IApplicationCredential
  type: Interface
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Security
  summary: "\nThis interface defines application credential.\n"
  syntax:
    content: 'public interface IApplicationCredential : INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed'
    content.vb: >-
      Public Interface IApplicationCredential
          Inherits INamedDataItem, IStoredDataItem, IIdentifiedDataItem, IDataItem, ICloneable, IDisposable, IIdentified, IReferenced, IStorable, INamed
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.Application.Security.IApplicationCredential.DomainId
  commentId: P:BindOpen.Application.Security.IApplicationCredential.DomainId
  id: DomainId
  parent: BindOpen.Application.Security.IApplicationCredential
  langs:
  - csharp
  - vb
  name: DomainId
  nameWithType: IApplicationCredential.DomainId
  fullName: BindOpen.Application.Security.IApplicationCredential.DomainId
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Security
  summary: "\nDomain ID.\n"
  syntax:
    content: string DomainId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property DomainId As String
  overload: BindOpen.Application.Security.IApplicationCredential.DomainId*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Application.Security.IApplicationCredential.Login
  commentId: P:BindOpen.Application.Security.IApplicationCredential.Login
  id: Login
  parent: BindOpen.Application.Security.IApplicationCredential
  langs:
  - csharp
  - vb
  name: Login
  nameWithType: IApplicationCredential.Login
  fullName: BindOpen.Application.Security.IApplicationCredential.Login
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Security
  summary: "\nLogin.\n"
  syntax:
    content: string Login { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Login As String
  overload: BindOpen.Application.Security.IApplicationCredential.Login*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Application.Security.IApplicationCredential.Password
  commentId: P:BindOpen.Application.Security.IApplicationCredential.Password
  id: Password
  parent: BindOpen.Application.Security.IApplicationCredential
  langs:
  - csharp
  - vb
  name: Password
  nameWithType: IApplicationCredential.Password
  fullName: BindOpen.Application.Security.IApplicationCredential.Password
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Security
  summary: "\nPassword.\n"
  syntax:
    content: string Password { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Password As String
  overload: BindOpen.Application.Security.IApplicationCredential.Password*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Application.Security.IApplicationCredential.TokenValue
  commentId: P:BindOpen.Application.Security.IApplicationCredential.TokenValue
  id: TokenValue
  parent: BindOpen.Application.Security.IApplicationCredential
  langs:
  - csharp
  - vb
  name: TokenValue
  nameWithType: IApplicationCredential.TokenValue
  fullName: BindOpen.Application.Security.IApplicationCredential.TokenValue
  type: Property
  source:
    path: BindOpen.Runtime
    isExternal: true
  assemblies:
  - BindOpen.Runtime
  namespace: BindOpen.Application.Security
  summary: "\nToken value.\n"
  syntax:
    content: string TokenValue { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property TokenValue As String
  overload: BindOpen.Application.Security.IApplicationCredential.TokenValue*
  modifiers.csharp:
  - get
  - set
references:
- uid: BindOpen.Application.Security
  commentId: N:BindOpen.Application.Security
  isExternal: true
  name: BindOpen.Application.Security
  nameWithType: BindOpen.Application.Security
  fullName: BindOpen.Application.Security
- uid: BindOpen.Application.Security.IApplicationCredential.DomainId*
  commentId: Overload:BindOpen.Application.Security.IApplicationCredential.DomainId
  isExternal: true
  name: DomainId
  nameWithType: IApplicationCredential.DomainId
  fullName: BindOpen.Application.Security.IApplicationCredential.DomainId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Application.Security.IApplicationCredential.Login*
  commentId: Overload:BindOpen.Application.Security.IApplicationCredential.Login
  isExternal: true
  name: Login
  nameWithType: IApplicationCredential.Login
  fullName: BindOpen.Application.Security.IApplicationCredential.Login
- uid: BindOpen.Application.Security.IApplicationCredential.Password*
  commentId: Overload:BindOpen.Application.Security.IApplicationCredential.Password
  isExternal: true
  name: Password
  nameWithType: IApplicationCredential.Password
  fullName: BindOpen.Application.Security.IApplicationCredential.Password
- uid: BindOpen.Application.Security.IApplicationCredential.TokenValue*
  commentId: Overload:BindOpen.Application.Security.IApplicationCredential.TokenValue
  isExternal: true
  name: TokenValue
  nameWithType: IApplicationCredential.TokenValue
  fullName: BindOpen.Application.Security.IApplicationCredential.TokenValue
shouldSkipMarkup: true
