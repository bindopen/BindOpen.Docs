### YamlMime:ManagedReference
items:
- uid: BindOpen.Data.Items.IDictionaryDataItem
  commentId: T:BindOpen.Data.Items.IDictionaryDataItem
  id: IDictionaryDataItem
  parent: BindOpen.Data.Items
  children:
  - BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  - BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String,System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
  - BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
  - BindOpen.Data.Items.IDictionaryDataItem.Clear
  - BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String,System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  - BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String,System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.Item(System.String,System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  - BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  - BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String,System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.SingleValue
  - BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
  - BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String,System.String)
  - BindOpen.Data.Items.IDictionaryDataItem.Values
  - BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
  langs:
  - csharp
  - vb
  name: IDictionaryDataItem
  nameWithType: IDictionaryDataItem
  fullName: BindOpen.Data.Items.IDictionaryDataItem
  type: Interface
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: IDictionaryDataItem
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 8
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: 'public interface IDictionaryDataItem : IDataItem, ICloneable, IDisposable'
    content.vb: >-
      Public Interface IDictionaryDataItem
          Inherits IDataItem
  inheritedMembers:
  - BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  - BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,{T},System.String[])
  - BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  - BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  - BindOpen.Data.Items.IDataItem.Clone``1
  - System.ICloneable.Clone
  - System.IDisposable.Dispose
  extensionMethods:
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  - System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  - System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  - System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
  id: Item(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: IDictionaryDataItem.Item[String]
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Item[System.String]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 15
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: string this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Property Item(key As String) As String
  overload: BindOpen.Data.Items.IDictionaryDataItem.Item*
  nameWithType.vb: IDictionaryDataItem.Item(String)
  modifiers.csharp:
  - get
  - set
  fullName.vb: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String)
  name.vb: Item(String)
- uid: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String,System.String)
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.Item(System.String,System.String)
  id: Item(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: Item[String, String]
  nameWithType: IDictionaryDataItem.Item[String, String]
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Item[System.String, System.String]
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: this[]
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 23
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: string this[string key, string defaultKey] { get; }
    parameters:
    - id: key
      type: System.String
      description: ''
    - id: defaultKey
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: ReadOnly Property Item(key As String, defaultKey As String) As String
  overload: BindOpen.Data.Items.IDictionaryDataItem.Item*
  nameWithType.vb: IDictionaryDataItem.Item(String, String)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: BindOpen.Data.Items.IDictionaryDataItem.Item(System.String, System.String)
  name.vb: Item(String, String)
- uid: BindOpen.Data.Items.IDictionaryDataItem.Values
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.Values
  id: Values
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: IDictionaryDataItem.Values
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Values
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Values
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 28
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: List<DataKeyValue> Values { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{BindOpen.Data.Items.DataKeyValue}
    content.vb: Property Values As List(Of DataKeyValue)
  overload: BindOpen.Data.Items.IDictionaryDataItem.Values*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
  id: ValuesSpecified
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: ValuesSpecified
  nameWithType: IDictionaryDataItem.ValuesSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: ValuesSpecified
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 33
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: bool ValuesSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ValuesSpecified As Boolean
  overload: BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
  id: AvailableKeys
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: AvailableKeys
  nameWithType: IDictionaryDataItem.AvailableKeys
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AvailableKeys
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 38
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: List<string> AvailableKeys { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Property AvailableKeys As List(Of String)
  overload: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
  id: AvailableKeysSpecified
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: AvailableKeysSpecified
  nameWithType: IDictionaryDataItem.AvailableKeysSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AvailableKeysSpecified
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 43
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: bool AvailableKeysSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property AvailableKeysSpecified As Boolean
  overload: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.Data.Items.IDictionaryDataItem.SingleValue
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.SingleValue
  id: SingleValue
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: SingleValue
  nameWithType: IDictionaryDataItem.SingleValue
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SingleValue
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SingleValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 48
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: string SingleValue { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property SingleValue As String
  overload: BindOpen.Data.Items.IDictionaryDataItem.SingleValue*
  modifiers.csharp:
  - get
  - set
- uid: BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
  commentId: P:BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
  id: SingleValueSpecified
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: SingleValueSpecified
  nameWithType: IDictionaryDataItem.SingleValueSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
  type: Property
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SingleValueSpecified
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 53
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: bool SingleValueSpecified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property SingleValueSpecified As Boolean
  overload: BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  id: AddValue(BindOpen.Data.Items.IDataKeyValue)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: AddValue(IDataKeyValue)
  nameWithType: IDictionaryDataItem.AddValue(IDataKeyValue)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue(BindOpen.Data.Items.IDataKeyValue)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 59
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: void AddValue(IDataKeyValue dataKeyValue)
    parameters:
    - id: dataKeyValue
      type: BindOpen.Data.Items.IDataKeyValue
      description: ''
    content.vb: Sub AddValue(dataKeyValue As IDataKeyValue)
  overload: BindOpen.Data.Items.IDictionaryDataItem.AddValue*
- uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
  id: AddValue(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: AddValue(String)
  nameWithType: IDictionaryDataItem.AddValue(String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 66
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: IDataKeyValue AddValue(string text)
    parameters:
    - id: text
      type: System.String
      description: ''
    return:
      type: BindOpen.Data.Items.IDataKeyValue
      description: ''
    content.vb: Function AddValue(text As String) As IDataKeyValue
  overload: BindOpen.Data.Items.IDictionaryDataItem.AddValue*
- uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String,System.String)
  id: AddValue(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: AddValue(String, String)
  nameWithType: IDictionaryDataItem.AddValue(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: AddValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 74
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: IDataKeyValue AddValue(string key, string text)
    parameters:
    - id: key
      type: System.String
      description: ''
    - id: text
      type: System.String
      description: ''
    return:
      type: BindOpen.Data.Items.IDataKeyValue
      description: ''
    content.vb: Function AddValue(key As String, text As String) As IDataKeyValue
  overload: BindOpen.Data.Items.IDictionaryDataItem.AddValue*
- uid: BindOpen.Data.Items.IDictionaryDataItem.Clear
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.Clear
  id: Clear
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: IDictionaryDataItem.Clear()
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Clear()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: Clear
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 79
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: void Clear()
    content.vb: Sub Clear
  overload: BindOpen.Data.Items.IDictionaryDataItem.Clear*
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String,System.String)
  id: GetContent(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: GetContent(String, String)
  nameWithType: IDictionaryDataItem.GetContent(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetContent(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetContent
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 87
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: string GetContent(string key = "*", string alternateKey = null)
    parameters:
    - id: key
      type: System.String
      description: ''
    - id: alternateKey
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Function GetContent(key As String = "*", alternateKey As String = Nothing) As String
  overload: BindOpen.Data.Items.IDictionaryDataItem.GetContent*
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  id: GetDistinctKeys
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: GetDistinctKeys()
  nameWithType: IDictionaryDataItem.GetDistinctKeys()
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys()
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetDistinctKeys
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 93
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: List<string> GetDistinctKeys()
    return:
      type: System.Collections.Generic.List{System.String}
      description: ''
    content.vb: Function GetDistinctKeys As List(Of String)
  overload: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys*
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String,System.String)
  id: GetTextNode(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: GetTextNode(String, String)
  nameWithType: IDictionaryDataItem.GetTextNode(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: GetTextNode
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 101
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: string GetTextNode(string nodeName, string indent)
    parameters:
    - id: nodeName
      type: System.String
      description: ''
    - id: indent
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Function GetTextNode(nodeName As String, indent As String) As String
  overload: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode*
- uid: BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
  id: HasKey(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: HasKey(String)
  nameWithType: IDictionaryDataItem.HasKey(String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.HasKey(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: HasKey
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 108
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: bool HasKey(string key)
    parameters:
    - id: key
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasKey(key As String) As Boolean
  overload: BindOpen.Data.Items.IDictionaryDataItem.HasKey*
- uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  id: RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: RemoveValue(IDataKeyValue)
  nameWithType: IDictionaryDataItem.RemoveValue(IDataKeyValue)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(BindOpen.Data.Items.IDataKeyValue)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 114
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: void RemoveValue(IDataKeyValue dataKeyValue)
    parameters:
    - id: dataKeyValue
      type: BindOpen.Data.Items.IDataKeyValue
      description: ''
    content.vb: Sub RemoveValue(dataKeyValue As IDataKeyValue)
  overload: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue*
- uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
  id: RemoveValue(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: RemoveValue(String)
  nameWithType: IDictionaryDataItem.RemoveValue(String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 120
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: void RemoveValue(string key)
    parameters:
    - id: key
      type: System.String
      description: ''
    content.vb: Sub RemoveValue(key As String)
  overload: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue*
- uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List{System.String})
  id: RemoveValues(System.Collections.Generic.List{System.String})
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: RemoveValues(List<String>)
  nameWithType: IDictionaryDataItem.RemoveValues(List<String>)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: RemoveValues
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 126
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: void RemoveValues(List<string> keys)
    parameters:
    - id: keys
      type: System.Collections.Generic.List{System.String}
      description: ''
    content.vb: Sub RemoveValues(keys As List(Of String))
  overload: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues*
  nameWithType.vb: IDictionaryDataItem.RemoveValues(List(Of String))
  fullName.vb: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues(System.Collections.Generic.List(Of System.String))
  name.vb: RemoveValues(List(Of String))
- uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
  id: SetValue(System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: SetValue(String)
  nameWithType: IDictionaryDataItem.SetValue(String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 132
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: void SetValue(string text)
    parameters:
    - id: text
      type: System.String
      description: ''
    content.vb: Sub SetValue(text As String)
  overload: BindOpen.Data.Items.IDictionaryDataItem.SetValue*
- uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String,System.String)
  id: SetValue(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: SetValue(String, String)
  nameWithType: IDictionaryDataItem.SetValue(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: SetValue
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 139
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: void SetValue(string key, string text)
    parameters:
    - id: key
      type: System.String
      description: ''
    - id: text
      type: System.String
      description: ''
    content.vb: Sub SetValue(key As String, text As String)
  overload: BindOpen.Data.Items.IDictionaryDataItem.SetValue*
- uid: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String,System.String)
  commentId: M:BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String,System.String)
  id: UpdateKey(System.String,System.String)
  parent: BindOpen.Data.Items.IDictionaryDataItem
  langs:
  - csharp
  - vb
  name: UpdateKey(String, String)
  nameWithType: IDictionaryDataItem.UpdateKey(String, String)
  fullName: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
      branch: feature/dbqueries
      repo: https://github.com/bindopen/BindOpen.git
    id: UpdateKey
    path: ../src/BindOpen.Core/Data/Items/Dictionary/Interfaces/IDictionaryDataItem.cs
    startLine: 146
  assemblies:
  - BindOpen.Core
  namespace: BindOpen.Data.Items
  summary: "\n\n"
  example: []
  syntax:
    content: void UpdateKey(string oldKey, string newKey)
    parameters:
    - id: oldKey
      type: System.String
      description: ''
    - id: newKey
      type: System.String
      description: ''
    content.vb: Sub UpdateKey(oldKey As String, newKey As String)
  overload: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey*
references:
- uid: BindOpen.Data.Items
  commentId: N:BindOpen.Data.Items
  name: BindOpen.Data.Items
  nameWithType: BindOpen.Data.Items
  fullName: BindOpen.Data.Items
- uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Check(Boolean, String[])
  nameWithType: IDataItem.Check(Boolean, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check(System.Boolean, System.String[])
  nameWithType.vb: IDataItem.Check(Boolean, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(System.Boolean, System.String())
  name.vb: Check(Boolean, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: IDataItem.Check
    fullName: BindOpen.Data.Items.IDataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check(System.Boolean,System.String[])
    name: Check
    nameWithType: IDataItem.Check
    fullName: BindOpen.Data.Items.IDataItem.Check
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,{T},System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  name: Check<T>(Boolean, T, String[])
  nameWithType: IDataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: IDataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: IDataItem.Check<T>
    fullName: BindOpen.Data.Items.IDataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: IDataItem.Check(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Repair(String[], UpdateModes[])
  nameWithType: IDataItem.Repair(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: IDataItem.Repair
    fullName: BindOpen.Data.Items.IDataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair
    nameWithType: IDataItem.Repair
    fullName: BindOpen.Data.Items.IDataItem.Repair
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: IDataItem.Repair<T>
    fullName: BindOpen.Data.Items.IDataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: IDataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  isExternal: true
  name: Update(String[], UpdateModes[])
  nameWithType: IDataItem.Update(String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update(System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: IDataItem.Update
    fullName: BindOpen.Data.Items.IDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update(System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update
    nameWithType: IDataItem.Update
    fullName: BindOpen.Data.Items.IDataItem.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1({T},System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  parent: BindOpen.Data.Items.IDataItem
  definition: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.IDataItem
  name: UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  nameWithType: IDataItem.UpdateRuntimeInfo(IBdoScope, IBdoScriptVariableSet, IBdoLog)
  fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: IDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo(BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet,BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateRuntimeInfo
    nameWithType: IDataItem.UpdateRuntimeInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateRuntimeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Items.IDataItem
  name: UpdateStorageInfo(IBdoLog)
  nameWithType: IDataItem.UpdateStorageInfo(IBdoLog)
  fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: IDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.UpdateStorageInfo(BindOpen.System.Diagnostics.IBdoLog)
    name: UpdateStorageInfo
    nameWithType: IDataItem.UpdateStorageInfo
    fullName: BindOpen.Data.Items.IDataItem.UpdateStorageInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Clone``1
  commentId: M:BindOpen.Data.Items.IDataItem.Clone``1
  parent: BindOpen.Data.Items.IDataItem
  name: Clone<T>()
  nameWithType: IDataItem.Clone<T>()
  fullName: BindOpen.Data.Items.IDataItem.Clone<T>()
  nameWithType.vb: IDataItem.Clone(Of T)()
  fullName.vb: BindOpen.Data.Items.IDataItem.Clone(Of T)()
  name.vb: Clone(Of T)()
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Clone``1
    name: Clone<T>
    nameWithType: IDataItem.Clone<T>
    fullName: BindOpen.Data.Items.IDataItem.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Clone``1
    name: Clone(Of T)
    nameWithType: IDataItem.Clone(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  name: IsScalar()
  nameWithType: DataValueTypeExtension.IsScalar()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  parent: BindOpen.Data.Common.DataValueTypeExtension
  definition: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  name: GetValueType()
  nameWithType: DataValueTypeExtension.GetValueType()
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType()
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  name: ToKey()
  nameWithType: ObjectHelper.ToKey()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  name: KeyEquals(Object)
  nameWithType: ObjectHelper.KeyEquals(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  name: ToNotNullString()
  nameWithType: ObjectHelper.ToNotNullString()
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString()
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  name: ToString(DataValueType)
  nameWithType: ObjectHelper.ToString(DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  name: Update(Object)
  nameWithType: ObjectHelper.Update(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  parent: BindOpen.Data.Helpers.Objects.ObjectHelper
  definition: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  name: UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  parent: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  definition: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  name: ToJson(String)
  nameWithType: ObjectNotationHelper_Json.ToJson(String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  name: ToXml(IBdoLog)
  nameWithType: XmlHelper.ToXml(IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  parent: BindOpen.Data.Helpers.Serialization.XmlHelper
  definition: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  name: SaveXml(String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem
  commentId: T:BindOpen.Data.Items.IDataItem
  parent: BindOpen.Data.Items
  name: IDataItem
  nameWithType: IDataItem
  fullName: BindOpen.Data.Items.IDataItem
- uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  commentId: M:BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
  isExternal: true
  name: Check<T>(Boolean, T, String[])
  nameWithType: IDataItem.Check<T>(Boolean, T, String[])
  fullName: BindOpen.Data.Items.IDataItem.Check<T>(System.Boolean, T, System.String[])
  nameWithType.vb: IDataItem.Check(Of T)(Boolean, T, String())
  fullName.vb: BindOpen.Data.Items.IDataItem.Check(Of T)(System.Boolean, T, System.String())
  name.vb: Check(Of T)(Boolean, T, String())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check<T>
    nameWithType: IDataItem.Check<T>
    fullName: BindOpen.Data.Items.IDataItem.Check<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Check``1(System.Boolean,``0,System.String[])
    name: Check(Of T)
    nameWithType: IDataItem.Check(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Check(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Repair<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Repair<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Repair<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Repair(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Repair(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Repair(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair<T>
    nameWithType: IDataItem.Repair<T>
    fullName: BindOpen.Data.Items.IDataItem.Repair<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Repair``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Repair(Of T)
    nameWithType: IDataItem.Repair(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Repair(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  commentId: M:BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
  isExternal: true
  name: Update<T>(T, String[], UpdateModes[])
  nameWithType: IDataItem.Update<T>(T, String[], UpdateModes[])
  fullName: BindOpen.Data.Items.IDataItem.Update<T>(T, System.String[], BindOpen.Data.Common.UpdateModes[])
  nameWithType.vb: IDataItem.Update(Of T)(T, String(), UpdateModes())
  fullName.vb: BindOpen.Data.Items.IDataItem.Update(Of T)(T, System.String(), BindOpen.Data.Common.UpdateModes())
  name.vb: Update(Of T)(T, String(), UpdateModes())
  spec.csharp:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update<T>
    nameWithType: IDataItem.Update<T>
    fullName: BindOpen.Data.Items.IDataItem.Update<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Items.IDataItem.Update``1(``0,System.String[],BindOpen.Data.Common.UpdateModes[])
    name: Update(Of T)
    nameWithType: IDataItem.Update(Of T)
    fullName: BindOpen.Data.Items.IDataItem.Update(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.UpdateModes
    name: UpdateModes
    nameWithType: UpdateModes
    fullName: BindOpen.Data.Common.UpdateModes
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  isExternal: true
  name: IsScalar(Object)
  nameWithType: DataValueTypeExtension.IsScalar(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.IsScalar(System.Object)
    name: IsScalar
    nameWithType: DataValueTypeExtension.IsScalar
    fullName: BindOpen.Data.Common.DataValueTypeExtension.IsScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Common.DataValueTypeExtension
  commentId: T:BindOpen.Data.Common.DataValueTypeExtension
  parent: BindOpen.Data.Common
  name: DataValueTypeExtension
  nameWithType: DataValueTypeExtension
  fullName: BindOpen.Data.Common.DataValueTypeExtension
- uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  commentId: M:BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  isExternal: true
  name: GetValueType(Object)
  nameWithType: DataValueTypeExtension.GetValueType(Object)
  fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Common.DataValueTypeExtension.GetValueType(System.Object)
    name: GetValueType
    nameWithType: DataValueTypeExtension.GetValueType
    fullName: BindOpen.Data.Common.DataValueTypeExtension.GetValueType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  isExternal: true
  name: ToKey(Object)
  nameWithType: ObjectHelper.ToKey(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey(System.Object)
    name: ToKey
    nameWithType: ObjectHelper.ToKey
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper
  commentId: T:BindOpen.Data.Helpers.Objects.ObjectHelper
  parent: BindOpen.Data.Helpers.Objects
  name: ObjectHelper
  nameWithType: ObjectHelper
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
  isExternal: true
  name: KeyEquals(Object, Object)
  nameWithType: ObjectHelper.KeyEquals(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals(System.Object,System.Object)
    name: KeyEquals
    nameWithType: ObjectHelper.KeyEquals
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.KeyEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  isExternal: true
  name: ToNotNullString(Object)
  nameWithType: ObjectHelper.ToNotNullString(Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString(System.Object)
    name: ToNotNullString
    nameWithType: ObjectHelper.ToNotNullString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToNotNullString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
  isExternal: true
  name: ToString(Object, DataValueType)
  nameWithType: ObjectHelper.ToString(Object, DataValueType)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object, BindOpen.Data.Common.DataValueType)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString(System.Object,BindOpen.Data.Common.DataValueType)
    name: ToString
    nameWithType: ObjectHelper.ToString
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Common.DataValueType
    name: DataValueType
    nameWithType: DataValueType
    fullName: BindOpen.Data.Common.DataValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
  isExternal: true
  name: Update(Object, Object)
  nameWithType: ObjectHelper.Update(Object, Object)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object, System.Object)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.Update(System.Object,System.Object)
    name: Update
    nameWithType: ObjectHelper.Update
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  commentId: M:BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
  isExternal: true
  name: UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  nameWithType: ObjectHelper.UpdateFromElementSet<T>(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  nameWithType.vb: ObjectHelper.UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  fullName.vb: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)(System.Object, BindOpen.Data.Elements.IDataElementSet, BindOpen.Application.Scopes.IBdoScope, BindOpen.System.Scripting.IBdoScriptVariableSet)
  name.vb: UpdateFromElementSet(Of T)(Object, IDataElementSet, IBdoScope, IBdoScriptVariableSet)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet<T>
    nameWithType: ObjectHelper.UpdateFromElementSet<T>
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IDataElementSet,BindOpen.Application.Scopes.IBdoScope,BindOpen.System.Scripting.IBdoScriptVariableSet)
    name: UpdateFromElementSet(Of T)
    nameWithType: ObjectHelper.UpdateFromElementSet(Of T)
    fullName: BindOpen.Data.Helpers.Objects.ObjectHelper.UpdateFromElementSet(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Data.Elements.IDataElementSet
    name: IDataElementSet
    nameWithType: IDataElementSet
    fullName: BindOpen.Data.Elements.IDataElementSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.Application.Scopes.IBdoScope
    name: IBdoScope
    nameWithType: IBdoScope
    fullName: BindOpen.Application.Scopes.IBdoScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Scripting.IBdoScriptVariableSet
    name: IBdoScriptVariableSet
    nameWithType: IBdoScriptVariableSet
    fullName: BindOpen.System.Scripting.IBdoScriptVariableSet
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  commentId: M:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
  isExternal: true
  name: ToJson(Object, String)
  nameWithType: ObjectNotationHelper_Json.ToJson(Object, String)
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object, System.String)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson(System.Object,System.String)
    name: ToJson
    nameWithType: ObjectNotationHelper_Json.ToJson
    fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  commentId: T:BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
  parent: BindOpen.Data.Helpers.Serialization
  name: ObjectNotationHelper_Json
  nameWithType: ObjectNotationHelper_Json
  fullName: BindOpen.Data.Helpers.Serialization.ObjectNotationHelper_Json
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: ToXml(Object, IBdoLog)
  nameWithType: XmlHelper.ToXml(Object, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml(System.Object,BindOpen.System.Diagnostics.IBdoLog)
    name: ToXml
    nameWithType: XmlHelper.ToXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper
  commentId: T:BindOpen.Data.Helpers.Serialization.XmlHelper
  parent: BindOpen.Data.Helpers.Serialization
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper
- uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  commentId: M:BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
  isExternal: true
  name: SaveXml(Object, String, IBdoLog)
  nameWithType: XmlHelper.SaveXml(Object, String, IBdoLog)
  fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object, System.String, BindOpen.System.Diagnostics.IBdoLog)
  spec.csharp:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml(System.Object,System.String,BindOpen.System.Diagnostics.IBdoLog)
    name: SaveXml
    nameWithType: XmlHelper.SaveXml
    fullName: BindOpen.Data.Helpers.Serialization.XmlHelper.SaveXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: BindOpen.System.Diagnostics.IBdoLog
    name: IBdoLog
    nameWithType: IBdoLog
    fullName: BindOpen.System.Diagnostics.IBdoLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BindOpen.Data.Common
  commentId: N:BindOpen.Data.Common
  name: BindOpen.Data.Common
  nameWithType: BindOpen.Data.Common
  fullName: BindOpen.Data.Common
- uid: BindOpen.Data.Helpers.Objects
  commentId: N:BindOpen.Data.Helpers.Objects
  name: BindOpen.Data.Helpers.Objects
  nameWithType: BindOpen.Data.Helpers.Objects
  fullName: BindOpen.Data.Helpers.Objects
- uid: BindOpen.Data.Helpers.Serialization
  commentId: N:BindOpen.Data.Helpers.Serialization
  name: BindOpen.Data.Helpers.Serialization
  nameWithType: BindOpen.Data.Helpers.Serialization
  fullName: BindOpen.Data.Helpers.Serialization
- uid: BindOpen.Data.Items.IDictionaryDataItem.Item*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.Item
  name: Item
  nameWithType: IDictionaryDataItem.Item
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BindOpen.Data.Items.IDictionaryDataItem.Values*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.Values
  name: Values
  nameWithType: IDictionaryDataItem.Values
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Values
- uid: System.Collections.Generic.List{BindOpen.Data.Items.DataKeyValue}
  commentId: T:System.Collections.Generic.List{BindOpen.Data.Items.DataKeyValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DataKeyValue>
  nameWithType: List<DataKeyValue>
  fullName: System.Collections.Generic.List<BindOpen.Data.Items.DataKeyValue>
  nameWithType.vb: List(Of DataKeyValue)
  fullName.vb: System.Collections.Generic.List(Of BindOpen.Data.Items.DataKeyValue)
  name.vb: List(Of DataKeyValue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BindOpen.Data.Items.DataKeyValue
    name: DataKeyValue
    nameWithType: DataKeyValue
    fullName: BindOpen.Data.Items.DataKeyValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BindOpen.Data.Items.DataKeyValue
    name: DataKeyValue
    nameWithType: DataKeyValue
    fullName: BindOpen.Data.Items.DataKeyValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
  name: ValuesSpecified
  nameWithType: IDictionaryDataItem.ValuesSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.ValuesSpecified
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
  name: AvailableKeys
  nameWithType: IDictionaryDataItem.AvailableKeys
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeys
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
  name: AvailableKeysSpecified
  nameWithType: IDictionaryDataItem.AvailableKeysSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AvailableKeysSpecified
- uid: BindOpen.Data.Items.IDictionaryDataItem.SingleValue*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.SingleValue
  name: SingleValue
  nameWithType: IDictionaryDataItem.SingleValue
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SingleValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
  name: SingleValueSpecified
  nameWithType: IDictionaryDataItem.SingleValueSpecified
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SingleValueSpecified
- uid: BindOpen.Data.Items.IDictionaryDataItem.AddValue*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.AddValue
  name: AddValue
  nameWithType: IDictionaryDataItem.AddValue
  fullName: BindOpen.Data.Items.IDictionaryDataItem.AddValue
- uid: BindOpen.Data.Items.IDataKeyValue
  commentId: T:BindOpen.Data.Items.IDataKeyValue
  parent: BindOpen.Data.Items
  name: IDataKeyValue
  nameWithType: IDataKeyValue
  fullName: BindOpen.Data.Items.IDataKeyValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.Clear*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.Clear
  name: Clear
  nameWithType: IDictionaryDataItem.Clear
  fullName: BindOpen.Data.Items.IDictionaryDataItem.Clear
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetContent*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.GetContent
  name: GetContent
  nameWithType: IDictionaryDataItem.GetContent
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetContent
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
  name: GetDistinctKeys
  nameWithType: IDictionaryDataItem.GetDistinctKeys
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetDistinctKeys
- uid: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.GetTextNode
  name: GetTextNode
  nameWithType: IDictionaryDataItem.GetTextNode
  fullName: BindOpen.Data.Items.IDictionaryDataItem.GetTextNode
- uid: BindOpen.Data.Items.IDictionaryDataItem.HasKey*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.HasKey
  name: HasKey
  nameWithType: IDictionaryDataItem.HasKey
  fullName: BindOpen.Data.Items.IDictionaryDataItem.HasKey
- uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.RemoveValue
  name: RemoveValue
  nameWithType: IDictionaryDataItem.RemoveValue
  fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.RemoveValues
  name: RemoveValues
  nameWithType: IDictionaryDataItem.RemoveValues
  fullName: BindOpen.Data.Items.IDictionaryDataItem.RemoveValues
- uid: BindOpen.Data.Items.IDictionaryDataItem.SetValue*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.SetValue
  name: SetValue
  nameWithType: IDictionaryDataItem.SetValue
  fullName: BindOpen.Data.Items.IDictionaryDataItem.SetValue
- uid: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey*
  commentId: Overload:BindOpen.Data.Items.IDictionaryDataItem.UpdateKey
  name: UpdateKey
  nameWithType: IDictionaryDataItem.UpdateKey
  fullName: BindOpen.Data.Items.IDictionaryDataItem.UpdateKey
shouldSkipMarkup: true
